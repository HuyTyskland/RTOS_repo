
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000783c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b54  08007b54  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007b54  08007b54  00017b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b5c  08007b5c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b60  08007b60  00017b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000144ac  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014524  20014524  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016601  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031a2  00000000  00000000  000366a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  00039850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001288  00000000  00000000  0003ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000240f6  00000000  00000000  0003bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001660a  00000000  00000000  0005ffee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d927e  00000000  00000000  000765f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014f876  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057e4  00000000  00000000  0014f8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079b4 	.word	0x080079b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080079b4 	.word	0x080079b4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f40 	.word	0x20012f40

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fc13 	bl	8000e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f853 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f8bb 	bl	80007ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // enable CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <main+0x90>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <main+0x90>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000642:	f004 fb55 	bl	8004cf0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000646:	f005 ff65 	bl	8006514 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "TASK_1", 200, "RED LED", 2, &task_1);
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <main+0x94>)
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2302      	movs	r3, #2
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <main+0x98>)
 8000654:	22c8      	movs	r2, #200	; 0xc8
 8000656:	491a      	ldr	r1, [pc, #104]	; (80006c0 <main+0x9c>)
 8000658:	481a      	ldr	r0, [pc, #104]	; (80006c4 <main+0xa0>)
 800065a:	f002 fa37 	bl	8002acc <xTaskCreate>
 800065e:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d00a      	beq.n	800067c <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800066a:	f383 8811 	msr	BASEPRI, r3
 800066e:	f3bf 8f6f 	isb	sy
 8000672:	f3bf 8f4f 	dsb	sy
 8000676:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000678:	bf00      	nop
 800067a:	e7fe      	b.n	800067a <main+0x56>

  status = xTaskCreate(task2_handler, "TASK_2", 200, "GREEN LED", 3, &task_2);
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <main+0xa4>)
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	2303      	movs	r3, #3
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <main+0xa8>)
 8000686:	22c8      	movs	r2, #200	; 0xc8
 8000688:	4911      	ldr	r1, [pc, #68]	; (80006d0 <main+0xac>)
 800068a:	4812      	ldr	r0, [pc, #72]	; (80006d4 <main+0xb0>)
 800068c:	f002 fa1e 	bl	8002acc <xTaskCreate>
 8000690:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d00a      	beq.n	80006ae <main+0x8a>
        __asm volatile
 8000698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800069c:	f383 8811 	msr	BASEPRI, r3
 80006a0:	f3bf 8f6f 	isb	sy
 80006a4:	f3bf 8f4f 	dsb	sy
 80006a8:	607b      	str	r3, [r7, #4]
    }
 80006aa:	bf00      	nop
 80006ac:	e7fe      	b.n	80006ac <main+0x88>

  // start task scheduler
  vTaskStartScheduler();
 80006ae:	f002 fcd5 	bl	800305c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0x8e>
 80006b4:	e0001000 	.word	0xe0001000
 80006b8:	20000098 	.word	0x20000098
 80006bc:	080079cc 	.word	0x080079cc
 80006c0:	080079d4 	.word	0x080079d4
 80006c4:	08000b21 	.word	0x08000b21
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	080079dc 	.word	0x080079dc
 80006d0:	080079e8 	.word	0x080079e8
 80006d4:	08000b61 	.word	0x08000b61

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fce8 	bl	80070bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800074c:	2332      	movs	r3, #50	; 0x32
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000754:	2307      	movs	r3, #7
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fe91 	bl	8001484 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 fa2c 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000778:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f8f2 	bl	8001974 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000796:	f000 fa15 	bl	8000bc4 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
 80007c6:	4ba6      	ldr	r3, [pc, #664]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4aa5      	ldr	r2, [pc, #660]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 80007cc:	f043 0310 	orr.w	r3, r3, #16
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4ba3      	ldr	r3, [pc, #652]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	4b9f      	ldr	r3, [pc, #636]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a9e      	ldr	r2, [pc, #632]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b9c      	ldr	r3, [pc, #624]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b98      	ldr	r3, [pc, #608]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a97      	ldr	r2, [pc, #604]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b95      	ldr	r3, [pc, #596]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b91      	ldr	r3, [pc, #580]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a90      	ldr	r2, [pc, #576]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b8e      	ldr	r3, [pc, #568]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b8a      	ldr	r3, [pc, #552]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a89      	ldr	r2, [pc, #548]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b87      	ldr	r3, [pc, #540]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b83      	ldr	r3, [pc, #524]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a82      	ldr	r2, [pc, #520]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b80      	ldr	r3, [pc, #512]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2108      	movs	r1, #8
 800086e:	487d      	ldr	r0, [pc, #500]	; (8000a64 <MX_GPIO_Init+0x2b8>)
 8000870:	f000 fdb0 	bl	80013d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2101      	movs	r1, #1
 8000878:	487b      	ldr	r0, [pc, #492]	; (8000a68 <MX_GPIO_Init+0x2bc>)
 800087a:	f000 fdab 	bl	80013d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800087e:	2200      	movs	r2, #0
 8000880:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000884:	4879      	ldr	r0, [pc, #484]	; (8000a6c <MX_GPIO_Init+0x2c0>)
 8000886:	f000 fda5 	bl	80013d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088a:	2308      	movs	r3, #8
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4870      	ldr	r0, [pc, #448]	; (8000a64 <MX_GPIO_Init+0x2b8>)
 80008a2:	f000 fbfb 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	486a      	ldr	r0, [pc, #424]	; (8000a68 <MX_GPIO_Init+0x2bc>)
 80008be:	f000 fbed 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008c2:	2308      	movs	r3, #8
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4862      	ldr	r0, [pc, #392]	; (8000a68 <MX_GPIO_Init+0x2bc>)
 80008de:	f000 fbdd 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	485e      	ldr	r0, [pc, #376]	; (8000a70 <MX_GPIO_Init+0x2c4>)
 80008f8:	f000 fbd0 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008fc:	2310      	movs	r3, #16
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800090c:	2306      	movs	r3, #6
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4856      	ldr	r0, [pc, #344]	; (8000a70 <MX_GPIO_Init+0x2c4>)
 8000918:	f000 fbc0 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800091c:	23e0      	movs	r3, #224	; 0xe0
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800092c:	2305      	movs	r3, #5
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	484e      	ldr	r0, [pc, #312]	; (8000a70 <MX_GPIO_Init+0x2c4>)
 8000938:	f000 fbb0 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800093c:	2304      	movs	r3, #4
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4849      	ldr	r0, [pc, #292]	; (8000a74 <MX_GPIO_Init+0x2c8>)
 8000950:	f000 fba4 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000966:	2305      	movs	r3, #5
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4840      	ldr	r0, [pc, #256]	; (8000a74 <MX_GPIO_Init+0x2c8>)
 8000972:	f000 fb93 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000976:	f24f 0310 	movw	r3, #61456	; 0xf010
 800097a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4837      	ldr	r0, [pc, #220]	; (8000a6c <MX_GPIO_Init+0x2c0>)
 8000990:	f000 fb84 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000994:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a6:	2306      	movs	r3, #6
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	482d      	ldr	r0, [pc, #180]	; (8000a68 <MX_GPIO_Init+0x2bc>)
 80009b2:	f000 fb73 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4829      	ldr	r0, [pc, #164]	; (8000a70 <MX_GPIO_Init+0x2c4>)
 80009cc:	f000 fb66 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e2:	230a      	movs	r3, #10
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4820      	ldr	r0, [pc, #128]	; (8000a70 <MX_GPIO_Init+0x2c4>)
 80009ee:	f000 fb55 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009f2:	2320      	movs	r3, #32
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4819      	ldr	r0, [pc, #100]	; (8000a6c <MX_GPIO_Init+0x2c0>)
 8000a06:	f000 fb49 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a0a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a10:	2312      	movs	r3, #18
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4813      	ldr	r0, [pc, #76]	; (8000a74 <MX_GPIO_Init+0x2c8>)
 8000a28:	f000 fb38 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a30:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4808      	ldr	r0, [pc, #32]	; (8000a64 <MX_GPIO_Init+0x2b8>)
 8000a42:	f000 fb2b 	bl	800109c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2106      	movs	r1, #6
 8000a4a:	2006      	movs	r0, #6
 8000a4c:	f000 fafc 	bl	8001048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a50:	2006      	movs	r0, #6
 8000a52:	f000 fb15 	bl	8001080 <HAL_NVIC_EnableIRQ>

}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	; 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40020400 	.word	0x40020400

08000a78 <switch_priority>:

/* USER CODE BEGIN 4 */
static void switch_priority(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
	BaseType_t is_time_to_switch_priority = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
	UBaseType_t p1, p2;
	TaskHandle_t current_task_handle, t1, t2;
	portENTER_CRITICAL();
 8000a82:	f003 fe2f 	bl	80046e4 <vPortEnterCritical>
	if(is_button_pressed)
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <switch_priority+0x84>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d004      	beq.n	8000a98 <switch_priority+0x20>
	{
		is_button_pressed = 0;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <switch_priority+0x84>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
		is_time_to_switch_priority = 1;
 8000a94:	2301      	movs	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8000a98:	f003 fe54 	bl	8004744 <vPortExitCritical>

	if(is_time_to_switch_priority)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d027      	beq.n	8000af2 <switch_priority+0x7a>
	{
		t1 = xTaskGetHandle("TASK_1");
 8000aa2:	4817      	ldr	r0, [pc, #92]	; (8000b00 <switch_priority+0x88>)
 8000aa4:	f002 fcda 	bl	800345c <xTaskGetHandle>
 8000aa8:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("TASK_2");
 8000aaa:	4816      	ldr	r0, [pc, #88]	; (8000b04 <switch_priority+0x8c>)
 8000aac:	f002 fcd6 	bl	800345c <xTaskGetHandle>
 8000ab0:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 8000ab2:	6938      	ldr	r0, [r7, #16]
 8000ab4:	f002 f9ca 	bl	8002e4c <uxTaskPriorityGet>
 8000ab8:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f002 f9c6 	bl	8002e4c <uxTaskPriorityGet>
 8000ac0:	6078      	str	r0, [r7, #4]

		current_task_handle = xTaskGetCurrentTaskHandle();
 8000ac2:	f003 f933 	bl	8003d2c <xTaskGetCurrentTaskHandle>
 8000ac6:	6038      	str	r0, [r7, #0]

		if(current_task_handle == t1)
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d108      	bne.n	8000ae2 <switch_priority+0x6a>
		{
			vTaskPrioritySet(t1, p2);
 8000ad0:	6879      	ldr	r1, [r7, #4]
 8000ad2:	6938      	ldr	r0, [r7, #16]
 8000ad4:	f002 f9d4 	bl	8002e80 <vTaskPrioritySet>
			vTaskPrioritySet(t2, p1);
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f002 f9d0 	bl	8002e80 <vTaskPrioritySet>
		{
			vTaskPrioritySet(t2, p1);
			vTaskPrioritySet(t1, p2);
		}
	}
}
 8000ae0:	e007      	b.n	8000af2 <switch_priority+0x7a>
			vTaskPrioritySet(t2, p1);
 8000ae2:	68b9      	ldr	r1, [r7, #8]
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f002 f9cb 	bl	8002e80 <vTaskPrioritySet>
			vTaskPrioritySet(t1, p2);
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	6938      	ldr	r0, [r7, #16]
 8000aee:	f002 f9c7 	bl	8002e80 <vTaskPrioritySet>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000094 	.word	0x20000094
 8000b00:	080079d4 	.word	0x080079d4
 8000b04:	080079e8 	.word	0x080079e8

08000b08 <button_interrupt_handler>:

void button_interrupt_handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
	is_button_pressed = 1;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <button_interrupt_handler+0x14>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	20000094 	.word	0x20000094

08000b20 <task1_handler>:

static void task1_handler(void* parameters)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09c      	sub	sp, #112	; 0x70
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000b28:	f107 000c 	add.w	r0, r7, #12
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <task1_handler+0x38>)
 8000b30:	2164      	movs	r1, #100	; 0x64
 8000b32:	f006 facb 	bl	80070cc <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f006 fa06 	bl	8006f4c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <task1_handler+0x3c>)
 8000b46:	f000 fc5e 	bl	8001406 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000b4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b4e:	f002 f945 	bl	8002ddc <vTaskDelay>
		switch_priority();
 8000b52:	f7ff ff91 	bl	8000a78 <switch_priority>
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000b56:	e7e7      	b.n	8000b28 <task1_handler+0x8>
 8000b58:	080079f0 	.word	0x080079f0
 8000b5c:	40020c00 	.word	0x40020c00

08000b60 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b09c      	sub	sp, #112	; 0x70
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000b68:	f107 000c 	add.w	r0, r7, #12
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <task2_handler+0x38>)
 8000b70:	2164      	movs	r1, #100	; 0x64
 8000b72:	f006 faab 	bl	80070cc <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f006 f9e6 	bl	8006f4c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000b80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <task2_handler+0x3c>)
 8000b86:	f000 fc3e 	bl	8001406 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(100));
 8000b8a:	2064      	movs	r0, #100	; 0x64
 8000b8c:	f002 f926 	bl	8002ddc <vTaskDelay>
		switch_priority();
 8000b90:	f7ff ff72 	bl	8000a78 <switch_priority>
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000b94:	e7e8      	b.n	8000b68 <task2_handler+0x8>
 8000b96:	bf00      	nop
 8000b98:	080079f0 	.word	0x080079f0
 8000b9c:	40020c00 	.word	0x40020c00

08000ba0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d101      	bne.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bb2:	f000 f971 	bl	8000e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40001000 	.word	0x40001000

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c0e:	f003 fceb 	bl	80045e8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	; 0x38
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4b33      	ldr	r3, [pc, #204]	; (8000d04 <HAL_InitTick+0xe4>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4a32      	ldr	r2, [pc, #200]	; (8000d04 <HAL_InitTick+0xe4>)
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c40:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <HAL_InitTick+0xe4>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f003 0310 	and.w	r3, r3, #16
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c4c:	f107 0210 	add.w	r2, r7, #16
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 f898 	bl	8001d8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c66:	f001 f87d 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8000c6a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c6c:	e004      	b.n	8000c78 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c6e:	f001 f879 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8000c72:	4603      	mov	r3, r0
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c7a:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <HAL_InitTick+0xe8>)
 8000c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c80:	0c9b      	lsrs	r3, r3, #18
 8000c82:	3b01      	subs	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <HAL_InitTick+0xec>)
 8000c88:	4a21      	ldr	r2, [pc, #132]	; (8000d10 <HAL_InitTick+0xf0>)
 8000c8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_InitTick+0xec>)
 8000c8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c92:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c94:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <HAL_InitTick+0xec>)
 8000c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c98:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_InitTick+0xec>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <HAL_InitTick+0xec>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_InitTick+0xec>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cac:	4817      	ldr	r0, [pc, #92]	; (8000d0c <HAL_InitTick+0xec>)
 8000cae:	f001 f89f 	bl	8001df0 <HAL_TIM_Base_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d11b      	bne.n	8000cf8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cc0:	4812      	ldr	r0, [pc, #72]	; (8000d0c <HAL_InitTick+0xec>)
 8000cc2:	f001 f8ef 	bl	8001ea4 <HAL_TIM_Base_Start_IT>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ccc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d111      	bne.n	8000cf8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cd4:	2036      	movs	r0, #54	; 0x36
 8000cd6:	f000 f9d3 	bl	8001080 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d808      	bhi.n	8000cf2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	2036      	movs	r0, #54	; 0x36
 8000ce6:	f000 f9af 	bl	8001048 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_InitTick+0xf4>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	e002      	b.n	8000cf8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cf8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3738      	adds	r7, #56	; 0x38
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	431bde83 	.word	0x431bde83
 8000d0c:	200000a0 	.word	0x200000a0
 8000d10:	40001000 	.word	0x40001000
 8000d14:	20000004 	.word	0x20000004

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000d48:	f7ff fede 	bl	8000b08 <button_interrupt_handler>

	// clear EXTI 0 pending bit in the EXTI pending register
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f000 fb75 	bl	800143c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f000 fb72 	bl	800143c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <TIM6_DAC_IRQHandler+0x10>)
 8000d62:	f001 f90f 	bl	8001f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000a0 	.word	0x200000a0

08000d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <_sbrk+0x5c>)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <_sbrk+0x60>)
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <_sbrk+0x64>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <_sbrk+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da0:	f006 f944 	bl	800702c <__errno>
 8000da4:	4603      	mov	r3, r0
 8000da6:	220c      	movs	r2, #12
 8000da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e009      	b.n	8000dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <_sbrk+0x64>)
 8000dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20020000 	.word	0x20020000
 8000dd0:	00000400 	.word	0x00000400
 8000dd4:	200000e8 	.word	0x200000e8
 8000dd8:	20014528 	.word	0x20014528

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e08:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e1c:	4c0b      	ldr	r4, [pc, #44]	; (8000e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2a:	f7ff ffd7 	bl	8000ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f006 f903 	bl	8007038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fbf7 	bl	8000624 <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e44:	08007b64 	.word	0x08007b64
  ldr r2, =_sbss
 8000e48:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e4c:	20014524 	.word	0x20014524

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <HAL_Init+0x40>)
 8000e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_Init+0x40>)
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_Init+0x40>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f8d8 	bl	8001032 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff fecc 	bl	8000c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fea2 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023c00 	.word	0x40023c00

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	200000ec 	.word	0x200000ec

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	200000ec 	.word	0x200000ec

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff4c 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105a:	f7ff ff61 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 800105e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68b9      	ldr	r1, [r7, #8]
 8001064:	6978      	ldr	r0, [r7, #20]
 8001066:	f7ff ffb1 	bl	8000fcc <NVIC_EncodePriority>
 800106a:	4602      	mov	r2, r0
 800106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff80 	bl	8000f78 <__NVIC_SetPriority>
}
 8001078:	bf00      	nop
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff54 	bl	8000f3c <__NVIC_EnableIRQ>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	e16b      	b.n	8001390 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f040 815a 	bne.w	800138a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d005      	beq.n	80010ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d130      	bne.n	8001150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	f003 0201 	and.w	r2, r3, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b03      	cmp	r3, #3
 800115a:	d017      	beq.n	800118c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d123      	bne.n	80011e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	08da      	lsrs	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	69b9      	ldr	r1, [r7, #24]
 80011dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0203 	and.w	r2, r3, #3
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80b4 	beq.w	800138a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b60      	ldr	r3, [pc, #384]	; (80013a8 <HAL_GPIO_Init+0x30c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a5f      	ldr	r2, [pc, #380]	; (80013a8 <HAL_GPIO_Init+0x30c>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b5d      	ldr	r3, [pc, #372]	; (80013a8 <HAL_GPIO_Init+0x30c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800123e:	4a5b      	ldr	r2, [pc, #364]	; (80013ac <HAL_GPIO_Init+0x310>)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a52      	ldr	r2, [pc, #328]	; (80013b0 <HAL_GPIO_Init+0x314>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d02b      	beq.n	80012c2 <HAL_GPIO_Init+0x226>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a51      	ldr	r2, [pc, #324]	; (80013b4 <HAL_GPIO_Init+0x318>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d025      	beq.n	80012be <HAL_GPIO_Init+0x222>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a50      	ldr	r2, [pc, #320]	; (80013b8 <HAL_GPIO_Init+0x31c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d01f      	beq.n	80012ba <HAL_GPIO_Init+0x21e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4f      	ldr	r2, [pc, #316]	; (80013bc <HAL_GPIO_Init+0x320>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d019      	beq.n	80012b6 <HAL_GPIO_Init+0x21a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4e      	ldr	r2, [pc, #312]	; (80013c0 <HAL_GPIO_Init+0x324>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_GPIO_Init+0x216>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4d      	ldr	r2, [pc, #308]	; (80013c4 <HAL_GPIO_Init+0x328>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d00d      	beq.n	80012ae <HAL_GPIO_Init+0x212>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4c      	ldr	r2, [pc, #304]	; (80013c8 <HAL_GPIO_Init+0x32c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d007      	beq.n	80012aa <HAL_GPIO_Init+0x20e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4b      	ldr	r2, [pc, #300]	; (80013cc <HAL_GPIO_Init+0x330>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d101      	bne.n	80012a6 <HAL_GPIO_Init+0x20a>
 80012a2:	2307      	movs	r3, #7
 80012a4:	e00e      	b.n	80012c4 <HAL_GPIO_Init+0x228>
 80012a6:	2308      	movs	r3, #8
 80012a8:	e00c      	b.n	80012c4 <HAL_GPIO_Init+0x228>
 80012aa:	2306      	movs	r3, #6
 80012ac:	e00a      	b.n	80012c4 <HAL_GPIO_Init+0x228>
 80012ae:	2305      	movs	r3, #5
 80012b0:	e008      	b.n	80012c4 <HAL_GPIO_Init+0x228>
 80012b2:	2304      	movs	r3, #4
 80012b4:	e006      	b.n	80012c4 <HAL_GPIO_Init+0x228>
 80012b6:	2303      	movs	r3, #3
 80012b8:	e004      	b.n	80012c4 <HAL_GPIO_Init+0x228>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e002      	b.n	80012c4 <HAL_GPIO_Init+0x228>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <HAL_GPIO_Init+0x228>
 80012c2:	2300      	movs	r3, #0
 80012c4:	69fa      	ldr	r2, [r7, #28]
 80012c6:	f002 0203 	and.w	r2, r2, #3
 80012ca:	0092      	lsls	r2, r2, #2
 80012cc:	4093      	lsls	r3, r2
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d4:	4935      	ldr	r1, [pc, #212]	; (80013ac <HAL_GPIO_Init+0x310>)
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	3302      	adds	r3, #2
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e2:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <HAL_GPIO_Init+0x334>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001306:	4a32      	ldr	r2, [pc, #200]	; (80013d0 <HAL_GPIO_Init+0x334>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800130c:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <HAL_GPIO_Init+0x334>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001330:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <HAL_GPIO_Init+0x334>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_GPIO_Init+0x334>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800135a:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <HAL_GPIO_Init+0x334>)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_GPIO_Init+0x334>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001384:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <HAL_GPIO_Init+0x334>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3301      	adds	r3, #1
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	2b0f      	cmp	r3, #15
 8001394:	f67f ae90 	bls.w	80010b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40013800 	.word	0x40013800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020400 	.word	0x40020400
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020c00 	.word	0x40020c00
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40021400 	.word	0x40021400
 80013c8:	40021800 	.word	0x40021800
 80013cc:	40021c00 	.word	0x40021c00
 80013d0:	40013c00 	.word	0x40013c00

080013d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
 80013e0:	4613      	mov	r3, r2
 80013e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e4:	787b      	ldrb	r3, [r7, #1]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ea:	887a      	ldrh	r2, [r7, #2]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f0:	e003      	b.n	80013fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	041a      	lsls	r2, r3, #16
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	619a      	str	r2, [r3, #24]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	460b      	mov	r3, r1
 8001410:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001418:	887a      	ldrh	r2, [r7, #2]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4013      	ands	r3, r2
 800141e:	041a      	lsls	r2, r3, #16
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43d9      	mvns	r1, r3
 8001424:	887b      	ldrh	r3, [r7, #2]
 8001426:	400b      	ands	r3, r1
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	619a      	str	r2, [r3, #24]
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	4013      	ands	r3, r2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d006      	beq.n	8001460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f806 	bl	800146c <HAL_GPIO_EXTI_Callback>
  }
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40013c00 	.word	0x40013c00

0800146c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e267      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d075      	beq.n	800158e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a2:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d00c      	beq.n	80014c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ae:	4b85      	ldr	r3, [pc, #532]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d112      	bne.n	80014e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ba:	4b82      	ldr	r3, [pc, #520]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014c6:	d10b      	bne.n	80014e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	4b7e      	ldr	r3, [pc, #504]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d05b      	beq.n	800158c <HAL_RCC_OscConfig+0x108>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d157      	bne.n	800158c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e242      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e8:	d106      	bne.n	80014f8 <HAL_RCC_OscConfig+0x74>
 80014ea:	4b76      	ldr	r3, [pc, #472]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a75      	ldr	r2, [pc, #468]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e01d      	b.n	8001534 <HAL_RCC_OscConfig+0xb0>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0x98>
 8001502:	4b70      	ldr	r3, [pc, #448]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a6f      	ldr	r2, [pc, #444]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b6d      	ldr	r3, [pc, #436]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6c      	ldr	r2, [pc, #432]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0xb0>
 800151c:	4b69      	ldr	r3, [pc, #420]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a68      	ldr	r2, [pc, #416]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b66      	ldr	r3, [pc, #408]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a65      	ldr	r2, [pc, #404]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fcc0 	bl	8000ec0 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fcbc 	bl	8000ec0 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e207      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b5b      	ldr	r3, [pc, #364]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0xc0>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fcac 	bl	8000ec0 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fca8 	bl	8000ec0 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e1f3      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	4b51      	ldr	r3, [pc, #324]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0xe8>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d063      	beq.n	8001662 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159a:	4b4a      	ldr	r3, [pc, #296]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a6:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d11c      	bne.n	80015ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b2:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d116      	bne.n	80015ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_RCC_OscConfig+0x152>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e1c7      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b3b      	ldr	r3, [pc, #236]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4937      	ldr	r1, [pc, #220]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	e03a      	b.n	8001662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f4:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <HAL_RCC_OscConfig+0x244>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fa:	f7ff fc61 	bl	8000ec0 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fc5d 	bl	8000ec0 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e1a8      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4925      	ldr	r1, [pc, #148]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001630:	4313      	orrs	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
 8001634:	e015      	b.n	8001662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_RCC_OscConfig+0x244>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fc40 	bl	8000ec0 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fc3c 	bl	8000ec0 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e187      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d036      	beq.n	80016dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d016      	beq.n	80016a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_RCC_OscConfig+0x248>)
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167c:	f7ff fc20 	bl	8000ec0 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff fc1c 	bl	8000ec0 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e167      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x200>
 80016a2:	e01b      	b.n	80016dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_RCC_OscConfig+0x248>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fc09 	bl	8000ec0 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	e00e      	b.n	80016d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff fc05 	bl	8000ec0 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d907      	bls.n	80016d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e150      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	42470000 	.word	0x42470000
 80016cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d0:	4b88      	ldr	r3, [pc, #544]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 80016d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ea      	bne.n	80016b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 8097 	beq.w	8001818 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ee:	4b81      	ldr	r3, [pc, #516]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10f      	bne.n	800171a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b7d      	ldr	r3, [pc, #500]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a7c      	ldr	r2, [pc, #496]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b7a      	ldr	r3, [pc, #488]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001716:	2301      	movs	r3, #1
 8001718:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171a:	4b77      	ldr	r3, [pc, #476]	; (80018f8 <HAL_RCC_OscConfig+0x474>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d118      	bne.n	8001758 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001726:	4b74      	ldr	r3, [pc, #464]	; (80018f8 <HAL_RCC_OscConfig+0x474>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a73      	ldr	r2, [pc, #460]	; (80018f8 <HAL_RCC_OscConfig+0x474>)
 800172c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001732:	f7ff fbc5 	bl	8000ec0 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173a:	f7ff fbc1 	bl	8000ec0 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e10c      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	4b6a      	ldr	r3, [pc, #424]	; (80018f8 <HAL_RCC_OscConfig+0x474>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x2ea>
 8001760:	4b64      	ldr	r3, [pc, #400]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 8001762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001764:	4a63      	ldr	r2, [pc, #396]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6713      	str	r3, [r2, #112]	; 0x70
 800176c:	e01c      	b.n	80017a8 <HAL_RCC_OscConfig+0x324>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b05      	cmp	r3, #5
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x30c>
 8001776:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	4a5e      	ldr	r2, [pc, #376]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6713      	str	r3, [r2, #112]	; 0x70
 8001782:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	4a5b      	ldr	r2, [pc, #364]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6713      	str	r3, [r2, #112]	; 0x70
 800178e:	e00b      	b.n	80017a8 <HAL_RCC_OscConfig+0x324>
 8001790:	4b58      	ldr	r3, [pc, #352]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	4a57      	ldr	r2, [pc, #348]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	; 0x70
 800179c:	4b55      	ldr	r3, [pc, #340]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	4a54      	ldr	r2, [pc, #336]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 80017a2:	f023 0304 	bic.w	r3, r3, #4
 80017a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d015      	beq.n	80017dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff fb86 	bl	8000ec0 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b8:	f7ff fb82 	bl	8000ec0 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e0cb      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ce:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0ee      	beq.n	80017b8 <HAL_RCC_OscConfig+0x334>
 80017da:	e014      	b.n	8001806 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7ff fb70 	bl	8000ec0 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e4:	f7ff fb6c 	bl	8000ec0 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e0b5      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fa:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ee      	bne.n	80017e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001806:	7dfb      	ldrb	r3, [r7, #23]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180c:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a38      	ldr	r2, [pc, #224]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 8001812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80a1 	beq.w	8001964 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001822:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b08      	cmp	r3, #8
 800182c:	d05c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d141      	bne.n	80018ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fb40 	bl	8000ec0 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fb3c 	bl	8000ec0 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e087      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69da      	ldr	r2, [r3, #28]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	019b      	lsls	r3, r3, #6
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	085b      	lsrs	r3, r3, #1
 800187a:	3b01      	subs	r3, #1
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	061b      	lsls	r3, r3, #24
 8001886:	491b      	ldr	r1, [pc, #108]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff fb15 	bl	8000ec0 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff fb11 	bl	8000ec0 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e05c      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x416>
 80018b8:	e054      	b.n	8001964 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fafe 	bl	8000ec0 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff fafa 	bl	8000ec0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e045      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_RCC_OscConfig+0x470>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x444>
 80018e6:	e03d      	b.n	8001964 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e038      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40007000 	.word	0x40007000
 80018fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_RCC_OscConfig+0x4ec>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d028      	beq.n	8001960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d121      	bne.n	8001960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d11a      	bne.n	8001960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001938:	4293      	cmp	r3, r2
 800193a:	d111      	bne.n	8001960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	3b01      	subs	r3, #1
 800194a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d107      	bne.n	8001960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800

08001974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0cc      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b68      	ldr	r3, [pc, #416]	; (8001b2c <HAL_RCC_ClockConfig+0x1b8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d90c      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b65      	ldr	r3, [pc, #404]	; (8001b2c <HAL_RCC_ClockConfig+0x1b8>)
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0b8      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c8:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ec:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	494d      	ldr	r1, [pc, #308]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d044      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d119      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e07f      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a32:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e06f      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a42:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e067      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f023 0203 	bic.w	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4934      	ldr	r1, [pc, #208]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a64:	f7ff fa2c 	bl	8000ec0 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f7ff fa28 	bl	8000ec0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e04f      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 020c 	and.w	r2, r3, #12
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d1eb      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a94:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_RCC_ClockConfig+0x1b8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d20c      	bcs.n	8001abc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e032      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4916      	ldr	r1, [pc, #88]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	490e      	ldr	r1, [pc, #56]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001afa:	f000 f821 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001afe:	4602      	mov	r2, r0
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	490a      	ldr	r1, [pc, #40]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	5ccb      	ldrb	r3, [r1, r3]
 8001b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b12:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f880 	bl	8000c20 <HAL_InitTick>

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023c00 	.word	0x40023c00
 8001b30:	40023800 	.word	0x40023800
 8001b34:	08007ad0 	.word	0x08007ad0
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004

08001b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b44:	b094      	sub	sp, #80	; 0x50
 8001b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b50:	2300      	movs	r3, #0
 8001b52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b58:	4b79      	ldr	r3, [pc, #484]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d00d      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x40>
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	f200 80e1 	bhi.w	8001d2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x34>
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d003      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b72:	e0db      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b74:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b78:	e0db      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b7a:	4b73      	ldr	r3, [pc, #460]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b7e:	e0d8      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b80:	4b6f      	ldr	r3, [pc, #444]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b8a:	4b6d      	ldr	r3, [pc, #436]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d063      	beq.n	8001c5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b96:	4b6a      	ldr	r3, [pc, #424]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	099b      	lsrs	r3, r3, #6
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ba0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8001baa:	2300      	movs	r3, #0
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
 8001bae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bb2:	4622      	mov	r2, r4
 8001bb4:	462b      	mov	r3, r5
 8001bb6:	f04f 0000 	mov.w	r0, #0
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	0159      	lsls	r1, r3, #5
 8001bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc4:	0150      	lsls	r0, r2, #5
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4621      	mov	r1, r4
 8001bcc:	1a51      	subs	r1, r2, r1
 8001bce:	6139      	str	r1, [r7, #16]
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001be4:	4659      	mov	r1, fp
 8001be6:	018b      	lsls	r3, r1, #6
 8001be8:	4651      	mov	r1, sl
 8001bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bee:	4651      	mov	r1, sl
 8001bf0:	018a      	lsls	r2, r1, #6
 8001bf2:	4651      	mov	r1, sl
 8001bf4:	ebb2 0801 	subs.w	r8, r2, r1
 8001bf8:	4659      	mov	r1, fp
 8001bfa:	eb63 0901 	sbc.w	r9, r3, r1
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c12:	4690      	mov	r8, r2
 8001c14:	4699      	mov	r9, r3
 8001c16:	4623      	mov	r3, r4
 8001c18:	eb18 0303 	adds.w	r3, r8, r3
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	462b      	mov	r3, r5
 8001c20:	eb49 0303 	adc.w	r3, r9, r3
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c32:	4629      	mov	r1, r5
 8001c34:	024b      	lsls	r3, r1, #9
 8001c36:	4621      	mov	r1, r4
 8001c38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	024a      	lsls	r2, r1, #9
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c46:	2200      	movs	r2, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c50:	f7fe fb66 	bl	8000320 <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c5c:	e058      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5e:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	099b      	lsrs	r3, r3, #6
 8001c64:	2200      	movs	r2, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	4611      	mov	r1, r2
 8001c6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c6e:	623b      	str	r3, [r7, #32]
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
 8001c74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c78:	4642      	mov	r2, r8
 8001c7a:	464b      	mov	r3, r9
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	0159      	lsls	r1, r3, #5
 8001c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c8a:	0150      	lsls	r0, r2, #5
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4641      	mov	r1, r8
 8001c92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c96:	4649      	mov	r1, r9
 8001c98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ca8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cb0:	ebb2 040a 	subs.w	r4, r2, sl
 8001cb4:	eb63 050b 	sbc.w	r5, r3, fp
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	00eb      	lsls	r3, r5, #3
 8001cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cc6:	00e2      	lsls	r2, r4, #3
 8001cc8:	4614      	mov	r4, r2
 8001cca:	461d      	mov	r5, r3
 8001ccc:	4643      	mov	r3, r8
 8001cce:	18e3      	adds	r3, r4, r3
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	464b      	mov	r3, r9
 8001cd4:	eb45 0303 	adc.w	r3, r5, r3
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	028b      	lsls	r3, r1, #10
 8001cea:	4621      	mov	r1, r4
 8001cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	028a      	lsls	r2, r1, #10
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	61fa      	str	r2, [r7, #28]
 8001d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d04:	f7fe fb0c 	bl	8000320 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	0c1b      	lsrs	r3, r3, #16
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d2a:	e002      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3750      	adds	r7, #80	; 0x50
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	00f42400 	.word	0x00f42400
 8001d48:	007a1200 	.word	0x007a1200

08001d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000000 	.word	0x20000000

08001d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d68:	f7ff fff0 	bl	8001d4c <HAL_RCC_GetHCLKFreq>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	0a9b      	lsrs	r3, r3, #10
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	4903      	ldr	r1, [pc, #12]	; (8001d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d7a:	5ccb      	ldrb	r3, [r1, r3]
 8001d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40023800 	.word	0x40023800
 8001d88:	08007ae0 	.word	0x08007ae0

08001d8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	220f      	movs	r2, #15
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0203 	and.w	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_RCC_GetClockConfig+0x5c>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <HAL_RCC_GetClockConfig+0x5c>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_GetClockConfig+0x5c>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_RCC_GetClockConfig+0x60>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0207 	and.w	r2, r3, #7
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	601a      	str	r2, [r3, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40023c00 	.word	0x40023c00

08001df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e041      	b.n	8001e86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f839 	bl	8001e8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f000 f9d8 	bl	80021e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d001      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e04e      	b.n	8001f5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_TIM_Base_Start_IT+0xc4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d022      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee6:	d01d      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1f      	ldr	r2, [pc, #124]	; (8001f6c <HAL_TIM_Base_Start_IT+0xc8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d018      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	; (8001f70 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d013      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00e      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d009      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <HAL_TIM_Base_Start_IT+0xd8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d004      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a18      	ldr	r2, [pc, #96]	; (8001f80 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d111      	bne.n	8001f48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d010      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0201 	orr.w	r2, r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f46:	e007      	b.n	8001f58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	40000800 	.word	0x40000800
 8001f74:	40000c00 	.word	0x40000c00
 8001f78:	40010400 	.word	0x40010400
 8001f7c:	40014000 	.word	0x40014000
 8001f80:	40001800 	.word	0x40001800

08001f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d122      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0202 	mvn.w	r2, #2
 8001fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8ee 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8e0 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f8f1 	bl	80021bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d122      	bne.n	8002034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d11b      	bne.n	8002034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0204 	mvn.w	r2, #4
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2202      	movs	r2, #2
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f8c4 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8b6 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f8c7 	bl	80021bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b08      	cmp	r3, #8
 8002040:	d122      	bne.n	8002088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b08      	cmp	r3, #8
 800204e:	d11b      	bne.n	8002088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0208 	mvn.w	r2, #8
 8002058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2204      	movs	r2, #4
 800205e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f89a 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f88c 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f89d 	bl	80021bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b10      	cmp	r3, #16
 8002094:	d122      	bne.n	80020dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b10      	cmp	r3, #16
 80020a2:	d11b      	bne.n	80020dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0210 	mvn.w	r2, #16
 80020ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2208      	movs	r2, #8
 80020b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f870 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 80020c8:	e005      	b.n	80020d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f862 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f873 	bl	80021bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d10e      	bne.n	8002108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d107      	bne.n	8002108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0201 	mvn.w	r2, #1
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fd4c 	bl	8000ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002112:	2b80      	cmp	r3, #128	; 0x80
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002120:	2b80      	cmp	r3, #128	; 0x80
 8002122:	d107      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f902 	bl	8002338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213e:	2b40      	cmp	r3, #64	; 0x40
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214c:	2b40      	cmp	r3, #64	; 0x40
 800214e:	d107      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f838 	bl	80021d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b20      	cmp	r3, #32
 800216c:	d10e      	bne.n	800218c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b20      	cmp	r3, #32
 800217a:	d107      	bne.n	800218c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0220 	mvn.w	r2, #32
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f8cc 	bl	8002324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a40      	ldr	r2, [pc, #256]	; (80022f8 <TIM_Base_SetConfig+0x114>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d013      	beq.n	8002224 <TIM_Base_SetConfig+0x40>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002202:	d00f      	beq.n	8002224 <TIM_Base_SetConfig+0x40>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3d      	ldr	r2, [pc, #244]	; (80022fc <TIM_Base_SetConfig+0x118>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00b      	beq.n	8002224 <TIM_Base_SetConfig+0x40>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a3c      	ldr	r2, [pc, #240]	; (8002300 <TIM_Base_SetConfig+0x11c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d007      	beq.n	8002224 <TIM_Base_SetConfig+0x40>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a3b      	ldr	r2, [pc, #236]	; (8002304 <TIM_Base_SetConfig+0x120>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d003      	beq.n	8002224 <TIM_Base_SetConfig+0x40>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3a      	ldr	r2, [pc, #232]	; (8002308 <TIM_Base_SetConfig+0x124>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d108      	bne.n	8002236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a2f      	ldr	r2, [pc, #188]	; (80022f8 <TIM_Base_SetConfig+0x114>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d02b      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002244:	d027      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a2c      	ldr	r2, [pc, #176]	; (80022fc <TIM_Base_SetConfig+0x118>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d023      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <TIM_Base_SetConfig+0x11c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01f      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a2a      	ldr	r2, [pc, #168]	; (8002304 <TIM_Base_SetConfig+0x120>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01b      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a29      	ldr	r2, [pc, #164]	; (8002308 <TIM_Base_SetConfig+0x124>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d017      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a28      	ldr	r2, [pc, #160]	; (800230c <TIM_Base_SetConfig+0x128>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a27      	ldr	r2, [pc, #156]	; (8002310 <TIM_Base_SetConfig+0x12c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00f      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <TIM_Base_SetConfig+0x130>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00b      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a25      	ldr	r2, [pc, #148]	; (8002318 <TIM_Base_SetConfig+0x134>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d007      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a24      	ldr	r2, [pc, #144]	; (800231c <TIM_Base_SetConfig+0x138>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d003      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a23      	ldr	r2, [pc, #140]	; (8002320 <TIM_Base_SetConfig+0x13c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d108      	bne.n	80022a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800229c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <TIM_Base_SetConfig+0x114>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d003      	beq.n	80022dc <TIM_Base_SetConfig+0xf8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <TIM_Base_SetConfig+0x124>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d103      	bne.n	80022e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	615a      	str	r2, [r3, #20]
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40010000 	.word	0x40010000
 80022fc:	40000400 	.word	0x40000400
 8002300:	40000800 	.word	0x40000800
 8002304:	40000c00 	.word	0x40000c00
 8002308:	40010400 	.word	0x40010400
 800230c:	40014000 	.word	0x40014000
 8002310:	40014400 	.word	0x40014400
 8002314:	40014800 	.word	0x40014800
 8002318:	40001800 	.word	0x40001800
 800231c:	40001c00 	.word	0x40001c00
 8002320:	40002000 	.word	0x40002000

08002324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f103 0208 	add.w	r2, r3, #8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f04f 32ff 	mov.w	r2, #4294967295
 8002364:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f103 0208 	add.w	r2, r3, #8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f103 0208 	add.w	r2, r3, #8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d103      	bne.n	80023c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e00c      	b.n	80023e0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3308      	adds	r3, #8
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e002      	b.n	80023d4 <vListInsert+0x2e>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d2f6      	bcs.n	80023ce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	601a      	str	r2, [r3, #0]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6892      	ldr	r2, [r2, #8]
 800242e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6852      	ldr	r2, [r2, #4]
 8002438:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	429a      	cmp	r2, r3
 8002442:	d103      	bne.n	800244c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	1e5a      	subs	r2, r3, #1
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002476:	2301      	movs	r3, #1
 8002478:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <xQueueGenericReset+0x2e>
        __asm volatile
 8002484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	60fb      	str	r3, [r7, #12]
    }
 8002496:	bf00      	nop
 8002498:	e7fe      	b.n	8002498 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d05d      	beq.n	800255c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d059      	beq.n	800255c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b0:	2100      	movs	r1, #0
 80024b2:	fba3 2302 	umull	r2, r3, r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d000      	beq.n	80024bc <xQueueGenericReset+0x50>
 80024ba:	2101      	movs	r1, #1
 80024bc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d14c      	bne.n	800255c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80024c2:	f002 f90f 	bl	80046e4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	6939      	ldr	r1, [r7, #16]
 80024d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	441a      	add	r2, r3
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2200      	movs	r2, #0
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6939      	ldr	r1, [r7, #16]
 80024f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	441a      	add	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	22ff      	movs	r2, #255	; 0xff
 8002506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	22ff      	movs	r2, #255	; 0xff
 800250e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d114      	bne.n	8002542 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01a      	beq.n	8002556 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	3310      	adds	r3, #16
 8002524:	4618      	mov	r0, r3
 8002526:	f001 f9ef 	bl	8003908 <xTaskRemoveFromEventList>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d012      	beq.n	8002556 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002530:	4b15      	ldr	r3, [pc, #84]	; (8002588 <xQueueGenericReset+0x11c>)
 8002532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	e009      	b.n	8002556 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	3310      	adds	r3, #16
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff00 	bl	800234c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	3324      	adds	r3, #36	; 0x24
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fefb 	bl	800234c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002556:	f002 f8f5 	bl	8004744 <vPortExitCritical>
 800255a:	e001      	b.n	8002560 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10a      	bne.n	800257c <xQueueGenericReset+0x110>
        __asm volatile
 8002566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256a:	f383 8811 	msr	BASEPRI, r3
 800256e:	f3bf 8f6f 	isb	sy
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	60bb      	str	r3, [r7, #8]
    }
 8002578:	bf00      	nop
 800257a:	e7fe      	b.n	800257a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800257c:	697b      	ldr	r3, [r7, #20]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	e000ed04 	.word	0xe000ed04

0800258c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	4613      	mov	r3, r2
 8002598:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d02e      	beq.n	8002602 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025a4:	2100      	movs	r1, #0
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	fba3 2302 	umull	r2, r3, r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d000      	beq.n	80025b4 <xQueueGenericCreate+0x28>
 80025b2:	2101      	movs	r1, #1
 80025b4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d123      	bne.n	8002602 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025c2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80025c6:	d81c      	bhi.n	8002602 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	fb02 f303 	mul.w	r3, r2, r3
 80025d0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	3350      	adds	r3, #80	; 0x50
 80025d6:	4618      	mov	r0, r3
 80025d8:	f002 f9b0 	bl	800493c <pvPortMalloc>
 80025dc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01c      	beq.n	800261e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3350      	adds	r3, #80	; 0x50
 80025ec:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025ee:	79fa      	ldrb	r2, [r7, #7]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f814 	bl	8002628 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002600:	e00d      	b.n	800261e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <xQueueGenericCreate+0x92>
        __asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	613b      	str	r3, [r7, #16]
    }
 800261a:	bf00      	nop
 800261c:	e7fe      	b.n	800261c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800261e:	69fb      	ldr	r3, [r7, #28]
    }
 8002620:	4618      	mov	r0, r3
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d103      	bne.n	8002644 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	e002      	b.n	800264a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002656:	2101      	movs	r1, #1
 8002658:	69b8      	ldr	r0, [r7, #24]
 800265a:	f7ff ff07 	bl	800246c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	68f9      	ldr	r1, [r7, #12]
 800266c:	2073      	movs	r0, #115	; 0x73
 800266e:	f003 fe49 	bl	8006304 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b08f      	sub	sp, #60	; 0x3c
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <xQueueReceive+0x30>
        __asm volatile
 8002696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	623b      	str	r3, [r7, #32]
    }
 80026a8:	bf00      	nop
 80026aa:	e7fe      	b.n	80026aa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <xQueueReceive+0x3e>
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <xQueueReceive+0x42>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <xQueueReceive+0x44>
 80026be:	2300      	movs	r3, #0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <xQueueReceive+0x5e>
        __asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	61fb      	str	r3, [r7, #28]
    }
 80026d6:	bf00      	nop
 80026d8:	e7fe      	b.n	80026d8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026da:	f001 fb37 	bl	8003d4c <xTaskGetSchedulerState>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <xQueueReceive+0x6e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <xQueueReceive+0x72>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <xQueueReceive+0x74>
 80026ee:	2300      	movs	r3, #0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10a      	bne.n	800270a <xQueueReceive+0x8e>
        __asm volatile
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	61bb      	str	r3, [r7, #24]
    }
 8002706:	bf00      	nop
 8002708:	e7fe      	b.n	8002708 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800270a:	f001 ffeb 	bl	80046e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002712:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	2b00      	cmp	r3, #0
 8002718:	d02f      	beq.n	800277a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800271e:	f000 f8bd 	bl	800289c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	4618      	mov	r0, r3
 8002726:	f004 fb1b 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 800272a:	4604      	mov	r4, r0
 800272c:	2000      	movs	r0, #0
 800272e:	f004 fb17 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002732:	4602      	mov	r2, r0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2101      	movs	r1, #1
 8002738:	9100      	str	r1, [sp, #0]
 800273a:	4621      	mov	r1, r4
 800273c:	205c      	movs	r0, #92	; 0x5c
 800273e:	f003 fe57 	bl	80063f0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	1e5a      	subs	r2, r3, #1
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00f      	beq.n	8002772 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	3310      	adds	r3, #16
 8002756:	4618      	mov	r0, r3
 8002758:	f001 f8d6 	bl	8003908 <xTaskRemoveFromEventList>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002762:	4b4d      	ldr	r3, [pc, #308]	; (8002898 <xQueueReceive+0x21c>)
 8002764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002772:	f001 ffe7 	bl	8004744 <vPortExitCritical>
                return pdPASS;
 8002776:	2301      	movs	r3, #1
 8002778:	e08a      	b.n	8002890 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d113      	bne.n	80027a8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002780:	f001 ffe0 	bl	8004744 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	4618      	mov	r0, r3
 8002788:	f004 faea 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 800278c:	4604      	mov	r4, r0
 800278e:	2000      	movs	r0, #0
 8002790:	f004 fae6 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002794:	4602      	mov	r2, r0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2101      	movs	r1, #1
 800279a:	9100      	str	r1, [sp, #0]
 800279c:	4621      	mov	r1, r4
 800279e:	205c      	movs	r0, #92	; 0x5c
 80027a0:	f003 fe26 	bl	80063f0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e073      	b.n	8002890 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027ae:	f107 0310 	add.w	r3, r7, #16
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 f980 	bl	8003ab8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027b8:	2301      	movs	r3, #1
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027bc:	f001 ffc2 	bl	8004744 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027c0:	f000 fcae 	bl	8003120 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027c4:	f001 ff8e 	bl	80046e4 <vPortEnterCritical>
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d103      	bne.n	80027de <xQueueReceive+0x162>
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d103      	bne.n	80027f4 <xQueueReceive+0x178>
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027f4:	f001 ffa6 	bl	8004744 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027f8:	1d3a      	adds	r2, r7, #4
 80027fa:	f107 0310 	add.w	r3, r7, #16
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f001 f96f 	bl	8003ae4 <xTaskCheckForTimeOut>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d124      	bne.n	8002856 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800280c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800280e:	f000 f8bd 	bl	800298c <prvIsQueueEmpty>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d018      	beq.n	800284a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	3324      	adds	r3, #36	; 0x24
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f001 f805 	bl	8003830 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002828:	f000 f85e 	bl	80028e8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800282c:	f000 fc86 	bl	800313c <xTaskResumeAll>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	f47f af69 	bne.w	800270a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <xQueueReceive+0x21c>)
 800283a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	e75f      	b.n	800270a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800284a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800284c:	f000 f84c 	bl	80028e8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002850:	f000 fc74 	bl	800313c <xTaskResumeAll>
 8002854:	e759      	b.n	800270a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002858:	f000 f846 	bl	80028e8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800285c:	f000 fc6e 	bl	800313c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002862:	f000 f893 	bl	800298c <prvIsQueueEmpty>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	f43f af4e 	beq.w	800270a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	4618      	mov	r0, r3
 8002872:	f004 fa75 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002876:	4604      	mov	r4, r0
 8002878:	2000      	movs	r0, #0
 800287a:	f004 fa71 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 800287e:	4602      	mov	r2, r0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2101      	movs	r1, #1
 8002884:	9100      	str	r1, [sp, #0]
 8002886:	4621      	mov	r1, r4
 8002888:	205c      	movs	r0, #92	; 0x5c
 800288a:	f003 fdb1 	bl	80063f0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800288e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002890:	4618      	mov	r0, r3
 8002892:	3734      	adds	r7, #52	; 0x34
 8002894:	46bd      	mov	sp, r7
 8002896:	bd90      	pop	{r4, r7, pc}
 8002898:	e000ed04 	.word	0xe000ed04

0800289c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d018      	beq.n	80028e0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	441a      	add	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d303      	bcc.n	80028d0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68d9      	ldr	r1, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	461a      	mov	r2, r3
 80028da:	6838      	ldr	r0, [r7, #0]
 80028dc:	f004 fbe0 	bl	80070a0 <memcpy>
    }
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028f0:	f001 fef8 	bl	80046e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028fa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028fc:	e011      	b.n	8002922 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	2b00      	cmp	r3, #0
 8002904:	d012      	beq.n	800292c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3324      	adds	r3, #36	; 0x24
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fffc 	bl	8003908 <xTaskRemoveFromEventList>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002916:	f001 f94b 	bl	8003bb0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	3b01      	subs	r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	dce9      	bgt.n	80028fe <prvUnlockQueue+0x16>
 800292a:	e000      	b.n	800292e <prvUnlockQueue+0x46>
                    break;
 800292c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	22ff      	movs	r2, #255	; 0xff
 8002932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002936:	f001 ff05 	bl	8004744 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800293a:	f001 fed3 	bl	80046e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002944:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002946:	e011      	b.n	800296c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d012      	beq.n	8002976 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3310      	adds	r3, #16
 8002954:	4618      	mov	r0, r3
 8002956:	f000 ffd7 	bl	8003908 <xTaskRemoveFromEventList>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002960:	f001 f926 	bl	8003bb0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002964:	7bbb      	ldrb	r3, [r7, #14]
 8002966:	3b01      	subs	r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800296c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002970:	2b00      	cmp	r3, #0
 8002972:	dce9      	bgt.n	8002948 <prvUnlockQueue+0x60>
 8002974:	e000      	b.n	8002978 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002976:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	22ff      	movs	r2, #255	; 0xff
 800297c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002980:	f001 fee0 	bl	8004744 <vPortExitCritical>
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002994:	f001 fea6 	bl	80046e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80029a0:	2301      	movs	r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	e001      	b.n	80029aa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80029aa:	f001 fecb 	bl	8004744 <vPortExitCritical>

    return xReturn;
 80029ae:	68fb      	ldr	r3, [r7, #12]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10a      	bne.n	80029e2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80029cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d0:	f383 8811 	msr	BASEPRI, r3
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	60fb      	str	r3, [r7, #12]
    }
 80029de:	bf00      	nop
 80029e0:	e7fe      	b.n	80029e0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d024      	beq.n	8002a32 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e01e      	b.n	8002a2c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80029ee:	4a1c      	ldr	r2, [pc, #112]	; (8002a60 <vQueueAddToRegistry+0xa8>)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d105      	bne.n	8002a0a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4a17      	ldr	r2, [pc, #92]	; (8002a60 <vQueueAddToRegistry+0xa8>)
 8002a04:	4413      	add	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
                    break;
 8002a08:	e013      	b.n	8002a32 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <vQueueAddToRegistry+0x6e>
 8002a10:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <vQueueAddToRegistry+0xa8>)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d104      	bne.n	8002a26 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4a0f      	ldr	r2, [pc, #60]	; (8002a60 <vQueueAddToRegistry+0xa8>)
 8002a22:	4413      	add	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b07      	cmp	r3, #7
 8002a30:	d9dd      	bls.n	80029ee <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00f      	beq.n	8002a58 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f004 f98a 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002a4c:	4601      	mov	r1, r0
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	2071      	movs	r0, #113	; 0x71
 8002a54:	f003 fbfc 	bl	8006250 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002a58:	bf00      	nop
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200000f0 	.word	0x200000f0

08002a64 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a74:	f001 fe36 	bl	80046e4 <vPortEnterCritical>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a7e:	b25b      	sxtb	r3, r3
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d103      	bne.n	8002a8e <vQueueWaitForMessageRestricted+0x2a>
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d103      	bne.n	8002aa4 <vQueueWaitForMessageRestricted+0x40>
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aa4:	f001 fe4e 	bl	8004744 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3324      	adds	r3, #36	; 0x24
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fedd 	bl	8003878 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002abe:	6978      	ldr	r0, [r7, #20]
 8002ac0:	f7ff ff12 	bl	80028e8 <prvUnlockQueue>
    }
 8002ac4:	bf00      	nop
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08c      	sub	sp, #48	; 0x30
 8002ad0:	af04      	add	r7, sp, #16
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 ff2b 	bl	800493c <pvPortMalloc>
 8002ae6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d013      	beq.n	8002b16 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002aee:	2058      	movs	r0, #88	; 0x58
 8002af0:	f001 ff24 	bl	800493c <pvPortMalloc>
 8002af4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002afc:	2258      	movs	r2, #88	; 0x58
 8002afe:	2100      	movs	r1, #0
 8002b00:	69f8      	ldr	r0, [r7, #28]
 8002b02:	f004 fadb 	bl	80070bc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b0c:	e005      	b.n	8002b1a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002b0e:	6978      	ldr	r0, [r7, #20]
 8002b10:	f001 ffce 	bl	8004ab0 <vPortFree>
 8002b14:	e001      	b.n	8002b1a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b20:	88fa      	ldrh	r2, [r7, #6]
 8002b22:	2300      	movs	r3, #0
 8002b24:	9303      	str	r3, [sp, #12]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	9302      	str	r3, [sp, #8]
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f80e 	bl	8002b58 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b3c:	69f8      	ldr	r0, [r7, #28]
 8002b3e:	f000 f899 	bl	8002c74 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	e002      	b.n	8002b4e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b4e:	69bb      	ldr	r3, [r7, #24]
    }
 8002b50:	4618      	mov	r0, r3
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	461a      	mov	r2, r3
 8002b70:	21a5      	movs	r1, #165	; 0xa5
 8002b72:	f004 faa3 	bl	80070bc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b80:	3b01      	subs	r3, #1
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f023 0307 	bic.w	r3, r3, #7
 8002b8e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	617b      	str	r3, [r7, #20]
    }
 8002bac:	bf00      	nop
 8002bae:	e7fe      	b.n	8002bae <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d01e      	beq.n	8002bf4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e012      	b.n	8002be2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	7819      	ldrb	r1, [r3, #0]
 8002bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	4413      	add	r3, r2
 8002bca:	3334      	adds	r3, #52	; 0x34
 8002bcc:	460a      	mov	r2, r1
 8002bce:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d006      	beq.n	8002bea <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	3301      	adds	r3, #1
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b09      	cmp	r3, #9
 8002be6:	d9e9      	bls.n	8002bbc <prvInitialiseNewTask+0x64>
 8002be8:	e000      	b.n	8002bec <prvInitialiseNewTask+0x94>
            {
                break;
 8002bea:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d90a      	bls.n	8002c10 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	613b      	str	r3, [r7, #16]
    }
 8002c0c:	bf00      	nop
 8002c0e:	e7fe      	b.n	8002c0e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d901      	bls.n	8002c1a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c16:	2304      	movs	r3, #4
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c24:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	3304      	adds	r3, #4
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fbae 	bl	800238c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	3318      	adds	r3, #24
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fba9 	bl	800238c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	f1c3 0205 	rsb	r2, r3, #5
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	68f9      	ldr	r1, [r7, #12]
 8002c54:	69b8      	ldr	r0, [r7, #24]
 8002c56:	f001 fb9b 	bl	8004390 <pxPortInitialiseStack>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c6a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c6c:	bf00      	nop
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c74:	b5b0      	push	{r4, r5, r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c7c:	f001 fd32 	bl	80046e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c80:	4b4f      	ldr	r3, [pc, #316]	; (8002dc0 <prvAddNewTaskToReadyList+0x14c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	4a4e      	ldr	r2, [pc, #312]	; (8002dc0 <prvAddNewTaskToReadyList+0x14c>)
 8002c88:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c8a:	4b4e      	ldr	r3, [pc, #312]	; (8002dc4 <prvAddNewTaskToReadyList+0x150>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c92:	4a4c      	ldr	r2, [pc, #304]	; (8002dc4 <prvAddNewTaskToReadyList+0x150>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c98:	4b49      	ldr	r3, [pc, #292]	; (8002dc0 <prvAddNewTaskToReadyList+0x14c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d110      	bne.n	8002cc2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ca0:	f000 ffaa 	bl	8003bf8 <prvInitialiseTaskLists>
 8002ca4:	e00d      	b.n	8002cc2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ca6:	4b48      	ldr	r3, [pc, #288]	; (8002dc8 <prvAddNewTaskToReadyList+0x154>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cae:	4b45      	ldr	r3, [pc, #276]	; (8002dc4 <prvAddNewTaskToReadyList+0x150>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d802      	bhi.n	8002cc2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002cbc:	4a41      	ldr	r2, [pc, #260]	; (8002dc4 <prvAddNewTaskToReadyList+0x150>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002cc2:	4b42      	ldr	r3, [pc, #264]	; (8002dcc <prvAddNewTaskToReadyList+0x158>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	4a40      	ldr	r2, [pc, #256]	; (8002dcc <prvAddNewTaskToReadyList+0x158>)
 8002cca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ccc:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <prvAddNewTaskToReadyList+0x158>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d016      	beq.n	8002d08 <prvAddNewTaskToReadyList+0x94>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 ff79 	bl	8006bd4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	461d      	mov	r5, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	461c      	mov	r4, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	1ae3      	subs	r3, r4, r3
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	462b      	mov	r3, r5
 8002d04:	f002 f896 	bl	8004e34 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 ffe6 	bl	8006cdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	2201      	movs	r2, #1
 8002d16:	409a      	lsls	r2, r3
 8002d18:	4b2d      	ldr	r3, [pc, #180]	; (8002dd0 <prvAddNewTaskToReadyList+0x15c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	4a2c      	ldr	r2, [pc, #176]	; (8002dd0 <prvAddNewTaskToReadyList+0x15c>)
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d26:	492b      	ldr	r1, [pc, #172]	; (8002dd4 <prvAddNewTaskToReadyList+0x160>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	3304      	adds	r3, #4
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	3204      	adds	r2, #4
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	1d1a      	adds	r2, r3, #4
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4a1b      	ldr	r2, [pc, #108]	; (8002dd4 <prvAddNewTaskToReadyList+0x160>)
 8002d66:	441a      	add	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	615a      	str	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d70:	4918      	ldr	r1, [pc, #96]	; (8002dd4 <prvAddNewTaskToReadyList+0x160>)
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	1c59      	adds	r1, r3, #1
 8002d80:	4814      	ldr	r0, [pc, #80]	; (8002dd4 <prvAddNewTaskToReadyList+0x160>)
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4403      	add	r3, r0
 8002d8c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d8e:	f001 fcd9 	bl	8004744 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d92:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <prvAddNewTaskToReadyList+0x154>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00e      	beq.n	8002db8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <prvAddNewTaskToReadyList+0x150>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d207      	bcs.n	8002db8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <prvAddNewTaskToReadyList+0x164>)
 8002daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc0:	20000208 	.word	0x20000208
 8002dc4:	20000130 	.word	0x20000130
 8002dc8:	20000214 	.word	0x20000214
 8002dcc:	20000224 	.word	0x20000224
 8002dd0:	20000210 	.word	0x20000210
 8002dd4:	20000134 	.word	0x20000134
 8002dd8:	e000ed04 	.word	0xe000ed04

08002ddc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d01b      	beq.n	8002e26 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <vTaskDelay+0x68>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <vTaskDelay+0x30>
        __asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	60bb      	str	r3, [r7, #8]
    }
 8002e08:	bf00      	nop
 8002e0a:	e7fe      	b.n	8002e0a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002e0c:	f000 f988 	bl	8003120 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	2023      	movs	r0, #35	; 0x23
 8002e14:	f003 f9e0 	bl	80061d8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e18:	2100      	movs	r1, #0
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 ffb4 	bl	8003d88 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002e20:	f000 f98c 	bl	800313c <xTaskResumeAll>
 8002e24:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d107      	bne.n	8002e3c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <vTaskDelay+0x6c>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000230 	.word	0x20000230
 8002e48:	e000ed04 	.word	0xe000ed04

08002e4c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002e54:	f001 fc46 	bl	80046e4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d102      	bne.n	8002e64 <uxTaskPriorityGet+0x18>
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <uxTaskPriorityGet+0x30>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	e000      	b.n	8002e66 <uxTaskPriorityGet+0x1a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002e6e:	f001 fc69 	bl	8004744 <vPortExitCritical>

        return uxReturn;
 8002e72:	68bb      	ldr	r3, [r7, #8]
    }
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000130 	.word	0x20000130

08002e80 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d90a      	bls.n	8002eaa <vTaskPrioritySet+0x2a>
        __asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	60bb      	str	r3, [r7, #8]
    }
 8002ea6:	bf00      	nop
 8002ea8:	e7fe      	b.n	8002ea8 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d901      	bls.n	8002eb4 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002eb4:	f001 fc16 	bl	80046e4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d102      	bne.n	8002ec4 <vTaskPrioritySet+0x44>
 8002ebe:	4b63      	ldr	r3, [pc, #396]	; (800304c <vTaskPrioritySet+0x1cc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	e000      	b.n	8002ec6 <vTaskPrioritySet+0x46>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f003 ff48 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	2028      	movs	r0, #40	; 0x28
 8002ed8:	f003 f9ba 	bl	8006250 <SEGGER_SYSVIEW_RecordU32x2>
 8002edc:	69b8      	ldr	r0, [r7, #24]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2300      	movs	r3, #0
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	f002 f807 	bl	8004f04 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	f000 809c 	beq.w	800303e <vTaskPrioritySet+0x1be>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d90d      	bls.n	8002f2a <vTaskPrioritySet+0xaa>
                {
                    if( pxTCB != pxCurrentTCB )
 8002f0e:	4b4f      	ldr	r3, [pc, #316]	; (800304c <vTaskPrioritySet+0x1cc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d00f      	beq.n	8002f38 <vTaskPrioritySet+0xb8>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002f18:	4b4c      	ldr	r3, [pc, #304]	; (800304c <vTaskPrioritySet+0x1cc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d309      	bcc.n	8002f38 <vTaskPrioritySet+0xb8>
                        {
                            xYieldRequired = pdTRUE;
 8002f24:	2301      	movs	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	e006      	b.n	8002f38 <vTaskPrioritySet+0xb8>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002f2a:	4b48      	ldr	r3, [pc, #288]	; (800304c <vTaskPrioritySet+0x1cc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d101      	bne.n	8002f38 <vTaskPrioritySet+0xb8>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8002f34:	2301      	movs	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d102      	bne.n	8002f50 <vTaskPrioritySet+0xd0>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	649a      	str	r2, [r3, #72]	; 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	db04      	blt.n	8002f68 <vTaskPrioritySet+0xe8>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f1c3 0205 	rsb	r2, r3, #5
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	6959      	ldr	r1, [r3, #20]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4a36      	ldr	r2, [pc, #216]	; (8003050 <vTaskPrioritySet+0x1d0>)
 8002f78:	4413      	add	r3, r2
 8002f7a:	4299      	cmp	r1, r3
 8002f7c:	d154      	bne.n	8003028 <vTaskPrioritySet+0x1a8>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	3304      	adds	r3, #4
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fa48 	bl	8002418 <uxListRemove>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <vTaskPrioritySet+0x122>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002f8e:	2201      	movs	r2, #1
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <vTaskPrioritySet+0x1d4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	4a2d      	ldr	r2, [pc, #180]	; (8003054 <vTaskPrioritySet+0x1d4>)
 8002fa0:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f003 fe99 	bl	8006cdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	2201      	movs	r2, #1
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	4b28      	ldr	r3, [pc, #160]	; (8003054 <vTaskPrioritySet+0x1d4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	4a26      	ldr	r2, [pc, #152]	; (8003054 <vTaskPrioritySet+0x1d4>)
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	4923      	ldr	r1, [pc, #140]	; (8003050 <vTaskPrioritySet+0x1d0>)
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3304      	adds	r3, #4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	60da      	str	r2, [r3, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	3204      	adds	r2, #4
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	1d1a      	adds	r2, r3, #4
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	609a      	str	r2, [r3, #8]
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4a14      	ldr	r2, [pc, #80]	; (8003050 <vTaskPrioritySet+0x1d0>)
 8003000:	441a      	add	r2, r3
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	615a      	str	r2, [r3, #20]
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300a:	4911      	ldr	r1, [pc, #68]	; (8003050 <vTaskPrioritySet+0x1d0>)
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1c59      	adds	r1, r3, #1
 800301a:	480d      	ldr	r0, [pc, #52]	; (8003050 <vTaskPrioritySet+0x1d0>)
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4403      	add	r3, r0
 8003026:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <vTaskPrioritySet+0x1be>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <vTaskPrioritySet+0x1d8>)
 8003030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 800303e:	f001 fb81 	bl	8004744 <vPortExitCritical>
    }
 8003042:	bf00      	nop
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000130 	.word	0x20000130
 8003050:	20000134 	.word	0x20000134
 8003054:	20000210 	.word	0x20000210
 8003058:	e000ed04 	.word	0xe000ed04

0800305c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003062:	4b27      	ldr	r3, [pc, #156]	; (8003100 <vTaskStartScheduler+0xa4>)
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	2300      	movs	r3, #0
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	2300      	movs	r3, #0
 800306c:	2282      	movs	r2, #130	; 0x82
 800306e:	4925      	ldr	r1, [pc, #148]	; (8003104 <vTaskStartScheduler+0xa8>)
 8003070:	4825      	ldr	r0, [pc, #148]	; (8003108 <vTaskStartScheduler+0xac>)
 8003072:	f7ff fd2b 	bl	8002acc <xTaskCreate>
 8003076:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d102      	bne.n	8003084 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800307e:	f000 ff03 	bl	8003e88 <xTimerCreateTimerTask>
 8003082:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d124      	bne.n	80030d4 <vTaskStartScheduler+0x78>
        __asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	60bb      	str	r3, [r7, #8]
    }
 800309c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800309e:	4b1b      	ldr	r3, [pc, #108]	; (800310c <vTaskStartScheduler+0xb0>)
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295
 80030a4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80030a6:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <vTaskStartScheduler+0xb4>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <vTaskStartScheduler+0xb8>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <vTaskStartScheduler+0xbc>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <vTaskStartScheduler+0xa4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d102      	bne.n	80030c4 <vTaskStartScheduler+0x68>
 80030be:	f003 fd6d 	bl	8006b9c <SEGGER_SYSVIEW_OnIdle>
 80030c2:	e004      	b.n	80030ce <vTaskStartScheduler+0x72>
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <vTaskStartScheduler+0xbc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 fdc5 	bl	8006c58 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80030ce:	f001 f9e9 	bl	80044a4 <xPortStartScheduler>
 80030d2:	e00e      	b.n	80030f2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030da:	d10a      	bne.n	80030f2 <vTaskStartScheduler+0x96>
        __asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	607b      	str	r3, [r7, #4]
    }
 80030ee:	bf00      	nop
 80030f0:	e7fe      	b.n	80030f0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80030f2:	4b0a      	ldr	r3, [pc, #40]	; (800311c <vTaskStartScheduler+0xc0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	2000022c 	.word	0x2000022c
 8003104:	080079f4 	.word	0x080079f4
 8003108:	08003bc9 	.word	0x08003bc9
 800310c:	20000228 	.word	0x20000228
 8003110:	20000214 	.word	0x20000214
 8003114:	2000020c 	.word	0x2000020c
 8003118:	20000130 	.word	0x20000130
 800311c:	2000000c 	.word	0x2000000c

08003120 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <vTaskSuspendAll+0x18>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3301      	adds	r3, #1
 800312a:	4a03      	ldr	r2, [pc, #12]	; (8003138 <vTaskSuspendAll+0x18>)
 800312c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800312e:	bf00      	nop
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	20000230 	.word	0x20000230

0800313c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003146:	2300      	movs	r3, #0
 8003148:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800314a:	4b73      	ldr	r3, [pc, #460]	; (8003318 <xTaskResumeAll+0x1dc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10a      	bne.n	8003168 <xTaskResumeAll+0x2c>
        __asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	607b      	str	r3, [r7, #4]
    }
 8003164:	bf00      	nop
 8003166:	e7fe      	b.n	8003166 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003168:	f001 fabc 	bl	80046e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800316c:	4b6a      	ldr	r3, [pc, #424]	; (8003318 <xTaskResumeAll+0x1dc>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3b01      	subs	r3, #1
 8003172:	4a69      	ldr	r2, [pc, #420]	; (8003318 <xTaskResumeAll+0x1dc>)
 8003174:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003176:	4b68      	ldr	r3, [pc, #416]	; (8003318 <xTaskResumeAll+0x1dc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 80c4 	bne.w	8003308 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003180:	4b66      	ldr	r3, [pc, #408]	; (800331c <xTaskResumeAll+0x1e0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80bf 	beq.w	8003308 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800318a:	e08e      	b.n	80032aa <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800318c:	4b64      	ldr	r3, [pc, #400]	; (8003320 <xTaskResumeAll+0x1e4>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	6a12      	ldr	r2, [r2, #32]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	69d2      	ldr	r2, [r2, #28]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3318      	adds	r3, #24
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d103      	bne.n	80031c2 <xTaskResumeAll+0x86>
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	6a1a      	ldr	r2, [r3, #32]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	2200      	movs	r2, #0
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	1e5a      	subs	r2, r3, #1
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	68d2      	ldr	r2, [r2, #12]
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	6892      	ldr	r2, [r2, #8]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	3304      	adds	r3, #4
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d103      	bne.n	8003200 <xTaskResumeAll+0xc4>
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2200      	movs	r2, #0
 8003204:	615a      	str	r2, [r3, #20]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	1e5a      	subs	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	4618      	mov	r0, r3
 8003214:	f003 fd62 	bl	8006cdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	2201      	movs	r2, #1
 800321e:	409a      	lsls	r2, r3
 8003220:	4b40      	ldr	r3, [pc, #256]	; (8003324 <xTaskResumeAll+0x1e8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4313      	orrs	r3, r2
 8003226:	4a3f      	ldr	r2, [pc, #252]	; (8003324 <xTaskResumeAll+0x1e8>)
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322e:	493e      	ldr	r1, [pc, #248]	; (8003328 <xTaskResumeAll+0x1ec>)
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	3304      	adds	r3, #4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	609a      	str	r2, [r3, #8]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	3204      	adds	r2, #4
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4a2e      	ldr	r2, [pc, #184]	; (8003328 <xTaskResumeAll+0x1ec>)
 800326e:	441a      	add	r2, r3
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	615a      	str	r2, [r3, #20]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	492b      	ldr	r1, [pc, #172]	; (8003328 <xTaskResumeAll+0x1ec>)
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	1c59      	adds	r1, r3, #1
 8003288:	4827      	ldr	r0, [pc, #156]	; (8003328 <xTaskResumeAll+0x1ec>)
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4403      	add	r3, r0
 8003294:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	4b24      	ldr	r3, [pc, #144]	; (800332c <xTaskResumeAll+0x1f0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d302      	bcc.n	80032aa <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80032a4:	4b22      	ldr	r3, [pc, #136]	; (8003330 <xTaskResumeAll+0x1f4>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <xTaskResumeAll+0x1e4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f47f af6c 	bne.w	800318c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80032ba:	f000 fd1b 	bl	8003cf4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032be:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <xTaskResumeAll+0x1f8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d010      	beq.n	80032ec <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80032ca:	f000 f92d 	bl	8003528 <xTaskIncrementTick>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80032d4:	4b16      	ldr	r3, [pc, #88]	; (8003330 <xTaskResumeAll+0x1f4>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3b01      	subs	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f1      	bne.n	80032ca <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80032e6:	4b13      	ldr	r3, [pc, #76]	; (8003334 <xTaskResumeAll+0x1f8>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80032ec:	4b10      	ldr	r3, [pc, #64]	; (8003330 <xTaskResumeAll+0x1f4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80032f4:	2301      	movs	r3, #1
 80032f6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <xTaskResumeAll+0x1fc>)
 80032fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003308:	f001 fa1c 	bl	8004744 <vPortExitCritical>

    return xAlreadyYielded;
 800330c:	69bb      	ldr	r3, [r7, #24]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000230 	.word	0x20000230
 800331c:	20000208 	.word	0x20000208
 8003320:	200001c8 	.word	0x200001c8
 8003324:	20000210 	.word	0x20000210
 8003328:	20000134 	.word	0x20000134
 800332c:	20000130 	.word	0x20000130
 8003330:	2000021c 	.word	0x2000021c
 8003334:	20000218 	.word	0x20000218
 8003338:	e000ed04 	.word	0xe000ed04

0800333c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <xTaskGetTickCount+0x1c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003348:	687b      	ldr	r3, [r7, #4]
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	2000020c 	.word	0x2000020c

0800335c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003362:	f001 faab 	bl	80048bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800336a:	4b04      	ldr	r3, [pc, #16]	; (800337c <xTaskGetTickCountFromISR+0x20>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003370:	683b      	ldr	r3, [r7, #0]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	2000020c 	.word	0x2000020c

08003380 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8003380:	b480      	push	{r7}
 8003382:	b08b      	sub	sp, #44	; 0x2c
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB;
        TCB_t * pxFirstTCB;
        TCB_t * pxReturn = NULL;
 800338a:	2300      	movs	r3, #0
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d05b      	beq.n	800344e <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	3308      	adds	r3, #8
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d104      	bne.n	80033ba <prvSearchForNameWithinSingleList+0x3a>
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	605a      	str	r2, [r3, #4]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	3308      	adds	r3, #8
 80033d8:	429a      	cmp	r2, r3
 80033da:	d104      	bne.n	80033e6 <prvSearchForNameWithinSingleList+0x66>
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033f2:	2300      	movs	r3, #0
 80033f4:	623b      	str	r3, [r7, #32]
 80033f6:	e01c      	b.n	8003432 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	4413      	add	r3, r2
 80033fe:	3334      	adds	r3, #52	; 0x34
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	4413      	add	r3, r2
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	7afa      	ldrb	r2, [r7, #11]
 800340e:	429a      	cmp	r2, r3
 8003410:	d002      	beq.n	8003418 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 8003412:	2301      	movs	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	e006      	b.n	8003426 <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8003418:	7afb      	ldrb	r3, [r7, #11]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d103      	bne.n	8003426 <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 8003422:	2301      	movs	r3, #1
 8003424:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	3301      	adds	r3, #1
 8003430:	623b      	str	r3, [r7, #32]
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	2b09      	cmp	r3, #9
 8003436:	d9df      	bls.n	80033f8 <prvSearchForNameWithinSingleList+0x78>
 8003438:	e000      	b.n	800343c <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 800343a:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d104      	bne.n	800344c <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	429a      	cmp	r2, r3
 8003448:	d1bb      	bne.n	80033c2 <prvSearchForNameWithinSingleList+0x42>
 800344a:	e000      	b.n	800344e <prvSearchForNameWithinSingleList+0xce>
                    break;
 800344c:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003450:	4618      	mov	r0, r3
 8003452:	372c      	adds	r7, #44	; 0x2c
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8003464:	2305      	movs	r3, #5
 8003466:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7fc fefb 	bl	8000264 <strlen>
 800346e:	4603      	mov	r3, r0
 8003470:	2b09      	cmp	r3, #9
 8003472:	d90a      	bls.n	800348a <xTaskGetHandle+0x2e>
        __asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	60fb      	str	r3, [r7, #12]
    }
 8003486:	bf00      	nop
 8003488:	e7fe      	b.n	8003488 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 800348a:	f7ff fe49 	bl	8003120 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	3b01      	subs	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <xTaskGetHandle+0xb8>)
 80034a0:	4413      	add	r3, r2
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff6b 	bl	8003380 <prvSearchForNameWithinSingleList>
 80034aa:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1ea      	bne.n	800348e <xTaskGetHandle+0x32>
 80034b8:	e000      	b.n	80034bc <xTaskGetHandle+0x60>
                    break;
 80034ba:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 80034c2:	4b15      	ldr	r3, [pc, #84]	; (8003518 <xTaskGetHandle+0xbc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff59 	bl	8003380 <prvSearchForNameWithinSingleList>
 80034ce:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <xTaskGetHandle+0xc0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff4f 	bl	8003380 <prvSearchForNameWithinSingleList>
 80034e2:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
            {
                if( pxTCB == NULL )
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d104      	bne.n	80034f4 <xTaskGetHandle+0x98>
                {
                    /* Search the suspended list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	480c      	ldr	r0, [pc, #48]	; (8003520 <xTaskGetHandle+0xc4>)
 80034ee:	f7ff ff47 	bl	8003380 <prvSearchForNameWithinSingleList>
 80034f2:	6138      	str	r0, [r7, #16]
            }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
            {
                if( pxTCB == NULL )
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <xTaskGetHandle+0xa8>
                {
                    /* Search the deleted list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4809      	ldr	r0, [pc, #36]	; (8003524 <xTaskGetHandle+0xc8>)
 80034fe:	f7ff ff3f 	bl	8003380 <prvSearchForNameWithinSingleList>
 8003502:	6138      	str	r0, [r7, #16]
                }
            }
            #endif
        }
        ( void ) xTaskResumeAll();
 8003504:	f7ff fe1a 	bl	800313c <xTaskResumeAll>

        return pxTCB;
 8003508:	693b      	ldr	r3, [r7, #16]
    }
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000134 	.word	0x20000134
 8003518:	200001c0 	.word	0x200001c0
 800351c:	200001c4 	.word	0x200001c4
 8003520:	200001f4 	.word	0x200001f4
 8003524:	200001dc 	.word	0x200001dc

08003528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003532:	4b7f      	ldr	r3, [pc, #508]	; (8003730 <xTaskIncrementTick+0x208>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 80f0 	bne.w	800371c <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800353c:	4b7d      	ldr	r3, [pc, #500]	; (8003734 <xTaskIncrementTick+0x20c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003544:	4a7b      	ldr	r2, [pc, #492]	; (8003734 <xTaskIncrementTick+0x20c>)
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d120      	bne.n	8003592 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003550:	4b79      	ldr	r3, [pc, #484]	; (8003738 <xTaskIncrementTick+0x210>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <xTaskIncrementTick+0x48>
        __asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	607b      	str	r3, [r7, #4]
    }
 800356c:	bf00      	nop
 800356e:	e7fe      	b.n	800356e <xTaskIncrementTick+0x46>
 8003570:	4b71      	ldr	r3, [pc, #452]	; (8003738 <xTaskIncrementTick+0x210>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	4b71      	ldr	r3, [pc, #452]	; (800373c <xTaskIncrementTick+0x214>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6f      	ldr	r2, [pc, #444]	; (8003738 <xTaskIncrementTick+0x210>)
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4a6f      	ldr	r2, [pc, #444]	; (800373c <xTaskIncrementTick+0x214>)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b6e      	ldr	r3, [pc, #440]	; (8003740 <xTaskIncrementTick+0x218>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3301      	adds	r3, #1
 800358a:	4a6d      	ldr	r2, [pc, #436]	; (8003740 <xTaskIncrementTick+0x218>)
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	f000 fbb1 	bl	8003cf4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003592:	4b6c      	ldr	r3, [pc, #432]	; (8003744 <xTaskIncrementTick+0x21c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a3a      	ldr	r2, [r7, #32]
 8003598:	429a      	cmp	r2, r3
 800359a:	f0c0 80aa 	bcc.w	80036f2 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800359e:	4b66      	ldr	r3, [pc, #408]	; (8003738 <xTaskIncrementTick+0x210>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d104      	bne.n	80035b2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a8:	4b66      	ldr	r3, [pc, #408]	; (8003744 <xTaskIncrementTick+0x21c>)
 80035aa:	f04f 32ff 	mov.w	r2, #4294967295
 80035ae:	601a      	str	r2, [r3, #0]
                    break;
 80035b0:	e09f      	b.n	80036f2 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035b2:	4b61      	ldr	r3, [pc, #388]	; (8003738 <xTaskIncrementTick+0x210>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80035c2:	6a3a      	ldr	r2, [r7, #32]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d203      	bcs.n	80035d2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80035ca:	4a5e      	ldr	r2, [pc, #376]	; (8003744 <xTaskIncrementTick+0x21c>)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80035d0:	e08f      	b.n	80036f2 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	68d2      	ldr	r2, [r2, #12]
 80035e0:	609a      	str	r2, [r3, #8]
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	6892      	ldr	r2, [r2, #8]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	3304      	adds	r3, #4
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d103      	bne.n	8003600 <xTaskIncrementTick+0xd8>
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	2200      	movs	r2, #0
 8003604:	615a      	str	r2, [r3, #20]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1e5a      	subs	r2, r3, #1
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01e      	beq.n	8003656 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	6a12      	ldr	r2, [r2, #32]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	69d2      	ldr	r2, [r2, #28]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	3318      	adds	r3, #24
 800363a:	429a      	cmp	r2, r3
 800363c:	d103      	bne.n	8003646 <xTaskIncrementTick+0x11e>
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	6a1a      	ldr	r2, [r3, #32]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2200      	movs	r2, #0
 800364a:	629a      	str	r2, [r3, #40]	; 0x28
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	1e5a      	subs	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	4618      	mov	r0, r3
 800365a:	f003 fb3f 	bl	8006cdc <SEGGER_SYSVIEW_OnTaskStartReady>
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	2201      	movs	r2, #1
 8003664:	409a      	lsls	r2, r3
 8003666:	4b38      	ldr	r3, [pc, #224]	; (8003748 <xTaskIncrementTick+0x220>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4313      	orrs	r3, r2
 800366c:	4a36      	ldr	r2, [pc, #216]	; (8003748 <xTaskIncrementTick+0x220>)
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003674:	4935      	ldr	r1, [pc, #212]	; (800374c <xTaskIncrementTick+0x224>)
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	3304      	adds	r3, #4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	60da      	str	r2, [r3, #12]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	3204      	adds	r2, #4
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	1d1a      	adds	r2, r3, #4
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	609a      	str	r2, [r3, #8]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4a26      	ldr	r2, [pc, #152]	; (800374c <xTaskIncrementTick+0x224>)
 80036b4:	441a      	add	r2, r3
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	615a      	str	r2, [r3, #20]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036be:	4923      	ldr	r1, [pc, #140]	; (800374c <xTaskIncrementTick+0x224>)
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	1c59      	adds	r1, r3, #1
 80036ce:	481f      	ldr	r0, [pc, #124]	; (800374c <xTaskIncrementTick+0x224>)
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4403      	add	r3, r0
 80036da:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <xTaskIncrementTick+0x228>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	429a      	cmp	r2, r3
 80036e8:	f67f af59 	bls.w	800359e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80036ec:	2301      	movs	r3, #1
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036f0:	e755      	b.n	800359e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036f2:	4b17      	ldr	r3, [pc, #92]	; (8003750 <xTaskIncrementTick+0x228>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f8:	4914      	ldr	r1, [pc, #80]	; (800374c <xTaskIncrementTick+0x224>)
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d901      	bls.n	800370e <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800370a:	2301      	movs	r3, #1
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800370e:	4b11      	ldr	r3, [pc, #68]	; (8003754 <xTaskIncrementTick+0x22c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003716:	2301      	movs	r3, #1
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	e004      	b.n	8003726 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800371c:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <xTaskIncrementTick+0x230>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	4a0d      	ldr	r2, [pc, #52]	; (8003758 <xTaskIncrementTick+0x230>)
 8003724:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003728:	4618      	mov	r0, r3
 800372a:	3728      	adds	r7, #40	; 0x28
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000230 	.word	0x20000230
 8003734:	2000020c 	.word	0x2000020c
 8003738:	200001c0 	.word	0x200001c0
 800373c:	200001c4 	.word	0x200001c4
 8003740:	20000220 	.word	0x20000220
 8003744:	20000228 	.word	0x20000228
 8003748:	20000210 	.word	0x20000210
 800374c:	20000134 	.word	0x20000134
 8003750:	20000130 	.word	0x20000130
 8003754:	2000021c 	.word	0x2000021c
 8003758:	20000218 	.word	0x20000218

0800375c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003762:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <vTaskSwitchContext+0xbc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800376a:	4b2c      	ldr	r3, [pc, #176]	; (800381c <vTaskSwitchContext+0xc0>)
 800376c:	2201      	movs	r2, #1
 800376e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003770:	e04d      	b.n	800380e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003772:	4b2a      	ldr	r3, [pc, #168]	; (800381c <vTaskSwitchContext+0xc0>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003778:	4b29      	ldr	r3, [pc, #164]	; (8003820 <vTaskSwitchContext+0xc4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	fab3 f383 	clz	r3, r3
 8003784:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003786:	7afb      	ldrb	r3, [r7, #11]
 8003788:	f1c3 031f 	rsb	r3, r3, #31
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	4925      	ldr	r1, [pc, #148]	; (8003824 <vTaskSwitchContext+0xc8>)
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10a      	bne.n	80037b8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	607b      	str	r3, [r7, #4]
    }
 80037b4:	bf00      	nop
 80037b6:	e7fe      	b.n	80037b6 <vTaskSwitchContext+0x5a>
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4a18      	ldr	r2, [pc, #96]	; (8003824 <vTaskSwitchContext+0xc8>)
 80037c4:	4413      	add	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	3308      	adds	r3, #8
 80037da:	429a      	cmp	r2, r3
 80037dc:	d104      	bne.n	80037e8 <vTaskSwitchContext+0x8c>
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	605a      	str	r2, [r3, #4]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <vTaskSwitchContext+0xcc>)
 80037f0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80037f2:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <vTaskSwitchContext+0xcc>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <vTaskSwitchContext+0xd0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d102      	bne.n	8003804 <vTaskSwitchContext+0xa8>
 80037fe:	f003 f9cd 	bl	8006b9c <SEGGER_SYSVIEW_OnIdle>
}
 8003802:	e004      	b.n	800380e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003804:	4b08      	ldr	r3, [pc, #32]	; (8003828 <vTaskSwitchContext+0xcc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f003 fa25 	bl	8006c58 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800380e:	bf00      	nop
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000230 	.word	0x20000230
 800381c:	2000021c 	.word	0x2000021c
 8003820:	20000210 	.word	0x20000210
 8003824:	20000134 	.word	0x20000134
 8003828:	20000130 	.word	0x20000130
 800382c:	2000022c 	.word	0x2000022c

08003830 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	60fb      	str	r3, [r7, #12]
    }
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <vTaskPlaceOnEventList+0x44>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3318      	adds	r3, #24
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fe fda1 	bl	80023a6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003864:	2101      	movs	r1, #1
 8003866:	6838      	ldr	r0, [r7, #0]
 8003868:	f000 fa8e 	bl	8003d88 <prvAddCurrentTaskToDelayedList>
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000130 	.word	0x20000130

08003878 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	613b      	str	r3, [r7, #16]
    }
 800389c:	bf00      	nop
 800389e:	e7fe      	b.n	800389e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	4b17      	ldr	r3, [pc, #92]	; (8003904 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	61da      	str	r2, [r3, #28]
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	6892      	ldr	r2, [r2, #8]
 80038b6:	621a      	str	r2, [r3, #32]
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	3218      	adds	r2, #24
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f103 0218 	add.w	r2, r3, #24
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80038e8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ec:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80038ee:	2024      	movs	r0, #36	; 0x24
 80038f0:	f002 fc54 	bl	800619c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	68b8      	ldr	r0, [r7, #8]
 80038f8:	f000 fa46 	bl	8003d88 <prvAddCurrentTaskToDelayedList>
    }
 80038fc:	bf00      	nop
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000130 	.word	0x20000130

08003908 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	; 0x28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	60fb      	str	r3, [r7, #12]
    }
 8003930:	bf00      	nop
 8003932:	e7fe      	b.n	8003932 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	6a3a      	ldr	r2, [r7, #32]
 8003940:	6a12      	ldr	r2, [r2, #32]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	6a3a      	ldr	r2, [r7, #32]
 800394a:	69d2      	ldr	r2, [r2, #28]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	3318      	adds	r3, #24
 8003956:	429a      	cmp	r2, r3
 8003958:	d103      	bne.n	8003962 <xTaskRemoveFromEventList+0x5a>
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	6a1a      	ldr	r2, [r3, #32]
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	2200      	movs	r2, #0
 8003966:	629a      	str	r2, [r3, #40]	; 0x28
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	1e5a      	subs	r2, r3, #1
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003972:	4b4b      	ldr	r3, [pc, #300]	; (8003aa0 <xTaskRemoveFromEventList+0x198>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d162      	bne.n	8003a40 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	6a3a      	ldr	r2, [r7, #32]
 8003986:	68d2      	ldr	r2, [r2, #12]
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	6a3a      	ldr	r2, [r7, #32]
 8003990:	6892      	ldr	r2, [r2, #8]
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	3304      	adds	r3, #4
 800399c:	429a      	cmp	r2, r3
 800399e:	d103      	bne.n	80039a8 <xTaskRemoveFromEventList+0xa0>
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	605a      	str	r2, [r3, #4]
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	2200      	movs	r2, #0
 80039ac:	615a      	str	r2, [r3, #20]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	1e5a      	subs	r2, r3, #1
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f003 f98e 	bl	8006cdc <SEGGER_SYSVIEW_OnTaskStartReady>
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	2201      	movs	r2, #1
 80039c6:	409a      	lsls	r2, r3
 80039c8:	4b36      	ldr	r3, [pc, #216]	; (8003aa4 <xTaskRemoveFromEventList+0x19c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	4a35      	ldr	r2, [pc, #212]	; (8003aa4 <xTaskRemoveFromEventList+0x19c>)
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d6:	4934      	ldr	r1, [pc, #208]	; (8003aa8 <xTaskRemoveFromEventList+0x1a0>)
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	3304      	adds	r3, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	6a3a      	ldr	r2, [r7, #32]
 80039fc:	3204      	adds	r2, #4
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	1d1a      	adds	r2, r3, #4
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4a24      	ldr	r2, [pc, #144]	; (8003aa8 <xTaskRemoveFromEventList+0x1a0>)
 8003a16:	441a      	add	r2, r3
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	615a      	str	r2, [r3, #20]
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a20:	4921      	ldr	r1, [pc, #132]	; (8003aa8 <xTaskRemoveFromEventList+0x1a0>)
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	1c59      	adds	r1, r3, #1
 8003a30:	481d      	ldr	r0, [pc, #116]	; (8003aa8 <xTaskRemoveFromEventList+0x1a0>)
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4403      	add	r3, r0
 8003a3c:	6019      	str	r1, [r3, #0]
 8003a3e:	e01b      	b.n	8003a78 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <xTaskRemoveFromEventList+0x1a4>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	61da      	str	r2, [r3, #28]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	621a      	str	r2, [r3, #32]
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	3218      	adds	r2, #24
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	f103 0218 	add.w	r2, r3, #24
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	4a10      	ldr	r2, [pc, #64]	; (8003aac <xTaskRemoveFromEventList+0x1a4>)
 8003a6c:	629a      	str	r2, [r3, #40]	; 0x28
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <xTaskRemoveFromEventList+0x1a4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <xTaskRemoveFromEventList+0x1a4>)
 8003a76:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <xTaskRemoveFromEventList+0x1a8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d905      	bls.n	8003a92 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a86:	2301      	movs	r3, #1
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <xTaskRemoveFromEventList+0x1ac>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	e001      	b.n	8003a96 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3728      	adds	r7, #40	; 0x28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000230 	.word	0x20000230
 8003aa4:	20000210 	.word	0x20000210
 8003aa8:	20000134 	.word	0x20000134
 8003aac:	200001c8 	.word	0x200001c8
 8003ab0:	20000130 	.word	0x20000130
 8003ab4:	2000021c 	.word	0x2000021c

08003ab8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <vTaskInternalSetTimeOutState+0x24>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <vTaskInternalSetTimeOutState+0x28>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	605a      	str	r2, [r3, #4]
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	20000220 	.word	0x20000220
 8003ae0:	2000020c 	.word	0x2000020c

08003ae4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	613b      	str	r3, [r7, #16]
    }
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	60fb      	str	r3, [r7, #12]
    }
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003b26:	f000 fddd 	bl	80046e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <xTaskCheckForTimeOut+0xc4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b42:	d102      	bne.n	8003b4a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	e026      	b.n	8003b98 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4b17      	ldr	r3, [pc, #92]	; (8003bac <xTaskCheckForTimeOut+0xc8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d00a      	beq.n	8003b6c <xTaskCheckForTimeOut+0x88>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d305      	bcc.n	8003b6c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b60:	2301      	movs	r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e015      	b.n	8003b98 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d20b      	bcs.n	8003b8e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	1ad2      	subs	r2, r2, r3
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff ff98 	bl	8003ab8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	e004      	b.n	8003b98 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b94:	2301      	movs	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b98:	f000 fdd4 	bl	8004744 <vPortExitCritical>

    return xReturn;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	2000020c 	.word	0x2000020c
 8003bac:	20000220 	.word	0x20000220

08003bb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <vTaskMissedYield+0x14>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	2000021c 	.word	0x2000021c

08003bc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003bd0:	f000 f852 	bl	8003c78 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <prvIdleTask+0x28>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d9f9      	bls.n	8003bd0 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <prvIdleTask+0x2c>)
 8003bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003bec:	e7f0      	b.n	8003bd0 <prvIdleTask+0x8>
 8003bee:	bf00      	nop
 8003bf0:	20000134 	.word	0x20000134
 8003bf4:	e000ed04 	.word	0xe000ed04

08003bf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	e00c      	b.n	8003c1e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <prvInitialiseTaskLists+0x60>)
 8003c10:	4413      	add	r3, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fb9a 	bl	800234c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	607b      	str	r3, [r7, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d9ef      	bls.n	8003c04 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c24:	480d      	ldr	r0, [pc, #52]	; (8003c5c <prvInitialiseTaskLists+0x64>)
 8003c26:	f7fe fb91 	bl	800234c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c2a:	480d      	ldr	r0, [pc, #52]	; (8003c60 <prvInitialiseTaskLists+0x68>)
 8003c2c:	f7fe fb8e 	bl	800234c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c30:	480c      	ldr	r0, [pc, #48]	; (8003c64 <prvInitialiseTaskLists+0x6c>)
 8003c32:	f7fe fb8b 	bl	800234c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003c36:	480c      	ldr	r0, [pc, #48]	; (8003c68 <prvInitialiseTaskLists+0x70>)
 8003c38:	f7fe fb88 	bl	800234c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003c3c:	480b      	ldr	r0, [pc, #44]	; (8003c6c <prvInitialiseTaskLists+0x74>)
 8003c3e:	f7fe fb85 	bl	800234c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <prvInitialiseTaskLists+0x78>)
 8003c44:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <prvInitialiseTaskLists+0x64>)
 8003c46:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c48:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <prvInitialiseTaskLists+0x7c>)
 8003c4a:	4a05      	ldr	r2, [pc, #20]	; (8003c60 <prvInitialiseTaskLists+0x68>)
 8003c4c:	601a      	str	r2, [r3, #0]
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000134 	.word	0x20000134
 8003c5c:	20000198 	.word	0x20000198
 8003c60:	200001ac 	.word	0x200001ac
 8003c64:	200001c8 	.word	0x200001c8
 8003c68:	200001dc 	.word	0x200001dc
 8003c6c:	200001f4 	.word	0x200001f4
 8003c70:	200001c0 	.word	0x200001c0
 8003c74:	200001c4 	.word	0x200001c4

08003c78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c7e:	e019      	b.n	8003cb4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003c80:	f000 fd30 	bl	80046e4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c84:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <prvCheckTasksWaitingTermination+0x50>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fe fbc1 	bl	8002418 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <prvCheckTasksWaitingTermination+0x54>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	4a0b      	ldr	r2, [pc, #44]	; (8003ccc <prvCheckTasksWaitingTermination+0x54>)
 8003c9e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <prvCheckTasksWaitingTermination+0x58>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <prvCheckTasksWaitingTermination+0x58>)
 8003ca8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003caa:	f000 fd4b 	bl	8004744 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f810 	bl	8003cd4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cb4:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <prvCheckTasksWaitingTermination+0x58>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e1      	bne.n	8003c80 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003cbc:	bf00      	nop
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	200001dc 	.word	0x200001dc
 8003ccc:	20000208 	.word	0x20000208
 8003cd0:	200001f0 	.word	0x200001f0

08003cd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fee5 	bl	8004ab0 <vPortFree>
            vPortFree( pxTCB );
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fee2 	bl	8004ab0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <prvResetNextTaskUnblockTime+0x30>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d104      	bne.n	8003d0c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <prvResetNextTaskUnblockTime+0x34>)
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295
 8003d08:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d0a:	e005      	b.n	8003d18 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <prvResetNextTaskUnblockTime+0x30>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <prvResetNextTaskUnblockTime+0x34>)
 8003d16:	6013      	str	r3, [r2, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	200001c0 	.word	0x200001c0
 8003d28:	20000228 	.word	0x20000228

08003d2c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <xTaskGetCurrentTaskHandle+0x1c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003d38:	687b      	ldr	r3, [r7, #4]
    }
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000130 	.word	0x20000130

08003d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <xTaskGetSchedulerState+0x34>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	e008      	b.n	8003d72 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <xTaskGetSchedulerState+0x38>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	e001      	b.n	8003d72 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d72:	687b      	ldr	r3, [r7, #4]
    }
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	20000214 	.word	0x20000214
 8003d84:	20000230 	.word	0x20000230

08003d88 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d92:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d98:	4b35      	ldr	r3, [pc, #212]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fb3a 	bl	8002418 <uxListRemove>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003daa:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	2201      	movs	r2, #1
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43da      	mvns	r2, r3
 8003db8:	4b2e      	ldr	r3, [pc, #184]	; (8003e74 <prvAddCurrentTaskToDelayedList+0xec>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	4a2d      	ldr	r2, [pc, #180]	; (8003e74 <prvAddCurrentTaskToDelayedList+0xec>)
 8003dc0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc8:	d124      	bne.n	8003e14 <prvAddCurrentTaskToDelayedList+0x8c>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d021      	beq.n	8003e14 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dd0:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	609a      	str	r2, [r3, #8]
 8003dde:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	6892      	ldr	r2, [r2, #8]
 8003de6:	60da      	str	r2, [r3, #12]
 8003de8:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	3204      	adds	r2, #4
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	1d1a      	adds	r2, r3, #4
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	609a      	str	r2, [r3, #8]
 8003dfe:	4b1c      	ldr	r3, [pc, #112]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1d      	ldr	r2, [pc, #116]	; (8003e78 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e04:	615a      	str	r2, [r3, #20]
 8003e06:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	4a1a      	ldr	r2, [pc, #104]	; (8003e78 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e12:	e026      	b.n	8003e62 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e1c:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d209      	bcs.n	8003e40 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <prvAddCurrentTaskToDelayedList+0xf4>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f7fe fab4 	bl	80023a6 <vListInsert>
}
 8003e3e:	e010      	b.n	8003e62 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f7fe faaa 	bl	80023a6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d202      	bcs.n	8003e62 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003e5c:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6013      	str	r3, [r2, #0]
}
 8003e62:	bf00      	nop
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	2000020c 	.word	0x2000020c
 8003e70:	20000130 	.word	0x20000130
 8003e74:	20000210 	.word	0x20000210
 8003e78:	200001f4 	.word	0x200001f4
 8003e7c:	200001c4 	.word	0x200001c4
 8003e80:	200001c0 	.word	0x200001c0
 8003e84:	20000228 	.word	0x20000228

08003e88 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e92:	f000 fa47 	bl	8004324 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <xTimerCreateTimerTask+0x54>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003e9e:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <xTimerCreateTimerTask+0x58>)
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003eac:	490d      	ldr	r1, [pc, #52]	; (8003ee4 <xTimerCreateTimerTask+0x5c>)
 8003eae:	480e      	ldr	r0, [pc, #56]	; (8003ee8 <xTimerCreateTimerTask+0x60>)
 8003eb0:	f7fe fe0c 	bl	8002acc <xTaskCreate>
 8003eb4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	603b      	str	r3, [r7, #0]
    }
 8003ece:	bf00      	nop
 8003ed0:	e7fe      	b.n	8003ed0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003ed2:	687b      	ldr	r3, [r7, #4]
    }
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000264 	.word	0x20000264
 8003ee0:	20000268 	.word	0x20000268
 8003ee4:	080079fc 	.word	0x080079fc
 8003ee8:	08003f91 	.word	0x08003f91

08003eec <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ef8:	e008      	b.n	8003f0c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4413      	add	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	699a      	ldr	r2, [r3, #24]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	18d1      	adds	r1, r2, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f8dd 	bl	80040d8 <prvInsertTimerInActiveList>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ea      	bne.n	8003efa <prvReloadTimer+0xe>
        }
    }
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f3a:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <prvProcessExpiredTimer+0x5c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe fa65 	bl	8002418 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7ff ffc3 	bl	8003eec <prvReloadTimer>
 8003f66:	e008      	b.n	8003f7a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	4798      	blx	r3
    }
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	2000025c 	.word	0x2000025c

08003f90 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f98:	f107 0308 	add.w	r3, r7, #8
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 f857 	bl	8004050 <prvGetNextExpireTime>
 8003fa2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f803 	bl	8003fb4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003fae:	f000 f8d5 	bl	800415c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fb2:	e7f1      	b.n	8003f98 <prvTimerTask+0x8>

08003fb4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003fbe:	f7ff f8af 	bl	8003120 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fc2:	f107 0308 	add.w	r3, r7, #8
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f866 	bl	8004098 <prvSampleTimeNow>
 8003fcc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d130      	bne.n	8004036 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <prvProcessTimerOrBlockTask+0x3c>
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d806      	bhi.n	8003ff0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003fe2:	f7ff f8ab 	bl	800313c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003fe6:	68f9      	ldr	r1, [r7, #12]
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ffa1 	bl	8003f30 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003fee:	e024      	b.n	800403a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ff6:	4b13      	ldr	r3, [pc, #76]	; (8004044 <prvProcessTimerOrBlockTask+0x90>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <prvProcessTimerOrBlockTask+0x50>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <prvProcessTimerOrBlockTask+0x52>
 8004004:	2300      	movs	r3, #0
 8004006:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <prvProcessTimerOrBlockTask+0x94>)
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	4619      	mov	r1, r3
 8004016:	f7fe fd25 	bl	8002a64 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800401a:	f7ff f88f 	bl	800313c <xTaskResumeAll>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004024:	4b09      	ldr	r3, [pc, #36]	; (800404c <prvProcessTimerOrBlockTask+0x98>)
 8004026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	f3bf 8f6f 	isb	sy
    }
 8004034:	e001      	b.n	800403a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004036:	f7ff f881 	bl	800313c <xTaskResumeAll>
    }
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000260 	.word	0x20000260
 8004048:	20000264 	.word	0x20000264
 800404c:	e000ed04 	.word	0xe000ed04

08004050 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004058:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <prvGetNextExpireTime+0x44>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <prvGetNextExpireTime+0x16>
 8004062:	2201      	movs	r2, #1
 8004064:	e000      	b.n	8004068 <prvGetNextExpireTime+0x18>
 8004066:	2200      	movs	r2, #0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d105      	bne.n	8004080 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <prvGetNextExpireTime+0x44>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	e001      	b.n	8004084 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004084:	68fb      	ldr	r3, [r7, #12]
    }
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	2000025c 	.word	0x2000025c

08004098 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80040a0:	f7ff f94c 	bl	800333c <xTaskGetTickCount>
 80040a4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <prvSampleTimeNow+0x3c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d205      	bcs.n	80040bc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80040b0:	f000 f912 	bl	80042d8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e002      	b.n	80040c2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80040c2:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <prvSampleTimeNow+0x3c>)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80040c8:	68fb      	ldr	r3, [r7, #12]
    }
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	2000026c 	.word	0x2000026c

080040d8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d812      	bhi.n	8004124 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	1ad2      	subs	r2, r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	429a      	cmp	r2, r3
 800410a:	d302      	bcc.n	8004112 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800410c:	2301      	movs	r3, #1
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e01b      	b.n	800414a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004112:	4b10      	ldr	r3, [pc, #64]	; (8004154 <prvInsertTimerInActiveList+0x7c>)
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3304      	adds	r3, #4
 800411a:	4619      	mov	r1, r3
 800411c:	4610      	mov	r0, r2
 800411e:	f7fe f942 	bl	80023a6 <vListInsert>
 8004122:	e012      	b.n	800414a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d206      	bcs.n	800413a <prvInsertTimerInActiveList+0x62>
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d302      	bcc.n	800413a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	e007      	b.n	800414a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <prvInsertTimerInActiveList+0x80>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3304      	adds	r3, #4
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f7fe f92e 	bl	80023a6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800414a:	697b      	ldr	r3, [r7, #20]
    }
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000260 	.word	0x20000260
 8004158:	2000025c 	.word	0x2000025c

0800415c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004162:	e0a6      	b.n	80042b2 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f2c0 80a2 	blt.w	80042b0 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	3304      	adds	r3, #4
 800417c:	4618      	mov	r0, r3
 800417e:	f7fe f94b 	bl	8002418 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ff87 	bl	8004098 <prvSampleTimeNow>
 800418a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	3b01      	subs	r3, #1
 8004190:	2b08      	cmp	r3, #8
 8004192:	f200 808e 	bhi.w	80042b2 <prvProcessReceivedCommands+0x156>
 8004196:	a201      	add	r2, pc, #4	; (adr r2, 800419c <prvProcessReceivedCommands+0x40>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041c1 	.word	0x080041c1
 80041a0:	080041c1 	.word	0x080041c1
 80041a4:	08004229 	.word	0x08004229
 80041a8:	0800423d 	.word	0x0800423d
 80041ac:	08004287 	.word	0x08004287
 80041b0:	080041c1 	.word	0x080041c1
 80041b4:	080041c1 	.word	0x080041c1
 80041b8:	08004229 	.word	0x08004229
 80041bc:	0800423d 	.word	0x0800423d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	18d1      	adds	r1, r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	69f8      	ldr	r0, [r7, #28]
 80041e0:	f7ff ff7a 	bl	80040d8 <prvInsertTimerInActiveList>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d063      	beq.n	80042b2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d009      	beq.n	800420c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	4413      	add	r3, r2
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4619      	mov	r1, r3
 8004204:	69f8      	ldr	r0, [r7, #28]
 8004206:	f7ff fe71 	bl	8003eec <prvReloadTimer>
 800420a:	e008      	b.n	800421e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	b2da      	uxtb	r2, r3
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	69f8      	ldr	r0, [r7, #28]
 8004224:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004226:	e044      	b.n	80042b2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800422e:	f023 0301 	bic.w	r3, r3, #1
 8004232:	b2da      	uxtb	r2, r3
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800423a:	e03a      	b.n	80042b2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	b2da      	uxtb	r2, r3
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	617b      	str	r3, [r7, #20]
    }
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	18d1      	adds	r1, r2, r3
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	69f8      	ldr	r0, [r7, #28]
 8004280:	f7ff ff2a 	bl	80040d8 <prvInsertTimerInActiveList>
                        break;
 8004284:	e015      	b.n	80042b2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004294:	69f8      	ldr	r0, [r7, #28]
 8004296:	f000 fc0b 	bl	8004ab0 <vPortFree>
 800429a:	e00a      	b.n	80042b2 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80042ae:	e000      	b.n	80042b2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80042b0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <prvProcessReceivedCommands+0x178>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f107 0108 	add.w	r1, r7, #8
 80042ba:	2200      	movs	r2, #0
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe f9dd 	bl	800267c <xQueueReceive>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f47f af4d 	bne.w	8004164 <prvProcessReceivedCommands+0x8>
        }
    }
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000264 	.word	0x20000264

080042d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042de:	e009      	b.n	80042f4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <prvSwitchTimerLists+0x44>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80042ea:	f04f 31ff 	mov.w	r1, #4294967295
 80042ee:	6838      	ldr	r0, [r7, #0]
 80042f0:	f7ff fe1e 	bl	8003f30 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <prvSwitchTimerLists+0x44>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80042fe:	4b07      	ldr	r3, [pc, #28]	; (800431c <prvSwitchTimerLists+0x44>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <prvSwitchTimerLists+0x48>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a04      	ldr	r2, [pc, #16]	; (800431c <prvSwitchTimerLists+0x44>)
 800430a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800430c:	4a04      	ldr	r2, [pc, #16]	; (8004320 <prvSwitchTimerLists+0x48>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6013      	str	r3, [r2, #0]
    }
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	2000025c 	.word	0x2000025c
 8004320:	20000260 	.word	0x20000260

08004324 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004328:	f000 f9dc 	bl	80046e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <prvCheckForValidListAndQueue+0x54>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d11d      	bne.n	8004370 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004334:	4811      	ldr	r0, [pc, #68]	; (800437c <prvCheckForValidListAndQueue+0x58>)
 8004336:	f7fe f809 	bl	800234c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800433a:	4811      	ldr	r0, [pc, #68]	; (8004380 <prvCheckForValidListAndQueue+0x5c>)
 800433c:	f7fe f806 	bl	800234c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004340:	4b10      	ldr	r3, [pc, #64]	; (8004384 <prvCheckForValidListAndQueue+0x60>)
 8004342:	4a0e      	ldr	r2, [pc, #56]	; (800437c <prvCheckForValidListAndQueue+0x58>)
 8004344:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004346:	4b10      	ldr	r3, [pc, #64]	; (8004388 <prvCheckForValidListAndQueue+0x64>)
 8004348:	4a0d      	ldr	r2, [pc, #52]	; (8004380 <prvCheckForValidListAndQueue+0x5c>)
 800434a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800434c:	2200      	movs	r2, #0
 800434e:	210c      	movs	r1, #12
 8004350:	200a      	movs	r0, #10
 8004352:	f7fe f91b 	bl	800258c <xQueueGenericCreate>
 8004356:	4603      	mov	r3, r0
 8004358:	4a07      	ldr	r2, [pc, #28]	; (8004378 <prvCheckForValidListAndQueue+0x54>)
 800435a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <prvCheckForValidListAndQueue+0x54>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004364:	4b04      	ldr	r3, [pc, #16]	; (8004378 <prvCheckForValidListAndQueue+0x54>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4908      	ldr	r1, [pc, #32]	; (800438c <prvCheckForValidListAndQueue+0x68>)
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe fb24 	bl	80029b8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004370:	f000 f9e8 	bl	8004744 <vPortExitCritical>
    }
 8004374:	bf00      	nop
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000264 	.word	0x20000264
 800437c:	20000234 	.word	0x20000234
 8004380:	20000248 	.word	0x20000248
 8004384:	2000025c 	.word	0x2000025c
 8004388:	20000260 	.word	0x20000260
 800438c:	08007a04 	.word	0x08007a04

08004390 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3b04      	subs	r3, #4
 80043a0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3b04      	subs	r3, #4
 80043ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f023 0201 	bic.w	r2, r3, #1
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3b04      	subs	r3, #4
 80043be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80043c0:	4a0c      	ldr	r2, [pc, #48]	; (80043f4 <pxPortInitialiseStack+0x64>)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3b14      	subs	r3, #20
 80043ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3b04      	subs	r3, #4
 80043d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f06f 0202 	mvn.w	r2, #2
 80043de:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3b20      	subs	r3, #32
 80043e4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80043e6:	68fb      	ldr	r3, [r7, #12]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	080043f9 	.word	0x080043f9

080043f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <prvTaskExitError+0x54>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	d00a      	beq.n	8004422 <prvTaskExitError+0x2a>
        __asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	60fb      	str	r3, [r7, #12]
    }
 800441e:	bf00      	nop
 8004420:	e7fe      	b.n	8004420 <prvTaskExitError+0x28>
        __asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	60bb      	str	r3, [r7, #8]
    }
 8004434:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004436:	bf00      	nop
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0fc      	beq.n	8004438 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800443e:	bf00      	nop
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	20000010 	.word	0x20000010

08004450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <pxCurrentTCBConst2>)
 8004452:	6819      	ldr	r1, [r3, #0]
 8004454:	6808      	ldr	r0, [r1, #0]
 8004456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	f380 8809 	msr	PSP, r0
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8811 	msr	BASEPRI, r0
 800446a:	4770      	bx	lr
 800446c:	f3af 8000 	nop.w

08004470 <pxCurrentTCBConst2>:
 8004470:	20000130 	.word	0x20000130
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop

08004478 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004478:	4808      	ldr	r0, [pc, #32]	; (800449c <prvPortStartFirstTask+0x24>)
 800447a:	6800      	ldr	r0, [r0, #0]
 800447c:	6800      	ldr	r0, [r0, #0]
 800447e:	f380 8808 	msr	MSP, r0
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f380 8814 	msr	CONTROL, r0
 800448a:	b662      	cpsie	i
 800448c:	b661      	cpsie	f
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	df00      	svc	0
 8004498:	bf00      	nop
 800449a:	0000      	.short	0x0000
 800449c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop

080044a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044aa:	4b46      	ldr	r3, [pc, #280]	; (80045c4 <xPortStartScheduler+0x120>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a46      	ldr	r2, [pc, #280]	; (80045c8 <xPortStartScheduler+0x124>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10a      	bne.n	80044ca <xPortStartScheduler+0x26>
        __asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	613b      	str	r3, [r7, #16]
    }
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044ca:	4b3e      	ldr	r3, [pc, #248]	; (80045c4 <xPortStartScheduler+0x120>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <xPortStartScheduler+0x128>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d10a      	bne.n	80044ea <xPortStartScheduler+0x46>
        __asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	60fb      	str	r3, [r7, #12]
    }
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ea:	4b39      	ldr	r3, [pc, #228]	; (80045d0 <xPortStartScheduler+0x12c>)
 80044ec:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	22ff      	movs	r2, #255	; 0xff
 80044fa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <xPortStartScheduler+0x130>)
 8004510:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004512:	4b31      	ldr	r3, [pc, #196]	; (80045d8 <xPortStartScheduler+0x134>)
 8004514:	2207      	movs	r2, #7
 8004516:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004518:	e009      	b.n	800452e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <xPortStartScheduler+0x134>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3b01      	subs	r3, #1
 8004520:	4a2d      	ldr	r2, [pc, #180]	; (80045d8 <xPortStartScheduler+0x134>)
 8004522:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004536:	2b80      	cmp	r3, #128	; 0x80
 8004538:	d0ef      	beq.n	800451a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800453a:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <xPortStartScheduler+0x134>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f1c3 0307 	rsb	r3, r3, #7
 8004542:	2b04      	cmp	r3, #4
 8004544:	d00a      	beq.n	800455c <xPortStartScheduler+0xb8>
        __asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	60bb      	str	r3, [r7, #8]
    }
 8004558:	bf00      	nop
 800455a:	e7fe      	b.n	800455a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800455c:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <xPortStartScheduler+0x134>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <xPortStartScheduler+0x134>)
 8004564:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004566:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <xPortStartScheduler+0x134>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800456e:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <xPortStartScheduler+0x134>)
 8004570:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <xPortStartScheduler+0x138>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <xPortStartScheduler+0x138>)
 8004580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004584:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <xPortStartScheduler+0x138>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a14      	ldr	r2, [pc, #80]	; (80045dc <xPortStartScheduler+0x138>)
 800458c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004590:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004592:	f000 f963 	bl	800485c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004596:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <xPortStartScheduler+0x13c>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800459c:	f000 f982 	bl	80048a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045a0:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <xPortStartScheduler+0x140>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <xPortStartScheduler+0x140>)
 80045a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80045ac:	f7ff ff64 	bl	8004478 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80045b0:	f7ff f8d4 	bl	800375c <vTaskSwitchContext>
    prvTaskExitError();
 80045b4:	f7ff ff20 	bl	80043f8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	e000ed00 	.word	0xe000ed00
 80045c8:	410fc271 	.word	0x410fc271
 80045cc:	410fc270 	.word	0x410fc270
 80045d0:	e000e400 	.word	0xe000e400
 80045d4:	20000270 	.word	0x20000270
 80045d8:	20000274 	.word	0x20000274
 80045dc:	e000ed20 	.word	0xe000ed20
 80045e0:	20000010 	.word	0x20000010
 80045e4:	e000ef34 	.word	0xe000ef34

080045e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045ee:	4b37      	ldr	r3, [pc, #220]	; (80046cc <vInitPrioGroupValue+0xe4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a37      	ldr	r2, [pc, #220]	; (80046d0 <vInitPrioGroupValue+0xe8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d10a      	bne.n	800460e <vInitPrioGroupValue+0x26>
        __asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	613b      	str	r3, [r7, #16]
    }
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800460e:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <vInitPrioGroupValue+0xe4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a30      	ldr	r2, [pc, #192]	; (80046d4 <vInitPrioGroupValue+0xec>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d10a      	bne.n	800462e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	60fb      	str	r3, [r7, #12]
    }
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800462e:	4b2a      	ldr	r3, [pc, #168]	; (80046d8 <vInitPrioGroupValue+0xf0>)
 8004630:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	22ff      	movs	r2, #255	; 0xff
 800463e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004650:	b2da      	uxtb	r2, r3
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <vInitPrioGroupValue+0xf4>)
 8004654:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 8004658:	2207      	movs	r2, #7
 800465a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800465c:	e009      	b.n	8004672 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800465e:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3b01      	subs	r3, #1
 8004664:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 8004666:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d0ef      	beq.n	800465e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800467e:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f1c3 0307 	rsb	r3, r3, #7
 8004686:	2b04      	cmp	r3, #4
 8004688:	d00a      	beq.n	80046a0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	60bb      	str	r3, [r7, #8]
    }
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 80046a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046b2:	4a0b      	ldr	r2, [pc, #44]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 80046b4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000ed00 	.word	0xe000ed00
 80046d0:	410fc271 	.word	0x410fc271
 80046d4:	410fc270 	.word	0x410fc270
 80046d8:	e000e400 	.word	0xe000e400
 80046dc:	20000270 	.word	0x20000270
 80046e0:	20000274 	.word	0x20000274

080046e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
        __asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	607b      	str	r3, [r7, #4]
    }
 80046fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <vPortEnterCritical+0x58>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	4a0d      	ldr	r2, [pc, #52]	; (800473c <vPortEnterCritical+0x58>)
 8004706:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004708:	4b0c      	ldr	r3, [pc, #48]	; (800473c <vPortEnterCritical+0x58>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d10f      	bne.n	8004730 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <vPortEnterCritical+0x5c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <vPortEnterCritical+0x4c>
        __asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	603b      	str	r3, [r7, #0]
    }
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <vPortEnterCritical+0x4a>
    }
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	20000010 	.word	0x20000010
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <vPortExitCritical+0x50>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <vPortExitCritical+0x24>
        __asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	607b      	str	r3, [r7, #4]
    }
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <vPortExitCritical+0x50>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3b01      	subs	r3, #1
 800476e:	4a09      	ldr	r2, [pc, #36]	; (8004794 <vPortExitCritical+0x50>)
 8004770:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004772:	4b08      	ldr	r3, [pc, #32]	; (8004794 <vPortExitCritical+0x50>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d105      	bne.n	8004786 <vPortExitCritical+0x42>
 800477a:	2300      	movs	r3, #0
 800477c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004784:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000010 	.word	0x20000010
	...

080047a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047a0:	f3ef 8009 	mrs	r0, PSP
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	4b15      	ldr	r3, [pc, #84]	; (8004800 <pxCurrentTCBConst>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	f01e 0f10 	tst.w	lr, #16
 80047b0:	bf08      	it	eq
 80047b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ba:	6010      	str	r0, [r2, #0]
 80047bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047c4:	f380 8811 	msr	BASEPRI, r0
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f7fe ffc4 	bl	800375c <vTaskSwitchContext>
 80047d4:	f04f 0000 	mov.w	r0, #0
 80047d8:	f380 8811 	msr	BASEPRI, r0
 80047dc:	bc09      	pop	{r0, r3}
 80047de:	6819      	ldr	r1, [r3, #0]
 80047e0:	6808      	ldr	r0, [r1, #0]
 80047e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e6:	f01e 0f10 	tst.w	lr, #16
 80047ea:	bf08      	it	eq
 80047ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047f0:	f380 8809 	msr	PSP, r0
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	f3af 8000 	nop.w

08004800 <pxCurrentTCBConst>:
 8004800:	20000130 	.word	0x20000130
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop

08004808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
        __asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	607b      	str	r3, [r7, #4]
    }
 8004820:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004822:	f002 f941 	bl	8006aa8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004826:	f7fe fe7f 	bl	8003528 <xTaskIncrementTick>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d006      	beq.n	800483e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004830:	f002 f998 	bl	8006b64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <SysTick_Handler+0x50>)
 8004836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e001      	b.n	8004842 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800483e:	f002 f975 	bl	8006b2c <SEGGER_SYSVIEW_RecordExitISR>
 8004842:	2300      	movs	r3, #0
 8004844:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	f383 8811 	msr	BASEPRI, r3
    }
 800484c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <vPortSetupTimerInterrupt+0x38>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <vPortSetupTimerInterrupt+0x3c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0a      	ldr	r2, [pc, #40]	; (800489c <vPortSetupTimerInterrupt+0x40>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <vPortSetupTimerInterrupt+0x44>)
 800487a:	3b01      	subs	r3, #1
 800487c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800487e:	4b04      	ldr	r3, [pc, #16]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004880:	2207      	movs	r2, #7
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	e000e010 	.word	0xe000e010
 8004894:	e000e018 	.word	0xe000e018
 8004898:	20000000 	.word	0x20000000
 800489c:	10624dd3 	.word	0x10624dd3
 80048a0:	e000e014 	.word	0xe000e014

080048a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048b4 <vPortEnableVFP+0x10>
 80048a8:	6801      	ldr	r1, [r0, #0]
 80048aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048ae:	6001      	str	r1, [r0, #0]
 80048b0:	4770      	bx	lr
 80048b2:	0000      	.short	0x0000
 80048b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop

080048bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048c2:	f3ef 8305 	mrs	r3, IPSR
 80048c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	d914      	bls.n	80048f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ce:	4a17      	ldr	r2, [pc, #92]	; (800492c <vPortValidateInterruptPriority+0x70>)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048d8:	4b15      	ldr	r3, [pc, #84]	; (8004930 <vPortValidateInterruptPriority+0x74>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	7afa      	ldrb	r2, [r7, #11]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d20a      	bcs.n	80048f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	607b      	str	r3, [r7, #4]
    }
 80048f4:	bf00      	nop
 80048f6:	e7fe      	b.n	80048f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048f8:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <vPortValidateInterruptPriority+0x78>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004900:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <vPortValidateInterruptPriority+0x7c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d90a      	bls.n	800491e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	603b      	str	r3, [r7, #0]
    }
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <vPortValidateInterruptPriority+0x60>
    }
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	e000e3f0 	.word	0xe000e3f0
 8004930:	20000270 	.word	0x20000270
 8004934:	e000ed0c 	.word	0xe000ed0c
 8004938:	20000274 	.word	0x20000274

0800493c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004948:	f7fe fbea 	bl	8003120 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800494c:	4b53      	ldr	r3, [pc, #332]	; (8004a9c <pvPortMalloc+0x160>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004954:	f000 f908 	bl	8004b68 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d012      	beq.n	8004984 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800495e:	2208      	movs	r2, #8
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	3308      	adds	r3, #8
 800496a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	43db      	mvns	r3, r3
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	429a      	cmp	r2, r3
 8004974:	d804      	bhi.n	8004980 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	4413      	add	r3, r2
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	e001      	b.n	8004984 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	db70      	blt.n	8004a6c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d06d      	beq.n	8004a6c <pvPortMalloc+0x130>
 8004990:	4b43      	ldr	r3, [pc, #268]	; (8004aa0 <pvPortMalloc+0x164>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d868      	bhi.n	8004a6c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800499a:	4b42      	ldr	r3, [pc, #264]	; (8004aa4 <pvPortMalloc+0x168>)
 800499c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800499e:	4b41      	ldr	r3, [pc, #260]	; (8004aa4 <pvPortMalloc+0x168>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049a4:	e004      	b.n	80049b0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d903      	bls.n	80049c2 <pvPortMalloc+0x86>
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f1      	bne.n	80049a6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049c2:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <pvPortMalloc+0x160>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d04f      	beq.n	8004a6c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2208      	movs	r2, #8
 80049d2:	4413      	add	r3, r2
 80049d4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	1ad2      	subs	r2, r2, r3
 80049e6:	2308      	movs	r3, #8
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d91f      	bls.n	8004a2e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <pvPortMalloc+0xda>
        __asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	613b      	str	r3, [r7, #16]
    }
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	1ad2      	subs	r2, r2, r3
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a28:	6978      	ldr	r0, [r7, #20]
 8004a2a:	f000 f8f9 	bl	8004c20 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a2e:	4b1c      	ldr	r3, [pc, #112]	; (8004aa0 <pvPortMalloc+0x164>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	4a19      	ldr	r2, [pc, #100]	; (8004aa0 <pvPortMalloc+0x164>)
 8004a3a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a3c:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <pvPortMalloc+0x164>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <pvPortMalloc+0x16c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d203      	bcs.n	8004a50 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a48:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <pvPortMalloc+0x164>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <pvPortMalloc+0x16c>)
 8004a4e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <pvPortMalloc+0x170>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3301      	adds	r3, #1
 8004a68:	4a10      	ldr	r2, [pc, #64]	; (8004aac <pvPortMalloc+0x170>)
 8004a6a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a6c:	f7fe fb66 	bl	800313c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <pvPortMalloc+0x154>
        __asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	60fb      	str	r3, [r7, #12]
    }
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <pvPortMalloc+0x152>
    return pvReturn;
 8004a90:	69fb      	ldr	r3, [r7, #28]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3728      	adds	r7, #40	; 0x28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20012e80 	.word	0x20012e80
 8004aa0:	20012e84 	.word	0x20012e84
 8004aa4:	20012e78 	.word	0x20012e78
 8004aa8:	20012e88 	.word	0x20012e88
 8004aac:	20012e8c 	.word	0x20012e8c

08004ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d049      	beq.n	8004b56 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	425b      	negs	r3, r3
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4413      	add	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	db0a      	blt.n	8004aee <vPortFree+0x3e>
        __asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	60fb      	str	r3, [r7, #12]
    }
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <vPortFree+0x5c>
        __asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	60bb      	str	r3, [r7, #8]
    }
 8004b08:	bf00      	nop
 8004b0a:	e7fe      	b.n	8004b0a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	0fdb      	lsrs	r3, r3, #31
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01c      	beq.n	8004b56 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d118      	bne.n	8004b56 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004b30:	f7fe faf6 	bl	8003120 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <vPortFree+0xb0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <vPortFree+0xb0>)
 8004b40:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b42:	6938      	ldr	r0, [r7, #16]
 8004b44:	f000 f86c 	bl	8004c20 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <vPortFree+0xb4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	4a05      	ldr	r2, [pc, #20]	; (8004b64 <vPortFree+0xb4>)
 8004b50:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b52:	f7fe faf3 	bl	800313c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b56:	bf00      	nop
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20012e84 	.word	0x20012e84
 8004b64:	20012e90 	.word	0x20012e90

08004b68 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b6e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004b72:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b74:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <prvHeapInit+0xa4>)
 8004b76:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3307      	adds	r3, #7
 8004b86:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0307 	bic.w	r3, r3, #7
 8004b8e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <prvHeapInit+0xa4>)
 8004b98:	4413      	add	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ba0:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <prvHeapInit+0xa8>)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004ba6:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <prvHeapInit+0xa8>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0307 	bic.w	r3, r3, #7
 8004bc2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4a13      	ldr	r2, [pc, #76]	; (8004c14 <prvHeapInit+0xac>)
 8004bc8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <prvHeapInit+0xac>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <prvHeapInit+0xac>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	1ad2      	subs	r2, r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <prvHeapInit+0xac>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4a08      	ldr	r2, [pc, #32]	; (8004c18 <prvHeapInit+0xb0>)
 8004bf6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4a07      	ldr	r2, [pc, #28]	; (8004c1c <prvHeapInit+0xb4>)
 8004bfe:	6013      	str	r3, [r2, #0]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	20000278 	.word	0x20000278
 8004c10:	20012e78 	.word	0x20012e78
 8004c14:	20012e80 	.word	0x20012e80
 8004c18:	20012e88 	.word	0x20012e88
 8004c1c:	20012e84 	.word	0x20012e84

08004c20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c28:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <prvInsertBlockIntoFreeList+0xac>)
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	e002      	b.n	8004c34 <prvInsertBlockIntoFreeList+0x14>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d8f7      	bhi.n	8004c2e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4413      	add	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d108      	bne.n	8004c62 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	441a      	add	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	441a      	add	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d118      	bne.n	8004ca8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d00d      	beq.n	8004c9e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	e008      	b.n	8004cb0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e003      	b.n	8004cb0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d002      	beq.n	8004cbe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20012e78 	.word	0x20012e78
 8004cd0:	20012e80 	.word	0x20012e80

08004cd4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004cd8:	4803      	ldr	r0, [pc, #12]	; (8004ce8 <_cbSendSystemDesc+0x14>)
 8004cda:	f001 fe8f 	bl	80069fc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004cde:	4803      	ldr	r0, [pc, #12]	; (8004cec <_cbSendSystemDesc+0x18>)
 8004ce0:	f001 fe8c 	bl	80069fc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004ce4:	bf00      	nop
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	08007a0c 	.word	0x08007a0c
 8004cec:	08007a4c 	.word	0x08007a4c

08004cf0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004cf4:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cfa:	6819      	ldr	r1, [r3, #0]
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <SEGGER_SYSVIEW_Conf+0x24>)
 8004cfe:	4a06      	ldr	r2, [pc, #24]	; (8004d18 <SEGGER_SYSVIEW_Conf+0x28>)
 8004d00:	f001 f9f8 	bl	80060f4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004d08:	f001 fa38 	bl	800617c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000000 	.word	0x20000000
 8004d14:	08004cd5 	.word	0x08004cd5
 8004d18:	08007ae8 	.word	0x08007ae8

08004d1c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d22:	2300      	movs	r3, #0
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	e033      	b.n	8004d90 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d28:	491e      	ldr	r1, [pc, #120]	; (8004da4 <_cbSendTaskList+0x88>)
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	491a      	ldr	r1, [pc, #104]	; (8004da4 <_cbSendTaskList+0x88>)
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	3304      	adds	r3, #4
 8004d48:	6819      	ldr	r1, [r3, #0]
 8004d4a:	4c16      	ldr	r4, [pc, #88]	; (8004da4 <_cbSendTaskList+0x88>)
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4423      	add	r3, r4
 8004d58:	3308      	adds	r3, #8
 8004d5a:	681c      	ldr	r4, [r3, #0]
 8004d5c:	4d11      	ldr	r5, [pc, #68]	; (8004da4 <_cbSendTaskList+0x88>)
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	442b      	add	r3, r5
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	681d      	ldr	r5, [r3, #0]
 8004d6e:	4e0d      	ldr	r6, [pc, #52]	; (8004da4 <_cbSendTaskList+0x88>)
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4433      	add	r3, r6
 8004d7c:	3310      	adds	r3, #16
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	462b      	mov	r3, r5
 8004d84:	4622      	mov	r2, r4
 8004d86:	f000 f92d 	bl	8004fe4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	607b      	str	r3, [r7, #4]
 8004d90:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <_cbSendTaskList+0x8c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d3c6      	bcc.n	8004d28 <_cbSendTaskList+0xc>
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da4:	20012e94 	.word	0x20012e94
 8004da8:	20012f34 	.word	0x20012f34

08004dac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004db4:	f7fe fad2 	bl	800335c <xTaskGetTickCountFromISR>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2200      	movs	r2, #0
 8004dbc:	469a      	mov	sl, r3
 8004dbe:	4693      	mov	fp, r2
 8004dc0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004dc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	f04f 0a00 	mov.w	sl, #0
 8004dd0:	f04f 0b00 	mov.w	fp, #0
 8004dd4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004dd8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004ddc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004de0:	4652      	mov	r2, sl
 8004de2:	465b      	mov	r3, fp
 8004de4:	1a14      	subs	r4, r2, r0
 8004de6:	eb63 0501 	sbc.w	r5, r3, r1
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	00ab      	lsls	r3, r5, #2
 8004df4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004df8:	00a2      	lsls	r2, r4, #2
 8004dfa:	4614      	mov	r4, r2
 8004dfc:	461d      	mov	r5, r3
 8004dfe:	eb14 0800 	adds.w	r8, r4, r0
 8004e02:	eb45 0901 	adc.w	r9, r5, r1
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e1a:	4690      	mov	r8, r2
 8004e1c:	4699      	mov	r9, r3
 8004e1e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004e22:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e26:	4610      	mov	r0, r2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004e34 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e42:	2205      	movs	r2, #5
 8004e44:	492b      	ldr	r1, [pc, #172]	; (8004ef4 <SYSVIEW_AddTask+0xc0>)
 8004e46:	68b8      	ldr	r0, [r7, #8]
 8004e48:	f002 f91a 	bl	8007080 <memcmp>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d04b      	beq.n	8004eea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e52:	4b29      	ldr	r3, [pc, #164]	; (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b07      	cmp	r3, #7
 8004e58:	d903      	bls.n	8004e62 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e5a:	4828      	ldr	r0, [pc, #160]	; (8004efc <SYSVIEW_AddTask+0xc8>)
 8004e5c:	f002 f88a 	bl	8006f74 <SEGGER_SYSVIEW_Warn>
    return;
 8004e60:	e044      	b.n	8004eec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e62:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4926      	ldr	r1, [pc, #152]	; (8004f00 <SYSVIEW_AddTask+0xcc>)
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e76:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4921      	ldr	r1, [pc, #132]	; (8004f00 <SYSVIEW_AddTask+0xcc>)
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	3304      	adds	r3, #4
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	491b      	ldr	r1, [pc, #108]	; (8004f00 <SYSVIEW_AddTask+0xcc>)
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ea2:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4916      	ldr	r1, [pc, #88]	; (8004f00 <SYSVIEW_AddTask+0xcc>)
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004eb8:	4b0f      	ldr	r3, [pc, #60]	; (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4910      	ldr	r1, [pc, #64]	; (8004f00 <SYSVIEW_AddTask+0xcc>)
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	3310      	adds	r3, #16
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004ed6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f87e 	bl	8004fe4 <SYSVIEW_SendTaskInfo>
 8004ee8:	e000      	b.n	8004eec <SYSVIEW_AddTask+0xb8>
    return;
 8004eea:	bf00      	nop

}
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	08007a5c 	.word	0x08007a5c
 8004ef8:	20012f34 	.word	0x20012f34
 8004efc:	08007a64 	.word	0x08007a64
 8004f00:	20012e94 	.word	0x20012e94

08004f04 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f12:	2205      	movs	r2, #5
 8004f14:	4930      	ldr	r1, [pc, #192]	; (8004fd8 <SYSVIEW_UpdateTask+0xd4>)
 8004f16:	68b8      	ldr	r0, [r7, #8]
 8004f18:	f002 f8b2 	bl	8007080 <memcmp>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d056      	beq.n	8004fd0 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	e00d      	b.n	8004f44 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8004f28:	492c      	ldr	r1, [pc, #176]	; (8004fdc <SYSVIEW_UpdateTask+0xd8>)
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d008      	beq.n	8004f50 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	3301      	adds	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	4b26      	ldr	r3, [pc, #152]	; (8004fe0 <SYSVIEW_UpdateTask+0xdc>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d3ec      	bcc.n	8004f28 <SYSVIEW_UpdateTask+0x24>
 8004f4e:	e000      	b.n	8004f52 <SYSVIEW_UpdateTask+0x4e>
      break;
 8004f50:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8004f52:	4b23      	ldr	r3, [pc, #140]	; (8004fe0 <SYSVIEW_UpdateTask+0xdc>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d230      	bcs.n	8004fbe <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8004f5c:	491f      	ldr	r1, [pc, #124]	; (8004fdc <SYSVIEW_UpdateTask+0xd8>)
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8004f70:	491a      	ldr	r1, [pc, #104]	; (8004fdc <SYSVIEW_UpdateTask+0xd8>)
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	3308      	adds	r3, #8
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8004f84:	4915      	ldr	r1, [pc, #84]	; (8004fdc <SYSVIEW_UpdateTask+0xd8>)
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	330c      	adds	r3, #12
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8004f98:	4910      	ldr	r1, [pc, #64]	; (8004fdc <SYSVIEW_UpdateTask+0xd8>)
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	3310      	adds	r3, #16
 8004fa8:	6a3a      	ldr	r2, [r7, #32]
 8004faa:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f814 	bl	8004fe4 <SYSVIEW_SendTaskInfo>
 8004fbc:	e009      	b.n	8004fd2 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f7ff ff33 	bl	8004e34 <SYSVIEW_AddTask>
 8004fce:	e000      	b.n	8004fd2 <SYSVIEW_UpdateTask+0xce>
    return;
 8004fd0:	bf00      	nop
  }
}
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	08007a5c 	.word	0x08007a5c
 8004fdc:	20012e94 	.word	0x20012e94
 8004fe0:	20012f34 	.word	0x20012f34

08004fe4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004ff2:	f107 0310 	add.w	r3, r7, #16
 8004ff6:	2218      	movs	r2, #24
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f002 f85e 	bl	80070bc <memset>
  TaskInfo.TaskID     = TaskID;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005014:	f107 0310 	add.w	r3, r7, #16
 8005018:	4618      	mov	r0, r3
 800501a:	f001 fbf7 	bl	800680c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800501e:	bf00      	nop
 8005020:	3728      	adds	r7, #40	; 0x28
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800502e:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <USART2_IRQHandler+0x80>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d011      	beq.n	8005062 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800503e:	4b1b      	ldr	r3, [pc, #108]	; (80050ac <USART2_IRQHandler+0x84>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 030b 	and.w	r3, r3, #11
 800504c:	2b00      	cmp	r3, #0
 800504e:	d108      	bne.n	8005062 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005050:	4b17      	ldr	r3, [pc, #92]	; (80050b0 <USART2_IRQHandler+0x88>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d004      	beq.n	8005062 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005058:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <USART2_IRQHandler+0x88>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	79fa      	ldrb	r2, [r7, #7]
 800505e:	4610      	mov	r0, r2
 8005060:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01a      	beq.n	80050a2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800506c:	4b11      	ldr	r3, [pc, #68]	; (80050b4 <USART2_IRQHandler+0x8c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d015      	beq.n	80050a0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005074:	4b0f      	ldr	r3, [pc, #60]	; (80050b4 <USART2_IRQHandler+0x8c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	1dfa      	adds	r2, r7, #7
 800507a:	4610      	mov	r0, r2
 800507c:	4798      	blx	r3
 800507e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <USART2_IRQHandler+0x90>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a0b      	ldr	r2, [pc, #44]	; (80050b8 <USART2_IRQHandler+0x90>)
 800508c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	e006      	b.n	80050a2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005094:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <USART2_IRQHandler+0x80>)
 8005096:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005098:	79fa      	ldrb	r2, [r7, #7]
 800509a:	4b04      	ldr	r3, [pc, #16]	; (80050ac <USART2_IRQHandler+0x84>)
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	e000      	b.n	80050a2 <USART2_IRQHandler+0x7a>
      return;
 80050a0:	bf00      	nop
    }
  }
}
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40004400 	.word	0x40004400
 80050ac:	40004404 	.word	0x40004404
 80050b0:	20012f38 	.word	0x20012f38
 80050b4:	20012f3c 	.word	0x20012f3c
 80050b8:	4000440c 	.word	0x4000440c

080050bc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a04      	ldr	r2, [pc, #16]	; (80050d8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80050c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ca:	6013      	str	r3, [r2, #0]
}
 80050cc:	bf00      	nop
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	4000440c 	.word	0x4000440c

080050dc <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80050e2:	4b26      	ldr	r3, [pc, #152]	; (800517c <_DoInit+0xa0>)
 80050e4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80050e6:	22a8      	movs	r2, #168	; 0xa8
 80050e8:	2100      	movs	r1, #0
 80050ea:	6838      	ldr	r0, [r7, #0]
 80050ec:	f001 ffe6 	bl	80070bc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2203      	movs	r2, #3
 80050f4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2203      	movs	r2, #3
 80050fa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	4a20      	ldr	r2, [pc, #128]	; (8005180 <_DoInit+0xa4>)
 8005100:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	4a1f      	ldr	r2, [pc, #124]	; (8005184 <_DoInit+0xa8>)
 8005106:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800510e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2200      	movs	r2, #0
 800511a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2200      	movs	r2, #0
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	4a16      	ldr	r2, [pc, #88]	; (8005180 <_DoInit+0xa4>)
 8005126:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	4a17      	ldr	r2, [pc, #92]	; (8005188 <_DoInit+0xac>)
 800512c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2210      	movs	r2, #16
 8005132:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2200      	movs	r2, #0
 8005138:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2200      	movs	r2, #0
 800513e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2200      	movs	r2, #0
 8005144:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005146:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800514a:	2300      	movs	r3, #0
 800514c:	607b      	str	r3, [r7, #4]
 800514e:	e00c      	b.n	800516a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f1c3 030f 	rsb	r3, r3, #15
 8005156:	4a0d      	ldr	r2, [pc, #52]	; (800518c <_DoInit+0xb0>)
 8005158:	5cd1      	ldrb	r1, [r2, r3]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4413      	add	r3, r2
 8005160:	460a      	mov	r2, r1
 8005162:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3301      	adds	r3, #1
 8005168:	607b      	str	r3, [r7, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b0f      	cmp	r3, #15
 800516e:	d9ef      	bls.n	8005150 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005170:	f3bf 8f5f 	dmb	sy
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	20012f40 	.word	0x20012f40
 8005180:	08007ab4 	.word	0x08007ab4
 8005184:	20012fe8 	.word	0x20012fe8
 8005188:	200133e8 	.word	0x200133e8
 800518c:	08007af0 	.word	0x08007af0

08005190 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b08c      	sub	sp, #48	; 0x30
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800519c:	4b3e      	ldr	r3, [pc, #248]	; (8005298 <SEGGER_RTT_ReadNoLock+0x108>)
 800519e:	623b      	str	r3, [r7, #32]
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b53      	cmp	r3, #83	; 0x53
 80051a8:	d001      	beq.n	80051ae <SEGGER_RTT_ReadNoLock+0x1e>
 80051aa:	f7ff ff97 	bl	80050dc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4613      	mov	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	4413      	add	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	3360      	adds	r3, #96	; 0x60
 80051ba:	4a37      	ldr	r2, [pc, #220]	; (8005298 <SEGGER_RTT_ReadNoLock+0x108>)
 80051bc:	4413      	add	r3, r2
 80051be:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80051d0:	2300      	movs	r3, #0
 80051d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80051d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d92b      	bls.n	8005234 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4293      	cmp	r3, r2
 80051ec:	bf28      	it	cs
 80051ee:	4613      	movcs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	4413      	add	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	6939      	ldr	r1, [r7, #16]
 8005200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005202:	f001 ff4d 	bl	80070a0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	4413      	add	r3, r2
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800520e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	4413      	add	r3, r2
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800521e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	4413      	add	r3, r2
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800522c:	429a      	cmp	r2, r3
 800522e:	d101      	bne.n	8005234 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005230:	2300      	movs	r3, #0
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4293      	cmp	r3, r2
 8005242:	bf28      	it	cs
 8005244:	4613      	movcs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d019      	beq.n	8005282 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	4413      	add	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	6939      	ldr	r1, [r7, #16]
 800525c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800525e:	f001 ff1f 	bl	80070a0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	4413      	add	r3, r2
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800526a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4413      	add	r3, r2
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800527a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	4413      	add	r3, r2
 8005280:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800528c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005290:	4618      	mov	r0, r3
 8005292:	3730      	adds	r7, #48	; 0x30
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20012f40 	.word	0x20012f40

0800529c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052aa:	4b3d      	ldr	r3, [pc, #244]	; (80053a0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b53      	cmp	r3, #83	; 0x53
 80052b6:	d001      	beq.n	80052bc <SEGGER_RTT_AllocUpBuffer+0x20>
 80052b8:	f7ff ff10 	bl	80050dc <_DoInit>
  SEGGER_RTT_LOCK();
 80052bc:	f3ef 8311 	mrs	r3, BASEPRI
 80052c0:	f04f 0120 	mov.w	r1, #32
 80052c4:	f381 8811 	msr	BASEPRI, r1
 80052c8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052ca:	4b35      	ldr	r3, [pc, #212]	; (80053a0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052cc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80052d2:	6939      	ldr	r1, [r7, #16]
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	4613      	mov	r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4413      	add	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	440b      	add	r3, r1
 80052e2:	3304      	adds	r3, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d008      	beq.n	80052fc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3301      	adds	r3, #1
 80052ee:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	dbeb      	blt.n	80052d2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80052fa:	e000      	b.n	80052fe <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80052fc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	429a      	cmp	r2, r3
 8005306:	da3f      	bge.n	8005388 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005308:	6939      	ldr	r1, [r7, #16]
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	4613      	mov	r3, r2
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	4413      	add	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	440b      	add	r3, r1
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800531c:	6939      	ldr	r1, [r7, #16]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	4613      	mov	r3, r2
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	4413      	add	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	440b      	add	r3, r1
 800532c:	3304      	adds	r3, #4
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005332:	6939      	ldr	r1, [r7, #16]
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	4613      	mov	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	4413      	add	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	440b      	add	r3, r1
 8005340:	3320      	adds	r3, #32
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005346:	6939      	ldr	r1, [r7, #16]
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	4613      	mov	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	440b      	add	r3, r1
 8005354:	3328      	adds	r3, #40	; 0x28
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800535a:	6939      	ldr	r1, [r7, #16]
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	4613      	mov	r3, r2
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	4413      	add	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	440b      	add	r3, r1
 8005368:	3324      	adds	r3, #36	; 0x24
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800536e:	6939      	ldr	r1, [r7, #16]
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	4613      	mov	r3, r2
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	4413      	add	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	440b      	add	r3, r1
 800537c:	332c      	adds	r3, #44	; 0x2c
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005382:	f3bf 8f5f 	dmb	sy
 8005386:	e002      	b.n	800538e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005388:	f04f 33ff 	mov.w	r3, #4294967295
 800538c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005394:	69fb      	ldr	r3, [r7, #28]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20012f40 	.word	0x20012f40

080053a4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80053b2:	4b21      	ldr	r3, [pc, #132]	; (8005438 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053b4:	623b      	str	r3, [r7, #32]
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b53      	cmp	r3, #83	; 0x53
 80053be:	d001      	beq.n	80053c4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80053c0:	f7ff fe8c 	bl	80050dc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053c4:	4b1c      	ldr	r3, [pc, #112]	; (8005438 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053c6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d82c      	bhi.n	8005428 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80053ce:	f3ef 8311 	mrs	r3, BASEPRI
 80053d2:	f04f 0120 	mov.w	r1, #32
 80053d6:	f381 8811 	msr	BASEPRI, r1
 80053da:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4613      	mov	r3, r2
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4413      	add	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	3360      	adds	r3, #96	; 0x60
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	4413      	add	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2200      	movs	r2, #0
 800540a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2200      	movs	r2, #0
 8005410:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005416:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005418:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
 8005426:	e002      	b.n	800542e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005428:	f04f 33ff 	mov.w	r3, #4294967295
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005430:	4618      	mov	r0, r3
 8005432:	3728      	adds	r7, #40	; 0x28
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20012f40 	.word	0x20012f40

0800543c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d105      	bne.n	800545a <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	60fa      	str	r2, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	e022      	b.n	80054a0 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	60fa      	str	r2, [r7, #12]
 8005464:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b80      	cmp	r3, #128	; 0x80
 800546a:	d90a      	bls.n	8005482 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005470:	e007      	b.n	8005482 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	1c53      	adds	r3, r2, #1
 8005476:	60bb      	str	r3, [r7, #8]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	1c59      	adds	r1, r3, #1
 800547c:	60f9      	str	r1, [r7, #12]
 800547e:	7812      	ldrb	r2, [r2, #0]
 8005480:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	1e5a      	subs	r2, r3, #1
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <_EncodeStr+0x58>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1ee      	bne.n	8005472 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	b2da      	uxtb	r2, r3
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80054a0:	68fb      	ldr	r3, [r7, #12]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3307      	adds	r3, #7
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054ce:	4b35      	ldr	r3, [pc, #212]	; (80055a4 <_HandleIncomingPacket+0xdc>)
 80054d0:	7e1b      	ldrb	r3, [r3, #24]
 80054d2:	4618      	mov	r0, r3
 80054d4:	1cfb      	adds	r3, r7, #3
 80054d6:	2201      	movs	r2, #1
 80054d8:	4619      	mov	r1, r3
 80054da:	f7ff fe59 	bl	8005190 <SEGGER_RTT_ReadNoLock>
 80054de:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d052      	beq.n	800558c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80054e6:	78fb      	ldrb	r3, [r7, #3]
 80054e8:	2b80      	cmp	r3, #128	; 0x80
 80054ea:	d031      	beq.n	8005550 <_HandleIncomingPacket+0x88>
 80054ec:	2b80      	cmp	r3, #128	; 0x80
 80054ee:	dc40      	bgt.n	8005572 <_HandleIncomingPacket+0xaa>
 80054f0:	2b07      	cmp	r3, #7
 80054f2:	dc15      	bgt.n	8005520 <_HandleIncomingPacket+0x58>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	dd3c      	ble.n	8005572 <_HandleIncomingPacket+0xaa>
 80054f8:	3b01      	subs	r3, #1
 80054fa:	2b06      	cmp	r3, #6
 80054fc:	d839      	bhi.n	8005572 <_HandleIncomingPacket+0xaa>
 80054fe:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <_HandleIncomingPacket+0x3c>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	08005527 	.word	0x08005527
 8005508:	0800552d 	.word	0x0800552d
 800550c:	08005533 	.word	0x08005533
 8005510:	08005539 	.word	0x08005539
 8005514:	0800553f 	.word	0x0800553f
 8005518:	08005545 	.word	0x08005545
 800551c:	0800554b 	.word	0x0800554b
 8005520:	2b7f      	cmp	r3, #127	; 0x7f
 8005522:	d035      	beq.n	8005590 <_HandleIncomingPacket+0xc8>
 8005524:	e025      	b.n	8005572 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005526:	f000 fff5 	bl	8006514 <SEGGER_SYSVIEW_Start>
      break;
 800552a:	e036      	b.n	800559a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800552c:	f001 f8ae 	bl	800668c <SEGGER_SYSVIEW_Stop>
      break;
 8005530:	e033      	b.n	800559a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005532:	f001 fa87 	bl	8006a44 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005536:	e030      	b.n	800559a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005538:	f001 fa4c 	bl	80069d4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800553c:	e02d      	b.n	800559a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800553e:	f001 f8cb 	bl	80066d8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005542:	e02a      	b.n	800559a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005544:	f001 fcc4 	bl	8006ed0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005548:	e027      	b.n	800559a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800554a:	f001 fca3 	bl	8006e94 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800554e:	e024      	b.n	800559a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005550:	4b14      	ldr	r3, [pc, #80]	; (80055a4 <_HandleIncomingPacket+0xdc>)
 8005552:	7e1b      	ldrb	r3, [r3, #24]
 8005554:	4618      	mov	r0, r3
 8005556:	1cfb      	adds	r3, r7, #3
 8005558:	2201      	movs	r2, #1
 800555a:	4619      	mov	r1, r3
 800555c:	f7ff fe18 	bl	8005190 <SEGGER_RTT_ReadNoLock>
 8005560:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d015      	beq.n	8005594 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	4618      	mov	r0, r3
 800556c:	f001 fc08 	bl	8006d80 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005570:	e010      	b.n	8005594 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	b25b      	sxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	da0e      	bge.n	8005598 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800557a:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <_HandleIncomingPacket+0xdc>)
 800557c:	7e1b      	ldrb	r3, [r3, #24]
 800557e:	4618      	mov	r0, r3
 8005580:	1cfb      	adds	r3, r7, #3
 8005582:	2201      	movs	r2, #1
 8005584:	4619      	mov	r1, r3
 8005586:	f7ff fe03 	bl	8005190 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800558a:	e005      	b.n	8005598 <_HandleIncomingPacket+0xd0>
    }
  }
 800558c:	bf00      	nop
 800558e:	e004      	b.n	800559a <_HandleIncomingPacket+0xd2>
      break;
 8005590:	bf00      	nop
 8005592:	e002      	b.n	800559a <_HandleIncomingPacket+0xd2>
      break;
 8005594:	bf00      	nop
 8005596:	e000      	b.n	800559a <_HandleIncomingPacket+0xd2>
      break;
 8005598:	bf00      	nop
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20014400 	.word	0x20014400

080055a8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08c      	sub	sp, #48	; 0x30
 80055ac:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80055ae:	2301      	movs	r3, #1
 80055b0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80055b2:	1d3b      	adds	r3, r7, #4
 80055b4:	3301      	adds	r3, #1
 80055b6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055bc:	4b32      	ldr	r3, [pc, #200]	; (8005688 <_TrySendOverflowPacket+0xe0>)
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c2:	e00b      	b.n	80055dc <_TrySendOverflowPacket+0x34>
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	09db      	lsrs	r3, r3, #7
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	2b7f      	cmp	r3, #127	; 0x7f
 80055e0:	d8f0      	bhi.n	80055c4 <_TrySendOverflowPacket+0x1c>
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055f2:	4b26      	ldr	r3, [pc, #152]	; (800568c <_TrySendOverflowPacket+0xe4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 80055f8:	4b23      	ldr	r3, [pc, #140]	; (8005688 <_TrySendOverflowPacket+0xe0>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	623b      	str	r3, [r7, #32]
 800560a:	e00b      	b.n	8005624 <_TrySendOverflowPacket+0x7c>
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	b2da      	uxtb	r2, r3
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	1c59      	adds	r1, r3, #1
 8005614:	6279      	str	r1, [r7, #36]	; 0x24
 8005616:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	09db      	lsrs	r3, r3, #7
 8005622:	623b      	str	r3, [r7, #32]
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	2b7f      	cmp	r3, #127	; 0x7f
 8005628:	d8f0      	bhi.n	800560c <_TrySendOverflowPacket+0x64>
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	627a      	str	r2, [r7, #36]	; 0x24
 8005630:	6a3a      	ldr	r2, [r7, #32]
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800563a:	4b13      	ldr	r3, [pc, #76]	; (8005688 <_TrySendOverflowPacket+0xe0>)
 800563c:	785b      	ldrb	r3, [r3, #1]
 800563e:	4618      	mov	r0, r3
 8005640:	1d3b      	adds	r3, r7, #4
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	461a      	mov	r2, r3
 8005648:	1d3b      	adds	r3, r7, #4
 800564a:	4619      	mov	r1, r3
 800564c:	f7fa fdc0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005650:	4603      	mov	r3, r0
 8005652:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005654:	f7ff fd32 	bl	80050bc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800565e:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <_TrySendOverflowPacket+0xe0>)
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005664:	4b08      	ldr	r3, [pc, #32]	; (8005688 <_TrySendOverflowPacket+0xe0>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	3b01      	subs	r3, #1
 800566a:	b2da      	uxtb	r2, r3
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <_TrySendOverflowPacket+0xe0>)
 800566e:	701a      	strb	r2, [r3, #0]
 8005670:	e004      	b.n	800567c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <_TrySendOverflowPacket+0xe0>)
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	3301      	adds	r3, #1
 8005678:	4a03      	ldr	r2, [pc, #12]	; (8005688 <_TrySendOverflowPacket+0xe0>)
 800567a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800567c:	693b      	ldr	r3, [r7, #16]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3730      	adds	r7, #48	; 0x30
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20014400 	.word	0x20014400
 800568c:	e0001004 	.word	0xe0001004

08005690 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	; 0x28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800569c:	4b96      	ldr	r3, [pc, #600]	; (80058f8 <_SendPacket+0x268>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d010      	beq.n	80056c6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80056a4:	4b94      	ldr	r3, [pc, #592]	; (80058f8 <_SendPacket+0x268>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8130 	beq.w	800590e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80056ae:	4b92      	ldr	r3, [pc, #584]	; (80058f8 <_SendPacket+0x268>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d109      	bne.n	80056ca <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80056b6:	f7ff ff77 	bl	80055a8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80056ba:	4b8f      	ldr	r3, [pc, #572]	; (80058f8 <_SendPacket+0x268>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	f040 8127 	bne.w	8005912 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80056c4:	e001      	b.n	80056ca <_SendPacket+0x3a>
    goto Send;
 80056c6:	bf00      	nop
 80056c8:	e000      	b.n	80056cc <_SendPacket+0x3c>
Send:
 80056ca:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b1f      	cmp	r3, #31
 80056d0:	d809      	bhi.n	80056e6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80056d2:	4b89      	ldr	r3, [pc, #548]	; (80058f8 <_SendPacket+0x268>)
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f040 8118 	bne.w	8005916 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b17      	cmp	r3, #23
 80056ea:	d807      	bhi.n	80056fc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	e0c4      	b.n	8005886 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	2b7f      	cmp	r3, #127	; 0x7f
 8005708:	d912      	bls.n	8005730 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	09da      	lsrs	r2, r3, #7
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3b01      	subs	r3, #1
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	3a01      	subs	r2, #1
 8005722:	60fa      	str	r2, [r7, #12]
 8005724:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005728:	b2da      	uxtb	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	e006      	b.n	800573e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3b01      	subs	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	b2da      	uxtb	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b7e      	cmp	r3, #126	; 0x7e
 8005742:	d807      	bhi.n	8005754 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3b01      	subs	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	e098      	b.n	8005886 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800575a:	d212      	bcs.n	8005782 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	09da      	lsrs	r2, r3, #7
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3b01      	subs	r3, #1
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	3a01      	subs	r2, #1
 8005774:	60fa      	str	r2, [r7, #12]
 8005776:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800577a:	b2da      	uxtb	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	e081      	b.n	8005886 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005788:	d21d      	bcs.n	80057c6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	0b9a      	lsrs	r2, r3, #14
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3b01      	subs	r3, #1
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	09db      	lsrs	r3, r3, #7
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	3a01      	subs	r2, #1
 80057a4:	60fa      	str	r2, [r7, #12]
 80057a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	3a01      	subs	r2, #1
 80057b8:	60fa      	str	r2, [r7, #12]
 80057ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	e05f      	b.n	8005886 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057cc:	d228      	bcs.n	8005820 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	0d5a      	lsrs	r2, r3, #21
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	0b9b      	lsrs	r3, r3, #14
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	3a01      	subs	r2, #1
 80057e8:	60fa      	str	r2, [r7, #12]
 80057ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	09db      	lsrs	r3, r3, #7
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	3a01      	subs	r2, #1
 80057fe:	60fa      	str	r2, [r7, #12]
 8005800:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005804:	b2da      	uxtb	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	3a01      	subs	r2, #1
 8005812:	60fa      	str	r2, [r7, #12]
 8005814:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005818:	b2da      	uxtb	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e032      	b.n	8005886 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	0f1a      	lsrs	r2, r3, #28
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3b01      	subs	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	0d5b      	lsrs	r3, r3, #21
 8005834:	b2db      	uxtb	r3, r3
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	3a01      	subs	r2, #1
 800583a:	60fa      	str	r2, [r7, #12]
 800583c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005840:	b2da      	uxtb	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	0b9b      	lsrs	r3, r3, #14
 800584a:	b2db      	uxtb	r3, r3
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	3a01      	subs	r2, #1
 8005850:	60fa      	str	r2, [r7, #12]
 8005852:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	09db      	lsrs	r3, r3, #7
 8005860:	b2db      	uxtb	r3, r3
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	3a01      	subs	r2, #1
 8005866:	60fa      	str	r2, [r7, #12]
 8005868:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800586c:	b2da      	uxtb	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	3a01      	subs	r2, #1
 800587a:	60fa      	str	r2, [r7, #12]
 800587c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005886:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <_SendPacket+0x26c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800588c:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <_SendPacket+0x268>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	623b      	str	r3, [r7, #32]
 800589e:	e00b      	b.n	80058b8 <_SendPacket+0x228>
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	1c59      	adds	r1, r3, #1
 80058a8:	6279      	str	r1, [r7, #36]	; 0x24
 80058aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	09db      	lsrs	r3, r3, #7
 80058b6:	623b      	str	r3, [r7, #32]
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	2b7f      	cmp	r3, #127	; 0x7f
 80058bc:	d8f0      	bhi.n	80058a0 <_SendPacket+0x210>
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	627a      	str	r2, [r7, #36]	; 0x24
 80058c4:	6a3a      	ldr	r2, [r7, #32]
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80058ce:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <_SendPacket+0x268>)
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	4618      	mov	r0, r3
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	68f9      	ldr	r1, [r7, #12]
 80058de:	f7fa fc77 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058e2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80058e4:	f7ff fbea 	bl	80050bc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d008      	beq.n	8005900 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058ee:	4a02      	ldr	r2, [pc, #8]	; (80058f8 <_SendPacket+0x268>)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	60d3      	str	r3, [r2, #12]
 80058f4:	e010      	b.n	8005918 <_SendPacket+0x288>
 80058f6:	bf00      	nop
 80058f8:	20014400 	.word	0x20014400
 80058fc:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005900:	4b19      	ldr	r3, [pc, #100]	; (8005968 <_SendPacket+0x2d8>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	3301      	adds	r3, #1
 8005906:	b2da      	uxtb	r2, r3
 8005908:	4b17      	ldr	r3, [pc, #92]	; (8005968 <_SendPacket+0x2d8>)
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	e004      	b.n	8005918 <_SendPacket+0x288>
    goto SendDone;
 800590e:	bf00      	nop
 8005910:	e002      	b.n	8005918 <_SendPacket+0x288>
      goto SendDone;
 8005912:	bf00      	nop
 8005914:	e000      	b.n	8005918 <_SendPacket+0x288>
      goto SendDone;
 8005916:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005918:	4b13      	ldr	r3, [pc, #76]	; (8005968 <_SendPacket+0x2d8>)
 800591a:	7e1b      	ldrb	r3, [r3, #24]
 800591c:	4619      	mov	r1, r3
 800591e:	4a13      	ldr	r2, [pc, #76]	; (800596c <_SendPacket+0x2dc>)
 8005920:	460b      	mov	r3, r1
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	440b      	add	r3, r1
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	4413      	add	r3, r2
 800592a:	336c      	adds	r3, #108	; 0x6c
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4b0e      	ldr	r3, [pc, #56]	; (8005968 <_SendPacket+0x2d8>)
 8005930:	7e1b      	ldrb	r3, [r3, #24]
 8005932:	4618      	mov	r0, r3
 8005934:	490d      	ldr	r1, [pc, #52]	; (800596c <_SendPacket+0x2dc>)
 8005936:	4603      	mov	r3, r0
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	4403      	add	r3, r0
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	440b      	add	r3, r1
 8005940:	3370      	adds	r3, #112	; 0x70
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d00b      	beq.n	8005960 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005948:	4b07      	ldr	r3, [pc, #28]	; (8005968 <_SendPacket+0x2d8>)
 800594a:	789b      	ldrb	r3, [r3, #2]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <_SendPacket+0x2d8>)
 8005952:	2201      	movs	r2, #1
 8005954:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005956:	f7ff fdb7 	bl	80054c8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800595a:	4b03      	ldr	r3, [pc, #12]	; (8005968 <_SendPacket+0x2d8>)
 800595c:	2200      	movs	r2, #0
 800595e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005960:	bf00      	nop
 8005962:	3728      	adds	r7, #40	; 0x28
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20014400 	.word	0x20014400
 800596c:	20012f40 	.word	0x20012f40

08005970 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	; 0x28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	3301      	adds	r3, #1
 8005986:	2b80      	cmp	r3, #128	; 0x80
 8005988:	d80a      	bhi.n	80059a0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	1c59      	adds	r1, r3, #1
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6051      	str	r1, [r2, #4]
 8005994:	78fa      	ldrb	r2, [r7, #3]
 8005996:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b80      	cmp	r3, #128	; 0x80
 80059a6:	d15a      	bne.n	8005a5e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	623b      	str	r3, [r7, #32]
 80059c8:	e00b      	b.n	80059e2 <_StoreChar+0x72>
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	1c59      	adds	r1, r3, #1
 80059d2:	6279      	str	r1, [r7, #36]	; 0x24
 80059d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	09db      	lsrs	r3, r3, #7
 80059e0:	623b      	str	r3, [r7, #32]
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	2b7f      	cmp	r3, #127	; 0x7f
 80059e6:	d8f0      	bhi.n	80059ca <_StoreChar+0x5a>
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	627a      	str	r2, [r7, #36]	; 0x24
 80059ee:	6a3a      	ldr	r2, [r7, #32]
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	2300      	movs	r3, #0
 80059fe:	61bb      	str	r3, [r7, #24]
 8005a00:	e00b      	b.n	8005a1a <_StoreChar+0xaa>
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	1c59      	adds	r1, r3, #1
 8005a0a:	61f9      	str	r1, [r7, #28]
 8005a0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	09db      	lsrs	r3, r3, #7
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a1e:	d8f0      	bhi.n	8005a02 <_StoreChar+0x92>
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	61fa      	str	r2, [r7, #28]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	221a      	movs	r2, #26
 8005a36:	6939      	ldr	r1, [r7, #16]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fe29 	bl	8005690 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fd33 	bl	80054ae <_PreparePacket>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	611a      	str	r2, [r3, #16]
  }
}
 8005a5e:	bf00      	nop
 8005a60:	3728      	adds	r7, #40	; 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a82:	e007      	b.n	8005a94 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005a84:	6a3a      	ldr	r2, [r7, #32]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8c:	623b      	str	r3, [r7, #32]
    Width++;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	3301      	adds	r3, #1
 8005a92:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a94:	6a3a      	ldr	r2, [r7, #32]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d2f3      	bcs.n	8005a84 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d901      	bls.n	8005aa8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d11f      	bne.n	8005af2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01c      	beq.n	8005af2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d005      	beq.n	8005ace <_PrintUnsigned+0x66>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <_PrintUnsigned+0x66>
        c = '0';
 8005ac8:	2330      	movs	r3, #48	; 0x30
 8005aca:	76fb      	strb	r3, [r7, #27]
 8005acc:	e001      	b.n	8005ad2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005ace:	2320      	movs	r3, #32
 8005ad0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ad2:	e007      	b.n	8005ae4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005ada:	7efb      	ldrb	r3, [r7, #27]
 8005adc:	4619      	mov	r1, r3
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff ff46 	bl	8005970 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <_PrintUnsigned+0x8a>
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d3f0      	bcc.n	8005ad4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d903      	bls.n	8005b00 <_PrintUnsigned+0x98>
      NumDigits--;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	603b      	str	r3, [r7, #0]
 8005afe:	e009      	b.n	8005b14 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d200      	bcs.n	8005b14 <_PrintUnsigned+0xac>
        break;
 8005b12:	e005      	b.n	8005b20 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	fb02 f303 	mul.w	r3, r2, r3
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b1e:	e7e8      	b.n	8005af2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005b38:	4a15      	ldr	r2, [pc, #84]	; (8005b90 <_PrintUnsigned+0x128>)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	4619      	mov	r1, r3
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff ff14 	bl	8005970 <_StoreChar>
    Digit /= Base;
 8005b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e3      	bne.n	8005b20 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d011      	beq.n	8005b86 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00e      	beq.n	8005b86 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b68:	e006      	b.n	8005b78 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005b70:	2120      	movs	r1, #32
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7ff fefc 	bl	8005970 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <_PrintUnsigned+0x11e>
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d3f1      	bcc.n	8005b6a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005b86:	bf00      	nop
 8005b88:	3728      	adds	r7, #40	; 0x28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	08007b10 	.word	0x08007b10

08005b94 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bfb8      	it	lt
 8005ba8:	425b      	neglt	r3, r3
 8005baa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005bac:	2301      	movs	r3, #1
 8005bae:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005bb0:	e007      	b.n	8005bc2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005bba:	613b      	str	r3, [r7, #16]
    Width++;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	daf3      	bge.n	8005bb2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d901      	bls.n	8005bd6 <_PrintInt+0x42>
    Width = NumDigits;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <_PrintInt+0x5e>
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	db04      	blt.n	8005bec <_PrintInt+0x58>
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <_PrintInt+0x5e>
    FieldWidth--;
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <_PrintInt+0x6e>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <_PrintInt+0x9c>
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d111      	bne.n	8005c30 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00e      	beq.n	8005c30 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c12:	e006      	b.n	8005c22 <_PrintInt+0x8e>
        FieldWidth--;
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005c1a:	2120      	movs	r1, #32
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f7ff fea7 	bl	8005970 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <_PrintInt+0x9c>
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d3f1      	bcc.n	8005c14 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	da07      	bge.n	8005c46 <_PrintInt+0xb2>
    v = -v;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	425b      	negs	r3, r3
 8005c3a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005c3c:	212d      	movs	r1, #45	; 0x2d
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7ff fe96 	bl	8005970 <_StoreChar>
 8005c44:	e008      	b.n	8005c58 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005c50:	212b      	movs	r1, #43	; 0x2b
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f7ff fe8c 	bl	8005970 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d019      	beq.n	8005c96 <_PrintInt+0x102>
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d114      	bne.n	8005c96 <_PrintInt+0x102>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d111      	bne.n	8005c96 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00e      	beq.n	8005c96 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c78:	e006      	b.n	8005c88 <_PrintInt+0xf4>
        FieldWidth--;
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005c80:	2130      	movs	r1, #48	; 0x30
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7ff fe74 	bl	8005970 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <_PrintInt+0x102>
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d3f1      	bcc.n	8005c7a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7ff fedf 	bl	8005a68 <_PrintUnsigned>
}
 8005caa:	bf00      	nop
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b098      	sub	sp, #96	; 0x60
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cc0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cc4:	f04f 0120 	mov.w	r1, #32
 8005cc8:	f381 8811 	msr	BASEPRI, r1
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cce:	48b7      	ldr	r0, [pc, #732]	; (8005fac <_VPrintTarget+0x2f8>)
 8005cd0:	f7ff fbed 	bl	80054ae <_PreparePacket>
 8005cd4:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005cd6:	4bb5      	ldr	r3, [pc, #724]	; (8005fac <_VPrintTarget+0x2f8>)
 8005cd8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005cfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 81a8 	beq.w	8006054 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005d04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d08:	2b25      	cmp	r3, #37	; 0x25
 8005d0a:	f040 8195 	bne.w	8006038 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005d12:	2301      	movs	r3, #1
 8005d14:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005d1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d22:	3b23      	subs	r3, #35	; 0x23
 8005d24:	2b0d      	cmp	r3, #13
 8005d26:	d83f      	bhi.n	8005da8 <_VPrintTarget+0xf4>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <_VPrintTarget+0x7c>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d99 	.word	0x08005d99
 8005d34:	08005da9 	.word	0x08005da9
 8005d38:	08005da9 	.word	0x08005da9
 8005d3c:	08005da9 	.word	0x08005da9
 8005d40:	08005da9 	.word	0x08005da9
 8005d44:	08005da9 	.word	0x08005da9
 8005d48:	08005da9 	.word	0x08005da9
 8005d4c:	08005da9 	.word	0x08005da9
 8005d50:	08005d89 	.word	0x08005d89
 8005d54:	08005da9 	.word	0x08005da9
 8005d58:	08005d69 	.word	0x08005d69
 8005d5c:	08005da9 	.word	0x08005da9
 8005d60:	08005da9 	.word	0x08005da9
 8005d64:	08005d79 	.word	0x08005d79
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3301      	adds	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	e01a      	b.n	8005dae <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d7a:	f043 0302 	orr.w	r3, r3, #2
 8005d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3301      	adds	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	e012      	b.n	8005dae <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8a:	f043 0304 	orr.w	r3, r3, #4
 8005d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3301      	adds	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	e00a      	b.n	8005dae <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d9a:	f043 0308 	orr.w	r3, r3, #8
 8005d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	e002      	b.n	8005dae <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005da8:	2300      	movs	r3, #0
 8005daa:	653b      	str	r3, [r7, #80]	; 0x50
 8005dac:	bf00      	nop
        }
      } while (v);
 8005dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1b0      	bne.n	8005d16 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005db4:	2300      	movs	r3, #0
 8005db6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dc4:	2b2f      	cmp	r3, #47	; 0x2f
 8005dc6:	d912      	bls.n	8005dee <_VPrintTarget+0x13a>
 8005dc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dcc:	2b39      	cmp	r3, #57	; 0x39
 8005dce:	d80e      	bhi.n	8005dee <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	461a      	mov	r2, r3
 8005de2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005de6:	4413      	add	r3, r2
 8005de8:	3b30      	subs	r3, #48	; 0x30
 8005dea:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005dec:	e7e4      	b.n	8005db8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005dee:	2300      	movs	r3, #0
 8005df0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005dfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8005e00:	d11d      	bne.n	8005e3e <_VPrintTarget+0x18a>
        sFormat++;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3301      	adds	r3, #1
 8005e06:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005e10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e14:	2b2f      	cmp	r3, #47	; 0x2f
 8005e16:	d912      	bls.n	8005e3e <_VPrintTarget+0x18a>
 8005e18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e1c:	2b39      	cmp	r3, #57	; 0x39
 8005e1e:	d80e      	bhi.n	8005e3e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3301      	adds	r3, #1
 8005e24:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005e26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	461a      	mov	r2, r3
 8005e32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e36:	4413      	add	r3, r2
 8005e38:	3b30      	subs	r3, #48	; 0x30
 8005e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005e3c:	e7e4      	b.n	8005e08 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005e46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e4a:	2b6c      	cmp	r3, #108	; 0x6c
 8005e4c:	d003      	beq.n	8005e56 <_VPrintTarget+0x1a2>
 8005e4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e52:	2b68      	cmp	r3, #104	; 0x68
 8005e54:	d107      	bne.n	8005e66 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3301      	adds	r3, #1
 8005e62:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005e64:	e7ef      	b.n	8005e46 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005e66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e6a:	2b25      	cmp	r3, #37	; 0x25
 8005e6c:	f000 80d8 	beq.w	8006020 <_VPrintTarget+0x36c>
 8005e70:	2b25      	cmp	r3, #37	; 0x25
 8005e72:	f2c0 80dc 	blt.w	800602e <_VPrintTarget+0x37a>
 8005e76:	2b78      	cmp	r3, #120	; 0x78
 8005e78:	f300 80d9 	bgt.w	800602e <_VPrintTarget+0x37a>
 8005e7c:	2b58      	cmp	r3, #88	; 0x58
 8005e7e:	f2c0 80d6 	blt.w	800602e <_VPrintTarget+0x37a>
 8005e82:	3b58      	subs	r3, #88	; 0x58
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	f200 80d2 	bhi.w	800602e <_VPrintTarget+0x37a>
 8005e8a:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <_VPrintTarget+0x1dc>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	08005f87 	.word	0x08005f87
 8005e94:	0800602f 	.word	0x0800602f
 8005e98:	0800602f 	.word	0x0800602f
 8005e9c:	0800602f 	.word	0x0800602f
 8005ea0:	0800602f 	.word	0x0800602f
 8005ea4:	0800602f 	.word	0x0800602f
 8005ea8:	0800602f 	.word	0x0800602f
 8005eac:	0800602f 	.word	0x0800602f
 8005eb0:	0800602f 	.word	0x0800602f
 8005eb4:	0800602f 	.word	0x0800602f
 8005eb8:	0800602f 	.word	0x0800602f
 8005ebc:	08005f15 	.word	0x08005f15
 8005ec0:	08005f3b 	.word	0x08005f3b
 8005ec4:	0800602f 	.word	0x0800602f
 8005ec8:	0800602f 	.word	0x0800602f
 8005ecc:	0800602f 	.word	0x0800602f
 8005ed0:	0800602f 	.word	0x0800602f
 8005ed4:	0800602f 	.word	0x0800602f
 8005ed8:	0800602f 	.word	0x0800602f
 8005edc:	0800602f 	.word	0x0800602f
 8005ee0:	0800602f 	.word	0x0800602f
 8005ee4:	0800602f 	.word	0x0800602f
 8005ee8:	0800602f 	.word	0x0800602f
 8005eec:	0800602f 	.word	0x0800602f
 8005ef0:	08005ffb 	.word	0x08005ffb
 8005ef4:	0800602f 	.word	0x0800602f
 8005ef8:	0800602f 	.word	0x0800602f
 8005efc:	08005fb1 	.word	0x08005fb1
 8005f00:	0800602f 	.word	0x0800602f
 8005f04:	08005f61 	.word	0x08005f61
 8005f08:	0800602f 	.word	0x0800602f
 8005f0c:	0800602f 	.word	0x0800602f
 8005f10:	08005f87 	.word	0x08005f87
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	1d19      	adds	r1, r3, #4
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6011      	str	r1, [r2, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005f28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005f2c:	f107 0310 	add.w	r3, r7, #16
 8005f30:	4611      	mov	r1, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fd1c 	bl	8005970 <_StoreChar>
        break;
 8005f38:	e07a      	b.n	8006030 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	1d19      	adds	r1, r3, #4
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6011      	str	r1, [r2, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f48:	f107 0010 	add.w	r0, r7, #16
 8005f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f4e:	9301      	str	r3, [sp, #4]
 8005f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f56:	220a      	movs	r2, #10
 8005f58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f5a:	f7ff fe1b 	bl	8005b94 <_PrintInt>
        break;
 8005f5e:	e067      	b.n	8006030 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	1d19      	adds	r1, r3, #4
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6011      	str	r1, [r2, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f70:	f107 0010 	add.w	r0, r7, #16
 8005f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f76:	9301      	str	r3, [sp, #4]
 8005f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f7e:	220a      	movs	r2, #10
 8005f80:	f7ff fd72 	bl	8005a68 <_PrintUnsigned>
        break;
 8005f84:	e054      	b.n	8006030 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	1d19      	adds	r1, r3, #4
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6011      	str	r1, [r2, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005f94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f96:	f107 0010 	add.w	r0, r7, #16
 8005f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9c:	9301      	str	r3, [sp, #4]
 8005f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa4:	2210      	movs	r2, #16
 8005fa6:	f7ff fd5f 	bl	8005a68 <_PrintUnsigned>
        break;
 8005faa:	e041      	b.n	8006030 <_VPrintTarget+0x37c>
 8005fac:	20014430 	.word	0x20014430
      case 's':
        s = va_arg(*pParamList, const char*);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	1d19      	adds	r1, r3, #4
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6011      	str	r1, [r2, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <_VPrintTarget+0x314>
          s = "(null)";
 8005fc4:	4b4a      	ldr	r3, [pc, #296]	; (80060f0 <_VPrintTarget+0x43c>)
 8005fc6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005fd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00b      	beq.n	8005ff6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005fde:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005fe2:	f107 0310 	add.w	r3, r7, #16
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff fcc1 	bl	8005970 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff2:	d9e9      	bls.n	8005fc8 <_VPrintTarget+0x314>
        break;
 8005ff4:	e01c      	b.n	8006030 <_VPrintTarget+0x37c>
            break;
 8005ff6:	bf00      	nop
        break;
 8005ff8:	e01a      	b.n	8006030 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	1d19      	adds	r1, r3, #4
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6011      	str	r1, [r2, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006008:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800600a:	f107 0010 	add.w	r0, r7, #16
 800600e:	2300      	movs	r3, #0
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	2308      	movs	r3, #8
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	2308      	movs	r3, #8
 8006018:	2210      	movs	r2, #16
 800601a:	f7ff fd25 	bl	8005a68 <_PrintUnsigned>
        break;
 800601e:	e007      	b.n	8006030 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006020:	f107 0310 	add.w	r3, r7, #16
 8006024:	2125      	movs	r1, #37	; 0x25
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff fca2 	bl	8005970 <_StoreChar>
        break;
 800602c:	e000      	b.n	8006030 <_VPrintTarget+0x37c>
      default:
        break;
 800602e:	bf00      	nop
      }
      sFormat++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	e007      	b.n	8006048 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006038:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800603c:	f107 0310 	add.w	r3, r7, #16
 8006040:	4611      	mov	r1, r2
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff fc94 	bl	8005970 <_StoreChar>
    }
  } while (*sFormat);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f47f ae4d 	bne.w	8005cec <_VPrintTarget+0x38>
 8006052:	e000      	b.n	8006056 <_VPrintTarget+0x3a2>
      break;
 8006054:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d041      	beq.n	80060e0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800605c:	6a3a      	ldr	r2, [r7, #32]
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	63bb      	str	r3, [r7, #56]	; 0x38
 800606c:	e00b      	b.n	8006086 <_VPrintTarget+0x3d2>
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	b2da      	uxtb	r2, r3
 8006072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006074:	1c59      	adds	r1, r3, #1
 8006076:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006078:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	09db      	lsrs	r3, r3, #7
 8006084:	63bb      	str	r3, [r7, #56]	; 0x38
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	2b7f      	cmp	r3, #127	; 0x7f
 800608a:	d8f0      	bhi.n	800606e <_VPrintTarget+0x3ba>
 800608c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006092:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
 80060a0:	2300      	movs	r3, #0
 80060a2:	633b      	str	r3, [r7, #48]	; 0x30
 80060a4:	e00b      	b.n	80060be <_VPrintTarget+0x40a>
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ac:	1c59      	adds	r1, r3, #1
 80060ae:	6379      	str	r1, [r7, #52]	; 0x34
 80060b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	09db      	lsrs	r3, r3, #7
 80060bc:	633b      	str	r3, [r7, #48]	; 0x30
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2b7f      	cmp	r3, #127	; 0x7f
 80060c2:	d8f0      	bhi.n	80060a6 <_VPrintTarget+0x3f2>
 80060c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	637a      	str	r2, [r7, #52]	; 0x34
 80060ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	6979      	ldr	r1, [r7, #20]
 80060d8:	221a      	movs	r2, #26
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fad8 	bl	8005690 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80060e6:	bf00      	nop
 80060e8:	3758      	adds	r7, #88	; 0x58
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	08007ac0 	.word	0x08007ac0

080060f4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006102:	2300      	movs	r3, #0
 8006104:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006108:	4917      	ldr	r1, [pc, #92]	; (8006168 <SEGGER_SYSVIEW_Init+0x74>)
 800610a:	4818      	ldr	r0, [pc, #96]	; (800616c <SEGGER_SYSVIEW_Init+0x78>)
 800610c:	f7ff f8c6 	bl	800529c <SEGGER_RTT_AllocUpBuffer>
 8006110:	4603      	mov	r3, r0
 8006112:	b2da      	uxtb	r2, r3
 8006114:	4b16      	ldr	r3, [pc, #88]	; (8006170 <SEGGER_SYSVIEW_Init+0x7c>)
 8006116:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006118:	4b15      	ldr	r3, [pc, #84]	; (8006170 <SEGGER_SYSVIEW_Init+0x7c>)
 800611a:	785a      	ldrb	r2, [r3, #1]
 800611c:	4b14      	ldr	r3, [pc, #80]	; (8006170 <SEGGER_SYSVIEW_Init+0x7c>)
 800611e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006120:	4b13      	ldr	r3, [pc, #76]	; (8006170 <SEGGER_SYSVIEW_Init+0x7c>)
 8006122:	7e1b      	ldrb	r3, [r3, #24]
 8006124:	4618      	mov	r0, r3
 8006126:	2300      	movs	r3, #0
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	2308      	movs	r3, #8
 800612c:	4a11      	ldr	r2, [pc, #68]	; (8006174 <SEGGER_SYSVIEW_Init+0x80>)
 800612e:	490f      	ldr	r1, [pc, #60]	; (800616c <SEGGER_SYSVIEW_Init+0x78>)
 8006130:	f7ff f938 	bl	80053a4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006134:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <SEGGER_SYSVIEW_Init+0x7c>)
 8006136:	2200      	movs	r2, #0
 8006138:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800613a:	4b0f      	ldr	r3, [pc, #60]	; (8006178 <SEGGER_SYSVIEW_Init+0x84>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a0c      	ldr	r2, [pc, #48]	; (8006170 <SEGGER_SYSVIEW_Init+0x7c>)
 8006140:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006142:	4a0b      	ldr	r2, [pc, #44]	; (8006170 <SEGGER_SYSVIEW_Init+0x7c>)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006148:	4a09      	ldr	r2, [pc, #36]	; (8006170 <SEGGER_SYSVIEW_Init+0x7c>)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800614e:	4a08      	ldr	r2, [pc, #32]	; (8006170 <SEGGER_SYSVIEW_Init+0x7c>)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006154:	4a06      	ldr	r2, [pc, #24]	; (8006170 <SEGGER_SYSVIEW_Init+0x7c>)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800615a:	4b05      	ldr	r3, [pc, #20]	; (8006170 <SEGGER_SYSVIEW_Init+0x7c>)
 800615c:	2200      	movs	r2, #0
 800615e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	200133f8 	.word	0x200133f8
 800616c:	08007ac8 	.word	0x08007ac8
 8006170:	20014400 	.word	0x20014400
 8006174:	200143f8 	.word	0x200143f8
 8006178:	e0001004 	.word	0xe0001004

0800617c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006184:	4a04      	ldr	r2, [pc, #16]	; (8006198 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6113      	str	r3, [r2, #16]
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	20014400 	.word	0x20014400

0800619c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061a4:	f3ef 8311 	mrs	r3, BASEPRI
 80061a8:	f04f 0120 	mov.w	r1, #32
 80061ac:	f381 8811 	msr	BASEPRI, r1
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	4808      	ldr	r0, [pc, #32]	; (80061d4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80061b4:	f7ff f97b 	bl	80054ae <_PreparePacket>
 80061b8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	68b8      	ldr	r0, [r7, #8]
 80061c0:	f7ff fa66 	bl	8005690 <_SendPacket>
  RECORD_END();
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f383 8811 	msr	BASEPRI, r3
}
 80061ca:	bf00      	nop
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20014430 	.word	0x20014430

080061d8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061e2:	f3ef 8311 	mrs	r3, BASEPRI
 80061e6:	f04f 0120 	mov.w	r1, #32
 80061ea:	f381 8811 	msr	BASEPRI, r1
 80061ee:	617b      	str	r3, [r7, #20]
 80061f0:	4816      	ldr	r0, [pc, #88]	; (800624c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80061f2:	f7ff f95c 	bl	80054ae <_PreparePacket>
 80061f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	61fb      	str	r3, [r7, #28]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	e00b      	b.n	800621e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	1c59      	adds	r1, r3, #1
 800620e:	61f9      	str	r1, [r7, #28]
 8006210:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	09db      	lsrs	r3, r3, #7
 800621c:	61bb      	str	r3, [r7, #24]
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2b7f      	cmp	r3, #127	; 0x7f
 8006222:	d8f0      	bhi.n	8006206 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	61fa      	str	r2, [r7, #28]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	68f9      	ldr	r1, [r7, #12]
 8006238:	6938      	ldr	r0, [r7, #16]
 800623a:	f7ff fa29 	bl	8005690 <_SendPacket>
  RECORD_END();
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f383 8811 	msr	BASEPRI, r3
}
 8006244:	bf00      	nop
 8006246:	3720      	adds	r7, #32
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20014430 	.word	0x20014430

08006250 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b08c      	sub	sp, #48	; 0x30
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800625c:	f3ef 8311 	mrs	r3, BASEPRI
 8006260:	f04f 0120 	mov.w	r1, #32
 8006264:	f381 8811 	msr	BASEPRI, r1
 8006268:	61fb      	str	r3, [r7, #28]
 800626a:	4825      	ldr	r0, [pc, #148]	; (8006300 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800626c:	f7ff f91f 	bl	80054ae <_PreparePacket>
 8006270:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	62bb      	str	r3, [r7, #40]	; 0x28
 800627e:	e00b      	b.n	8006298 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	b2da      	uxtb	r2, r3
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	1c59      	adds	r1, r3, #1
 8006288:	62f9      	str	r1, [r7, #44]	; 0x2c
 800628a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	09db      	lsrs	r3, r3, #7
 8006296:	62bb      	str	r3, [r7, #40]	; 0x28
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	2b7f      	cmp	r3, #127	; 0x7f
 800629c:	d8f0      	bhi.n	8006280 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	623b      	str	r3, [r7, #32]
 80062b6:	e00b      	b.n	80062d0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	1c59      	adds	r1, r3, #1
 80062c0:	6279      	str	r1, [r7, #36]	; 0x24
 80062c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	09db      	lsrs	r3, r3, #7
 80062ce:	623b      	str	r3, [r7, #32]
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	2b7f      	cmp	r3, #127	; 0x7f
 80062d4:	d8f0      	bhi.n	80062b8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	627a      	str	r2, [r7, #36]	; 0x24
 80062dc:	6a3a      	ldr	r2, [r7, #32]
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	6979      	ldr	r1, [r7, #20]
 80062ea:	69b8      	ldr	r0, [r7, #24]
 80062ec:	f7ff f9d0 	bl	8005690 <_SendPacket>
  RECORD_END();
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f383 8811 	msr	BASEPRI, r3
}
 80062f6:	bf00      	nop
 80062f8:	3730      	adds	r7, #48	; 0x30
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20014430 	.word	0x20014430

08006304 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b08e      	sub	sp, #56	; 0x38
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006312:	f3ef 8311 	mrs	r3, BASEPRI
 8006316:	f04f 0120 	mov.w	r1, #32
 800631a:	f381 8811 	msr	BASEPRI, r1
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	4832      	ldr	r0, [pc, #200]	; (80063ec <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006322:	f7ff f8c4 	bl	80054ae <_PreparePacket>
 8006326:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	633b      	str	r3, [r7, #48]	; 0x30
 8006334:	e00b      	b.n	800634e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	b2da      	uxtb	r2, r3
 800633a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633c:	1c59      	adds	r1, r3, #1
 800633e:	6379      	str	r1, [r7, #52]	; 0x34
 8006340:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	09db      	lsrs	r3, r3, #7
 800634c:	633b      	str	r3, [r7, #48]	; 0x30
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	2b7f      	cmp	r3, #127	; 0x7f
 8006352:	d8f0      	bhi.n	8006336 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	637a      	str	r2, [r7, #52]	; 0x34
 800635a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006362:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28
 800636c:	e00b      	b.n	8006386 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	b2da      	uxtb	r2, r3
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	1c59      	adds	r1, r3, #1
 8006376:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	09db      	lsrs	r3, r3, #7
 8006384:	62bb      	str	r3, [r7, #40]	; 0x28
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	2b7f      	cmp	r3, #127	; 0x7f
 800638a:	d8f0      	bhi.n	800636e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	623b      	str	r3, [r7, #32]
 80063a4:	e00b      	b.n	80063be <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	1c59      	adds	r1, r3, #1
 80063ae:	6279      	str	r1, [r7, #36]	; 0x24
 80063b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	09db      	lsrs	r3, r3, #7
 80063bc:	623b      	str	r3, [r7, #32]
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	2b7f      	cmp	r3, #127	; 0x7f
 80063c2:	d8f0      	bhi.n	80063a6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	627a      	str	r2, [r7, #36]	; 0x24
 80063ca:	6a3a      	ldr	r2, [r7, #32]
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	6979      	ldr	r1, [r7, #20]
 80063d8:	69b8      	ldr	r0, [r7, #24]
 80063da:	f7ff f959 	bl	8005690 <_SendPacket>
  RECORD_END();
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	f383 8811 	msr	BASEPRI, r3
}
 80063e4:	bf00      	nop
 80063e6:	3738      	adds	r7, #56	; 0x38
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	20014430 	.word	0x20014430

080063f0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b090      	sub	sp, #64	; 0x40
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006402:	f04f 0120 	mov.w	r1, #32
 8006406:	f381 8811 	msr	BASEPRI, r1
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	4840      	ldr	r0, [pc, #256]	; (8006510 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800640e:	f7ff f84e 	bl	80054ae <_PreparePacket>
 8006412:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006420:	e00b      	b.n	800643a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006424:	b2da      	uxtb	r2, r3
 8006426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006428:	1c59      	adds	r1, r3, #1
 800642a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800642c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006436:	09db      	lsrs	r3, r3, #7
 8006438:	63bb      	str	r3, [r7, #56]	; 0x38
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	2b7f      	cmp	r3, #127	; 0x7f
 800643e:	d8f0      	bhi.n	8006422 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	701a      	strb	r2, [r3, #0]
 800644c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	637b      	str	r3, [r7, #52]	; 0x34
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	633b      	str	r3, [r7, #48]	; 0x30
 8006458:	e00b      	b.n	8006472 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	b2da      	uxtb	r2, r3
 800645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006460:	1c59      	adds	r1, r3, #1
 8006462:	6379      	str	r1, [r7, #52]	; 0x34
 8006464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	09db      	lsrs	r3, r3, #7
 8006470:	633b      	str	r3, [r7, #48]	; 0x30
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	2b7f      	cmp	r3, #127	; 0x7f
 8006476:	d8f0      	bhi.n	800645a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	637a      	str	r2, [r7, #52]	; 0x34
 800647e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006486:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006490:	e00b      	b.n	80064aa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	b2da      	uxtb	r2, r3
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	1c59      	adds	r1, r3, #1
 800649a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800649c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	09db      	lsrs	r3, r3, #7
 80064a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	2b7f      	cmp	r3, #127	; 0x7f
 80064ae:	d8f0      	bhi.n	8006492 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
 80064c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c6:	623b      	str	r3, [r7, #32]
 80064c8:	e00b      	b.n	80064e2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	1c59      	adds	r1, r3, #1
 80064d2:	6279      	str	r1, [r7, #36]	; 0x24
 80064d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	09db      	lsrs	r3, r3, #7
 80064e0:	623b      	str	r3, [r7, #32]
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	2b7f      	cmp	r3, #127	; 0x7f
 80064e6:	d8f0      	bhi.n	80064ca <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	627a      	str	r2, [r7, #36]	; 0x24
 80064ee:	6a3a      	ldr	r2, [r7, #32]
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	6979      	ldr	r1, [r7, #20]
 80064fc:	69b8      	ldr	r0, [r7, #24]
 80064fe:	f7ff f8c7 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	f383 8811 	msr	BASEPRI, r3
}
 8006508:	bf00      	nop
 800650a:	3740      	adds	r7, #64	; 0x40
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20014430 	.word	0x20014430

08006514 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b08c      	sub	sp, #48	; 0x30
 8006518:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800651a:	4b59      	ldr	r3, [pc, #356]	; (8006680 <SEGGER_SYSVIEW_Start+0x16c>)
 800651c:	2201      	movs	r2, #1
 800651e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006520:	f3ef 8311 	mrs	r3, BASEPRI
 8006524:	f04f 0120 	mov.w	r1, #32
 8006528:	f381 8811 	msr	BASEPRI, r1
 800652c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800652e:	4b54      	ldr	r3, [pc, #336]	; (8006680 <SEGGER_SYSVIEW_Start+0x16c>)
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	220a      	movs	r2, #10
 8006534:	4953      	ldr	r1, [pc, #332]	; (8006684 <SEGGER_SYSVIEW_Start+0x170>)
 8006536:	4618      	mov	r0, r3
 8006538:	f7f9 fe4a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006542:	f7fe fdbb 	bl	80050bc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006546:	200a      	movs	r0, #10
 8006548:	f7ff fe28 	bl	800619c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800654c:	f3ef 8311 	mrs	r3, BASEPRI
 8006550:	f04f 0120 	mov.w	r1, #32
 8006554:	f381 8811 	msr	BASEPRI, r1
 8006558:	60bb      	str	r3, [r7, #8]
 800655a:	484b      	ldr	r0, [pc, #300]	; (8006688 <SEGGER_SYSVIEW_Start+0x174>)
 800655c:	f7fe ffa7 	bl	80054ae <_PreparePacket>
 8006560:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800656a:	4b45      	ldr	r3, [pc, #276]	; (8006680 <SEGGER_SYSVIEW_Start+0x16c>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006570:	e00b      	b.n	800658a <SEGGER_SYSVIEW_Start+0x76>
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	b2da      	uxtb	r2, r3
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	1c59      	adds	r1, r3, #1
 800657a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800657c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006586:	09db      	lsrs	r3, r3, #7
 8006588:	62bb      	str	r3, [r7, #40]	; 0x28
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	2b7f      	cmp	r3, #127	; 0x7f
 800658e:	d8f0      	bhi.n	8006572 <SEGGER_SYSVIEW_Start+0x5e>
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
 80065a4:	4b36      	ldr	r3, [pc, #216]	; (8006680 <SEGGER_SYSVIEW_Start+0x16c>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	623b      	str	r3, [r7, #32]
 80065aa:	e00b      	b.n	80065c4 <SEGGER_SYSVIEW_Start+0xb0>
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	1c59      	adds	r1, r3, #1
 80065b4:	6279      	str	r1, [r7, #36]	; 0x24
 80065b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	09db      	lsrs	r3, r3, #7
 80065c2:	623b      	str	r3, [r7, #32]
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	2b7f      	cmp	r3, #127	; 0x7f
 80065c8:	d8f0      	bhi.n	80065ac <SEGGER_SYSVIEW_Start+0x98>
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	627a      	str	r2, [r7, #36]	; 0x24
 80065d0:	6a3a      	ldr	r2, [r7, #32]
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	4b28      	ldr	r3, [pc, #160]	; (8006680 <SEGGER_SYSVIEW_Start+0x16c>)
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	61bb      	str	r3, [r7, #24]
 80065e4:	e00b      	b.n	80065fe <SEGGER_SYSVIEW_Start+0xea>
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	1c59      	adds	r1, r3, #1
 80065ee:	61f9      	str	r1, [r7, #28]
 80065f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065f4:	b2d2      	uxtb	r2, r2
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	09db      	lsrs	r3, r3, #7
 80065fc:	61bb      	str	r3, [r7, #24]
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	2b7f      	cmp	r3, #127	; 0x7f
 8006602:	d8f0      	bhi.n	80065e6 <SEGGER_SYSVIEW_Start+0xd2>
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	61fa      	str	r2, [r7, #28]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	2300      	movs	r3, #0
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	e00b      	b.n	8006636 <SEGGER_SYSVIEW_Start+0x122>
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	b2da      	uxtb	r2, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	1c59      	adds	r1, r3, #1
 8006626:	6179      	str	r1, [r7, #20]
 8006628:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800662c:	b2d2      	uxtb	r2, r2
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	09db      	lsrs	r3, r3, #7
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b7f      	cmp	r3, #127	; 0x7f
 800663a:	d8f0      	bhi.n	800661e <SEGGER_SYSVIEW_Start+0x10a>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	617a      	str	r2, [r7, #20]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800664c:	2218      	movs	r2, #24
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff f81d 	bl	8005690 <_SendPacket>
      RECORD_END();
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800665c:	4b08      	ldr	r3, [pc, #32]	; (8006680 <SEGGER_SYSVIEW_Start+0x16c>)
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006664:	4b06      	ldr	r3, [pc, #24]	; (8006680 <SEGGER_SYSVIEW_Start+0x16c>)
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800666a:	f000 f9eb 	bl	8006a44 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800666e:	f000 f9b1 	bl	80069d4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006672:	f000 fc2d 	bl	8006ed0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006676:	bf00      	nop
 8006678:	3730      	adds	r7, #48	; 0x30
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20014400 	.word	0x20014400
 8006684:	08007b04 	.word	0x08007b04
 8006688:	20014430 	.word	0x20014430

0800668c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006692:	f3ef 8311 	mrs	r3, BASEPRI
 8006696:	f04f 0120 	mov.w	r1, #32
 800669a:	f381 8811 	msr	BASEPRI, r1
 800669e:	607b      	str	r3, [r7, #4]
 80066a0:	480b      	ldr	r0, [pc, #44]	; (80066d0 <SEGGER_SYSVIEW_Stop+0x44>)
 80066a2:	f7fe ff04 	bl	80054ae <_PreparePacket>
 80066a6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80066a8:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80066b0:	220b      	movs	r2, #11
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6838      	ldr	r0, [r7, #0]
 80066b6:	f7fe ffeb 	bl	8005690 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80066ba:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80066bc:	2200      	movs	r2, #0
 80066be:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f383 8811 	msr	BASEPRI, r3
}
 80066c6:	bf00      	nop
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20014430 	.word	0x20014430
 80066d4:	20014400 	.word	0x20014400

080066d8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08c      	sub	sp, #48	; 0x30
 80066dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066de:	f3ef 8311 	mrs	r3, BASEPRI
 80066e2:	f04f 0120 	mov.w	r1, #32
 80066e6:	f381 8811 	msr	BASEPRI, r1
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	4845      	ldr	r0, [pc, #276]	; (8006804 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80066ee:	f7fe fede 	bl	80054ae <_PreparePacket>
 80066f2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066fc:	4b42      	ldr	r3, [pc, #264]	; (8006808 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	62bb      	str	r3, [r7, #40]	; 0x28
 8006702:	e00b      	b.n	800671c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	b2da      	uxtb	r2, r3
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	1c59      	adds	r1, r3, #1
 800670c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800670e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	09db      	lsrs	r3, r3, #7
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	2b7f      	cmp	r3, #127	; 0x7f
 8006720:	d8f0      	bhi.n	8006704 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
 8006736:	4b34      	ldr	r3, [pc, #208]	; (8006808 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	623b      	str	r3, [r7, #32]
 800673c:	e00b      	b.n	8006756 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	b2da      	uxtb	r2, r3
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	1c59      	adds	r1, r3, #1
 8006746:	6279      	str	r1, [r7, #36]	; 0x24
 8006748:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	09db      	lsrs	r3, r3, #7
 8006754:	623b      	str	r3, [r7, #32]
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	2b7f      	cmp	r3, #127	; 0x7f
 800675a:	d8f0      	bhi.n	800673e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	627a      	str	r2, [r7, #36]	; 0x24
 8006762:	6a3a      	ldr	r2, [r7, #32]
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	61fb      	str	r3, [r7, #28]
 8006770:	4b25      	ldr	r3, [pc, #148]	; (8006808 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	e00b      	b.n	8006790 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	b2da      	uxtb	r2, r3
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	1c59      	adds	r1, r3, #1
 8006780:	61f9      	str	r1, [r7, #28]
 8006782:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	09db      	lsrs	r3, r3, #7
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	2b7f      	cmp	r3, #127	; 0x7f
 8006794:	d8f0      	bhi.n	8006778 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	61fa      	str	r2, [r7, #28]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	617b      	str	r3, [r7, #20]
 80067aa:	2300      	movs	r3, #0
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	e00b      	b.n	80067c8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	1c59      	adds	r1, r3, #1
 80067b8:	6179      	str	r1, [r7, #20]
 80067ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	09db      	lsrs	r3, r3, #7
 80067c6:	613b      	str	r3, [r7, #16]
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2b7f      	cmp	r3, #127	; 0x7f
 80067cc:	d8f0      	bhi.n	80067b0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	617a      	str	r2, [r7, #20]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80067de:	2218      	movs	r2, #24
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	68b8      	ldr	r0, [r7, #8]
 80067e4:	f7fe ff54 	bl	8005690 <_SendPacket>
  RECORD_END();
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80067ee:	4b06      	ldr	r3, [pc, #24]	; (8006808 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80067f6:	4b04      	ldr	r3, [pc, #16]	; (8006808 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	4798      	blx	r3
  }
}
 80067fc:	bf00      	nop
 80067fe:	3730      	adds	r7, #48	; 0x30
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20014430 	.word	0x20014430
 8006808:	20014400 	.word	0x20014400

0800680c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800680c:	b580      	push	{r7, lr}
 800680e:	b092      	sub	sp, #72	; 0x48
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006814:	f3ef 8311 	mrs	r3, BASEPRI
 8006818:	f04f 0120 	mov.w	r1, #32
 800681c:	f381 8811 	msr	BASEPRI, r1
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	486a      	ldr	r0, [pc, #424]	; (80069cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006824:	f7fe fe43 	bl	80054ae <_PreparePacket>
 8006828:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	647b      	str	r3, [r7, #68]	; 0x44
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4b66      	ldr	r3, [pc, #408]	; (80069d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	643b      	str	r3, [r7, #64]	; 0x40
 800683e:	e00b      	b.n	8006858 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006842:	b2da      	uxtb	r2, r3
 8006844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006846:	1c59      	adds	r1, r3, #1
 8006848:	6479      	str	r1, [r7, #68]	; 0x44
 800684a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006854:	09db      	lsrs	r3, r3, #7
 8006856:	643b      	str	r3, [r7, #64]	; 0x40
 8006858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800685a:	2b7f      	cmp	r3, #127	; 0x7f
 800685c:	d8f0      	bhi.n	8006840 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800685e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	647a      	str	r2, [r7, #68]	; 0x44
 8006864:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800686c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	63bb      	str	r3, [r7, #56]	; 0x38
 8006878:	e00b      	b.n	8006892 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	b2da      	uxtb	r2, r3
 800687e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006880:	1c59      	adds	r1, r3, #1
 8006882:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006884:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	09db      	lsrs	r3, r3, #7
 8006890:	63bb      	str	r3, [r7, #56]	; 0x38
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	2b7f      	cmp	r3, #127	; 0x7f
 8006896:	d8f0      	bhi.n	800687a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800689e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	4619      	mov	r1, r3
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f7fe fdc3 	bl	800543c <_EncodeStr>
 80068b6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80068b8:	2209      	movs	r2, #9
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	6938      	ldr	r0, [r7, #16]
 80068be:	f7fe fee7 	bl	8005690 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b40      	ldr	r3, [pc, #256]	; (80069d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	633b      	str	r3, [r7, #48]	; 0x30
 80068d6:	e00b      	b.n	80068f0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068de:	1c59      	adds	r1, r3, #1
 80068e0:	6379      	str	r1, [r7, #52]	; 0x34
 80068e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	09db      	lsrs	r3, r3, #7
 80068ee:	633b      	str	r3, [r7, #48]	; 0x30
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	2b7f      	cmp	r3, #127	; 0x7f
 80068f4:	d8f0      	bhi.n	80068d8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80068f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	637a      	str	r2, [r7, #52]	; 0x34
 80068fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006904:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006910:	e00b      	b.n	800692a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	b2da      	uxtb	r2, r3
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	1c59      	adds	r1, r3, #1
 800691a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800691c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	09db      	lsrs	r3, r3, #7
 8006928:	62bb      	str	r3, [r7, #40]	; 0x28
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	2b7f      	cmp	r3, #127	; 0x7f
 800692e:	d8f0      	bhi.n	8006912 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	701a      	strb	r2, [r3, #0]
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	623b      	str	r3, [r7, #32]
 800694a:	e00b      	b.n	8006964 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	b2da      	uxtb	r2, r3
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	1c59      	adds	r1, r3, #1
 8006954:	6279      	str	r1, [r7, #36]	; 0x24
 8006956:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	09db      	lsrs	r3, r3, #7
 8006962:	623b      	str	r3, [r7, #32]
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	2b7f      	cmp	r3, #127	; 0x7f
 8006968:	d8f0      	bhi.n	800694c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	627a      	str	r2, [r7, #36]	; 0x24
 8006970:	6a3a      	ldr	r2, [r7, #32]
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	e00b      	b.n	800699e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	b2da      	uxtb	r2, r3
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	1c59      	adds	r1, r3, #1
 800698e:	61f9      	str	r1, [r7, #28]
 8006990:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	09db      	lsrs	r3, r3, #7
 800699c:	61bb      	str	r3, [r7, #24]
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	2b7f      	cmp	r3, #127	; 0x7f
 80069a2:	d8f0      	bhi.n	8006986 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	61fa      	str	r2, [r7, #28]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80069b4:	2215      	movs	r2, #21
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	6938      	ldr	r0, [r7, #16]
 80069ba:	f7fe fe69 	bl	8005690 <_SendPacket>
  RECORD_END();
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f383 8811 	msr	BASEPRI, r3
}
 80069c4:	bf00      	nop
 80069c6:	3748      	adds	r7, #72	; 0x48
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20014430 	.word	0x20014430
 80069d0:	20014400 	.word	0x20014400

080069d4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80069d8:	4b07      	ldr	r3, [pc, #28]	; (80069f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80069e0:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80069ea:	4b03      	ldr	r3, [pc, #12]	; (80069f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	4798      	blx	r3
  }
}
 80069f2:	bf00      	nop
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20014400 	.word	0x20014400

080069fc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a04:	f3ef 8311 	mrs	r3, BASEPRI
 8006a08:	f04f 0120 	mov.w	r1, #32
 8006a0c:	f381 8811 	msr	BASEPRI, r1
 8006a10:	617b      	str	r3, [r7, #20]
 8006a12:	480b      	ldr	r0, [pc, #44]	; (8006a40 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006a14:	f7fe fd4b 	bl	80054ae <_PreparePacket>
 8006a18:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a1a:	2280      	movs	r2, #128	; 0x80
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	6938      	ldr	r0, [r7, #16]
 8006a20:	f7fe fd0c 	bl	800543c <_EncodeStr>
 8006a24:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006a26:	220e      	movs	r2, #14
 8006a28:	68f9      	ldr	r1, [r7, #12]
 8006a2a:	6938      	ldr	r0, [r7, #16]
 8006a2c:	f7fe fe30 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f383 8811 	msr	BASEPRI, r3
}
 8006a36:	bf00      	nop
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20014430 	.word	0x20014430

08006a44 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006a44:	b590      	push	{r4, r7, lr}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006a4a:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d01a      	beq.n	8006a88 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006a52:	4b13      	ldr	r3, [pc, #76]	; (8006aa0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d015      	beq.n	8006a88 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006a5c:	4b10      	ldr	r3, [pc, #64]	; (8006aa0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4798      	blx	r3
 8006a64:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a68:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	000a      	movs	r2, r1
 8006a78:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4621      	mov	r1, r4
 8006a80:	200d      	movs	r0, #13
 8006a82:	f7ff fbe5 	bl	8006250 <SEGGER_SYSVIEW_RecordU32x2>
 8006a86:	e006      	b.n	8006a96 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006a88:	4b06      	ldr	r3, [pc, #24]	; (8006aa4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	200c      	movs	r0, #12
 8006a90:	f7ff fba2 	bl	80061d8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd90      	pop	{r4, r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20014400 	.word	0x20014400
 8006aa4:	e0001004 	.word	0xe0001004

08006aa8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006aae:	f3ef 8311 	mrs	r3, BASEPRI
 8006ab2:	f04f 0120 	mov.w	r1, #32
 8006ab6:	f381 8811 	msr	BASEPRI, r1
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	4819      	ldr	r0, [pc, #100]	; (8006b24 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006abe:	f7fe fcf6 	bl	80054ae <_PreparePacket>
 8006ac2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006ac8:	4b17      	ldr	r3, [pc, #92]	; (8006b28 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	e00b      	b.n	8006af4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	1c59      	adds	r1, r3, #1
 8006ae4:	6179      	str	r1, [r7, #20]
 8006ae6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	09db      	lsrs	r3, r3, #7
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2b7f      	cmp	r3, #127	; 0x7f
 8006af8:	d8f0      	bhi.n	8006adc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	617a      	str	r2, [r7, #20]
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	6879      	ldr	r1, [r7, #4]
 8006b0e:	68b8      	ldr	r0, [r7, #8]
 8006b10:	f7fe fdbe 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f383 8811 	msr	BASEPRI, r3
}
 8006b1a:	bf00      	nop
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20014430 	.word	0x20014430
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b32:	f3ef 8311 	mrs	r3, BASEPRI
 8006b36:	f04f 0120 	mov.w	r1, #32
 8006b3a:	f381 8811 	msr	BASEPRI, r1
 8006b3e:	607b      	str	r3, [r7, #4]
 8006b40:	4807      	ldr	r0, [pc, #28]	; (8006b60 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006b42:	f7fe fcb4 	bl	80054ae <_PreparePacket>
 8006b46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006b48:	2203      	movs	r2, #3
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6838      	ldr	r0, [r7, #0]
 8006b4e:	f7fe fd9f 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f383 8811 	msr	BASEPRI, r3
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20014430 	.word	0x20014430

08006b64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b6a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b6e:	f04f 0120 	mov.w	r1, #32
 8006b72:	f381 8811 	msr	BASEPRI, r1
 8006b76:	607b      	str	r3, [r7, #4]
 8006b78:	4807      	ldr	r0, [pc, #28]	; (8006b98 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006b7a:	f7fe fc98 	bl	80054ae <_PreparePacket>
 8006b7e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006b80:	2212      	movs	r2, #18
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6838      	ldr	r0, [r7, #0]
 8006b86:	f7fe fd83 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f383 8811 	msr	BASEPRI, r3
}
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	20014430 	.word	0x20014430

08006b9c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba6:	f04f 0120 	mov.w	r1, #32
 8006baa:	f381 8811 	msr	BASEPRI, r1
 8006bae:	607b      	str	r3, [r7, #4]
 8006bb0:	4807      	ldr	r0, [pc, #28]	; (8006bd0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006bb2:	f7fe fc7c 	bl	80054ae <_PreparePacket>
 8006bb6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006bb8:	2211      	movs	r2, #17
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6838      	ldr	r0, [r7, #0]
 8006bbe:	f7fe fd67 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f383 8811 	msr	BASEPRI, r3
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	20014430 	.word	0x20014430

08006bd4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8006be0:	f04f 0120 	mov.w	r1, #32
 8006be4:	f381 8811 	msr	BASEPRI, r1
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	4819      	ldr	r0, [pc, #100]	; (8006c50 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006bec:	f7fe fc5f 	bl	80054ae <_PreparePacket>
 8006bf0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bf6:	4b17      	ldr	r3, [pc, #92]	; (8006c54 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	61fb      	str	r3, [r7, #28]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	61bb      	str	r3, [r7, #24]
 8006c08:	e00b      	b.n	8006c22 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	1c59      	adds	r1, r3, #1
 8006c12:	61f9      	str	r1, [r7, #28]
 8006c14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	09db      	lsrs	r3, r3, #7
 8006c20:	61bb      	str	r3, [r7, #24]
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b7f      	cmp	r3, #127	; 0x7f
 8006c26:	d8f0      	bhi.n	8006c0a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	61fa      	str	r2, [r7, #28]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006c38:	2208      	movs	r2, #8
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	6938      	ldr	r0, [r7, #16]
 8006c3e:	f7fe fd27 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f383 8811 	msr	BASEPRI, r3
}
 8006c48:	bf00      	nop
 8006c4a:	3720      	adds	r7, #32
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20014430 	.word	0x20014430
 8006c54:	20014400 	.word	0x20014400

08006c58 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c60:	f3ef 8311 	mrs	r3, BASEPRI
 8006c64:	f04f 0120 	mov.w	r1, #32
 8006c68:	f381 8811 	msr	BASEPRI, r1
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	4819      	ldr	r0, [pc, #100]	; (8006cd4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c70:	f7fe fc1d 	bl	80054ae <_PreparePacket>
 8006c74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c7a:	4b17      	ldr	r3, [pc, #92]	; (8006cd8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	61fb      	str	r3, [r7, #28]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	e00b      	b.n	8006ca6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	1c59      	adds	r1, r3, #1
 8006c96:	61f9      	str	r1, [r7, #28]
 8006c98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c9c:	b2d2      	uxtb	r2, r2
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	09db      	lsrs	r3, r3, #7
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8006caa:	d8f0      	bhi.n	8006c8e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	61fa      	str	r2, [r7, #28]
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	b2d2      	uxtb	r2, r2
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006cbc:	2204      	movs	r2, #4
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	6938      	ldr	r0, [r7, #16]
 8006cc2:	f7fe fce5 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f383 8811 	msr	BASEPRI, r3
}
 8006ccc:	bf00      	nop
 8006cce:	3720      	adds	r7, #32
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20014430 	.word	0x20014430
 8006cd8:	20014400 	.word	0x20014400

08006cdc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ce4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ce8:	f04f 0120 	mov.w	r1, #32
 8006cec:	f381 8811 	msr	BASEPRI, r1
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	4819      	ldr	r0, [pc, #100]	; (8006d58 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006cf4:	f7fe fbdb 	bl	80054ae <_PreparePacket>
 8006cf8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006cfe:	4b17      	ldr	r3, [pc, #92]	; (8006d5c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	e00b      	b.n	8006d2a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	1c59      	adds	r1, r3, #1
 8006d1a:	61f9      	str	r1, [r7, #28]
 8006d1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d20:	b2d2      	uxtb	r2, r2
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	09db      	lsrs	r3, r3, #7
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d2e:	d8f0      	bhi.n	8006d12 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	61fa      	str	r2, [r7, #28]
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006d40:	2206      	movs	r2, #6
 8006d42:	68f9      	ldr	r1, [r7, #12]
 8006d44:	6938      	ldr	r0, [r7, #16]
 8006d46:	f7fe fca3 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f383 8811 	msr	BASEPRI, r3
}
 8006d50:	bf00      	nop
 8006d52:	3720      	adds	r7, #32
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20014430 	.word	0x20014430
 8006d5c:	20014400 	.word	0x20014400

08006d60 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006d68:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	1ad3      	subs	r3, r2, r3
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	20014400 	.word	0x20014400

08006d80 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08c      	sub	sp, #48	; 0x30
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4603      	mov	r3, r0
 8006d88:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006d8a:	4b40      	ldr	r3, [pc, #256]	; (8006e8c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d077      	beq.n	8006e82 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006d92:	4b3e      	ldr	r3, [pc, #248]	; (8006e8c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006d98:	2300      	movs	r3, #0
 8006d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d9c:	e008      	b.n	8006db0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d007      	beq.n	8006dba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	3301      	adds	r3, #1
 8006dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d3f2      	bcc.n	8006d9e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006db8:	e000      	b.n	8006dbc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006dba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d055      	beq.n	8006e6e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc6:	f04f 0120 	mov.w	r1, #32
 8006dca:	f381 8811 	msr	BASEPRI, r1
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	482f      	ldr	r0, [pc, #188]	; (8006e90 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006dd2:	f7fe fb6c 	bl	80054ae <_PreparePacket>
 8006dd6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	623b      	str	r3, [r7, #32]
 8006de4:	e00b      	b.n	8006dfe <SEGGER_SYSVIEW_SendModule+0x7e>
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	1c59      	adds	r1, r3, #1
 8006dee:	6279      	str	r1, [r7, #36]	; 0x24
 8006df0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	09db      	lsrs	r3, r3, #7
 8006dfc:	623b      	str	r3, [r7, #32]
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	2b7f      	cmp	r3, #127	; 0x7f
 8006e02:	d8f0      	bhi.n	8006de6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	627a      	str	r2, [r7, #36]	; 0x24
 8006e0a:	6a3a      	ldr	r2, [r7, #32]
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	61fb      	str	r3, [r7, #28]
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	e00b      	b.n	8006e38 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	1c59      	adds	r1, r3, #1
 8006e28:	61f9      	str	r1, [r7, #28]
 8006e2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	09db      	lsrs	r3, r3, #7
 8006e36:	61bb      	str	r3, [r7, #24]
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e3c:	d8f0      	bhi.n	8006e20 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	61fa      	str	r2, [r7, #28]
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2280      	movs	r2, #128	; 0x80
 8006e54:	4619      	mov	r1, r3
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f7fe faf0 	bl	800543c <_EncodeStr>
 8006e5c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006e5e:	2216      	movs	r2, #22
 8006e60:	68f9      	ldr	r1, [r7, #12]
 8006e62:	6938      	ldr	r0, [r7, #16]
 8006e64:	f7fe fc14 	bl	8005690 <_SendPacket>
      RECORD_END();
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d006      	beq.n	8006e82 <SEGGER_SYSVIEW_SendModule+0x102>
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	4798      	blx	r3
    }
  }
}
 8006e82:	bf00      	nop
 8006e84:	3730      	adds	r7, #48	; 0x30
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20014428 	.word	0x20014428
 8006e90:	20014430 	.word	0x20014430

08006e94 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00f      	beq.n	8006ec2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006ea2:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1f2      	bne.n	8006ea8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20014428 	.word	0x20014428

08006ed0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8006eda:	f04f 0120 	mov.w	r1, #32
 8006ede:	f381 8811 	msr	BASEPRI, r1
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	4817      	ldr	r0, [pc, #92]	; (8006f44 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006ee6:	f7fe fae2 	bl	80054ae <_PreparePacket>
 8006eea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	e00b      	b.n	8006f14 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	1c59      	adds	r1, r3, #1
 8006f04:	6179      	str	r1, [r7, #20]
 8006f06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	09db      	lsrs	r3, r3, #7
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	2b7f      	cmp	r3, #127	; 0x7f
 8006f18:	d8f0      	bhi.n	8006efc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	617a      	str	r2, [r7, #20]
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006f2a:	221b      	movs	r2, #27
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	68b8      	ldr	r0, [r7, #8]
 8006f30:	f7fe fbae 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f383 8811 	msr	BASEPRI, r3
}
 8006f3a:	bf00      	nop
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20014430 	.word	0x20014430
 8006f48:	2001442c 	.word	0x2001442c

08006f4c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006f4c:	b40f      	push	{r0, r1, r2, r3}
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006f54:	f107 0314 	add.w	r3, r7, #20
 8006f58:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006f5a:	1d3b      	adds	r3, r7, #4
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	2100      	movs	r1, #0
 8006f60:	6938      	ldr	r0, [r7, #16]
 8006f62:	f7fe fea7 	bl	8005cb4 <_VPrintTarget>
  va_end(ParamList);
}
 8006f66:	bf00      	nop
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f70:	b004      	add	sp, #16
 8006f72:	4770      	bx	lr

08006f74 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08a      	sub	sp, #40	; 0x28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006f80:	f04f 0120 	mov.w	r1, #32
 8006f84:	f381 8811 	msr	BASEPRI, r1
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	4827      	ldr	r0, [pc, #156]	; (8007028 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006f8c:	f7fe fa8f 	bl	80054ae <_PreparePacket>
 8006f90:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f92:	2280      	movs	r2, #128	; 0x80
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	6938      	ldr	r0, [r7, #16]
 8006f98:	f7fe fa50 	bl	800543c <_EncodeStr>
 8006f9c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	623b      	str	r3, [r7, #32]
 8006fa6:	e00b      	b.n	8006fc0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	1c59      	adds	r1, r3, #1
 8006fb0:	6279      	str	r1, [r7, #36]	; 0x24
 8006fb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fb6:	b2d2      	uxtb	r2, r2
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	09db      	lsrs	r3, r3, #7
 8006fbe:	623b      	str	r3, [r7, #32]
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006fc4:	d8f0      	bhi.n	8006fa8 <SEGGER_SYSVIEW_Warn+0x34>
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	627a      	str	r2, [r7, #36]	; 0x24
 8006fcc:	6a3a      	ldr	r2, [r7, #32]
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	61fb      	str	r3, [r7, #28]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61bb      	str	r3, [r7, #24]
 8006fde:	e00b      	b.n	8006ff8 <SEGGER_SYSVIEW_Warn+0x84>
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	1c59      	adds	r1, r3, #1
 8006fe8:	61f9      	str	r1, [r7, #28]
 8006fea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	09db      	lsrs	r3, r3, #7
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8006ffc:	d8f0      	bhi.n	8006fe0 <SEGGER_SYSVIEW_Warn+0x6c>
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	61fa      	str	r2, [r7, #28]
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	701a      	strb	r2, [r3, #0]
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800700e:	221a      	movs	r2, #26
 8007010:	68f9      	ldr	r1, [r7, #12]
 8007012:	6938      	ldr	r0, [r7, #16]
 8007014:	f7fe fb3c 	bl	8005690 <_SendPacket>
  RECORD_END();
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f383 8811 	msr	BASEPRI, r3
}
 800701e:	bf00      	nop
 8007020:	3728      	adds	r7, #40	; 0x28
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20014430 	.word	0x20014430

0800702c <__errno>:
 800702c:	4b01      	ldr	r3, [pc, #4]	; (8007034 <__errno+0x8>)
 800702e:	6818      	ldr	r0, [r3, #0]
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20000014 	.word	0x20000014

08007038 <__libc_init_array>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	4d0d      	ldr	r5, [pc, #52]	; (8007070 <__libc_init_array+0x38>)
 800703c:	4c0d      	ldr	r4, [pc, #52]	; (8007074 <__libc_init_array+0x3c>)
 800703e:	1b64      	subs	r4, r4, r5
 8007040:	10a4      	asrs	r4, r4, #2
 8007042:	2600      	movs	r6, #0
 8007044:	42a6      	cmp	r6, r4
 8007046:	d109      	bne.n	800705c <__libc_init_array+0x24>
 8007048:	4d0b      	ldr	r5, [pc, #44]	; (8007078 <__libc_init_array+0x40>)
 800704a:	4c0c      	ldr	r4, [pc, #48]	; (800707c <__libc_init_array+0x44>)
 800704c:	f000 fcb2 	bl	80079b4 <_init>
 8007050:	1b64      	subs	r4, r4, r5
 8007052:	10a4      	asrs	r4, r4, #2
 8007054:	2600      	movs	r6, #0
 8007056:	42a6      	cmp	r6, r4
 8007058:	d105      	bne.n	8007066 <__libc_init_array+0x2e>
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007060:	4798      	blx	r3
 8007062:	3601      	adds	r6, #1
 8007064:	e7ee      	b.n	8007044 <__libc_init_array+0xc>
 8007066:	f855 3b04 	ldr.w	r3, [r5], #4
 800706a:	4798      	blx	r3
 800706c:	3601      	adds	r6, #1
 800706e:	e7f2      	b.n	8007056 <__libc_init_array+0x1e>
 8007070:	08007b5c 	.word	0x08007b5c
 8007074:	08007b5c 	.word	0x08007b5c
 8007078:	08007b5c 	.word	0x08007b5c
 800707c:	08007b60 	.word	0x08007b60

08007080 <memcmp>:
 8007080:	b510      	push	{r4, lr}
 8007082:	3901      	subs	r1, #1
 8007084:	4402      	add	r2, r0
 8007086:	4290      	cmp	r0, r2
 8007088:	d101      	bne.n	800708e <memcmp+0xe>
 800708a:	2000      	movs	r0, #0
 800708c:	e005      	b.n	800709a <memcmp+0x1a>
 800708e:	7803      	ldrb	r3, [r0, #0]
 8007090:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007094:	42a3      	cmp	r3, r4
 8007096:	d001      	beq.n	800709c <memcmp+0x1c>
 8007098:	1b18      	subs	r0, r3, r4
 800709a:	bd10      	pop	{r4, pc}
 800709c:	3001      	adds	r0, #1
 800709e:	e7f2      	b.n	8007086 <memcmp+0x6>

080070a0 <memcpy>:
 80070a0:	440a      	add	r2, r1
 80070a2:	4291      	cmp	r1, r2
 80070a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a8:	d100      	bne.n	80070ac <memcpy+0xc>
 80070aa:	4770      	bx	lr
 80070ac:	b510      	push	{r4, lr}
 80070ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070b6:	4291      	cmp	r1, r2
 80070b8:	d1f9      	bne.n	80070ae <memcpy+0xe>
 80070ba:	bd10      	pop	{r4, pc}

080070bc <memset>:
 80070bc:	4402      	add	r2, r0
 80070be:	4603      	mov	r3, r0
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d100      	bne.n	80070c6 <memset+0xa>
 80070c4:	4770      	bx	lr
 80070c6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ca:	e7f9      	b.n	80070c0 <memset+0x4>

080070cc <sniprintf>:
 80070cc:	b40c      	push	{r2, r3}
 80070ce:	b530      	push	{r4, r5, lr}
 80070d0:	4b17      	ldr	r3, [pc, #92]	; (8007130 <sniprintf+0x64>)
 80070d2:	1e0c      	subs	r4, r1, #0
 80070d4:	681d      	ldr	r5, [r3, #0]
 80070d6:	b09d      	sub	sp, #116	; 0x74
 80070d8:	da08      	bge.n	80070ec <sniprintf+0x20>
 80070da:	238b      	movs	r3, #139	; 0x8b
 80070dc:	602b      	str	r3, [r5, #0]
 80070de:	f04f 30ff 	mov.w	r0, #4294967295
 80070e2:	b01d      	add	sp, #116	; 0x74
 80070e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070e8:	b002      	add	sp, #8
 80070ea:	4770      	bx	lr
 80070ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80070f4:	bf14      	ite	ne
 80070f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80070fa:	4623      	moveq	r3, r4
 80070fc:	9304      	str	r3, [sp, #16]
 80070fe:	9307      	str	r3, [sp, #28]
 8007100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007104:	9002      	str	r0, [sp, #8]
 8007106:	9006      	str	r0, [sp, #24]
 8007108:	f8ad 3016 	strh.w	r3, [sp, #22]
 800710c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800710e:	ab21      	add	r3, sp, #132	; 0x84
 8007110:	a902      	add	r1, sp, #8
 8007112:	4628      	mov	r0, r5
 8007114:	9301      	str	r3, [sp, #4]
 8007116:	f000 f869 	bl	80071ec <_svfiprintf_r>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	bfbc      	itt	lt
 800711e:	238b      	movlt	r3, #139	; 0x8b
 8007120:	602b      	strlt	r3, [r5, #0]
 8007122:	2c00      	cmp	r4, #0
 8007124:	d0dd      	beq.n	80070e2 <sniprintf+0x16>
 8007126:	9b02      	ldr	r3, [sp, #8]
 8007128:	2200      	movs	r2, #0
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e7d9      	b.n	80070e2 <sniprintf+0x16>
 800712e:	bf00      	nop
 8007130:	20000014 	.word	0x20000014

08007134 <__ssputs_r>:
 8007134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007138:	688e      	ldr	r6, [r1, #8]
 800713a:	429e      	cmp	r6, r3
 800713c:	4682      	mov	sl, r0
 800713e:	460c      	mov	r4, r1
 8007140:	4690      	mov	r8, r2
 8007142:	461f      	mov	r7, r3
 8007144:	d838      	bhi.n	80071b8 <__ssputs_r+0x84>
 8007146:	898a      	ldrh	r2, [r1, #12]
 8007148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800714c:	d032      	beq.n	80071b4 <__ssputs_r+0x80>
 800714e:	6825      	ldr	r5, [r4, #0]
 8007150:	6909      	ldr	r1, [r1, #16]
 8007152:	eba5 0901 	sub.w	r9, r5, r1
 8007156:	6965      	ldr	r5, [r4, #20]
 8007158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800715c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007160:	3301      	adds	r3, #1
 8007162:	444b      	add	r3, r9
 8007164:	106d      	asrs	r5, r5, #1
 8007166:	429d      	cmp	r5, r3
 8007168:	bf38      	it	cc
 800716a:	461d      	movcc	r5, r3
 800716c:	0553      	lsls	r3, r2, #21
 800716e:	d531      	bpl.n	80071d4 <__ssputs_r+0xa0>
 8007170:	4629      	mov	r1, r5
 8007172:	f000 fb55 	bl	8007820 <_malloc_r>
 8007176:	4606      	mov	r6, r0
 8007178:	b950      	cbnz	r0, 8007190 <__ssputs_r+0x5c>
 800717a:	230c      	movs	r3, #12
 800717c:	f8ca 3000 	str.w	r3, [sl]
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007186:	81a3      	strh	r3, [r4, #12]
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007190:	6921      	ldr	r1, [r4, #16]
 8007192:	464a      	mov	r2, r9
 8007194:	f7ff ff84 	bl	80070a0 <memcpy>
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800719e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a2:	81a3      	strh	r3, [r4, #12]
 80071a4:	6126      	str	r6, [r4, #16]
 80071a6:	6165      	str	r5, [r4, #20]
 80071a8:	444e      	add	r6, r9
 80071aa:	eba5 0509 	sub.w	r5, r5, r9
 80071ae:	6026      	str	r6, [r4, #0]
 80071b0:	60a5      	str	r5, [r4, #8]
 80071b2:	463e      	mov	r6, r7
 80071b4:	42be      	cmp	r6, r7
 80071b6:	d900      	bls.n	80071ba <__ssputs_r+0x86>
 80071b8:	463e      	mov	r6, r7
 80071ba:	6820      	ldr	r0, [r4, #0]
 80071bc:	4632      	mov	r2, r6
 80071be:	4641      	mov	r1, r8
 80071c0:	f000 faa8 	bl	8007714 <memmove>
 80071c4:	68a3      	ldr	r3, [r4, #8]
 80071c6:	1b9b      	subs	r3, r3, r6
 80071c8:	60a3      	str	r3, [r4, #8]
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	4433      	add	r3, r6
 80071ce:	6023      	str	r3, [r4, #0]
 80071d0:	2000      	movs	r0, #0
 80071d2:	e7db      	b.n	800718c <__ssputs_r+0x58>
 80071d4:	462a      	mov	r2, r5
 80071d6:	f000 fb97 	bl	8007908 <_realloc_r>
 80071da:	4606      	mov	r6, r0
 80071dc:	2800      	cmp	r0, #0
 80071de:	d1e1      	bne.n	80071a4 <__ssputs_r+0x70>
 80071e0:	6921      	ldr	r1, [r4, #16]
 80071e2:	4650      	mov	r0, sl
 80071e4:	f000 fab0 	bl	8007748 <_free_r>
 80071e8:	e7c7      	b.n	800717a <__ssputs_r+0x46>
	...

080071ec <_svfiprintf_r>:
 80071ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f0:	4698      	mov	r8, r3
 80071f2:	898b      	ldrh	r3, [r1, #12]
 80071f4:	061b      	lsls	r3, r3, #24
 80071f6:	b09d      	sub	sp, #116	; 0x74
 80071f8:	4607      	mov	r7, r0
 80071fa:	460d      	mov	r5, r1
 80071fc:	4614      	mov	r4, r2
 80071fe:	d50e      	bpl.n	800721e <_svfiprintf_r+0x32>
 8007200:	690b      	ldr	r3, [r1, #16]
 8007202:	b963      	cbnz	r3, 800721e <_svfiprintf_r+0x32>
 8007204:	2140      	movs	r1, #64	; 0x40
 8007206:	f000 fb0b 	bl	8007820 <_malloc_r>
 800720a:	6028      	str	r0, [r5, #0]
 800720c:	6128      	str	r0, [r5, #16]
 800720e:	b920      	cbnz	r0, 800721a <_svfiprintf_r+0x2e>
 8007210:	230c      	movs	r3, #12
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	e0d1      	b.n	80073be <_svfiprintf_r+0x1d2>
 800721a:	2340      	movs	r3, #64	; 0x40
 800721c:	616b      	str	r3, [r5, #20]
 800721e:	2300      	movs	r3, #0
 8007220:	9309      	str	r3, [sp, #36]	; 0x24
 8007222:	2320      	movs	r3, #32
 8007224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007228:	f8cd 800c 	str.w	r8, [sp, #12]
 800722c:	2330      	movs	r3, #48	; 0x30
 800722e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073d8 <_svfiprintf_r+0x1ec>
 8007232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007236:	f04f 0901 	mov.w	r9, #1
 800723a:	4623      	mov	r3, r4
 800723c:	469a      	mov	sl, r3
 800723e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007242:	b10a      	cbz	r2, 8007248 <_svfiprintf_r+0x5c>
 8007244:	2a25      	cmp	r2, #37	; 0x25
 8007246:	d1f9      	bne.n	800723c <_svfiprintf_r+0x50>
 8007248:	ebba 0b04 	subs.w	fp, sl, r4
 800724c:	d00b      	beq.n	8007266 <_svfiprintf_r+0x7a>
 800724e:	465b      	mov	r3, fp
 8007250:	4622      	mov	r2, r4
 8007252:	4629      	mov	r1, r5
 8007254:	4638      	mov	r0, r7
 8007256:	f7ff ff6d 	bl	8007134 <__ssputs_r>
 800725a:	3001      	adds	r0, #1
 800725c:	f000 80aa 	beq.w	80073b4 <_svfiprintf_r+0x1c8>
 8007260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007262:	445a      	add	r2, fp
 8007264:	9209      	str	r2, [sp, #36]	; 0x24
 8007266:	f89a 3000 	ldrb.w	r3, [sl]
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 80a2 	beq.w	80073b4 <_svfiprintf_r+0x1c8>
 8007270:	2300      	movs	r3, #0
 8007272:	f04f 32ff 	mov.w	r2, #4294967295
 8007276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800727a:	f10a 0a01 	add.w	sl, sl, #1
 800727e:	9304      	str	r3, [sp, #16]
 8007280:	9307      	str	r3, [sp, #28]
 8007282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007286:	931a      	str	r3, [sp, #104]	; 0x68
 8007288:	4654      	mov	r4, sl
 800728a:	2205      	movs	r2, #5
 800728c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007290:	4851      	ldr	r0, [pc, #324]	; (80073d8 <_svfiprintf_r+0x1ec>)
 8007292:	f7f8 fff5 	bl	8000280 <memchr>
 8007296:	9a04      	ldr	r2, [sp, #16]
 8007298:	b9d8      	cbnz	r0, 80072d2 <_svfiprintf_r+0xe6>
 800729a:	06d0      	lsls	r0, r2, #27
 800729c:	bf44      	itt	mi
 800729e:	2320      	movmi	r3, #32
 80072a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a4:	0711      	lsls	r1, r2, #28
 80072a6:	bf44      	itt	mi
 80072a8:	232b      	movmi	r3, #43	; 0x2b
 80072aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ae:	f89a 3000 	ldrb.w	r3, [sl]
 80072b2:	2b2a      	cmp	r3, #42	; 0x2a
 80072b4:	d015      	beq.n	80072e2 <_svfiprintf_r+0xf6>
 80072b6:	9a07      	ldr	r2, [sp, #28]
 80072b8:	4654      	mov	r4, sl
 80072ba:	2000      	movs	r0, #0
 80072bc:	f04f 0c0a 	mov.w	ip, #10
 80072c0:	4621      	mov	r1, r4
 80072c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072c6:	3b30      	subs	r3, #48	; 0x30
 80072c8:	2b09      	cmp	r3, #9
 80072ca:	d94e      	bls.n	800736a <_svfiprintf_r+0x17e>
 80072cc:	b1b0      	cbz	r0, 80072fc <_svfiprintf_r+0x110>
 80072ce:	9207      	str	r2, [sp, #28]
 80072d0:	e014      	b.n	80072fc <_svfiprintf_r+0x110>
 80072d2:	eba0 0308 	sub.w	r3, r0, r8
 80072d6:	fa09 f303 	lsl.w	r3, r9, r3
 80072da:	4313      	orrs	r3, r2
 80072dc:	9304      	str	r3, [sp, #16]
 80072de:	46a2      	mov	sl, r4
 80072e0:	e7d2      	b.n	8007288 <_svfiprintf_r+0x9c>
 80072e2:	9b03      	ldr	r3, [sp, #12]
 80072e4:	1d19      	adds	r1, r3, #4
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	9103      	str	r1, [sp, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	bfbb      	ittet	lt
 80072ee:	425b      	neglt	r3, r3
 80072f0:	f042 0202 	orrlt.w	r2, r2, #2
 80072f4:	9307      	strge	r3, [sp, #28]
 80072f6:	9307      	strlt	r3, [sp, #28]
 80072f8:	bfb8      	it	lt
 80072fa:	9204      	strlt	r2, [sp, #16]
 80072fc:	7823      	ldrb	r3, [r4, #0]
 80072fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007300:	d10c      	bne.n	800731c <_svfiprintf_r+0x130>
 8007302:	7863      	ldrb	r3, [r4, #1]
 8007304:	2b2a      	cmp	r3, #42	; 0x2a
 8007306:	d135      	bne.n	8007374 <_svfiprintf_r+0x188>
 8007308:	9b03      	ldr	r3, [sp, #12]
 800730a:	1d1a      	adds	r2, r3, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	9203      	str	r2, [sp, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	bfb8      	it	lt
 8007314:	f04f 33ff 	movlt.w	r3, #4294967295
 8007318:	3402      	adds	r4, #2
 800731a:	9305      	str	r3, [sp, #20]
 800731c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073e8 <_svfiprintf_r+0x1fc>
 8007320:	7821      	ldrb	r1, [r4, #0]
 8007322:	2203      	movs	r2, #3
 8007324:	4650      	mov	r0, sl
 8007326:	f7f8 ffab 	bl	8000280 <memchr>
 800732a:	b140      	cbz	r0, 800733e <_svfiprintf_r+0x152>
 800732c:	2340      	movs	r3, #64	; 0x40
 800732e:	eba0 000a 	sub.w	r0, r0, sl
 8007332:	fa03 f000 	lsl.w	r0, r3, r0
 8007336:	9b04      	ldr	r3, [sp, #16]
 8007338:	4303      	orrs	r3, r0
 800733a:	3401      	adds	r4, #1
 800733c:	9304      	str	r3, [sp, #16]
 800733e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007342:	4826      	ldr	r0, [pc, #152]	; (80073dc <_svfiprintf_r+0x1f0>)
 8007344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007348:	2206      	movs	r2, #6
 800734a:	f7f8 ff99 	bl	8000280 <memchr>
 800734e:	2800      	cmp	r0, #0
 8007350:	d038      	beq.n	80073c4 <_svfiprintf_r+0x1d8>
 8007352:	4b23      	ldr	r3, [pc, #140]	; (80073e0 <_svfiprintf_r+0x1f4>)
 8007354:	bb1b      	cbnz	r3, 800739e <_svfiprintf_r+0x1b2>
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	3307      	adds	r3, #7
 800735a:	f023 0307 	bic.w	r3, r3, #7
 800735e:	3308      	adds	r3, #8
 8007360:	9303      	str	r3, [sp, #12]
 8007362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007364:	4433      	add	r3, r6
 8007366:	9309      	str	r3, [sp, #36]	; 0x24
 8007368:	e767      	b.n	800723a <_svfiprintf_r+0x4e>
 800736a:	fb0c 3202 	mla	r2, ip, r2, r3
 800736e:	460c      	mov	r4, r1
 8007370:	2001      	movs	r0, #1
 8007372:	e7a5      	b.n	80072c0 <_svfiprintf_r+0xd4>
 8007374:	2300      	movs	r3, #0
 8007376:	3401      	adds	r4, #1
 8007378:	9305      	str	r3, [sp, #20]
 800737a:	4619      	mov	r1, r3
 800737c:	f04f 0c0a 	mov.w	ip, #10
 8007380:	4620      	mov	r0, r4
 8007382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007386:	3a30      	subs	r2, #48	; 0x30
 8007388:	2a09      	cmp	r2, #9
 800738a:	d903      	bls.n	8007394 <_svfiprintf_r+0x1a8>
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0c5      	beq.n	800731c <_svfiprintf_r+0x130>
 8007390:	9105      	str	r1, [sp, #20]
 8007392:	e7c3      	b.n	800731c <_svfiprintf_r+0x130>
 8007394:	fb0c 2101 	mla	r1, ip, r1, r2
 8007398:	4604      	mov	r4, r0
 800739a:	2301      	movs	r3, #1
 800739c:	e7f0      	b.n	8007380 <_svfiprintf_r+0x194>
 800739e:	ab03      	add	r3, sp, #12
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	462a      	mov	r2, r5
 80073a4:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <_svfiprintf_r+0x1f8>)
 80073a6:	a904      	add	r1, sp, #16
 80073a8:	4638      	mov	r0, r7
 80073aa:	f3af 8000 	nop.w
 80073ae:	1c42      	adds	r2, r0, #1
 80073b0:	4606      	mov	r6, r0
 80073b2:	d1d6      	bne.n	8007362 <_svfiprintf_r+0x176>
 80073b4:	89ab      	ldrh	r3, [r5, #12]
 80073b6:	065b      	lsls	r3, r3, #25
 80073b8:	f53f af2c 	bmi.w	8007214 <_svfiprintf_r+0x28>
 80073bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073be:	b01d      	add	sp, #116	; 0x74
 80073c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c4:	ab03      	add	r3, sp, #12
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	462a      	mov	r2, r5
 80073ca:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <_svfiprintf_r+0x1f8>)
 80073cc:	a904      	add	r1, sp, #16
 80073ce:	4638      	mov	r0, r7
 80073d0:	f000 f87a 	bl	80074c8 <_printf_i>
 80073d4:	e7eb      	b.n	80073ae <_svfiprintf_r+0x1c2>
 80073d6:	bf00      	nop
 80073d8:	08007b20 	.word	0x08007b20
 80073dc:	08007b2a 	.word	0x08007b2a
 80073e0:	00000000 	.word	0x00000000
 80073e4:	08007135 	.word	0x08007135
 80073e8:	08007b26 	.word	0x08007b26

080073ec <_printf_common>:
 80073ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f0:	4616      	mov	r6, r2
 80073f2:	4699      	mov	r9, r3
 80073f4:	688a      	ldr	r2, [r1, #8]
 80073f6:	690b      	ldr	r3, [r1, #16]
 80073f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073fc:	4293      	cmp	r3, r2
 80073fe:	bfb8      	it	lt
 8007400:	4613      	movlt	r3, r2
 8007402:	6033      	str	r3, [r6, #0]
 8007404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007408:	4607      	mov	r7, r0
 800740a:	460c      	mov	r4, r1
 800740c:	b10a      	cbz	r2, 8007412 <_printf_common+0x26>
 800740e:	3301      	adds	r3, #1
 8007410:	6033      	str	r3, [r6, #0]
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	0699      	lsls	r1, r3, #26
 8007416:	bf42      	ittt	mi
 8007418:	6833      	ldrmi	r3, [r6, #0]
 800741a:	3302      	addmi	r3, #2
 800741c:	6033      	strmi	r3, [r6, #0]
 800741e:	6825      	ldr	r5, [r4, #0]
 8007420:	f015 0506 	ands.w	r5, r5, #6
 8007424:	d106      	bne.n	8007434 <_printf_common+0x48>
 8007426:	f104 0a19 	add.w	sl, r4, #25
 800742a:	68e3      	ldr	r3, [r4, #12]
 800742c:	6832      	ldr	r2, [r6, #0]
 800742e:	1a9b      	subs	r3, r3, r2
 8007430:	42ab      	cmp	r3, r5
 8007432:	dc26      	bgt.n	8007482 <_printf_common+0x96>
 8007434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007438:	1e13      	subs	r3, r2, #0
 800743a:	6822      	ldr	r2, [r4, #0]
 800743c:	bf18      	it	ne
 800743e:	2301      	movne	r3, #1
 8007440:	0692      	lsls	r2, r2, #26
 8007442:	d42b      	bmi.n	800749c <_printf_common+0xb0>
 8007444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007448:	4649      	mov	r1, r9
 800744a:	4638      	mov	r0, r7
 800744c:	47c0      	blx	r8
 800744e:	3001      	adds	r0, #1
 8007450:	d01e      	beq.n	8007490 <_printf_common+0xa4>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	68e5      	ldr	r5, [r4, #12]
 8007456:	6832      	ldr	r2, [r6, #0]
 8007458:	f003 0306 	and.w	r3, r3, #6
 800745c:	2b04      	cmp	r3, #4
 800745e:	bf08      	it	eq
 8007460:	1aad      	subeq	r5, r5, r2
 8007462:	68a3      	ldr	r3, [r4, #8]
 8007464:	6922      	ldr	r2, [r4, #16]
 8007466:	bf0c      	ite	eq
 8007468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800746c:	2500      	movne	r5, #0
 800746e:	4293      	cmp	r3, r2
 8007470:	bfc4      	itt	gt
 8007472:	1a9b      	subgt	r3, r3, r2
 8007474:	18ed      	addgt	r5, r5, r3
 8007476:	2600      	movs	r6, #0
 8007478:	341a      	adds	r4, #26
 800747a:	42b5      	cmp	r5, r6
 800747c:	d11a      	bne.n	80074b4 <_printf_common+0xc8>
 800747e:	2000      	movs	r0, #0
 8007480:	e008      	b.n	8007494 <_printf_common+0xa8>
 8007482:	2301      	movs	r3, #1
 8007484:	4652      	mov	r2, sl
 8007486:	4649      	mov	r1, r9
 8007488:	4638      	mov	r0, r7
 800748a:	47c0      	blx	r8
 800748c:	3001      	adds	r0, #1
 800748e:	d103      	bne.n	8007498 <_printf_common+0xac>
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007498:	3501      	adds	r5, #1
 800749a:	e7c6      	b.n	800742a <_printf_common+0x3e>
 800749c:	18e1      	adds	r1, r4, r3
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	2030      	movs	r0, #48	; 0x30
 80074a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074a6:	4422      	add	r2, r4
 80074a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074b0:	3302      	adds	r3, #2
 80074b2:	e7c7      	b.n	8007444 <_printf_common+0x58>
 80074b4:	2301      	movs	r3, #1
 80074b6:	4622      	mov	r2, r4
 80074b8:	4649      	mov	r1, r9
 80074ba:	4638      	mov	r0, r7
 80074bc:	47c0      	blx	r8
 80074be:	3001      	adds	r0, #1
 80074c0:	d0e6      	beq.n	8007490 <_printf_common+0xa4>
 80074c2:	3601      	adds	r6, #1
 80074c4:	e7d9      	b.n	800747a <_printf_common+0x8e>
	...

080074c8 <_printf_i>:
 80074c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	7e0f      	ldrb	r7, [r1, #24]
 80074ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074d0:	2f78      	cmp	r7, #120	; 0x78
 80074d2:	4691      	mov	r9, r2
 80074d4:	4680      	mov	r8, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	469a      	mov	sl, r3
 80074da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074de:	d807      	bhi.n	80074f0 <_printf_i+0x28>
 80074e0:	2f62      	cmp	r7, #98	; 0x62
 80074e2:	d80a      	bhi.n	80074fa <_printf_i+0x32>
 80074e4:	2f00      	cmp	r7, #0
 80074e6:	f000 80d8 	beq.w	800769a <_printf_i+0x1d2>
 80074ea:	2f58      	cmp	r7, #88	; 0x58
 80074ec:	f000 80a3 	beq.w	8007636 <_printf_i+0x16e>
 80074f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074f8:	e03a      	b.n	8007570 <_printf_i+0xa8>
 80074fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074fe:	2b15      	cmp	r3, #21
 8007500:	d8f6      	bhi.n	80074f0 <_printf_i+0x28>
 8007502:	a101      	add	r1, pc, #4	; (adr r1, 8007508 <_printf_i+0x40>)
 8007504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007508:	08007561 	.word	0x08007561
 800750c:	08007575 	.word	0x08007575
 8007510:	080074f1 	.word	0x080074f1
 8007514:	080074f1 	.word	0x080074f1
 8007518:	080074f1 	.word	0x080074f1
 800751c:	080074f1 	.word	0x080074f1
 8007520:	08007575 	.word	0x08007575
 8007524:	080074f1 	.word	0x080074f1
 8007528:	080074f1 	.word	0x080074f1
 800752c:	080074f1 	.word	0x080074f1
 8007530:	080074f1 	.word	0x080074f1
 8007534:	08007681 	.word	0x08007681
 8007538:	080075a5 	.word	0x080075a5
 800753c:	08007663 	.word	0x08007663
 8007540:	080074f1 	.word	0x080074f1
 8007544:	080074f1 	.word	0x080074f1
 8007548:	080076a3 	.word	0x080076a3
 800754c:	080074f1 	.word	0x080074f1
 8007550:	080075a5 	.word	0x080075a5
 8007554:	080074f1 	.word	0x080074f1
 8007558:	080074f1 	.word	0x080074f1
 800755c:	0800766b 	.word	0x0800766b
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	1d1a      	adds	r2, r3, #4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	602a      	str	r2, [r5, #0]
 8007568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800756c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007570:	2301      	movs	r3, #1
 8007572:	e0a3      	b.n	80076bc <_printf_i+0x1f4>
 8007574:	6820      	ldr	r0, [r4, #0]
 8007576:	6829      	ldr	r1, [r5, #0]
 8007578:	0606      	lsls	r6, r0, #24
 800757a:	f101 0304 	add.w	r3, r1, #4
 800757e:	d50a      	bpl.n	8007596 <_printf_i+0xce>
 8007580:	680e      	ldr	r6, [r1, #0]
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	2e00      	cmp	r6, #0
 8007586:	da03      	bge.n	8007590 <_printf_i+0xc8>
 8007588:	232d      	movs	r3, #45	; 0x2d
 800758a:	4276      	negs	r6, r6
 800758c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007590:	485e      	ldr	r0, [pc, #376]	; (800770c <_printf_i+0x244>)
 8007592:	230a      	movs	r3, #10
 8007594:	e019      	b.n	80075ca <_printf_i+0x102>
 8007596:	680e      	ldr	r6, [r1, #0]
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800759e:	bf18      	it	ne
 80075a0:	b236      	sxthne	r6, r6
 80075a2:	e7ef      	b.n	8007584 <_printf_i+0xbc>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	6820      	ldr	r0, [r4, #0]
 80075a8:	1d19      	adds	r1, r3, #4
 80075aa:	6029      	str	r1, [r5, #0]
 80075ac:	0601      	lsls	r1, r0, #24
 80075ae:	d501      	bpl.n	80075b4 <_printf_i+0xec>
 80075b0:	681e      	ldr	r6, [r3, #0]
 80075b2:	e002      	b.n	80075ba <_printf_i+0xf2>
 80075b4:	0646      	lsls	r6, r0, #25
 80075b6:	d5fb      	bpl.n	80075b0 <_printf_i+0xe8>
 80075b8:	881e      	ldrh	r6, [r3, #0]
 80075ba:	4854      	ldr	r0, [pc, #336]	; (800770c <_printf_i+0x244>)
 80075bc:	2f6f      	cmp	r7, #111	; 0x6f
 80075be:	bf0c      	ite	eq
 80075c0:	2308      	moveq	r3, #8
 80075c2:	230a      	movne	r3, #10
 80075c4:	2100      	movs	r1, #0
 80075c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ca:	6865      	ldr	r5, [r4, #4]
 80075cc:	60a5      	str	r5, [r4, #8]
 80075ce:	2d00      	cmp	r5, #0
 80075d0:	bfa2      	ittt	ge
 80075d2:	6821      	ldrge	r1, [r4, #0]
 80075d4:	f021 0104 	bicge.w	r1, r1, #4
 80075d8:	6021      	strge	r1, [r4, #0]
 80075da:	b90e      	cbnz	r6, 80075e0 <_printf_i+0x118>
 80075dc:	2d00      	cmp	r5, #0
 80075de:	d04d      	beq.n	800767c <_printf_i+0x1b4>
 80075e0:	4615      	mov	r5, r2
 80075e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80075e6:	fb03 6711 	mls	r7, r3, r1, r6
 80075ea:	5dc7      	ldrb	r7, [r0, r7]
 80075ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075f0:	4637      	mov	r7, r6
 80075f2:	42bb      	cmp	r3, r7
 80075f4:	460e      	mov	r6, r1
 80075f6:	d9f4      	bls.n	80075e2 <_printf_i+0x11a>
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d10b      	bne.n	8007614 <_printf_i+0x14c>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	07de      	lsls	r6, r3, #31
 8007600:	d508      	bpl.n	8007614 <_printf_i+0x14c>
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	6861      	ldr	r1, [r4, #4]
 8007606:	4299      	cmp	r1, r3
 8007608:	bfde      	ittt	le
 800760a:	2330      	movle	r3, #48	; 0x30
 800760c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007610:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007614:	1b52      	subs	r2, r2, r5
 8007616:	6122      	str	r2, [r4, #16]
 8007618:	f8cd a000 	str.w	sl, [sp]
 800761c:	464b      	mov	r3, r9
 800761e:	aa03      	add	r2, sp, #12
 8007620:	4621      	mov	r1, r4
 8007622:	4640      	mov	r0, r8
 8007624:	f7ff fee2 	bl	80073ec <_printf_common>
 8007628:	3001      	adds	r0, #1
 800762a:	d14c      	bne.n	80076c6 <_printf_i+0x1fe>
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	b004      	add	sp, #16
 8007632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007636:	4835      	ldr	r0, [pc, #212]	; (800770c <_printf_i+0x244>)
 8007638:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800763c:	6829      	ldr	r1, [r5, #0]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	f851 6b04 	ldr.w	r6, [r1], #4
 8007644:	6029      	str	r1, [r5, #0]
 8007646:	061d      	lsls	r5, r3, #24
 8007648:	d514      	bpl.n	8007674 <_printf_i+0x1ac>
 800764a:	07df      	lsls	r7, r3, #31
 800764c:	bf44      	itt	mi
 800764e:	f043 0320 	orrmi.w	r3, r3, #32
 8007652:	6023      	strmi	r3, [r4, #0]
 8007654:	b91e      	cbnz	r6, 800765e <_printf_i+0x196>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	f023 0320 	bic.w	r3, r3, #32
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	2310      	movs	r3, #16
 8007660:	e7b0      	b.n	80075c4 <_printf_i+0xfc>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	f043 0320 	orr.w	r3, r3, #32
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	2378      	movs	r3, #120	; 0x78
 800766c:	4828      	ldr	r0, [pc, #160]	; (8007710 <_printf_i+0x248>)
 800766e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007672:	e7e3      	b.n	800763c <_printf_i+0x174>
 8007674:	0659      	lsls	r1, r3, #25
 8007676:	bf48      	it	mi
 8007678:	b2b6      	uxthmi	r6, r6
 800767a:	e7e6      	b.n	800764a <_printf_i+0x182>
 800767c:	4615      	mov	r5, r2
 800767e:	e7bb      	b.n	80075f8 <_printf_i+0x130>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	6826      	ldr	r6, [r4, #0]
 8007684:	6961      	ldr	r1, [r4, #20]
 8007686:	1d18      	adds	r0, r3, #4
 8007688:	6028      	str	r0, [r5, #0]
 800768a:	0635      	lsls	r5, r6, #24
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	d501      	bpl.n	8007694 <_printf_i+0x1cc>
 8007690:	6019      	str	r1, [r3, #0]
 8007692:	e002      	b.n	800769a <_printf_i+0x1d2>
 8007694:	0670      	lsls	r0, r6, #25
 8007696:	d5fb      	bpl.n	8007690 <_printf_i+0x1c8>
 8007698:	8019      	strh	r1, [r3, #0]
 800769a:	2300      	movs	r3, #0
 800769c:	6123      	str	r3, [r4, #16]
 800769e:	4615      	mov	r5, r2
 80076a0:	e7ba      	b.n	8007618 <_printf_i+0x150>
 80076a2:	682b      	ldr	r3, [r5, #0]
 80076a4:	1d1a      	adds	r2, r3, #4
 80076a6:	602a      	str	r2, [r5, #0]
 80076a8:	681d      	ldr	r5, [r3, #0]
 80076aa:	6862      	ldr	r2, [r4, #4]
 80076ac:	2100      	movs	r1, #0
 80076ae:	4628      	mov	r0, r5
 80076b0:	f7f8 fde6 	bl	8000280 <memchr>
 80076b4:	b108      	cbz	r0, 80076ba <_printf_i+0x1f2>
 80076b6:	1b40      	subs	r0, r0, r5
 80076b8:	6060      	str	r0, [r4, #4]
 80076ba:	6863      	ldr	r3, [r4, #4]
 80076bc:	6123      	str	r3, [r4, #16]
 80076be:	2300      	movs	r3, #0
 80076c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c4:	e7a8      	b.n	8007618 <_printf_i+0x150>
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	462a      	mov	r2, r5
 80076ca:	4649      	mov	r1, r9
 80076cc:	4640      	mov	r0, r8
 80076ce:	47d0      	blx	sl
 80076d0:	3001      	adds	r0, #1
 80076d2:	d0ab      	beq.n	800762c <_printf_i+0x164>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	079b      	lsls	r3, r3, #30
 80076d8:	d413      	bmi.n	8007702 <_printf_i+0x23a>
 80076da:	68e0      	ldr	r0, [r4, #12]
 80076dc:	9b03      	ldr	r3, [sp, #12]
 80076de:	4298      	cmp	r0, r3
 80076e0:	bfb8      	it	lt
 80076e2:	4618      	movlt	r0, r3
 80076e4:	e7a4      	b.n	8007630 <_printf_i+0x168>
 80076e6:	2301      	movs	r3, #1
 80076e8:	4632      	mov	r2, r6
 80076ea:	4649      	mov	r1, r9
 80076ec:	4640      	mov	r0, r8
 80076ee:	47d0      	blx	sl
 80076f0:	3001      	adds	r0, #1
 80076f2:	d09b      	beq.n	800762c <_printf_i+0x164>
 80076f4:	3501      	adds	r5, #1
 80076f6:	68e3      	ldr	r3, [r4, #12]
 80076f8:	9903      	ldr	r1, [sp, #12]
 80076fa:	1a5b      	subs	r3, r3, r1
 80076fc:	42ab      	cmp	r3, r5
 80076fe:	dcf2      	bgt.n	80076e6 <_printf_i+0x21e>
 8007700:	e7eb      	b.n	80076da <_printf_i+0x212>
 8007702:	2500      	movs	r5, #0
 8007704:	f104 0619 	add.w	r6, r4, #25
 8007708:	e7f5      	b.n	80076f6 <_printf_i+0x22e>
 800770a:	bf00      	nop
 800770c:	08007b31 	.word	0x08007b31
 8007710:	08007b42 	.word	0x08007b42

08007714 <memmove>:
 8007714:	4288      	cmp	r0, r1
 8007716:	b510      	push	{r4, lr}
 8007718:	eb01 0402 	add.w	r4, r1, r2
 800771c:	d902      	bls.n	8007724 <memmove+0x10>
 800771e:	4284      	cmp	r4, r0
 8007720:	4623      	mov	r3, r4
 8007722:	d807      	bhi.n	8007734 <memmove+0x20>
 8007724:	1e43      	subs	r3, r0, #1
 8007726:	42a1      	cmp	r1, r4
 8007728:	d008      	beq.n	800773c <memmove+0x28>
 800772a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800772e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007732:	e7f8      	b.n	8007726 <memmove+0x12>
 8007734:	4402      	add	r2, r0
 8007736:	4601      	mov	r1, r0
 8007738:	428a      	cmp	r2, r1
 800773a:	d100      	bne.n	800773e <memmove+0x2a>
 800773c:	bd10      	pop	{r4, pc}
 800773e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007746:	e7f7      	b.n	8007738 <memmove+0x24>

08007748 <_free_r>:
 8007748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800774a:	2900      	cmp	r1, #0
 800774c:	d044      	beq.n	80077d8 <_free_r+0x90>
 800774e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007752:	9001      	str	r0, [sp, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f1a1 0404 	sub.w	r4, r1, #4
 800775a:	bfb8      	it	lt
 800775c:	18e4      	addlt	r4, r4, r3
 800775e:	f000 f913 	bl	8007988 <__malloc_lock>
 8007762:	4a1e      	ldr	r2, [pc, #120]	; (80077dc <_free_r+0x94>)
 8007764:	9801      	ldr	r0, [sp, #4]
 8007766:	6813      	ldr	r3, [r2, #0]
 8007768:	b933      	cbnz	r3, 8007778 <_free_r+0x30>
 800776a:	6063      	str	r3, [r4, #4]
 800776c:	6014      	str	r4, [r2, #0]
 800776e:	b003      	add	sp, #12
 8007770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007774:	f000 b90e 	b.w	8007994 <__malloc_unlock>
 8007778:	42a3      	cmp	r3, r4
 800777a:	d908      	bls.n	800778e <_free_r+0x46>
 800777c:	6825      	ldr	r5, [r4, #0]
 800777e:	1961      	adds	r1, r4, r5
 8007780:	428b      	cmp	r3, r1
 8007782:	bf01      	itttt	eq
 8007784:	6819      	ldreq	r1, [r3, #0]
 8007786:	685b      	ldreq	r3, [r3, #4]
 8007788:	1949      	addeq	r1, r1, r5
 800778a:	6021      	streq	r1, [r4, #0]
 800778c:	e7ed      	b.n	800776a <_free_r+0x22>
 800778e:	461a      	mov	r2, r3
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	b10b      	cbz	r3, 8007798 <_free_r+0x50>
 8007794:	42a3      	cmp	r3, r4
 8007796:	d9fa      	bls.n	800778e <_free_r+0x46>
 8007798:	6811      	ldr	r1, [r2, #0]
 800779a:	1855      	adds	r5, r2, r1
 800779c:	42a5      	cmp	r5, r4
 800779e:	d10b      	bne.n	80077b8 <_free_r+0x70>
 80077a0:	6824      	ldr	r4, [r4, #0]
 80077a2:	4421      	add	r1, r4
 80077a4:	1854      	adds	r4, r2, r1
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	6011      	str	r1, [r2, #0]
 80077aa:	d1e0      	bne.n	800776e <_free_r+0x26>
 80077ac:	681c      	ldr	r4, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	6053      	str	r3, [r2, #4]
 80077b2:	4421      	add	r1, r4
 80077b4:	6011      	str	r1, [r2, #0]
 80077b6:	e7da      	b.n	800776e <_free_r+0x26>
 80077b8:	d902      	bls.n	80077c0 <_free_r+0x78>
 80077ba:	230c      	movs	r3, #12
 80077bc:	6003      	str	r3, [r0, #0]
 80077be:	e7d6      	b.n	800776e <_free_r+0x26>
 80077c0:	6825      	ldr	r5, [r4, #0]
 80077c2:	1961      	adds	r1, r4, r5
 80077c4:	428b      	cmp	r3, r1
 80077c6:	bf04      	itt	eq
 80077c8:	6819      	ldreq	r1, [r3, #0]
 80077ca:	685b      	ldreq	r3, [r3, #4]
 80077cc:	6063      	str	r3, [r4, #4]
 80077ce:	bf04      	itt	eq
 80077d0:	1949      	addeq	r1, r1, r5
 80077d2:	6021      	streq	r1, [r4, #0]
 80077d4:	6054      	str	r4, [r2, #4]
 80077d6:	e7ca      	b.n	800776e <_free_r+0x26>
 80077d8:	b003      	add	sp, #12
 80077da:	bd30      	pop	{r4, r5, pc}
 80077dc:	20014514 	.word	0x20014514

080077e0 <sbrk_aligned>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	4e0e      	ldr	r6, [pc, #56]	; (800781c <sbrk_aligned+0x3c>)
 80077e4:	460c      	mov	r4, r1
 80077e6:	6831      	ldr	r1, [r6, #0]
 80077e8:	4605      	mov	r5, r0
 80077ea:	b911      	cbnz	r1, 80077f2 <sbrk_aligned+0x12>
 80077ec:	f000 f8bc 	bl	8007968 <_sbrk_r>
 80077f0:	6030      	str	r0, [r6, #0]
 80077f2:	4621      	mov	r1, r4
 80077f4:	4628      	mov	r0, r5
 80077f6:	f000 f8b7 	bl	8007968 <_sbrk_r>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	d00a      	beq.n	8007814 <sbrk_aligned+0x34>
 80077fe:	1cc4      	adds	r4, r0, #3
 8007800:	f024 0403 	bic.w	r4, r4, #3
 8007804:	42a0      	cmp	r0, r4
 8007806:	d007      	beq.n	8007818 <sbrk_aligned+0x38>
 8007808:	1a21      	subs	r1, r4, r0
 800780a:	4628      	mov	r0, r5
 800780c:	f000 f8ac 	bl	8007968 <_sbrk_r>
 8007810:	3001      	adds	r0, #1
 8007812:	d101      	bne.n	8007818 <sbrk_aligned+0x38>
 8007814:	f04f 34ff 	mov.w	r4, #4294967295
 8007818:	4620      	mov	r0, r4
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	20014518 	.word	0x20014518

08007820 <_malloc_r>:
 8007820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007824:	1ccd      	adds	r5, r1, #3
 8007826:	f025 0503 	bic.w	r5, r5, #3
 800782a:	3508      	adds	r5, #8
 800782c:	2d0c      	cmp	r5, #12
 800782e:	bf38      	it	cc
 8007830:	250c      	movcc	r5, #12
 8007832:	2d00      	cmp	r5, #0
 8007834:	4607      	mov	r7, r0
 8007836:	db01      	blt.n	800783c <_malloc_r+0x1c>
 8007838:	42a9      	cmp	r1, r5
 800783a:	d905      	bls.n	8007848 <_malloc_r+0x28>
 800783c:	230c      	movs	r3, #12
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	2600      	movs	r6, #0
 8007842:	4630      	mov	r0, r6
 8007844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007848:	4e2e      	ldr	r6, [pc, #184]	; (8007904 <_malloc_r+0xe4>)
 800784a:	f000 f89d 	bl	8007988 <__malloc_lock>
 800784e:	6833      	ldr	r3, [r6, #0]
 8007850:	461c      	mov	r4, r3
 8007852:	bb34      	cbnz	r4, 80078a2 <_malloc_r+0x82>
 8007854:	4629      	mov	r1, r5
 8007856:	4638      	mov	r0, r7
 8007858:	f7ff ffc2 	bl	80077e0 <sbrk_aligned>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	4604      	mov	r4, r0
 8007860:	d14d      	bne.n	80078fe <_malloc_r+0xde>
 8007862:	6834      	ldr	r4, [r6, #0]
 8007864:	4626      	mov	r6, r4
 8007866:	2e00      	cmp	r6, #0
 8007868:	d140      	bne.n	80078ec <_malloc_r+0xcc>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	4631      	mov	r1, r6
 800786e:	4638      	mov	r0, r7
 8007870:	eb04 0803 	add.w	r8, r4, r3
 8007874:	f000 f878 	bl	8007968 <_sbrk_r>
 8007878:	4580      	cmp	r8, r0
 800787a:	d13a      	bne.n	80078f2 <_malloc_r+0xd2>
 800787c:	6821      	ldr	r1, [r4, #0]
 800787e:	3503      	adds	r5, #3
 8007880:	1a6d      	subs	r5, r5, r1
 8007882:	f025 0503 	bic.w	r5, r5, #3
 8007886:	3508      	adds	r5, #8
 8007888:	2d0c      	cmp	r5, #12
 800788a:	bf38      	it	cc
 800788c:	250c      	movcc	r5, #12
 800788e:	4629      	mov	r1, r5
 8007890:	4638      	mov	r0, r7
 8007892:	f7ff ffa5 	bl	80077e0 <sbrk_aligned>
 8007896:	3001      	adds	r0, #1
 8007898:	d02b      	beq.n	80078f2 <_malloc_r+0xd2>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	442b      	add	r3, r5
 800789e:	6023      	str	r3, [r4, #0]
 80078a0:	e00e      	b.n	80078c0 <_malloc_r+0xa0>
 80078a2:	6822      	ldr	r2, [r4, #0]
 80078a4:	1b52      	subs	r2, r2, r5
 80078a6:	d41e      	bmi.n	80078e6 <_malloc_r+0xc6>
 80078a8:	2a0b      	cmp	r2, #11
 80078aa:	d916      	bls.n	80078da <_malloc_r+0xba>
 80078ac:	1961      	adds	r1, r4, r5
 80078ae:	42a3      	cmp	r3, r4
 80078b0:	6025      	str	r5, [r4, #0]
 80078b2:	bf18      	it	ne
 80078b4:	6059      	strne	r1, [r3, #4]
 80078b6:	6863      	ldr	r3, [r4, #4]
 80078b8:	bf08      	it	eq
 80078ba:	6031      	streq	r1, [r6, #0]
 80078bc:	5162      	str	r2, [r4, r5]
 80078be:	604b      	str	r3, [r1, #4]
 80078c0:	4638      	mov	r0, r7
 80078c2:	f104 060b 	add.w	r6, r4, #11
 80078c6:	f000 f865 	bl	8007994 <__malloc_unlock>
 80078ca:	f026 0607 	bic.w	r6, r6, #7
 80078ce:	1d23      	adds	r3, r4, #4
 80078d0:	1af2      	subs	r2, r6, r3
 80078d2:	d0b6      	beq.n	8007842 <_malloc_r+0x22>
 80078d4:	1b9b      	subs	r3, r3, r6
 80078d6:	50a3      	str	r3, [r4, r2]
 80078d8:	e7b3      	b.n	8007842 <_malloc_r+0x22>
 80078da:	6862      	ldr	r2, [r4, #4]
 80078dc:	42a3      	cmp	r3, r4
 80078de:	bf0c      	ite	eq
 80078e0:	6032      	streq	r2, [r6, #0]
 80078e2:	605a      	strne	r2, [r3, #4]
 80078e4:	e7ec      	b.n	80078c0 <_malloc_r+0xa0>
 80078e6:	4623      	mov	r3, r4
 80078e8:	6864      	ldr	r4, [r4, #4]
 80078ea:	e7b2      	b.n	8007852 <_malloc_r+0x32>
 80078ec:	4634      	mov	r4, r6
 80078ee:	6876      	ldr	r6, [r6, #4]
 80078f0:	e7b9      	b.n	8007866 <_malloc_r+0x46>
 80078f2:	230c      	movs	r3, #12
 80078f4:	603b      	str	r3, [r7, #0]
 80078f6:	4638      	mov	r0, r7
 80078f8:	f000 f84c 	bl	8007994 <__malloc_unlock>
 80078fc:	e7a1      	b.n	8007842 <_malloc_r+0x22>
 80078fe:	6025      	str	r5, [r4, #0]
 8007900:	e7de      	b.n	80078c0 <_malloc_r+0xa0>
 8007902:	bf00      	nop
 8007904:	20014514 	.word	0x20014514

08007908 <_realloc_r>:
 8007908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800790c:	4680      	mov	r8, r0
 800790e:	4614      	mov	r4, r2
 8007910:	460e      	mov	r6, r1
 8007912:	b921      	cbnz	r1, 800791e <_realloc_r+0x16>
 8007914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007918:	4611      	mov	r1, r2
 800791a:	f7ff bf81 	b.w	8007820 <_malloc_r>
 800791e:	b92a      	cbnz	r2, 800792c <_realloc_r+0x24>
 8007920:	f7ff ff12 	bl	8007748 <_free_r>
 8007924:	4625      	mov	r5, r4
 8007926:	4628      	mov	r0, r5
 8007928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800792c:	f000 f838 	bl	80079a0 <_malloc_usable_size_r>
 8007930:	4284      	cmp	r4, r0
 8007932:	4607      	mov	r7, r0
 8007934:	d802      	bhi.n	800793c <_realloc_r+0x34>
 8007936:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800793a:	d812      	bhi.n	8007962 <_realloc_r+0x5a>
 800793c:	4621      	mov	r1, r4
 800793e:	4640      	mov	r0, r8
 8007940:	f7ff ff6e 	bl	8007820 <_malloc_r>
 8007944:	4605      	mov	r5, r0
 8007946:	2800      	cmp	r0, #0
 8007948:	d0ed      	beq.n	8007926 <_realloc_r+0x1e>
 800794a:	42bc      	cmp	r4, r7
 800794c:	4622      	mov	r2, r4
 800794e:	4631      	mov	r1, r6
 8007950:	bf28      	it	cs
 8007952:	463a      	movcs	r2, r7
 8007954:	f7ff fba4 	bl	80070a0 <memcpy>
 8007958:	4631      	mov	r1, r6
 800795a:	4640      	mov	r0, r8
 800795c:	f7ff fef4 	bl	8007748 <_free_r>
 8007960:	e7e1      	b.n	8007926 <_realloc_r+0x1e>
 8007962:	4635      	mov	r5, r6
 8007964:	e7df      	b.n	8007926 <_realloc_r+0x1e>
	...

08007968 <_sbrk_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4d06      	ldr	r5, [pc, #24]	; (8007984 <_sbrk_r+0x1c>)
 800796c:	2300      	movs	r3, #0
 800796e:	4604      	mov	r4, r0
 8007970:	4608      	mov	r0, r1
 8007972:	602b      	str	r3, [r5, #0]
 8007974:	f7f9 f9fc 	bl	8000d70 <_sbrk>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d102      	bne.n	8007982 <_sbrk_r+0x1a>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	b103      	cbz	r3, 8007982 <_sbrk_r+0x1a>
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	2001451c 	.word	0x2001451c

08007988 <__malloc_lock>:
 8007988:	4801      	ldr	r0, [pc, #4]	; (8007990 <__malloc_lock+0x8>)
 800798a:	f000 b811 	b.w	80079b0 <__retarget_lock_acquire_recursive>
 800798e:	bf00      	nop
 8007990:	20014520 	.word	0x20014520

08007994 <__malloc_unlock>:
 8007994:	4801      	ldr	r0, [pc, #4]	; (800799c <__malloc_unlock+0x8>)
 8007996:	f000 b80c 	b.w	80079b2 <__retarget_lock_release_recursive>
 800799a:	bf00      	nop
 800799c:	20014520 	.word	0x20014520

080079a0 <_malloc_usable_size_r>:
 80079a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a4:	1f18      	subs	r0, r3, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bfbc      	itt	lt
 80079aa:	580b      	ldrlt	r3, [r1, r0]
 80079ac:	18c0      	addlt	r0, r0, r3
 80079ae:	4770      	bx	lr

080079b0 <__retarget_lock_acquire_recursive>:
 80079b0:	4770      	bx	lr

080079b2 <__retarget_lock_release_recursive>:
 80079b2:	4770      	bx	lr

080079b4 <_init>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	bf00      	nop
 80079b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ba:	bc08      	pop	{r3}
 80079bc:	469e      	mov	lr, r3
 80079be:	4770      	bx	lr

080079c0 <_fini>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	bf00      	nop
 80079c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c6:	bc08      	pop	{r3}
 80079c8:	469e      	mov	lr, r3
 80079ca:	4770      	bx	lr


002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090b0  080090b0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080090b0  080090b0  000190b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090b8  080090b8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090b8  080090b8  000190b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090bc  080090bc  000190bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080090c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000138b4  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013934  20013934  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001739b  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034fd  00000000  00000000  0003744b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  0003a948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001328  00000000  00000000  0003be28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024cdb  00000000  00000000  0003d150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017321  00000000  00000000  00061e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da884  00000000  00000000  0007914c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001539d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e90  00000000  00000000  00153a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e10 	.word	0x08008e10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08008e10 	.word	0x08008e10

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f50 	.word	0x20012f50
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fd43 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f89b 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f903 	bl	800082c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // enable CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000626:	4b3c      	ldr	r3, [pc, #240]	; (8000718 <main+0x104>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a3b      	ldr	r2, [pc, #236]	; (8000718 <main+0x104>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000632:	483a      	ldr	r0, [pc, #232]	; (800071c <main+0x108>)
 8000634:	f005 f842 	bl	80056bc <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000638:	f004 fe6a 	bl	8005310 <SEGGER_SYSVIEW_Conf>
  printf(" start here");
 800063c:	4838      	ldr	r0, [pc, #224]	; (8000720 <main+0x10c>)
 800063e:	f007 fbf5 	bl	8007e2c <iprintf>

  status = xTaskCreate(LED_green_handler, "TASK_GREEN", 200, NULL, 3, &task_green_handle);
 8000642:	4b38      	ldr	r3, [pc, #224]	; (8000724 <main+0x110>)
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2303      	movs	r3, #3
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	22c8      	movs	r2, #200	; 0xc8
 800064e:	4936      	ldr	r1, [pc, #216]	; (8000728 <main+0x114>)
 8000650:	4836      	ldr	r0, [pc, #216]	; (800072c <main+0x118>)
 8000652:	f002 fb63 	bl	8002d1c <xTaskCreate>
 8000656:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d00a      	beq.n	8000674 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000670:	bf00      	nop
 8000672:	e7fe      	b.n	8000672 <main+0x5e>

  next_task_handle = task_green_handle;
 8000674:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <main+0x110>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a2d      	ldr	r2, [pc, #180]	; (8000730 <main+0x11c>)
 800067a:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(LED_orange_handler, "TASK_ORANGE", 200, NULL, 2, &task_orange_handle);
 800067c:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <main+0x120>)
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	2302      	movs	r3, #2
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2300      	movs	r3, #0
 8000686:	22c8      	movs	r2, #200	; 0xc8
 8000688:	492b      	ldr	r1, [pc, #172]	; (8000738 <main+0x124>)
 800068a:	482c      	ldr	r0, [pc, #176]	; (800073c <main+0x128>)
 800068c:	f002 fb46 	bl	8002d1c <xTaskCreate>
 8000690:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d00a      	beq.n	80006ae <main+0x9a>
        __asm volatile
 8000698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800069c:	f383 8811 	msr	BASEPRI, r3
 80006a0:	f3bf 8f6f 	isb	sy
 80006a4:	f3bf 8f4f 	dsb	sy
 80006a8:	60fb      	str	r3, [r7, #12]
    }
 80006aa:	bf00      	nop
 80006ac:	e7fe      	b.n	80006ac <main+0x98>

  status = xTaskCreate(LED_red_handler, "TASK_RED", 200, NULL, 1, &task_red_handle);
 80006ae:	4b24      	ldr	r3, [pc, #144]	; (8000740 <main+0x12c>)
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2301      	movs	r3, #1
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	22c8      	movs	r2, #200	; 0xc8
 80006ba:	4922      	ldr	r1, [pc, #136]	; (8000744 <main+0x130>)
 80006bc:	4822      	ldr	r0, [pc, #136]	; (8000748 <main+0x134>)
 80006be:	f002 fb2d 	bl	8002d1c <xTaskCreate>
 80006c2:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d00a      	beq.n	80006e0 <main+0xcc>
        __asm volatile
 80006ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ce:	f383 8811 	msr	BASEPRI, r3
 80006d2:	f3bf 8f6f 	isb	sy
 80006d6:	f3bf 8f4f 	dsb	sy
 80006da:	60bb      	str	r3, [r7, #8]
    }
 80006dc:	bf00      	nop
 80006de:	e7fe      	b.n	80006de <main+0xca>

  status = xTaskCreate(BTN_handler, "TASK_BTN", 200, NULL, 4, &task_btn_handle);
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <main+0x138>)
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	2304      	movs	r3, #4
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2300      	movs	r3, #0
 80006ea:	22c8      	movs	r2, #200	; 0xc8
 80006ec:	4918      	ldr	r1, [pc, #96]	; (8000750 <main+0x13c>)
 80006ee:	4819      	ldr	r0, [pc, #100]	; (8000754 <main+0x140>)
 80006f0:	f002 fb14 	bl	8002d1c <xTaskCreate>
 80006f4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d00a      	beq.n	8000712 <main+0xfe>
        __asm volatile
 80006fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000700:	f383 8811 	msr	BASEPRI, r3
 8000704:	f3bf 8f6f 	isb	sy
 8000708:	f3bf 8f4f 	dsb	sy
 800070c:	607b      	str	r3, [r7, #4]
    }
 800070e:	bf00      	nop
 8000710:	e7fe      	b.n	8000710 <main+0xfc>

  // start task scheduler
  vTaskStartScheduler();
 8000712:	f002 fe93 	bl	800343c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000716:	e7fe      	b.n	8000716 <main+0x102>
 8000718:	e0001000 	.word	0xe0001000
 800071c:	0007a120 	.word	0x0007a120
 8000720:	08008e28 	.word	0x08008e28
 8000724:	2000009c 	.word	0x2000009c
 8000728:	08008e34 	.word	0x08008e34
 800072c:	08000ae9 	.word	0x08000ae9
 8000730:	200000ac 	.word	0x200000ac
 8000734:	200000a0 	.word	0x200000a0
 8000738:	08008e40 	.word	0x08008e40
 800073c:	08000b5d 	.word	0x08000b5d
 8000740:	200000a4 	.word	0x200000a4
 8000744:	08008e4c 	.word	0x08008e4c
 8000748:	08000bd1 	.word	0x08000bd1
 800074c:	200000a8 	.word	0x200000a8
 8000750:	08008e58 	.word	0x08008e58
 8000754:	08000c49 	.word	0x08000c49

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f007 fb58 	bl	8007e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <SystemClock_Config+0xcc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a27      	ldr	r2, [pc, #156]	; (8000824 <SystemClock_Config+0xcc>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b25      	ldr	r3, [pc, #148]	; (8000824 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <SystemClock_Config+0xd0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <SystemClock_Config+0xd0>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b4:	2302      	movs	r3, #2
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007bc:	2310      	movs	r3, #16
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c0:	2302      	movs	r3, #2
 80007c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c4:	2300      	movs	r3, #0
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c8:	2308      	movs	r3, #8
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007cc:	2332      	movs	r3, #50	; 0x32
 80007ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d4:	2307      	movs	r3, #7
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 ff6d 	bl	80016bc <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e8:	f000 face 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f001 f9ce 	bl	8001bac <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000816:	f000 fab7 	bl	8000d88 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3750      	adds	r7, #80	; 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	4ba2      	ldr	r3, [pc, #648]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4aa1      	ldr	r2, [pc, #644]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b9f      	ldr	r3, [pc, #636]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	4b9b      	ldr	r3, [pc, #620]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a9a      	ldr	r2, [pc, #616]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b98      	ldr	r3, [pc, #608]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b94      	ldr	r3, [pc, #592]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a93      	ldr	r2, [pc, #588]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b91      	ldr	r3, [pc, #580]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b8d      	ldr	r3, [pc, #564]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a8c      	ldr	r2, [pc, #560]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b8a      	ldr	r3, [pc, #552]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b86      	ldr	r3, [pc, #536]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a85      	ldr	r2, [pc, #532]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b83      	ldr	r3, [pc, #524]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b7f      	ldr	r3, [pc, #508]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a7e      	ldr	r2, [pc, #504]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b7c      	ldr	r3, [pc, #496]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2108      	movs	r1, #8
 80008ee:	4879      	ldr	r0, [pc, #484]	; (8000ad4 <MX_GPIO_Init+0x2a8>)
 80008f0:	f000 feb0 	bl	8001654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	4877      	ldr	r0, [pc, #476]	; (8000ad8 <MX_GPIO_Init+0x2ac>)
 80008fa:	f000 feab 	bl	8001654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fe:	2200      	movs	r2, #0
 8000900:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000904:	4875      	ldr	r0, [pc, #468]	; (8000adc <MX_GPIO_Init+0x2b0>)
 8000906:	f000 fea5 	bl	8001654 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800090a:	2308      	movs	r3, #8
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	486c      	ldr	r0, [pc, #432]	; (8000ad4 <MX_GPIO_Init+0x2a8>)
 8000922:	f000 fce3 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4866      	ldr	r0, [pc, #408]	; (8000ad8 <MX_GPIO_Init+0x2ac>)
 800093e:	f000 fcd5 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000942:	2308      	movs	r3, #8
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	485e      	ldr	r0, [pc, #376]	; (8000ad8 <MX_GPIO_Init+0x2ac>)
 800095e:	f000 fcc5 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	485a      	ldr	r0, [pc, #360]	; (8000ae0 <MX_GPIO_Init+0x2b4>)
 8000978:	f000 fcb8 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800097c:	2310      	movs	r3, #16
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098c:	2306      	movs	r3, #6
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4852      	ldr	r0, [pc, #328]	; (8000ae0 <MX_GPIO_Init+0x2b4>)
 8000998:	f000 fca8 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800099c:	23e0      	movs	r3, #224	; 0xe0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ac:	2305      	movs	r3, #5
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	484a      	ldr	r0, [pc, #296]	; (8000ae0 <MX_GPIO_Init+0x2b4>)
 80009b8:	f000 fc98 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009bc:	2304      	movs	r3, #4
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4845      	ldr	r0, [pc, #276]	; (8000ae4 <MX_GPIO_Init+0x2b8>)
 80009d0:	f000 fc8c 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e6:	2305      	movs	r3, #5
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	483c      	ldr	r0, [pc, #240]	; (8000ae4 <MX_GPIO_Init+0x2b8>)
 80009f2:	f000 fc7b 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009f6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4833      	ldr	r0, [pc, #204]	; (8000adc <MX_GPIO_Init+0x2b0>)
 8000a10:	f000 fc6c 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a14:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a26:	2306      	movs	r3, #6
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4829      	ldr	r0, [pc, #164]	; (8000ad8 <MX_GPIO_Init+0x2ac>)
 8000a32:	f000 fc5b 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4825      	ldr	r0, [pc, #148]	; (8000ae0 <MX_GPIO_Init+0x2b4>)
 8000a4c:	f000 fc4e 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a62:	230a      	movs	r3, #10
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481c      	ldr	r0, [pc, #112]	; (8000ae0 <MX_GPIO_Init+0x2b4>)
 8000a6e:	f000 fc3d 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a72:	2320      	movs	r3, #32
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4815      	ldr	r0, [pc, #84]	; (8000adc <MX_GPIO_Init+0x2b0>)
 8000a86:	f000 fc31 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a8a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a90:	2312      	movs	r3, #18
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480f      	ldr	r0, [pc, #60]	; (8000ae4 <MX_GPIO_Init+0x2b8>)
 8000aa8:	f000 fc20 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_GPIO_Init+0x2a8>)
 8000ac2:	f000 fc13 	bl	80012ec <HAL_GPIO_Init>

}
 8000ac6:	bf00      	nop
 8000ac8:	3730      	adds	r7, #48	; 0x30
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <LED_green_handler>:

/* USER CODE BEGIN 4 */
static void LED_green_handler(void* parameters)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af02      	add	r7, sp, #8
 8000aee:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f007 fa21 	bl	8007f38 <puts>
		// GREEN LED: LD12
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000af6:	4814      	ldr	r0, [pc, #80]	; (8000b48 <LED_green_handler+0x60>)
 8000af8:	f007 f898 	bl	8007c2c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000afc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b00:	4812      	ldr	r0, [pc, #72]	; (8000b4c <LED_green_handler+0x64>)
 8000b02:	f000 fdc0 	bl	8001686 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	2000      	movs	r0, #0
 8000b14:	f003 fa98 	bl	8004048 <xTaskGenericNotifyWait>
 8000b18:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d1e7      	bne.n	8000af0 <LED_green_handler+0x8>
		{
			vTaskSuspendAll();
 8000b20:	f002 fcf2 	bl	8003508 <vTaskSuspendAll>
			next_task_handle = task_orange_handle;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <LED_green_handler+0x68>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <LED_green_handler+0x6c>)
 8000b2a:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000b2c:	f002 fcfa 	bl	8003524 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <LED_green_handler+0x64>)
 8000b38:	f000 fd8c 	bl	8001654 <HAL_GPIO_WritePin>
			//SEGGER_SYSVIEW_PrintfTarget("Delete green task");
			//vTaskDelete(NULL);
			vTaskSuspend(task_green_handle);
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <LED_green_handler+0x70>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 fb17 	bl	8003174 <vTaskSuspend>
		printf("%s\n", (char*)parameters);
 8000b46:	e7d3      	b.n	8000af0 <LED_green_handler+0x8>
 8000b48:	08008e64 	.word	0x08008e64
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	200000a0 	.word	0x200000a0
 8000b54:	200000ac 	.word	0x200000ac
 8000b58:	2000009c 	.word	0x2000009c

08000b5c <LED_orange_handler>:
		}
	}
}

static void LED_orange_handler(void* parameters)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f007 f9e7 	bl	8007f38 <puts>
		// ORANGE LED: LD13
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000b6a:	4814      	ldr	r0, [pc, #80]	; (8000bbc <LED_orange_handler+0x60>)
 8000b6c:	f007 f85e 	bl	8007c2c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000b70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <LED_orange_handler+0x64>)
 8000b76:	f000 fd86 	bl	8001686 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000b7a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	2300      	movs	r3, #0
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2000      	movs	r0, #0
 8000b88:	f003 fa5e 	bl	8004048 <xTaskGenericNotifyWait>
 8000b8c:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d1e7      	bne.n	8000b64 <LED_orange_handler+0x8>
		{
			vTaskSuspendAll();
 8000b94:	f002 fcb8 	bl	8003508 <vTaskSuspendAll>
			next_task_handle = task_red_handle;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <LED_orange_handler+0x68>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <LED_orange_handler+0x6c>)
 8000b9e:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000ba0:	f002 fcc0 	bl	8003524 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <LED_orange_handler+0x64>)
 8000bac:	f000 fd52 	bl	8001654 <HAL_GPIO_WritePin>
			//SEGGER_SYSVIEW_PrintfTarget("Delete orange task");
			//vTaskDelete(NULL);
			vTaskSuspend(task_orange_handle);
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <LED_orange_handler+0x70>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f002 fadd 	bl	8003174 <vTaskSuspend>
		printf("%s\n", (char*)parameters);
 8000bba:	e7d3      	b.n	8000b64 <LED_orange_handler+0x8>
 8000bbc:	08008e78 	.word	0x08008e78
 8000bc0:	40020c00 	.word	0x40020c00
 8000bc4:	200000a4 	.word	0x200000a4
 8000bc8:	200000ac 	.word	0x200000ac
 8000bcc:	200000a0 	.word	0x200000a0

08000bd0 <LED_red_handler>:
		}
	}
}

static void LED_red_handler(void* parameters)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f007 f9ad 	bl	8007f38 <puts>
		// RED LED: LD14
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000bde:	4815      	ldr	r0, [pc, #84]	; (8000c34 <LED_red_handler+0x64>)
 8000be0:	f007 f824 	bl	8007c2c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000be4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be8:	4813      	ldr	r0, [pc, #76]	; (8000c38 <LED_red_handler+0x68>)
 8000bea:	f000 fd4c 	bl	8001686 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000bee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f003 fa24 	bl	8004048 <xTaskGenericNotifyWait>
 8000c00:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d1e7      	bne.n	8000bd8 <LED_red_handler+0x8>
		{
			vTaskSuspendAll();
 8000c08:	f002 fc7e 	bl	8003508 <vTaskSuspendAll>
			next_task_handle = NULL;
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <LED_red_handler+0x6c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000c12:	f002 fc87 	bl	8003524 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c1c:	4806      	ldr	r0, [pc, #24]	; (8000c38 <LED_red_handler+0x68>)
 8000c1e:	f000 fd19 	bl	8001654 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete button task");
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <LED_red_handler+0x70>)
 8000c24:	f007 f802 	bl	8007c2c <SEGGER_SYSVIEW_PrintfTarget>
			//vTaskDelete(task_btn_handle);
			//SEGGER_SYSVIEW_PrintfTarget("Delete Red task");
			//vTaskDelete(NULL);
			vTaskSuspend(task_red_handle);
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <LED_red_handler+0x74>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 faa1 	bl	8003174 <vTaskSuspend>
		printf("%s\n", (char*)parameters);
 8000c32:	e7d1      	b.n	8000bd8 <LED_red_handler+0x8>
 8000c34:	08008e8c 	.word	0x08008e8c
 8000c38:	40020c00 	.word	0x40020c00
 8000c3c:	200000ac 	.word	0x200000ac
 8000c40:	08008ea0 	.word	0x08008ea0
 8000c44:	200000a4 	.word	0x200000a4

08000c48 <BTN_handler>:
		}
	}
}

static void BTN_handler(void* parameters)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <BTN_handler+0x70>)
 8000c5c:	f000 fce2 	bl	8001624 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d020      	beq.n	8000cac <BTN_handler+0x64>
		{
			if(! prev_read)
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d11d      	bne.n	8000cac <BTN_handler+0x64>
			{
				if(is_all_task_in_suspension())
 8000c70:	f000 f82c 	bl	8000ccc <is_all_task_in_suspension>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00f      	beq.n	8000c9a <BTN_handler+0x52>
				{
					vTaskResume(task_green_handle);
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <BTN_handler+0x74>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 fb58 	bl	8003334 <vTaskResume>
					vTaskResume(task_orange_handle);
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <BTN_handler+0x78>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 fb53 	bl	8003334 <vTaskResume>
					vTaskResume(task_red_handle);
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <BTN_handler+0x7c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 fb4e 	bl	8003334 <vTaskResume>
 8000c98:	e008      	b.n	8000cac <BTN_handler+0x64>
				}
				else
				{
					xTaskNotify(next_task_handle, 0, eNoAction);
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <BTN_handler+0x80>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	f003 fa56 	bl	8004158 <xTaskGenericNotify>
				}
			}
		}
		prev_read = btn_read;
 8000cac:	7bbb      	ldrb	r3, [r7, #14]
 8000cae:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000cb0:	200a      	movs	r0, #10
 8000cb2:	f002 f9ad 	bl	8003010 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000cb6:	e7cf      	b.n	8000c58 <BTN_handler+0x10>
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	2000009c 	.word	0x2000009c
 8000cc0:	200000a0 	.word	0x200000a0
 8000cc4:	200000a4 	.word	0x200000a4
 8000cc8:	200000ac 	.word	0x200000ac

08000ccc <is_all_task_in_suspension>:
	}
}

static bool is_all_task_in_suspension(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b09c      	sub	sp, #112	; 0x70
 8000cd0:	af00      	add	r7, sp, #0
	TaskStatus_t greenTaskDetail;
	TaskStatus_t orangeTaskDetail;
	TaskStatus_t redTaskDetail;

	vTaskGetInfo(task_green_handle, &greenTaskDetail, pdTRUE, eInvalid);
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <is_all_task_in_suspension+0x84>)
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000cda:	2305      	movs	r3, #5
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f003 f8e7 	bl	8003eb0 <vTaskGetInfo>
	vTaskGetInfo(task_orange_handle, &orangeTaskDetail, pdTRUE, eInvalid);
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <is_all_task_in_suspension+0x88>)
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000cea:	2305      	movs	r3, #5
 8000cec:	2201      	movs	r2, #1
 8000cee:	f003 f8df 	bl	8003eb0 <vTaskGetInfo>
	vTaskGetInfo(task_red_handle, &redTaskDetail, pdTRUE, eInvalid);
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <is_all_task_in_suspension+0x8c>)
 8000cf4:	6818      	ldr	r0, [r3, #0]
 8000cf6:	1d39      	adds	r1, r7, #4
 8000cf8:	2305      	movs	r3, #5
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f003 f8d8 	bl	8003eb0 <vTaskGetInfo>

	if ((greenTaskDetail.eCurrentState == eSuspended) & (orangeTaskDetail.eCurrentState == eSuspended) & (redTaskDetail.eCurrentState == eSuspended))
 8000d00:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	bf0c      	ite	eq
 8000d08:	2301      	moveq	r3, #1
 8000d0a:	2300      	movne	r3, #0
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	bf0c      	ite	eq
 8000d16:	2301      	moveq	r3, #1
 8000d18:	2300      	movne	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	7c3b      	ldrb	r3, [r7, #16]
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	bf0c      	ite	eq
 8000d28:	2301      	moveq	r3, #1
 8000d2a:	2300      	movne	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d004      	beq.n	8000d3e <is_all_task_in_suspension+0x72>
	{
		printf("All task are suspended");
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <is_all_task_in_suspension+0x90>)
 8000d36:	f007 f879 	bl	8007e2c <iprintf>
		return true;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e003      	b.n	8000d46 <is_all_task_in_suspension+0x7a>
	}
	printf("some task is not suspended");
 8000d3e:	4808      	ldr	r0, [pc, #32]	; (8000d60 <is_all_task_in_suspension+0x94>)
 8000d40:	f007 f874 	bl	8007e2c <iprintf>
	return false;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3770      	adds	r7, #112	; 0x70
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000009c 	.word	0x2000009c
 8000d54:	200000a0 	.word	0x200000a0
 8000d58:	200000a4 	.word	0x200000a4
 8000d5c:	08008eb4 	.word	0x08008eb4
 8000d60:	08008ecc 	.word	0x08008ecc

08000d64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d101      	bne.n	8000d7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d76:	f000 f9b7 	bl	80010e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40001000 	.word	0x40001000

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <Error_Handler+0x8>
	...

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000dd2:	f003 ff19 	bl	8004c08 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	; 0x38
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <HAL_InitTick+0xe4>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	4a32      	ldr	r2, [pc, #200]	; (8000ec8 <HAL_InitTick+0xe4>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	6413      	str	r3, [r2, #64]	; 0x40
 8000e04:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <HAL_InitTick+0xe4>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e10:	f107 0210 	add.w	r2, r7, #16
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 f8d2 	bl	8001fc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e2a:	f001 f8b7 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 8000e2e:	6378      	str	r0, [r7, #52]	; 0x34
 8000e30:	e004      	b.n	8000e3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e32:	f001 f8b3 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 8000e36:	4603      	mov	r3, r0
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3e:	4a23      	ldr	r2, [pc, #140]	; (8000ecc <HAL_InitTick+0xe8>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	0c9b      	lsrs	r3, r3, #18
 8000e46:	3b01      	subs	r3, #1
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <HAL_InitTick+0xf0>)
 8000e4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e70:	4817      	ldr	r0, [pc, #92]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e72:	f001 f8d9 	bl	8002028 <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d11b      	bne.n	8000ebc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e84:	4812      	ldr	r0, [pc, #72]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e86:	f001 f929 	bl	80020dc <HAL_TIM_Base_Start_IT>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d111      	bne.n	8000ebc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e98:	2036      	movs	r0, #54	; 0x36
 8000e9a:	f000 fa19 	bl	80012d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d808      	bhi.n	8000eb6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	2036      	movs	r0, #54	; 0x36
 8000eaa:	f000 f9f5 	bl	8001298 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_InitTick+0xf4>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	e002      	b.n	8000ebc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ebc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3738      	adds	r7, #56	; 0x38
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	431bde83 	.word	0x431bde83
 8000ed0:	200000b0 	.word	0x200000b0
 8000ed4:	40001000 	.word	0x40001000
 8000ed8:	20000004 	.word	0x20000004

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <TIM6_DAC_IRQHandler+0x10>)
 8000f0e:	f001 f955 	bl	80021bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000b0 	.word	0x200000b0

08000f1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e00a      	b.n	8000f44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f2e:	f3af 8000 	nop.w
 8000f32:	4601      	mov	r1, r0
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	60ba      	str	r2, [r7, #8]
 8000f3a:	b2ca      	uxtb	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbf0      	blt.n	8000f2e <_read+0x12>
	}

return len;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_isatty>:

int _isatty(int file)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	return 1;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc8:	4a14      	ldr	r2, [pc, #80]	; (800101c <_sbrk+0x5c>)
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <_sbrk+0x60>)
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <_sbrk+0x64>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <_sbrk+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d207      	bcs.n	8001000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff0:	f006 fecc 	bl	8007d8c <__errno>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	e009      	b.n	8001014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <_sbrk+0x64>)
 8001010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20020000 	.word	0x20020000
 8001020:	00000400 	.word	0x00000400
 8001024:	200000f8 	.word	0x200000f8
 8001028:	20013938 	.word	0x20013938

0800102c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <SystemInit+0x20>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <SystemInit+0x20>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001056:	490e      	ldr	r1, [pc, #56]	; (8001090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800106c:	4c0b      	ldr	r4, [pc, #44]	; (800109c <LoopFillZerobss+0x26>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800107a:	f7ff ffd7 	bl	800102c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107e:	f006 fe8b 	bl	8007d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001082:	f7ff fac7 	bl	8000614 <main>
  bx  lr    
 8001086:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001094:	080090c0 	.word	0x080090c0
  ldr r2, =_sbss
 8001098:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800109c:	20013934 	.word	0x20013934

080010a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <HAL_Init+0x40>)
 80010ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_Init+0x40>)
 80010ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_Init+0x40>)
 80010c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 f8d8 	bl	8001282 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fe86 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d8:	f7ff fe5c 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023c00 	.word	0x40023c00

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008
 800110c:	200000fc 	.word	0x200000fc

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200000fc 	.word	0x200000fc

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115a:	4a04      	ldr	r2, [pc, #16]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db0b      	blt.n	80011b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4907      	ldr	r1, [pc, #28]	; (80011c4 <__NVIC_EnableIRQ+0x38>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff4c 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012aa:	f7ff ff61 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	68b9      	ldr	r1, [r7, #8]
 80012b4:	6978      	ldr	r0, [r7, #20]
 80012b6:	f7ff ffb1 	bl	800121c <NVIC_EncodePriority>
 80012ba:	4602      	mov	r2, r0
 80012bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff80 	bl	80011c8 <__NVIC_SetPriority>
}
 80012c8:	bf00      	nop
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff54 	bl	800118c <__NVIC_EnableIRQ>
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	e16b      	b.n	80015e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	429a      	cmp	r2, r3
 8001322:	f040 815a 	bne.w	80015da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d005      	beq.n	800133e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133a:	2b02      	cmp	r3, #2
 800133c:	d130      	bne.n	80013a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f003 0201 	and.w	r2, r3, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d017      	beq.n	80013dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d123      	bne.n	8001430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	69b9      	ldr	r1, [r7, #24]
 800142c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0203 	and.w	r2, r3, #3
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80b4 	beq.w	80015da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b60      	ldr	r3, [pc, #384]	; (80015f8 <HAL_GPIO_Init+0x30c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a5f      	ldr	r2, [pc, #380]	; (80015f8 <HAL_GPIO_Init+0x30c>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <HAL_GPIO_Init+0x30c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148e:	4a5b      	ldr	r2, [pc, #364]	; (80015fc <HAL_GPIO_Init+0x310>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3302      	adds	r3, #2
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a52      	ldr	r2, [pc, #328]	; (8001600 <HAL_GPIO_Init+0x314>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d02b      	beq.n	8001512 <HAL_GPIO_Init+0x226>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a51      	ldr	r2, [pc, #324]	; (8001604 <HAL_GPIO_Init+0x318>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d025      	beq.n	800150e <HAL_GPIO_Init+0x222>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a50      	ldr	r2, [pc, #320]	; (8001608 <HAL_GPIO_Init+0x31c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01f      	beq.n	800150a <HAL_GPIO_Init+0x21e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4f      	ldr	r2, [pc, #316]	; (800160c <HAL_GPIO_Init+0x320>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d019      	beq.n	8001506 <HAL_GPIO_Init+0x21a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4e      	ldr	r2, [pc, #312]	; (8001610 <HAL_GPIO_Init+0x324>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0x216>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4d      	ldr	r2, [pc, #308]	; (8001614 <HAL_GPIO_Init+0x328>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00d      	beq.n	80014fe <HAL_GPIO_Init+0x212>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4c      	ldr	r2, [pc, #304]	; (8001618 <HAL_GPIO_Init+0x32c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d007      	beq.n	80014fa <HAL_GPIO_Init+0x20e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4b      	ldr	r2, [pc, #300]	; (800161c <HAL_GPIO_Init+0x330>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_GPIO_Init+0x20a>
 80014f2:	2307      	movs	r3, #7
 80014f4:	e00e      	b.n	8001514 <HAL_GPIO_Init+0x228>
 80014f6:	2308      	movs	r3, #8
 80014f8:	e00c      	b.n	8001514 <HAL_GPIO_Init+0x228>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e00a      	b.n	8001514 <HAL_GPIO_Init+0x228>
 80014fe:	2305      	movs	r3, #5
 8001500:	e008      	b.n	8001514 <HAL_GPIO_Init+0x228>
 8001502:	2304      	movs	r3, #4
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x228>
 8001506:	2303      	movs	r3, #3
 8001508:	e004      	b.n	8001514 <HAL_GPIO_Init+0x228>
 800150a:	2302      	movs	r3, #2
 800150c:	e002      	b.n	8001514 <HAL_GPIO_Init+0x228>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x228>
 8001512:	2300      	movs	r3, #0
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	f002 0203 	and.w	r2, r2, #3
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	4093      	lsls	r3, r2
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001524:	4935      	ldr	r1, [pc, #212]	; (80015fc <HAL_GPIO_Init+0x310>)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001532:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <HAL_GPIO_Init+0x334>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001556:	4a32      	ldr	r2, [pc, #200]	; (8001620 <HAL_GPIO_Init+0x334>)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_GPIO_Init+0x334>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001580:	4a27      	ldr	r2, [pc, #156]	; (8001620 <HAL_GPIO_Init+0x334>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_GPIO_Init+0x334>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015aa:	4a1d      	ldr	r2, [pc, #116]	; (8001620 <HAL_GPIO_Init+0x334>)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_GPIO_Init+0x334>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d4:	4a12      	ldr	r2, [pc, #72]	; (8001620 <HAL_GPIO_Init+0x334>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3301      	adds	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	f67f ae90 	bls.w	8001308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40013800 	.word	0x40013800
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400
 8001608:	40020800 	.word	0x40020800
 800160c:	40020c00 	.word	0x40020c00
 8001610:	40021000 	.word	0x40021000
 8001614:	40021400 	.word	0x40021400
 8001618:	40021800 	.word	0x40021800
 800161c:	40021c00 	.word	0x40021c00
 8001620:	40013c00 	.word	0x40013c00

08001624 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e001      	b.n	8001646 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
 8001660:	4613      	mov	r3, r2
 8001662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001664:	787b      	ldrb	r3, [r7, #1]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001670:	e003      	b.n	800167a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	041a      	lsls	r2, r3, #16
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	619a      	str	r2, [r3, #24]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	460b      	mov	r3, r1
 8001690:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001698:	887a      	ldrh	r2, [r7, #2]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4013      	ands	r3, r2
 800169e:	041a      	lsls	r2, r3, #16
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	400b      	ands	r3, r1
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	619a      	str	r2, [r3, #24]
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e267      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d075      	beq.n	80017c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016da:	4b88      	ldr	r3, [pc, #544]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d00c      	beq.n	8001700 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016e6:	4b85      	ldr	r3, [pc, #532]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d112      	bne.n	8001718 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f2:	4b82      	ldr	r3, [pc, #520]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016fe:	d10b      	bne.n	8001718 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	4b7e      	ldr	r3, [pc, #504]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d05b      	beq.n	80017c4 <HAL_RCC_OscConfig+0x108>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d157      	bne.n	80017c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e242      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001720:	d106      	bne.n	8001730 <HAL_RCC_OscConfig+0x74>
 8001722:	4b76      	ldr	r3, [pc, #472]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a75      	ldr	r2, [pc, #468]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e01d      	b.n	800176c <HAL_RCC_OscConfig+0xb0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x98>
 800173a:	4b70      	ldr	r3, [pc, #448]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a6f      	ldr	r2, [pc, #444]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 8001740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b6d      	ldr	r3, [pc, #436]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a6c      	ldr	r2, [pc, #432]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0xb0>
 8001754:	4b69      	ldr	r3, [pc, #420]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a68      	ldr	r2, [pc, #416]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b66      	ldr	r3, [pc, #408]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a65      	ldr	r2, [pc, #404]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d013      	beq.n	800179c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fccc 	bl	8001110 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fcc8 	bl	8001110 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	; 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e207      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b5b      	ldr	r3, [pc, #364]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0xc0>
 800179a:	e014      	b.n	80017c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fcb8 	bl	8001110 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fcb4 	bl	8001110 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e1f3      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	4b51      	ldr	r3, [pc, #324]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0xe8>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d063      	beq.n	800189a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017d2:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00b      	beq.n	80017f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d11c      	bne.n	8001824 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d116      	bne.n	8001824 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <HAL_RCC_OscConfig+0x152>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e1c7      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4937      	ldr	r1, [pc, #220]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001822:	e03a      	b.n	800189a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800182c:	4b34      	ldr	r3, [pc, #208]	; (8001900 <HAL_RCC_OscConfig+0x244>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff fc6d 	bl	8001110 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183a:	f7ff fc69 	bl	8001110 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e1a8      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184c:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4925      	ldr	r1, [pc, #148]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 8001868:	4313      	orrs	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
 800186c:	e015      	b.n	800189a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_RCC_OscConfig+0x244>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fc4c 	bl	8001110 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187c:	f7ff fc48 	bl	8001110 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e187      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d036      	beq.n	8001914 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d016      	beq.n	80018dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_RCC_OscConfig+0x248>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7ff fc2c 	bl	8001110 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018bc:	f7ff fc28 	bl	8001110 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e167      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_OscConfig+0x240>)
 80018d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x200>
 80018da:	e01b      	b.n	8001914 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_RCC_OscConfig+0x248>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fc15 	bl	8001110 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e8:	e00e      	b.n	8001908 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ea:	f7ff fc11 	bl	8001110 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d907      	bls.n	8001908 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e150      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
 80018fc:	40023800 	.word	0x40023800
 8001900:	42470000 	.word	0x42470000
 8001904:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001908:	4b88      	ldr	r3, [pc, #544]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 800190a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1ea      	bne.n	80018ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 8097 	beq.w	8001a50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001926:	4b81      	ldr	r3, [pc, #516]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10f      	bne.n	8001952 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	4b7d      	ldr	r3, [pc, #500]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a7c      	ldr	r2, [pc, #496]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b7a      	ldr	r3, [pc, #488]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194e:	2301      	movs	r3, #1
 8001950:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001952:	4b77      	ldr	r3, [pc, #476]	; (8001b30 <HAL_RCC_OscConfig+0x474>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d118      	bne.n	8001990 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195e:	4b74      	ldr	r3, [pc, #464]	; (8001b30 <HAL_RCC_OscConfig+0x474>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a73      	ldr	r2, [pc, #460]	; (8001b30 <HAL_RCC_OscConfig+0x474>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196a:	f7ff fbd1 	bl	8001110 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001972:	f7ff fbcd 	bl	8001110 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e10c      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <HAL_RCC_OscConfig+0x474>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x2ea>
 8001998:	4b64      	ldr	r3, [pc, #400]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	4a63      	ldr	r2, [pc, #396]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6713      	str	r3, [r2, #112]	; 0x70
 80019a4:	e01c      	b.n	80019e0 <HAL_RCC_OscConfig+0x324>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b05      	cmp	r3, #5
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x30c>
 80019ae:	4b5f      	ldr	r3, [pc, #380]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b2:	4a5e      	ldr	r2, [pc, #376]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ba:	4b5c      	ldr	r3, [pc, #368]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019be:	4a5b      	ldr	r2, [pc, #364]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6713      	str	r3, [r2, #112]	; 0x70
 80019c6:	e00b      	b.n	80019e0 <HAL_RCC_OscConfig+0x324>
 80019c8:	4b58      	ldr	r3, [pc, #352]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	4a57      	ldr	r2, [pc, #348]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6713      	str	r3, [r2, #112]	; 0x70
 80019d4:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d8:	4a54      	ldr	r2, [pc, #336]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019da:	f023 0304 	bic.w	r3, r3, #4
 80019de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d015      	beq.n	8001a14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e8:	f7ff fb92 	bl	8001110 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f7ff fb8e 	bl	8001110 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e0cb      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a06:	4b49      	ldr	r3, [pc, #292]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0ee      	beq.n	80019f0 <HAL_RCC_OscConfig+0x334>
 8001a12:	e014      	b.n	8001a3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff fb7c 	bl	8001110 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fb78 	bl	8001110 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e0b5      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a32:	4b3e      	ldr	r3, [pc, #248]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1ee      	bne.n	8001a1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a44:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	4a38      	ldr	r2, [pc, #224]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80a1 	beq.w	8001b9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d05c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d141      	bne.n	8001af2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <HAL_RCC_OscConfig+0x478>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fb4c 	bl	8001110 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff fb48 	bl	8001110 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e087      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8e:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69da      	ldr	r2, [r3, #28]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	019b      	lsls	r3, r3, #6
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	085b      	lsrs	r3, r3, #1
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	061b      	lsls	r3, r3, #24
 8001abe:	491b      	ldr	r1, [pc, #108]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_RCC_OscConfig+0x478>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7ff fb21 	bl	8001110 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7ff fb1d 	bl	8001110 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e05c      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x416>
 8001af0:	e054      	b.n	8001b9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <HAL_RCC_OscConfig+0x478>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fb0a 	bl	8001110 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff fb06 	bl	8001110 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e045      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x444>
 8001b1e:	e03d      	b.n	8001b9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e038      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40007000 	.word	0x40007000
 8001b34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_RCC_OscConfig+0x4ec>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d028      	beq.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d121      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d11a      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b68:	4013      	ands	r3, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d111      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	085b      	lsrs	r3, r3, #1
 8001b80:	3b01      	subs	r3, #1
 8001b82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800

08001bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0cc      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d90c      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b65      	ldr	r3, [pc, #404]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0b8      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c00:	4b59      	ldr	r3, [pc, #356]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c24:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	494d      	ldr	r1, [pc, #308]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d044      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d119      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e07f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e06f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e067      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8a:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f023 0203 	bic.w	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4934      	ldr	r1, [pc, #208]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c9c:	f7ff fa38 	bl	8001110 <HAL_GetTick>
 8001ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca4:	f7ff fa34 	bl	8001110 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e04f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 020c 	and.w	r2, r3, #12
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1eb      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d20c      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e032      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4916      	ldr	r1, [pc, #88]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	490e      	ldr	r1, [pc, #56]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d32:	f000 f821 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	490a      	ldr	r1, [pc, #40]	; (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	5ccb      	ldrb	r3, [r1, r3]
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f846 	bl	8000de4 <HAL_InitTick>

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023c00 	.word	0x40023c00
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	08008fc4 	.word	0x08008fc4
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000004 	.word	0x20000004

08001d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d7c:	b094      	sub	sp, #80	; 0x50
 8001d7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	647b      	str	r3, [r7, #68]	; 0x44
 8001d84:	2300      	movs	r3, #0
 8001d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d88:	2300      	movs	r3, #0
 8001d8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d90:	4b79      	ldr	r3, [pc, #484]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d00d      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x40>
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	f200 80e1 	bhi.w	8001f64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x34>
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d003      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001daa:	e0db      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dac:	4b73      	ldr	r3, [pc, #460]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001dae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001db0:	e0db      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001db2:	4b73      	ldr	r3, [pc, #460]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x208>)
 8001db4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001db6:	e0d8      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001db8:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dc0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dc2:	4b6d      	ldr	r3, [pc, #436]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d063      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dce:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	099b      	lsrs	r3, r3, #6
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
 8001de2:	2300      	movs	r3, #0
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
 8001de6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dea:	4622      	mov	r2, r4
 8001dec:	462b      	mov	r3, r5
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	0159      	lsls	r1, r3, #5
 8001df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dfc:	0150      	lsls	r0, r2, #5
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4621      	mov	r1, r4
 8001e04:	1a51      	subs	r1, r2, r1
 8001e06:	6139      	str	r1, [r7, #16]
 8001e08:	4629      	mov	r1, r5
 8001e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e1c:	4659      	mov	r1, fp
 8001e1e:	018b      	lsls	r3, r1, #6
 8001e20:	4651      	mov	r1, sl
 8001e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e26:	4651      	mov	r1, sl
 8001e28:	018a      	lsls	r2, r1, #6
 8001e2a:	4651      	mov	r1, sl
 8001e2c:	ebb2 0801 	subs.w	r8, r2, r1
 8001e30:	4659      	mov	r1, fp
 8001e32:	eb63 0901 	sbc.w	r9, r3, r1
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e4a:	4690      	mov	r8, r2
 8001e4c:	4699      	mov	r9, r3
 8001e4e:	4623      	mov	r3, r4
 8001e50:	eb18 0303 	adds.w	r3, r8, r3
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	462b      	mov	r3, r5
 8001e58:	eb49 0303 	adc.w	r3, r9, r3
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	024b      	lsls	r3, r1, #9
 8001e6e:	4621      	mov	r1, r4
 8001e70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e74:	4621      	mov	r1, r4
 8001e76:	024a      	lsls	r2, r1, #9
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e7e:	2200      	movs	r2, #0
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e88:	f7fe fa42 	bl	8000310 <__aeabi_uldivmod>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4613      	mov	r3, r2
 8001e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e94:	e058      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e96:	4b38      	ldr	r3, [pc, #224]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	099b      	lsrs	r3, r3, #6
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ea6:	623b      	str	r3, [r7, #32]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8001eac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001eb0:	4642      	mov	r2, r8
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	f04f 0000 	mov.w	r0, #0
 8001eb8:	f04f 0100 	mov.w	r1, #0
 8001ebc:	0159      	lsls	r1, r3, #5
 8001ebe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ec2:	0150      	lsls	r0, r2, #5
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4641      	mov	r1, r8
 8001eca:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ece:	4649      	mov	r1, r9
 8001ed0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ee0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ee4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ee8:	ebb2 040a 	subs.w	r4, r2, sl
 8001eec:	eb63 050b 	sbc.w	r5, r3, fp
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	00eb      	lsls	r3, r5, #3
 8001efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001efe:	00e2      	lsls	r2, r4, #3
 8001f00:	4614      	mov	r4, r2
 8001f02:	461d      	mov	r5, r3
 8001f04:	4643      	mov	r3, r8
 8001f06:	18e3      	adds	r3, r4, r3
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	464b      	mov	r3, r9
 8001f0c:	eb45 0303 	adc.w	r3, r5, r3
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f1e:	4629      	mov	r1, r5
 8001f20:	028b      	lsls	r3, r1, #10
 8001f22:	4621      	mov	r1, r4
 8001f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f28:	4621      	mov	r1, r4
 8001f2a:	028a      	lsls	r2, r1, #10
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f32:	2200      	movs	r2, #0
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	61fa      	str	r2, [r7, #28]
 8001f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f3c:	f7fe f9e8 	bl	8000310 <__aeabi_uldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4613      	mov	r3, r2
 8001f46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	0c1b      	lsrs	r3, r3, #16
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	3301      	adds	r3, #1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f62:	e002      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3750      	adds	r7, #80	; 0x50
 8001f70:	46bd      	mov	sp, r7
 8001f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	00f42400 	.word	0x00f42400
 8001f80:	007a1200 	.word	0x007a1200

08001f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000000 	.word	0x20000000

08001f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa0:	f7ff fff0 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0a9b      	lsrs	r3, r3, #10
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4903      	ldr	r1, [pc, #12]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	08008fd4 	.word	0x08008fd4

08001fc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_RCC_GetClockConfig+0x5c>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_RCC_GetClockConfig+0x5c>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <HAL_RCC_GetClockConfig+0x5c>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_GetClockConfig+0x5c>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	08db      	lsrs	r3, r3, #3
 8001ffe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <HAL_RCC_GetClockConfig+0x60>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0207 	and.w	r2, r3, #7
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	601a      	str	r2, [r3, #0]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	40023c00 	.word	0x40023c00

08002028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e041      	b.n	80020be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f839 	bl	80020c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3304      	adds	r3, #4
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f000 f9d8 	bl	800241c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d001      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e04e      	b.n	8002192 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a23      	ldr	r2, [pc, #140]	; (80021a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d022      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x80>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211e:	d01d      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x80>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d018      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x80>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x80>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1c      	ldr	r2, [pc, #112]	; (80021ac <HAL_TIM_Base_Start_IT+0xd0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00e      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x80>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d009      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x80>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d004      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x80>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d111      	bne.n	8002180 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b06      	cmp	r3, #6
 800216c:	d010      	beq.n	8002190 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217e:	e007      	b.n	8002190 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40010000 	.word	0x40010000
 80021a4:	40000400 	.word	0x40000400
 80021a8:	40000800 	.word	0x40000800
 80021ac:	40000c00 	.word	0x40000c00
 80021b0:	40010400 	.word	0x40010400
 80021b4:	40014000 	.word	0x40014000
 80021b8:	40001800 	.word	0x40001800

080021bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d122      	bne.n	8002218 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d11b      	bne.n	8002218 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0202 	mvn.w	r2, #2
 80021e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f8ee 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 8002204:	e005      	b.n	8002212 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8e0 	bl	80023cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f8f1 	bl	80023f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b04      	cmp	r3, #4
 8002224:	d122      	bne.n	800226c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b04      	cmp	r3, #4
 8002232:	d11b      	bne.n	800226c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0204 	mvn.w	r2, #4
 800223c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2202      	movs	r2, #2
 8002242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8c4 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 8002258:	e005      	b.n	8002266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f8b6 	bl	80023cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f8c7 	bl	80023f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b08      	cmp	r3, #8
 8002278:	d122      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b08      	cmp	r3, #8
 8002286:	d11b      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0208 	mvn.w	r2, #8
 8002290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2204      	movs	r2, #4
 8002296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f89a 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 80022ac:	e005      	b.n	80022ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f88c 	bl	80023cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f89d 	bl	80023f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d122      	bne.n	8002314 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d11b      	bne.n	8002314 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0210 	mvn.w	r2, #16
 80022e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2208      	movs	r2, #8
 80022ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f870 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 8002300:	e005      	b.n	800230e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f862 	bl	80023cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f873 	bl	80023f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10e      	bne.n	8002340 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b01      	cmp	r3, #1
 800232e:	d107      	bne.n	8002340 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0201 	mvn.w	r2, #1
 8002338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe fd12 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234a:	2b80      	cmp	r3, #128	; 0x80
 800234c:	d10e      	bne.n	800236c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002358:	2b80      	cmp	r3, #128	; 0x80
 800235a:	d107      	bne.n	800236c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f902 	bl	8002570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	2b40      	cmp	r3, #64	; 0x40
 8002378:	d10e      	bne.n	8002398 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002384:	2b40      	cmp	r3, #64	; 0x40
 8002386:	d107      	bne.n	8002398 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f838 	bl	8002408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	2b20      	cmp	r3, #32
 80023a4:	d10e      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d107      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0220 	mvn.w	r2, #32
 80023bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8cc 	bl	800255c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a40      	ldr	r2, [pc, #256]	; (8002530 <TIM_Base_SetConfig+0x114>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d013      	beq.n	800245c <TIM_Base_SetConfig+0x40>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243a:	d00f      	beq.n	800245c <TIM_Base_SetConfig+0x40>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a3d      	ldr	r2, [pc, #244]	; (8002534 <TIM_Base_SetConfig+0x118>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00b      	beq.n	800245c <TIM_Base_SetConfig+0x40>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a3c      	ldr	r2, [pc, #240]	; (8002538 <TIM_Base_SetConfig+0x11c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d007      	beq.n	800245c <TIM_Base_SetConfig+0x40>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a3b      	ldr	r2, [pc, #236]	; (800253c <TIM_Base_SetConfig+0x120>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d003      	beq.n	800245c <TIM_Base_SetConfig+0x40>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a3a      	ldr	r2, [pc, #232]	; (8002540 <TIM_Base_SetConfig+0x124>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d108      	bne.n	800246e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a2f      	ldr	r2, [pc, #188]	; (8002530 <TIM_Base_SetConfig+0x114>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d02b      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247c:	d027      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a2c      	ldr	r2, [pc, #176]	; (8002534 <TIM_Base_SetConfig+0x118>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d023      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a2b      	ldr	r2, [pc, #172]	; (8002538 <TIM_Base_SetConfig+0x11c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d01f      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a2a      	ldr	r2, [pc, #168]	; (800253c <TIM_Base_SetConfig+0x120>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01b      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a29      	ldr	r2, [pc, #164]	; (8002540 <TIM_Base_SetConfig+0x124>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d017      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a28      	ldr	r2, [pc, #160]	; (8002544 <TIM_Base_SetConfig+0x128>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a27      	ldr	r2, [pc, #156]	; (8002548 <TIM_Base_SetConfig+0x12c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00f      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a26      	ldr	r2, [pc, #152]	; (800254c <TIM_Base_SetConfig+0x130>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00b      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a25      	ldr	r2, [pc, #148]	; (8002550 <TIM_Base_SetConfig+0x134>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a24      	ldr	r2, [pc, #144]	; (8002554 <TIM_Base_SetConfig+0x138>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d003      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a23      	ldr	r2, [pc, #140]	; (8002558 <TIM_Base_SetConfig+0x13c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d108      	bne.n	80024e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <TIM_Base_SetConfig+0x114>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d003      	beq.n	8002514 <TIM_Base_SetConfig+0xf8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a0c      	ldr	r2, [pc, #48]	; (8002540 <TIM_Base_SetConfig+0x124>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d103      	bne.n	800251c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	615a      	str	r2, [r3, #20]
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40010000 	.word	0x40010000
 8002534:	40000400 	.word	0x40000400
 8002538:	40000800 	.word	0x40000800
 800253c:	40000c00 	.word	0x40000c00
 8002540:	40010400 	.word	0x40010400
 8002544:	40014000 	.word	0x40014000
 8002548:	40014400 	.word	0x40014400
 800254c:	40014800 	.word	0x40014800
 8002550:	40001800 	.word	0x40001800
 8002554:	40001c00 	.word	0x40001c00
 8002558:	40002000 	.word	0x40002000

0800255c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f103 0208 	add.w	r2, r3, #8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f04f 32ff 	mov.w	r2, #4294967295
 800259c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f103 0208 	add.w	r2, r3, #8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f103 0208 	add.w	r2, r3, #8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80025de:	b480      	push	{r7}
 80025e0:	b085      	sub	sp, #20
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	601a      	str	r2, [r3, #0]
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d103      	bne.n	8002646 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	e00c      	b.n	8002660 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3308      	adds	r3, #8
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	e002      	b.n	8002654 <vListInsert+0x2e>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	429a      	cmp	r2, r3
 800265e:	d2f6      	bcs.n	800264e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	601a      	str	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6892      	ldr	r2, [r2, #8]
 80026ae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6852      	ldr	r2, [r2, #4]
 80026b8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d103      	bne.n	80026cc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1e5a      	subs	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80026f6:	2301      	movs	r3, #1
 80026f8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <xQueueGenericReset+0x2e>
        __asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	60fb      	str	r3, [r7, #12]
    }
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d052      	beq.n	80027c6 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002724:	2b00      	cmp	r3, #0
 8002726:	d04e      	beq.n	80027c6 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002730:	2100      	movs	r1, #0
 8002732:	fba3 2302 	umull	r2, r3, r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d000      	beq.n	800273c <xQueueGenericReset+0x50>
 800273a:	2101      	movs	r1, #1
 800273c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800273e:	2b00      	cmp	r3, #0
 8002740:	d141      	bne.n	80027c6 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8002742:	f002 fadf 	bl	8004d04 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274e:	6939      	ldr	r1, [r7, #16]
 8002750:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	441a      	add	r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2200      	movs	r2, #0
 8002760:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	3b01      	subs	r3, #1
 8002774:	6939      	ldr	r1, [r7, #16]
 8002776:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	441a      	add	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	22ff      	movs	r2, #255	; 0xff
 8002786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	22ff      	movs	r2, #255	; 0xff
 800278e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00f      	beq.n	80027c0 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	3310      	adds	r3, #16
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 f9a3 	bl	8003af0 <xTaskRemoveFromEventList>
 80027aa:	e009      	b.n	80027c0 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	3310      	adds	r3, #16
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fee7 	bl	8002584 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	3324      	adds	r3, #36	; 0x24
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fee2 	bl	8002584 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80027c0:	f002 fad0 	bl	8004d64 <vPortExitCritical>
 80027c4:	e001      	b.n	80027ca <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <xQueueGenericReset+0xfa>
        __asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	60bb      	str	r3, [r7, #8]
    }
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80027e6:	697b      	ldr	r3, [r7, #20]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	4613      	mov	r3, r2
 80027fc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d02e      	beq.n	8002866 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002808:	2100      	movs	r1, #0
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	fba3 2302 	umull	r2, r3, r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d000      	beq.n	8002818 <xQueueGenericCreate+0x28>
 8002816:	2101      	movs	r1, #1
 8002818:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800281a:	2b00      	cmp	r3, #0
 800281c:	d123      	bne.n	8002866 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002826:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800282a:	d81c      	bhi.n	8002866 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	3350      	adds	r3, #80	; 0x50
 800283a:	4618      	mov	r0, r3
 800283c:	f002 fb8e 	bl	8004f5c <pvPortMalloc>
 8002840:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01c      	beq.n	8002882 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3350      	adds	r3, #80	; 0x50
 8002850:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002852:	79fa      	ldrb	r2, [r7, #7]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	4613      	mov	r3, r2
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f814 	bl	800288c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002864:	e00d      	b.n	8002882 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <xQueueGenericCreate+0x92>
        __asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	613b      	str	r3, [r7, #16]
    }
 800287e:	bf00      	nop
 8002880:	e7fe      	b.n	8002880 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002882:	69fb      	ldr	r3, [r7, #28]
    }
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d103      	bne.n	80028a8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e002      	b.n	80028ae <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028ba:	2101      	movs	r1, #1
 80028bc:	69b8      	ldr	r0, [r7, #24]
 80028be:	f7ff ff15 	bl	80026ec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	68f9      	ldr	r1, [r7, #12]
 80028d0:	2073      	movs	r0, #115	; 0x73
 80028d2:	f004 fb27 	bl	8006f24 <SEGGER_SYSVIEW_RecordU32x3>
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b08f      	sub	sp, #60	; 0x3c
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <xQueueReceive+0x30>
        __asm volatile
 80028fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	623b      	str	r3, [r7, #32]
    }
 800290c:	bf00      	nop
 800290e:	e7fe      	b.n	800290e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d103      	bne.n	800291e <xQueueReceive+0x3e>
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <xQueueReceive+0x42>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <xQueueReceive+0x44>
 8002922:	2300      	movs	r3, #0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <xQueueReceive+0x5e>
        __asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	61fb      	str	r3, [r7, #28]
    }
 800293a:	bf00      	nop
 800293c:	e7fe      	b.n	800293c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800293e:	f001 fb65 	bl	800400c <xTaskGetSchedulerState>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <xQueueReceive+0x6e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <xQueueReceive+0x72>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <xQueueReceive+0x74>
 8002952:	2300      	movs	r3, #0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <xQueueReceive+0x8e>
        __asm volatile
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	61bb      	str	r3, [r7, #24]
    }
 800296a:	bf00      	nop
 800296c:	e7fe      	b.n	800296c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800296e:	f002 f9c9 	bl	8004d04 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	2b00      	cmp	r3, #0
 800297c:	d024      	beq.n	80029c8 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002982:	f000 f8b3 	bl	8002aec <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	4618      	mov	r0, r3
 800298a:	f005 f859 	bl	8007a40 <SEGGER_SYSVIEW_ShrinkId>
 800298e:	4604      	mov	r4, r0
 8002990:	2000      	movs	r0, #0
 8002992:	f005 f855 	bl	8007a40 <SEGGER_SYSVIEW_ShrinkId>
 8002996:	4602      	mov	r2, r0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2101      	movs	r1, #1
 800299c:	9100      	str	r1, [sp, #0]
 800299e:	4621      	mov	r1, r4
 80029a0:	205c      	movs	r0, #92	; 0x5c
 80029a2:	f004 fb35 	bl	8007010 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	3310      	adds	r3, #16
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 f898 	bl	8003af0 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80029c0:	f002 f9d0 	bl	8004d64 <vPortExitCritical>
                return pdPASS;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e08a      	b.n	8002ade <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d113      	bne.n	80029f6 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80029ce:	f002 f9c9 	bl	8004d64 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	4618      	mov	r0, r3
 80029d6:	f005 f833 	bl	8007a40 <SEGGER_SYSVIEW_ShrinkId>
 80029da:	4604      	mov	r4, r0
 80029dc:	2000      	movs	r0, #0
 80029de:	f005 f82f 	bl	8007a40 <SEGGER_SYSVIEW_ShrinkId>
 80029e2:	4602      	mov	r2, r0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2101      	movs	r1, #1
 80029e8:	9100      	str	r1, [sp, #0]
 80029ea:	4621      	mov	r1, r4
 80029ec:	205c      	movs	r0, #92	; 0x5c
 80029ee:	f004 fb0f 	bl	8007010 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e073      	b.n	8002ade <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029fc:	f107 0310 	add.w	r3, r7, #16
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 f94d 	bl	8003ca0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002a06:	2301      	movs	r3, #1
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002a0a:	f002 f9ab 	bl	8004d64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002a0e:	f000 fd7b 	bl	8003508 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a12:	f002 f977 	bl	8004d04 <vPortEnterCritical>
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a22:	d103      	bne.n	8002a2c <xQueueReceive+0x14c>
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d103      	bne.n	8002a42 <xQueueReceive+0x162>
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a42:	f002 f98f 	bl	8004d64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a46:	1d3a      	adds	r2, r7, #4
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 f93c 	bl	8003ccc <xTaskCheckForTimeOut>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d124      	bne.n	8002aa4 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a5c:	f000 f8be 	bl	8002bdc <prvIsQueueEmpty>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d018      	beq.n	8002a98 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a68:	3324      	adds	r3, #36	; 0x24
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 ffd2 	bl	8003a18 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a76:	f000 f85f 	bl	8002b38 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a7a:	f000 fd53 	bl	8003524 <xTaskResumeAll>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f47f af74 	bne.w	800296e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002a86:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <xQueueReceive+0x208>)
 8002a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	e76a      	b.n	800296e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a9a:	f000 f84d 	bl	8002b38 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a9e:	f000 fd41 	bl	8003524 <xTaskResumeAll>
 8002aa2:	e764      	b.n	800296e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aa6:	f000 f847 	bl	8002b38 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002aaa:	f000 fd3b 	bl	8003524 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ab0:	f000 f894 	bl	8002bdc <prvIsQueueEmpty>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f43f af59 	beq.w	800296e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f004 ffbe 	bl	8007a40 <SEGGER_SYSVIEW_ShrinkId>
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f004 ffba 	bl	8007a40 <SEGGER_SYSVIEW_ShrinkId>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	9100      	str	r1, [sp, #0]
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	205c      	movs	r0, #92	; 0x5c
 8002ad8:	f004 fa9a 	bl	8007010 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002adc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3734      	adds	r7, #52	; 0x34
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	e000ed04 	.word	0xe000ed04

08002aec <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d018      	beq.n	8002b30 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	441a      	add	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d303      	bcc.n	8002b20 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68d9      	ldr	r1, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	461a      	mov	r2, r3
 8002b2a:	6838      	ldr	r0, [r7, #0]
 8002b2c:	f005 f968 	bl	8007e00 <memcpy>
    }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b40:	f002 f8e0 	bl	8004d04 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b4a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b4c:	e011      	b.n	8002b72 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d012      	beq.n	8002b7c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3324      	adds	r3, #36	; 0x24
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 ffc8 	bl	8003af0 <xTaskRemoveFromEventList>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002b66:	f001 f917 	bl	8003d98 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	dce9      	bgt.n	8002b4e <prvUnlockQueue+0x16>
 8002b7a:	e000      	b.n	8002b7e <prvUnlockQueue+0x46>
                    break;
 8002b7c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	22ff      	movs	r2, #255	; 0xff
 8002b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b86:	f002 f8ed 	bl	8004d64 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b8a:	f002 f8bb 	bl	8004d04 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b94:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b96:	e011      	b.n	8002bbc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d012      	beq.n	8002bc6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3310      	adds	r3, #16
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 ffa3 	bl	8003af0 <xTaskRemoveFromEventList>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002bb0:	f001 f8f2 	bl	8003d98 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002bb4:	7bbb      	ldrb	r3, [r7, #14]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	dce9      	bgt.n	8002b98 <prvUnlockQueue+0x60>
 8002bc4:	e000      	b.n	8002bc8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002bc6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	22ff      	movs	r2, #255	; 0xff
 8002bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002bd0:	f002 f8c8 	bl	8004d64 <vPortExitCritical>
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002be4:	f002 f88e 	bl	8004d04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d102      	bne.n	8002bf6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e001      	b.n	8002bfa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002bfa:	f002 f8b3 	bl	8004d64 <vPortExitCritical>

    return xReturn;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c20:	f383 8811 	msr	BASEPRI, r3
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	60fb      	str	r3, [r7, #12]
    }
 8002c2e:	bf00      	nop
 8002c30:	e7fe      	b.n	8002c30 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d024      	beq.n	8002c82 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	e01e      	b.n	8002c7c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002c3e:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <vQueueAddToRegistry+0xa8>)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d105      	bne.n	8002c5a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <vQueueAddToRegistry+0xa8>)
 8002c54:	4413      	add	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
                    break;
 8002c58:	e013      	b.n	8002c82 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <vQueueAddToRegistry+0x6e>
 8002c60:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <vQueueAddToRegistry+0xa8>)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4a0f      	ldr	r2, [pc, #60]	; (8002cb0 <vQueueAddToRegistry+0xa8>)
 8002c72:	4413      	add	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b07      	cmp	r3, #7
 8002c80:	d9dd      	bls.n	8002c3e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00f      	beq.n	8002ca8 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 fed2 	bl	8007a40 <SEGGER_SYSVIEW_ShrinkId>
 8002c9c:	4601      	mov	r1, r0
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2071      	movs	r0, #113	; 0x71
 8002ca4:	f004 f8e4 	bl	8006e70 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002ca8:	bf00      	nop
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000100 	.word	0x20000100

08002cb4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002cc4:	f002 f81e 	bl	8004d04 <vPortEnterCritical>
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cce:	b25b      	sxtb	r3, r3
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d103      	bne.n	8002cde <vQueueWaitForMessageRestricted+0x2a>
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ce4:	b25b      	sxtb	r3, r3
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d103      	bne.n	8002cf4 <vQueueWaitForMessageRestricted+0x40>
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cf4:	f002 f836 	bl	8004d64 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d106      	bne.n	8002d0e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	3324      	adds	r3, #36	; 0x24
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fea9 	bl	8003a60 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d0e:	6978      	ldr	r0, [r7, #20]
 8002d10:	f7ff ff12 	bl	8002b38 <prvUnlockQueue>
    }
 8002d14:	bf00      	nop
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08c      	sub	sp, #48	; 0x30
 8002d20:	af04      	add	r7, sp, #16
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f002 f913 	bl	8004f5c <pvPortMalloc>
 8002d36:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d013      	beq.n	8002d66 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d3e:	2058      	movs	r0, #88	; 0x58
 8002d40:	f002 f90c 	bl	8004f5c <pvPortMalloc>
 8002d44:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002d4c:	2258      	movs	r2, #88	; 0x58
 8002d4e:	2100      	movs	r1, #0
 8002d50:	69f8      	ldr	r0, [r7, #28]
 8002d52:	f005 f863 	bl	8007e1c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d5c:	e005      	b.n	8002d6a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002d5e:	6978      	ldr	r0, [r7, #20]
 8002d60:	f002 f9b6 	bl	80050d0 <vPortFree>
 8002d64:	e001      	b.n	8002d6a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d013      	beq.n	8002d98 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d70:	88fa      	ldrh	r2, [r7, #6]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9303      	str	r3, [sp, #12]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	9302      	str	r3, [sp, #8]
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f80e 	bl	8002da8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d8c:	69f8      	ldr	r0, [r7, #28]
 8002d8e:	f000 f899 	bl	8002ec4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d92:	2301      	movs	r3, #1
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e002      	b.n	8002d9e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
    }
 8002da0:	4618      	mov	r0, r3
 8002da2:	3720      	adds	r7, #32
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	21a5      	movs	r1, #165	; 0xa5
 8002dc2:	f005 f82b 	bl	8007e1c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f023 0307 	bic.w	r3, r3, #7
 8002dde:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	617b      	str	r3, [r7, #20]
    }
 8002dfc:	bf00      	nop
 8002dfe:	e7fe      	b.n	8002dfe <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01e      	beq.n	8002e44 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	e012      	b.n	8002e32 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	4413      	add	r3, r2
 8002e12:	7819      	ldrb	r1, [r3, #0]
 8002e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	3334      	adds	r3, #52	; 0x34
 8002e1c:	460a      	mov	r2, r1
 8002e1e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	4413      	add	r3, r2
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d006      	beq.n	8002e3a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2b09      	cmp	r3, #9
 8002e36:	d9e9      	bls.n	8002e0c <prvInitialiseNewTask+0x64>
 8002e38:	e000      	b.n	8002e3c <prvInitialiseNewTask+0x94>
            {
                break;
 8002e3a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d90a      	bls.n	8002e60 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	613b      	str	r3, [r7, #16]
    }
 8002e5c:	bf00      	nop
 8002e5e:	e7fe      	b.n	8002e5e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d901      	bls.n	8002e6a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e66:	2304      	movs	r3, #4
 8002e68:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e6e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e74:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	3304      	adds	r3, #4
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fba2 	bl	80025c4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	3318      	adds	r3, #24
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fb9d 	bl	80025c4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	f1c3 0205 	rsb	r2, r3, #5
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	68f9      	ldr	r1, [r7, #12]
 8002ea4:	69b8      	ldr	r0, [r7, #24]
 8002ea6:	f001 fd7f 	bl	80049a8 <pxPortInitialiseStack>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ebc:	bf00      	nop
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ec4:	b5b0      	push	{r4, r5, r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ecc:	f001 ff1a 	bl	8004d04 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ed0:	4b49      	ldr	r3, [pc, #292]	; (8002ff8 <prvAddNewTaskToReadyList+0x134>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	4a48      	ldr	r2, [pc, #288]	; (8002ff8 <prvAddNewTaskToReadyList+0x134>)
 8002ed8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002eda:	4b48      	ldr	r3, [pc, #288]	; (8002ffc <prvAddNewTaskToReadyList+0x138>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002ee2:	4a46      	ldr	r2, [pc, #280]	; (8002ffc <prvAddNewTaskToReadyList+0x138>)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ee8:	4b43      	ldr	r3, [pc, #268]	; (8002ff8 <prvAddNewTaskToReadyList+0x134>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d110      	bne.n	8002f12 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ef0:	f000 ff70 	bl	8003dd4 <prvInitialiseTaskLists>
 8002ef4:	e00d      	b.n	8002f12 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ef6:	4b42      	ldr	r3, [pc, #264]	; (8003000 <prvAddNewTaskToReadyList+0x13c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002efe:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <prvAddNewTaskToReadyList+0x138>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d802      	bhi.n	8002f12 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f0c:	4a3b      	ldr	r2, [pc, #236]	; (8002ffc <prvAddNewTaskToReadyList+0x138>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f12:	4b3c      	ldr	r3, [pc, #240]	; (8003004 <prvAddNewTaskToReadyList+0x140>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3301      	adds	r3, #1
 8002f18:	4a3a      	ldr	r2, [pc, #232]	; (8003004 <prvAddNewTaskToReadyList+0x140>)
 8002f1a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f1c:	4b39      	ldr	r3, [pc, #228]	; (8003004 <prvAddNewTaskToReadyList+0x140>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <prvAddNewTaskToReadyList+0x94>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f004 fc61 	bl	80077f4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	461d      	mov	r5, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461c      	mov	r4, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	1ae3      	subs	r3, r4, r3
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	462b      	mov	r3, r5
 8002f54:	f002 fa7e 	bl	8005454 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f004 fcce 	bl	80078fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	2201      	movs	r2, #1
 8002f66:	409a      	lsls	r2, r3
 8002f68:	4b27      	ldr	r3, [pc, #156]	; (8003008 <prvAddNewTaskToReadyList+0x144>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	4a26      	ldr	r2, [pc, #152]	; (8003008 <prvAddNewTaskToReadyList+0x144>)
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f76:	4925      	ldr	r1, [pc, #148]	; (800300c <prvAddNewTaskToReadyList+0x148>)
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	3304      	adds	r3, #4
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	3204      	adds	r2, #4
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	1d1a      	adds	r2, r3, #4
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4a15      	ldr	r2, [pc, #84]	; (800300c <prvAddNewTaskToReadyList+0x148>)
 8002fb6:	441a      	add	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	615a      	str	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	4912      	ldr	r1, [pc, #72]	; (800300c <prvAddNewTaskToReadyList+0x148>)
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	1c59      	adds	r1, r3, #1
 8002fd0:	480e      	ldr	r0, [pc, #56]	; (800300c <prvAddNewTaskToReadyList+0x148>)
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4403      	add	r3, r0
 8002fdc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002fde:	f001 fec1 	bl	8004d64 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002fe2:	4b07      	ldr	r3, [pc, #28]	; (8003000 <prvAddNewTaskToReadyList+0x13c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fea:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <prvAddNewTaskToReadyList+0x138>)
 8002fec:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000218 	.word	0x20000218
 8002ffc:	20000140 	.word	0x20000140
 8003000:	20000224 	.word	0x20000224
 8003004:	20000234 	.word	0x20000234
 8003008:	20000220 	.word	0x20000220
 800300c:	20000144 	.word	0x20000144

08003010 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01b      	beq.n	800305a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <vTaskDelay+0x68>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <vTaskDelay+0x30>
        __asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	60bb      	str	r3, [r7, #8]
    }
 800303c:	bf00      	nop
 800303e:	e7fe      	b.n	800303e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003040:	f000 fa62 	bl	8003508 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	2023      	movs	r0, #35	; 0x23
 8003048:	f003 fed6 	bl	8006df8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800304c:	2100      	movs	r1, #0
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f001 f9a6 	bl	80043a0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003054:	f000 fa66 	bl	8003524 <xTaskResumeAll>
 8003058:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d107      	bne.n	8003070 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <vTaskDelay+0x6c>)
 8003062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000240 	.word	0x20000240
 800307c:	e000ed04 	.word	0xe000ed04

08003080 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	; 0x28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	61fb      	str	r3, [r7, #28]

        configASSERT( pxTCB );
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10a      	bne.n	80030a8 <eTaskGetState+0x28>
        __asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	60fb      	str	r3, [r7, #12]
    }
 80030a4:	bf00      	nop
 80030a6:	e7fe      	b.n	80030a6 <eTaskGetState+0x26>

        if( pxTCB == pxCurrentTCB )
 80030a8:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <eTaskGetState+0xe0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d103      	bne.n	80030ba <eTaskGetState+0x3a>
        {
            /* The task calling this function is querying its own state. */
            eReturn = eRunning;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030b8:	e04b      	b.n	8003152 <eTaskGetState+0xd2>
        }
        else
        {
            taskENTER_CRITICAL();
 80030ba:	f001 fe23 	bl	8004d04 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 80030c4:	4b27      	ldr	r3, [pc, #156]	; (8003164 <eTaskGetState+0xe4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80030ca:	4b27      	ldr	r3, [pc, #156]	; (8003168 <eTaskGetState+0xe8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	613b      	str	r3, [r7, #16]
            }
            taskEXIT_CRITICAL();
 80030d0:	f001 fe48 	bl	8004d64 <vPortExitCritical>

            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d003      	beq.n	80030e4 <eTaskGetState+0x64>
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d103      	bne.n	80030ec <eTaskGetState+0x6c>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 80030e4:	2302      	movs	r3, #2
 80030e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030ea:	e032      	b.n	8003152 <eTaskGetState+0xd2>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	4a1f      	ldr	r2, [pc, #124]	; (800316c <eTaskGetState+0xec>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d120      	bne.n	8003136 <eTaskGetState+0xb6>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d118      	bne.n	800312e <eTaskGetState+0xae>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
 80030fc:	2303      	movs	r3, #3
 80030fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003102:	2300      	movs	r3, #0
 8003104:	623b      	str	r3, [r7, #32]
 8003106:	e00e      	b.n	8003126 <eTaskGetState+0xa6>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	4413      	add	r3, r2
 800310e:	3354      	adds	r3, #84	; 0x54
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d103      	bne.n	8003120 <eTaskGetState+0xa0>
                                {
                                    eReturn = eBlocked;
 8003118:	2302      	movs	r3, #2
 800311a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    break;
 800311e:	e018      	b.n	8003152 <eTaskGetState+0xd2>
                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	3301      	adds	r3, #1
 8003124:	623b      	str	r3, [r7, #32]
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	2b00      	cmp	r3, #0
 800312a:	dded      	ble.n	8003108 <eTaskGetState+0x88>
 800312c:	e011      	b.n	8003152 <eTaskGetState+0xd2>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 800312e:	2302      	movs	r3, #2
 8003130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003134:	e00d      	b.n	8003152 <eTaskGetState+0xd2>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <eTaskGetState+0xf0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d002      	beq.n	8003144 <eTaskGetState+0xc4>
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d103      	bne.n	800314c <eTaskGetState+0xcc>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 8003144:	2304      	movs	r3, #4
 8003146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800314a:	e002      	b.n	8003152 <eTaskGetState+0xd2>

            else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
            {
                /* If the task is not in any other state, it must be in the
                 * Ready (including pending ready) state. */
                eReturn = eReady;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }

        return eReturn;
 8003152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003156:	4618      	mov	r0, r3
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000140 	.word	0x20000140
 8003164:	200001d0 	.word	0x200001d0
 8003168:	200001d4 	.word	0x200001d4
 800316c:	20000204 	.word	0x20000204
 8003170:	200001ec 	.word	0x200001ec

08003174 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800317c:	f001 fdc2 	bl	8004d04 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <vTaskSuspend+0x18>
 8003186:	4b4a      	ldr	r3, [pc, #296]	; (80032b0 <vTaskSuspend+0x13c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	e000      	b.n	800318e <vTaskSuspend+0x1a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4618      	mov	r0, r3
 8003194:	f004 fc54 	bl	8007a40 <SEGGER_SYSVIEW_ShrinkId>
 8003198:	4603      	mov	r3, r0
 800319a:	4619      	mov	r1, r3
 800319c:	2029      	movs	r0, #41	; 0x29
 800319e:	f003 fe2b 	bl	8006df8 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fa76 	bl	8002698 <uxListRemove>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d115      	bne.n	80031de <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b6:	493f      	ldr	r1, [pc, #252]	; (80032b4 <vTaskSuspend+0x140>)
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <vTaskSuspend+0x6a>
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	2201      	movs	r2, #1
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <vTaskSuspend+0x144>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4013      	ands	r3, r2
 80031da:	4a37      	ldr	r2, [pc, #220]	; (80032b8 <vTaskSuspend+0x144>)
 80031dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	3318      	adds	r3, #24
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fa54 	bl	8002698 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	211b      	movs	r1, #27
 80031f4:	4618      	mov	r0, r3
 80031f6:	f004 fbc3 	bl	8007980 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3304      	adds	r3, #4
 80031fe:	4619      	mov	r1, r3
 8003200:	482e      	ldr	r0, [pc, #184]	; (80032bc <vTaskSuspend+0x148>)
 8003202:	f7ff f9ec 	bl	80025de <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	e010      	b.n	800322e <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	4413      	add	r3, r2
 8003212:	3354      	adds	r3, #84	; 0x54
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d105      	bne.n	8003228 <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	4413      	add	r3, r2
 8003222:	3354      	adds	r3, #84	; 0x54
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3301      	adds	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	ddeb      	ble.n	800320c <vTaskSuspend+0x98>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8003234:	f001 fd96 	bl	8004d64 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003238:	4b21      	ldr	r3, [pc, #132]	; (80032c0 <vTaskSuspend+0x14c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8003240:	f001 fd60 	bl	8004d04 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8003244:	f000 fec6 	bl	8003fd4 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8003248:	f001 fd8c 	bl	8004d64 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <vTaskSuspend+0x13c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	429a      	cmp	r2, r3
 8003254:	d127      	bne.n	80032a6 <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8003256:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <vTaskSuspend+0x14c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d017      	beq.n	800328e <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 800325e:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <vTaskSuspend+0x150>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <vTaskSuspend+0x108>
        __asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	60fb      	str	r3, [r7, #12]
    }
 8003278:	bf00      	nop
 800327a:	e7fe      	b.n	800327a <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <vTaskSuspend+0x154>)
 800327e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800328c:	e00b      	b.n	80032a6 <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <vTaskSuspend+0x148>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <vTaskSuspend+0x158>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d103      	bne.n	80032a2 <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <vTaskSuspend+0x13c>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
    }
 80032a0:	e001      	b.n	80032a6 <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 80032a2:	f000 fb4b 	bl	800393c <vTaskSwitchContext>
    }
 80032a6:	bf00      	nop
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000140 	.word	0x20000140
 80032b4:	20000144 	.word	0x20000144
 80032b8:	20000220 	.word	0x20000220
 80032bc:	20000204 	.word	0x20000204
 80032c0:	20000224 	.word	0x20000224
 80032c4:	20000240 	.word	0x20000240
 80032c8:	e000ed04 	.word	0xe000ed04
 80032cc:	20000218 	.word	0x20000218

080032d0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	60fb      	str	r3, [r7, #12]
    }
 80032f8:	bf00      	nop
 80032fa:	e7fe      	b.n	80032fa <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	4a0a      	ldr	r2, [pc, #40]	; (800332c <prvTaskIsTaskSuspended+0x5c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d10a      	bne.n	800331c <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <prvTaskIsTaskSuspended+0x60>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d005      	beq.n	800331c <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8003318:	2301      	movs	r3, #1
 800331a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800331c:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800331e:	4618      	mov	r0, r3
 8003320:	371c      	adds	r7, #28
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000204 	.word	0x20000204
 8003330:	200001d8 	.word	0x200001d8

08003334 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <vTaskResume+0x28>
        __asm volatile
 8003346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	60fb      	str	r3, [r7, #12]
    }
 8003358:	bf00      	nop
 800335a:	e7fe      	b.n	800335a <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800335c:	4b34      	ldr	r3, [pc, #208]	; (8003430 <vTaskResume+0xfc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	429a      	cmp	r2, r3
 8003364:	d05f      	beq.n	8003426 <vTaskResume+0xf2>
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d05c      	beq.n	8003426 <vTaskResume+0xf2>
        {
            taskENTER_CRITICAL();
 800336c:	f001 fcca 	bl	8004d04 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003370:	6978      	ldr	r0, [r7, #20]
 8003372:	f7ff ffad 	bl	80032d0 <prvTaskIsTaskSuspended>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d052      	beq.n	8003422 <vTaskResume+0xee>
                {
                    traceTASK_RESUME( pxTCB );
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	4618      	mov	r0, r3
 8003380:	f004 fb5e 	bl	8007a40 <SEGGER_SYSVIEW_ShrinkId>
 8003384:	4603      	mov	r3, r0
 8003386:	4619      	mov	r1, r3
 8003388:	202a      	movs	r0, #42	; 0x2a
 800338a:	f003 fd35 	bl	8006df8 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	3304      	adds	r3, #4
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f980 	bl	8002698 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	4618      	mov	r0, r3
 800339c:	f004 faae 	bl	80078fc <SEGGER_SYSVIEW_OnTaskStartReady>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	2201      	movs	r2, #1
 80033a6:	409a      	lsls	r2, r3
 80033a8:	4b22      	ldr	r3, [pc, #136]	; (8003434 <vTaskResume+0x100>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	4a21      	ldr	r2, [pc, #132]	; (8003434 <vTaskResume+0x100>)
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b6:	4920      	ldr	r1, [pc, #128]	; (8003438 <vTaskResume+0x104>)
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	3304      	adds	r3, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	609a      	str	r2, [r3, #8]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	3204      	adds	r2, #4
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	1d1a      	adds	r2, r3, #4
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4a10      	ldr	r2, [pc, #64]	; (8003438 <vTaskResume+0x104>)
 80033f6:	441a      	add	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	615a      	str	r2, [r3, #20]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003400:	490d      	ldr	r1, [pc, #52]	; (8003438 <vTaskResume+0x104>)
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	1c59      	adds	r1, r3, #1
 8003410:	4809      	ldr	r0, [pc, #36]	; (8003438 <vTaskResume+0x104>)
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4403      	add	r3, r0
 800341c:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800341e:	4b04      	ldr	r3, [pc, #16]	; (8003430 <vTaskResume+0xfc>)
 8003420:	681b      	ldr	r3, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003422:	f001 fc9f 	bl	8004d64 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003426:	bf00      	nop
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000140 	.word	0x20000140
 8003434:	20000220 	.word	0x20000220
 8003438:	20000144 	.word	0x20000144

0800343c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003442:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <vTaskStartScheduler+0xac>)
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	2300      	movs	r3, #0
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	2300      	movs	r3, #0
 800344c:	2282      	movs	r2, #130	; 0x82
 800344e:	4927      	ldr	r1, [pc, #156]	; (80034ec <vTaskStartScheduler+0xb0>)
 8003450:	4827      	ldr	r0, [pc, #156]	; (80034f0 <vTaskStartScheduler+0xb4>)
 8003452:	f7ff fc63 	bl	8002d1c <xTaskCreate>
 8003456:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800345e:	f001 f81f 	bl	80044a0 <xTimerCreateTimerTask>
 8003462:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d129      	bne.n	80034be <vTaskStartScheduler+0x82>
        __asm volatile
 800346a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346e:	f383 8811 	msr	BASEPRI, r3
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	60bb      	str	r3, [r7, #8]
    }
 800347c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800347e:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <vTaskStartScheduler+0xb8>)
 8003480:	f04f 32ff 	mov.w	r2, #4294967295
 8003484:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003486:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <vTaskStartScheduler+0xbc>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800348c:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <vTaskStartScheduler+0xc0>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <vTaskStartScheduler+0xc4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3334      	adds	r3, #52	; 0x34
 8003498:	2205      	movs	r2, #5
 800349a:	4914      	ldr	r1, [pc, #80]	; (80034ec <vTaskStartScheduler+0xb0>)
 800349c:	4618      	mov	r0, r3
 800349e:	f004 fc9f 	bl	8007de0 <memcmp>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <vTaskStartScheduler+0x78>
 80034a8:	4b15      	ldr	r3, [pc, #84]	; (8003500 <vTaskStartScheduler+0xc4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f004 f9e3 	bl	8007878 <SEGGER_SYSVIEW_OnTaskStartExec>
 80034b2:	e001      	b.n	80034b8 <vTaskStartScheduler+0x7c>
 80034b4:	f004 f982 	bl	80077bc <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80034b8:	f001 fb04 	bl	8004ac4 <xPortStartScheduler>
 80034bc:	e00e      	b.n	80034dc <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d10a      	bne.n	80034dc <vTaskStartScheduler+0xa0>
        __asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	607b      	str	r3, [r7, #4]
    }
 80034d8:	bf00      	nop
 80034da:	e7fe      	b.n	80034da <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <vTaskStartScheduler+0xc8>)
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	2000023c 	.word	0x2000023c
 80034ec:	08008ee8 	.word	0x08008ee8
 80034f0:	08003db1 	.word	0x08003db1
 80034f4:	20000238 	.word	0x20000238
 80034f8:	20000224 	.word	0x20000224
 80034fc:	2000021c 	.word	0x2000021c
 8003500:	20000140 	.word	0x20000140
 8003504:	2000000c 	.word	0x2000000c

08003508 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <vTaskSuspendAll+0x18>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3301      	adds	r3, #1
 8003512:	4a03      	ldr	r2, [pc, #12]	; (8003520 <vTaskSuspendAll+0x18>)
 8003514:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	20000240 	.word	0x20000240

08003524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003532:	4b6d      	ldr	r3, [pc, #436]	; (80036e8 <xTaskResumeAll+0x1c4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <xTaskResumeAll+0x2c>
        __asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	607b      	str	r3, [r7, #4]
    }
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003550:	f001 fbd8 	bl	8004d04 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003554:	4b64      	ldr	r3, [pc, #400]	; (80036e8 <xTaskResumeAll+0x1c4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3b01      	subs	r3, #1
 800355a:	4a63      	ldr	r2, [pc, #396]	; (80036e8 <xTaskResumeAll+0x1c4>)
 800355c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355e:	4b62      	ldr	r3, [pc, #392]	; (80036e8 <xTaskResumeAll+0x1c4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 80b8 	bne.w	80036d8 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003568:	4b60      	ldr	r3, [pc, #384]	; (80036ec <xTaskResumeAll+0x1c8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80b3 	beq.w	80036d8 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003572:	e08e      	b.n	8003692 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003574:	4b5e      	ldr	r3, [pc, #376]	; (80036f0 <xTaskResumeAll+0x1cc>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	6a12      	ldr	r2, [r2, #32]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	69d2      	ldr	r2, [r2, #28]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3318      	adds	r3, #24
 800359e:	429a      	cmp	r2, r3
 80035a0:	d103      	bne.n	80035aa <xTaskResumeAll+0x86>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	6a1a      	ldr	r2, [r3, #32]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2200      	movs	r2, #0
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	1e5a      	subs	r2, r3, #1
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	68d2      	ldr	r2, [r2, #12]
 80035c8:	609a      	str	r2, [r3, #8]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	6892      	ldr	r2, [r2, #8]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	3304      	adds	r3, #4
 80035dc:	429a      	cmp	r2, r3
 80035de:	d103      	bne.n	80035e8 <xTaskResumeAll+0xc4>
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2200      	movs	r2, #0
 80035ec:	615a      	str	r2, [r3, #20]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	1e5a      	subs	r2, r3, #1
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f004 f97e 	bl	80078fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	2201      	movs	r2, #1
 8003606:	409a      	lsls	r2, r3
 8003608:	4b3a      	ldr	r3, [pc, #232]	; (80036f4 <xTaskResumeAll+0x1d0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4313      	orrs	r3, r2
 800360e:	4a39      	ldr	r2, [pc, #228]	; (80036f4 <xTaskResumeAll+0x1d0>)
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003616:	4938      	ldr	r1, [pc, #224]	; (80036f8 <xTaskResumeAll+0x1d4>)
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	3304      	adds	r3, #4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	609a      	str	r2, [r3, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	60da      	str	r2, [r3, #12]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	3204      	adds	r2, #4
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	1d1a      	adds	r2, r3, #4
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4a28      	ldr	r2, [pc, #160]	; (80036f8 <xTaskResumeAll+0x1d4>)
 8003656:	441a      	add	r2, r3
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	615a      	str	r2, [r3, #20]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003660:	4925      	ldr	r1, [pc, #148]	; (80036f8 <xTaskResumeAll+0x1d4>)
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	1c59      	adds	r1, r3, #1
 8003670:	4821      	ldr	r0, [pc, #132]	; (80036f8 <xTaskResumeAll+0x1d4>)
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4403      	add	r3, r0
 800367c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003682:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <xTaskResumeAll+0x1d8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	429a      	cmp	r2, r3
 800368a:	d302      	bcc.n	8003692 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 800368c:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <xTaskResumeAll+0x1dc>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003692:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <xTaskResumeAll+0x1cc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f47f af6c 	bne.w	8003574 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80036a2:	f000 fc97 	bl	8003fd4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036a6:	4b17      	ldr	r3, [pc, #92]	; (8003704 <xTaskResumeAll+0x1e0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d010      	beq.n	80036d4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80036b2:	f000 f84b 	bl	800374c <xTaskIncrementTick>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <xTaskResumeAll+0x1dc>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f1      	bne.n	80036b2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80036ce:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <xTaskResumeAll+0x1e0>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <xTaskResumeAll+0x1dc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80036d8:	f001 fb44 	bl	8004d64 <vPortExitCritical>

    return xAlreadyYielded;
 80036dc:	697b      	ldr	r3, [r7, #20]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3720      	adds	r7, #32
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000240 	.word	0x20000240
 80036ec:	20000218 	.word	0x20000218
 80036f0:	200001d8 	.word	0x200001d8
 80036f4:	20000220 	.word	0x20000220
 80036f8:	20000144 	.word	0x20000144
 80036fc:	20000140 	.word	0x20000140
 8003700:	2000022c 	.word	0x2000022c
 8003704:	20000228 	.word	0x20000228

08003708 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <xTaskGetTickCount+0x1c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003714:	687b      	ldr	r3, [r7, #4]
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	2000021c 	.word	0x2000021c

08003728 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800372e:	f001 fbd5 	bl	8004edc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003736:	4b04      	ldr	r3, [pc, #16]	; (8003748 <xTaskGetTickCountFromISR+0x20>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800373c:	683b      	ldr	r3, [r7, #0]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	2000021c 	.word	0x2000021c

0800374c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003752:	2300      	movs	r3, #0
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003756:	4b70      	ldr	r3, [pc, #448]	; (8003918 <xTaskIncrementTick+0x1cc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 80d1 	bne.w	8003902 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003760:	4b6e      	ldr	r3, [pc, #440]	; (800391c <xTaskIncrementTick+0x1d0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003768:	4a6c      	ldr	r2, [pc, #432]	; (800391c <xTaskIncrementTick+0x1d0>)
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d120      	bne.n	80037b6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003774:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <xTaskIncrementTick+0x1d4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <xTaskIncrementTick+0x48>
        __asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	607b      	str	r3, [r7, #4]
    }
 8003790:	bf00      	nop
 8003792:	e7fe      	b.n	8003792 <xTaskIncrementTick+0x46>
 8003794:	4b62      	ldr	r3, [pc, #392]	; (8003920 <xTaskIncrementTick+0x1d4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	4b62      	ldr	r3, [pc, #392]	; (8003924 <xTaskIncrementTick+0x1d8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a60      	ldr	r2, [pc, #384]	; (8003920 <xTaskIncrementTick+0x1d4>)
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4a60      	ldr	r2, [pc, #384]	; (8003924 <xTaskIncrementTick+0x1d8>)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b5f      	ldr	r3, [pc, #380]	; (8003928 <xTaskIncrementTick+0x1dc>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	4a5e      	ldr	r2, [pc, #376]	; (8003928 <xTaskIncrementTick+0x1dc>)
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	f000 fc0f 	bl	8003fd4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80037b6:	4b5d      	ldr	r3, [pc, #372]	; (800392c <xTaskIncrementTick+0x1e0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	429a      	cmp	r2, r3
 80037be:	f0c0 80a5 	bcc.w	800390c <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c2:	4b57      	ldr	r3, [pc, #348]	; (8003920 <xTaskIncrementTick+0x1d4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037cc:	4b57      	ldr	r3, [pc, #348]	; (800392c <xTaskIncrementTick+0x1e0>)
 80037ce:	f04f 32ff 	mov.w	r2, #4294967295
 80037d2:	601a      	str	r2, [r3, #0]
                    break;
 80037d4:	e09a      	b.n	800390c <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d6:	4b52      	ldr	r3, [pc, #328]	; (8003920 <xTaskIncrementTick+0x1d4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80037e6:	6a3a      	ldr	r2, [r7, #32]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d203      	bcs.n	80037f6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80037ee:	4a4f      	ldr	r2, [pc, #316]	; (800392c <xTaskIncrementTick+0x1e0>)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80037f4:	e08a      	b.n	800390c <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	68d2      	ldr	r2, [r2, #12]
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	6892      	ldr	r2, [r2, #8]
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	3304      	adds	r3, #4
 8003818:	429a      	cmp	r2, r3
 800381a:	d103      	bne.n	8003824 <xTaskIncrementTick+0xd8>
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2200      	movs	r2, #0
 8003828:	615a      	str	r2, [r3, #20]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	1e5a      	subs	r2, r3, #1
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01e      	beq.n	800387a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	6a12      	ldr	r2, [r2, #32]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	69d2      	ldr	r2, [r2, #28]
 8003854:	605a      	str	r2, [r3, #4]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	3318      	adds	r3, #24
 800385e:	429a      	cmp	r2, r3
 8003860:	d103      	bne.n	800386a <xTaskIncrementTick+0x11e>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	6a1a      	ldr	r2, [r3, #32]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2200      	movs	r2, #0
 800386e:	629a      	str	r2, [r3, #40]	; 0x28
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1e5a      	subs	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	4618      	mov	r0, r3
 800387e:	f004 f83d 	bl	80078fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	2201      	movs	r2, #1
 8003888:	409a      	lsls	r2, r3
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <xTaskIncrementTick+0x1e4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	4a27      	ldr	r2, [pc, #156]	; (8003930 <xTaskIncrementTick+0x1e4>)
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	4926      	ldr	r1, [pc, #152]	; (8003934 <xTaskIncrementTick+0x1e8>)
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	3304      	adds	r3, #4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	60da      	str	r2, [r3, #12]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	3204      	adds	r2, #4
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	1d1a      	adds	r2, r3, #4
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4a17      	ldr	r2, [pc, #92]	; (8003934 <xTaskIncrementTick+0x1e8>)
 80038d8:	441a      	add	r2, r3
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	615a      	str	r2, [r3, #20]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e2:	4914      	ldr	r1, [pc, #80]	; (8003934 <xTaskIncrementTick+0x1e8>)
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	1c59      	adds	r1, r3, #1
 80038f2:	4810      	ldr	r0, [pc, #64]	; (8003934 <xTaskIncrementTick+0x1e8>)
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4403      	add	r3, r0
 80038fe:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003900:	e75f      	b.n	80037c2 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <xTaskIncrementTick+0x1ec>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3301      	adds	r3, #1
 8003908:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <xTaskIncrementTick+0x1ec>)
 800390a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800390e:	4618      	mov	r0, r3
 8003910:	3728      	adds	r7, #40	; 0x28
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000240 	.word	0x20000240
 800391c:	2000021c 	.word	0x2000021c
 8003920:	200001d0 	.word	0x200001d0
 8003924:	200001d4 	.word	0x200001d4
 8003928:	20000230 	.word	0x20000230
 800392c:	20000238 	.word	0x20000238
 8003930:	20000220 	.word	0x20000220
 8003934:	20000144 	.word	0x20000144
 8003938:	20000228 	.word	0x20000228

0800393c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003942:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <vTaskSwitchContext+0xc4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800394a:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <vTaskSwitchContext+0xc8>)
 800394c:	2201      	movs	r2, #1
 800394e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003950:	e052      	b.n	80039f8 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8003952:	4b2c      	ldr	r3, [pc, #176]	; (8003a04 <vTaskSwitchContext+0xc8>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003958:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <vTaskSwitchContext+0xcc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	fab3 f383 	clz	r3, r3
 8003964:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003966:	7afb      	ldrb	r3, [r7, #11]
 8003968:	f1c3 031f 	rsb	r3, r3, #31
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	4927      	ldr	r1, [pc, #156]	; (8003a0c <vTaskSwitchContext+0xd0>)
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	607b      	str	r3, [r7, #4]
    }
 8003994:	bf00      	nop
 8003996:	e7fe      	b.n	8003996 <vTaskSwitchContext+0x5a>
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4a1a      	ldr	r2, [pc, #104]	; (8003a0c <vTaskSwitchContext+0xd0>)
 80039a4:	4413      	add	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	3308      	adds	r3, #8
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d104      	bne.n	80039c8 <vTaskSwitchContext+0x8c>
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	605a      	str	r2, [r3, #4]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	4a10      	ldr	r2, [pc, #64]	; (8003a10 <vTaskSwitchContext+0xd4>)
 80039d0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80039d2:	4b0f      	ldr	r3, [pc, #60]	; (8003a10 <vTaskSwitchContext+0xd4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3334      	adds	r3, #52	; 0x34
 80039d8:	2205      	movs	r2, #5
 80039da:	490e      	ldr	r1, [pc, #56]	; (8003a14 <vTaskSwitchContext+0xd8>)
 80039dc:	4618      	mov	r0, r3
 80039de:	f004 f9ff 	bl	8007de0 <memcmp>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <vTaskSwitchContext+0xb8>
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <vTaskSwitchContext+0xd4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f003 ff43 	bl	8007878 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80039f2:	e001      	b.n	80039f8 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 80039f4:	f003 fee2 	bl	80077bc <SEGGER_SYSVIEW_OnIdle>
}
 80039f8:	bf00      	nop
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000240 	.word	0x20000240
 8003a04:	2000022c 	.word	0x2000022c
 8003a08:	20000220 	.word	0x20000220
 8003a0c:	20000144 	.word	0x20000144
 8003a10:	20000140 	.word	0x20000140
 8003a14:	08008ee8 	.word	0x08008ee8

08003a18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	60fb      	str	r3, [r7, #12]
    }
 8003a3a:	bf00      	nop
 8003a3c:	e7fe      	b.n	8003a3c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a3e:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <vTaskPlaceOnEventList+0x44>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3318      	adds	r3, #24
 8003a44:	4619      	mov	r1, r3
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fe fded 	bl	8002626 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	6838      	ldr	r0, [r7, #0]
 8003a50:	f000 fca6 	bl	80043a0 <prvAddCurrentTaskToDelayedList>
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000140 	.word	0x20000140

08003a60 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	613b      	str	r3, [r7, #16]
    }
 8003a84:	bf00      	nop
 8003a86:	e7fe      	b.n	8003a86 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	4b17      	ldr	r3, [pc, #92]	; (8003aec <vTaskPlaceOnEventListRestricted+0x8c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	61da      	str	r2, [r3, #28]
 8003a96:	4b15      	ldr	r3, [pc, #84]	; (8003aec <vTaskPlaceOnEventListRestricted+0x8c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	6892      	ldr	r2, [r2, #8]
 8003a9e:	621a      	str	r2, [r3, #32]
 8003aa0:	4b12      	ldr	r3, [pc, #72]	; (8003aec <vTaskPlaceOnEventListRestricted+0x8c>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	3218      	adds	r2, #24
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <vTaskPlaceOnEventListRestricted+0x8c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f103 0218 	add.w	r2, r3, #24
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <vTaskPlaceOnEventListRestricted+0x8c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003ad6:	2024      	movs	r0, #36	; 0x24
 8003ad8:	f003 f970 	bl	8006dbc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	68b8      	ldr	r0, [r7, #8]
 8003ae0:	f000 fc5e 	bl	80043a0 <prvAddCurrentTaskToDelayedList>
    }
 8003ae4:	bf00      	nop
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000140 	.word	0x20000140

08003af0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	; 0x28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	60fb      	str	r3, [r7, #12]
    }
 8003b18:	bf00      	nop
 8003b1a:	e7fe      	b.n	8003b1a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	61fb      	str	r3, [r7, #28]
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	6a3a      	ldr	r2, [r7, #32]
 8003b28:	6a12      	ldr	r2, [r2, #32]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	69d2      	ldr	r2, [r2, #28]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	3318      	adds	r3, #24
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d103      	bne.n	8003b4a <xTaskRemoveFromEventList+0x5a>
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	6a1a      	ldr	r2, [r3, #32]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	1e5a      	subs	r2, r3, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b5a:	4b4b      	ldr	r3, [pc, #300]	; (8003c88 <xTaskRemoveFromEventList+0x198>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d162      	bne.n	8003c28 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	6a3a      	ldr	r2, [r7, #32]
 8003b6e:	68d2      	ldr	r2, [r2, #12]
 8003b70:	609a      	str	r2, [r3, #8]
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	6a3a      	ldr	r2, [r7, #32]
 8003b78:	6892      	ldr	r2, [r2, #8]
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	3304      	adds	r3, #4
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d103      	bne.n	8003b90 <xTaskRemoveFromEventList+0xa0>
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	2200      	movs	r2, #0
 8003b94:	615a      	str	r2, [r3, #20]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	1e5a      	subs	r2, r3, #1
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f003 feaa 	bl	80078fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	2201      	movs	r2, #1
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <xTaskRemoveFromEventList+0x19c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	4a35      	ldr	r2, [pc, #212]	; (8003c8c <xTaskRemoveFromEventList+0x19c>)
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbe:	4934      	ldr	r1, [pc, #208]	; (8003c90 <xTaskRemoveFromEventList+0x1a0>)
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	3304      	adds	r3, #4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	609a      	str	r2, [r3, #8]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	6a3a      	ldr	r2, [r7, #32]
 8003be4:	3204      	adds	r2, #4
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	1d1a      	adds	r2, r3, #4
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <xTaskRemoveFromEventList+0x1a0>)
 8003bfe:	441a      	add	r2, r3
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	615a      	str	r2, [r3, #20]
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	4921      	ldr	r1, [pc, #132]	; (8003c90 <xTaskRemoveFromEventList+0x1a0>)
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	1c59      	adds	r1, r3, #1
 8003c18:	481d      	ldr	r0, [pc, #116]	; (8003c90 <xTaskRemoveFromEventList+0x1a0>)
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4403      	add	r3, r0
 8003c24:	6019      	str	r1, [r3, #0]
 8003c26:	e01b      	b.n	8003c60 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c28:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <xTaskRemoveFromEventList+0x1a4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	61da      	str	r2, [r3, #28]
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	621a      	str	r2, [r3, #32]
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	3218      	adds	r2, #24
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	f103 0218 	add.w	r2, r3, #24
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	4a10      	ldr	r2, [pc, #64]	; (8003c94 <xTaskRemoveFromEventList+0x1a4>)
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
 8003c56:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <xTaskRemoveFromEventList+0x1a4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	4a0d      	ldr	r2, [pc, #52]	; (8003c94 <xTaskRemoveFromEventList+0x1a4>)
 8003c5e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <xTaskRemoveFromEventList+0x1a8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d905      	bls.n	8003c7a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003c72:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <xTaskRemoveFromEventList+0x1ac>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	e001      	b.n	8003c7e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3728      	adds	r7, #40	; 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000240 	.word	0x20000240
 8003c8c:	20000220 	.word	0x20000220
 8003c90:	20000144 	.word	0x20000144
 8003c94:	200001d8 	.word	0x200001d8
 8003c98:	20000140 	.word	0x20000140
 8003c9c:	2000022c 	.word	0x2000022c

08003ca0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <vTaskInternalSetTimeOutState+0x24>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <vTaskInternalSetTimeOutState+0x28>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	605a      	str	r2, [r3, #4]
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	20000230 	.word	0x20000230
 8003cc8:	2000021c 	.word	0x2000021c

08003ccc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	613b      	str	r3, [r7, #16]
    }
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	60fb      	str	r3, [r7, #12]
    }
 8003d0a:	bf00      	nop
 8003d0c:	e7fe      	b.n	8003d0c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003d0e:	f000 fff9 	bl	8004d04 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003d12:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <xTaskCheckForTimeOut+0xc4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d102      	bne.n	8003d32 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	e026      	b.n	8003d80 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b17      	ldr	r3, [pc, #92]	; (8003d94 <xTaskCheckForTimeOut+0xc8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d00a      	beq.n	8003d54 <xTaskCheckForTimeOut+0x88>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d305      	bcc.n	8003d54 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e015      	b.n	8003d80 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d20b      	bcs.n	8003d76 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	1ad2      	subs	r2, r2, r3
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ff98 	bl	8003ca0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	e004      	b.n	8003d80 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003d80:	f000 fff0 	bl	8004d64 <vPortExitCritical>

    return xReturn;
 8003d84:	69fb      	ldr	r3, [r7, #28]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	2000021c 	.word	0x2000021c
 8003d94:	20000230 	.word	0x20000230

08003d98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003d9c:	4b03      	ldr	r3, [pc, #12]	; (8003dac <vTaskMissedYield+0x14>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
}
 8003da2:	bf00      	nop
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	2000022c 	.word	0x2000022c

08003db0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003db8:	f000 f84c 	bl	8003e54 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <prvIdleTask+0x20>)
 8003dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003dcc:	e7f4      	b.n	8003db8 <prvIdleTask+0x8>
 8003dce:	bf00      	nop
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dda:	2300      	movs	r3, #0
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	e00c      	b.n	8003dfa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4a12      	ldr	r2, [pc, #72]	; (8003e34 <prvInitialiseTaskLists+0x60>)
 8003dec:	4413      	add	r3, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fbc8 	bl	8002584 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3301      	adds	r3, #1
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d9ef      	bls.n	8003de0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003e00:	480d      	ldr	r0, [pc, #52]	; (8003e38 <prvInitialiseTaskLists+0x64>)
 8003e02:	f7fe fbbf 	bl	8002584 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003e06:	480d      	ldr	r0, [pc, #52]	; (8003e3c <prvInitialiseTaskLists+0x68>)
 8003e08:	f7fe fbbc 	bl	8002584 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003e0c:	480c      	ldr	r0, [pc, #48]	; (8003e40 <prvInitialiseTaskLists+0x6c>)
 8003e0e:	f7fe fbb9 	bl	8002584 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003e12:	480c      	ldr	r0, [pc, #48]	; (8003e44 <prvInitialiseTaskLists+0x70>)
 8003e14:	f7fe fbb6 	bl	8002584 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003e18:	480b      	ldr	r0, [pc, #44]	; (8003e48 <prvInitialiseTaskLists+0x74>)
 8003e1a:	f7fe fbb3 	bl	8002584 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <prvInitialiseTaskLists+0x78>)
 8003e20:	4a05      	ldr	r2, [pc, #20]	; (8003e38 <prvInitialiseTaskLists+0x64>)
 8003e22:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <prvInitialiseTaskLists+0x7c>)
 8003e26:	4a05      	ldr	r2, [pc, #20]	; (8003e3c <prvInitialiseTaskLists+0x68>)
 8003e28:	601a      	str	r2, [r3, #0]
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000144 	.word	0x20000144
 8003e38:	200001a8 	.word	0x200001a8
 8003e3c:	200001bc 	.word	0x200001bc
 8003e40:	200001d8 	.word	0x200001d8
 8003e44:	200001ec 	.word	0x200001ec
 8003e48:	20000204 	.word	0x20000204
 8003e4c:	200001d0 	.word	0x200001d0
 8003e50:	200001d4 	.word	0x200001d4

08003e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e5a:	e019      	b.n	8003e90 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003e5c:	f000 ff52 	bl	8004d04 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <prvCheckTasksWaitingTermination+0x50>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fe fc13 	bl	8002698 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <prvCheckTasksWaitingTermination+0x54>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	4a0b      	ldr	r2, [pc, #44]	; (8003ea8 <prvCheckTasksWaitingTermination+0x54>)
 8003e7a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <prvCheckTasksWaitingTermination+0x58>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <prvCheckTasksWaitingTermination+0x58>)
 8003e84:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003e86:	f000 ff6d 	bl	8004d64 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f892 	bl	8003fb4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <prvCheckTasksWaitingTermination+0x58>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e1      	bne.n	8003e5c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	200001ec 	.word	0x200001ec
 8003ea8:	20000218 	.word	0x20000218
 8003eac:	20000200 	.word	0x20000200

08003eb0 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <vTaskGetInfo+0x1a>
 8003ec4:	4b2c      	ldr	r3, [pc, #176]	; (8003f78 <vTaskGetInfo+0xc8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	e000      	b.n	8003ecc <vTaskGetInfo+0x1c>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = pxTCB->pxTopOfStack;
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	609a      	str	r2, [r3, #8]

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	615a      	str	r2, [r3, #20]
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
        }
        #else
        {
            pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2200      	movs	r2, #0
 8003f02:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	d01a      	beq.n	8003f40 <vTaskGetInfo+0x90>
        {
            if( pxTCB == pxCurrentTCB )
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <vTaskGetInfo+0xc8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d103      	bne.n	8003f1c <vTaskGetInfo+0x6c>
            {
                pxTaskStatus->eCurrentState = eRunning;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2200      	movs	r2, #0
 8003f18:	731a      	strb	r2, [r3, #12]
 8003f1a:	e018      	b.n	8003f4e <vTaskGetInfo+0x9e>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* If the task is in the suspended list then there is a
                     *  chance it is actually just blocked indefinitely - so really
                     *  it should be reported as being in the Blocked state. */
                    if( eState == eSuspended )
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d112      	bne.n	8003f4e <vTaskGetInfo+0x9e>
                    {
                        vTaskSuspendAll();
 8003f28:	f7ff faee 	bl	8003508 <vTaskSuspendAll>
                        {
                            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <vTaskGetInfo+0x8a>
                            {
                                pxTaskStatus->eCurrentState = eBlocked;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2202      	movs	r2, #2
 8003f38:	731a      	strb	r2, [r3, #12]
                            }
                        }
                        ( void ) xTaskResumeAll();
 8003f3a:	f7ff faf3 	bl	8003524 <xTaskResumeAll>
 8003f3e:	e006      	b.n	8003f4e <vTaskGetInfo+0x9e>
                #endif /* INCLUDE_vTaskSuspend */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8003f40:	6978      	ldr	r0, [r7, #20]
 8003f42:	f7ff f89d 	bl	8003080 <eTaskGetState>
 8003f46:	4603      	mov	r3, r0
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <vTaskGetInfo+0xb8>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 f80f 	bl	8003f7c <prvTaskCheckFreeStackSpace>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	461a      	mov	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	841a      	strh	r2, [r3, #32]
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }
    }
 8003f66:	e002      	b.n	8003f6e <vTaskGetInfo+0xbe>
            pxTaskStatus->usStackHighWaterMark = 0;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	841a      	strh	r2, [r3, #32]
    }
 8003f6e:	bf00      	nop
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000140 	.word	0x20000140

08003f7c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003f88:	e005      	b.n	8003f96 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	607b      	str	r3, [r7, #4]
            ulCount++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3301      	adds	r3, #1
 8003f94:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2ba5      	cmp	r3, #165	; 0xa5
 8003f9c:	d0f5      	beq.n	8003f8a <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	b29b      	uxth	r3, r3
    }
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 f885 	bl	80050d0 <vPortFree>
            vPortFree( pxTCB );
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f001 f882 	bl	80050d0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <prvResetNextTaskUnblockTime+0x30>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <prvResetNextTaskUnblockTime+0x34>)
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003fea:	e005      	b.n	8003ff8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <prvResetNextTaskUnblockTime+0x30>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a04      	ldr	r2, [pc, #16]	; (8004008 <prvResetNextTaskUnblockTime+0x34>)
 8003ff6:	6013      	str	r3, [r2, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	200001d0 	.word	0x200001d0
 8004008:	20000238 	.word	0x20000238

0800400c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <xTaskGetSchedulerState+0x34>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800401a:	2301      	movs	r3, #1
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	e008      	b.n	8004032 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <xTaskGetSchedulerState+0x38>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004028:	2302      	movs	r3, #2
 800402a:	607b      	str	r3, [r7, #4]
 800402c:	e001      	b.n	8004032 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800402e:	2300      	movs	r3, #0
 8004030:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004032:	687b      	ldr	r3, [r7, #4]
    }
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	20000224 	.word	0x20000224
 8004044:	20000240 	.word	0x20000240

08004048 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	613b      	str	r3, [r7, #16]
    }
 800406e:	bf00      	nop
 8004070:	e7fe      	b.n	8004070 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8004072:	f000 fe47 	bl	8004d04 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004076:	4b36      	ldr	r3, [pc, #216]	; (8004150 <xTaskGenericNotifyWait+0x108>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4413      	add	r3, r2
 800407e:	3354      	adds	r3, #84	; 0x54
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d022      	beq.n	80040ce <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004088:	4b31      	ldr	r3, [pc, #196]	; (8004150 <xTaskGenericNotifyWait+0x108>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	3214      	adds	r2, #20
 8004090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	43d2      	mvns	r2, r2
 8004098:	4011      	ands	r1, r2
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	3214      	adds	r2, #20
 800409e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80040a2:	4b2b      	ldr	r3, [pc, #172]	; (8004150 <xTaskGenericNotifyWait+0x108>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	3354      	adds	r3, #84	; 0x54
 80040ac:	2201      	movs	r2, #1
 80040ae:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040b6:	2101      	movs	r1, #1
 80040b8:	6a38      	ldr	r0, [r7, #32]
 80040ba:	f000 f971 	bl	80043a0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80040be:	4b25      	ldr	r3, [pc, #148]	; (8004154 <xTaskGenericNotifyWait+0x10c>)
 80040c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80040ce:	f000 fe49 	bl	8004d64 <vPortExitCritical>

        taskENTER_CRITICAL();
 80040d2:	f000 fe17 	bl	8004d04 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	2040      	movs	r0, #64	; 0x40
 80040e4:	f002 ff94 	bl	8007010 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80040ee:	4b18      	ldr	r3, [pc, #96]	; (8004150 <xTaskGenericNotifyWait+0x108>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	3214      	adds	r2, #20
 80040f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80040fe:	4b14      	ldr	r3, [pc, #80]	; (8004150 <xTaskGenericNotifyWait+0x108>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	3354      	adds	r3, #84	; 0x54
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d002      	beq.n	8004116 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	e00e      	b.n	8004134 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004116:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <xTaskGenericNotifyWait+0x108>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	3214      	adds	r2, #20
 800411e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	43d2      	mvns	r2, r2
 8004126:	4011      	ands	r1, r2
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	3214      	adds	r2, #20
 800412c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8004130:	2301      	movs	r3, #1
 8004132:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <xTaskGenericNotifyWait+0x108>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	3354      	adds	r3, #84	; 0x54
 800413e:	2200      	movs	r2, #0
 8004140:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004142:	f000 fe0f 	bl	8004d64 <vPortExitCritical>

        return xReturn;
 8004146:	697b      	ldr	r3, [r7, #20]
    }
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000140 	.word	0x20000140
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004158:	b580      	push	{r7, lr}
 800415a:	b090      	sub	sp, #64	; 0x40
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8004166:	2301      	movs	r3, #1
 8004168:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <xTaskGenericNotify+0x2e>
        __asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	623b      	str	r3, [r7, #32]
    }
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10a      	bne.n	80041a2 <xTaskGenericNotify+0x4a>
        __asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	61fb      	str	r3, [r7, #28]
    }
 800419e:	bf00      	nop
 80041a0:	e7fe      	b.n	80041a0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80041a6:	f000 fdad 	bl	8004d04 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80041aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d006      	beq.n	80041be <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	3214      	adds	r2, #20
 80041b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041bc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80041be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4413      	add	r3, r2
 80041c4:	3354      	adds	r3, #84	; 0x54
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80041cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4413      	add	r3, r2
 80041d2:	3354      	adds	r3, #84	; 0x54
 80041d4:	2202      	movs	r2, #2
 80041d6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d83b      	bhi.n	8004256 <xTaskGenericNotify+0xfe>
 80041de:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <xTaskGenericNotify+0x8c>)
 80041e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e4:	08004275 	.word	0x08004275
 80041e8:	080041f9 	.word	0x080041f9
 80041ec:	08004215 	.word	0x08004215
 80041f0:	0800422d 	.word	0x0800422d
 80041f4:	0800423b 	.word	0x0800423b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	3214      	adds	r2, #20
 80041fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	ea42 0103 	orr.w	r1, r2, r3
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	3214      	adds	r2, #20
 800420e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004212:	e032      	b.n	800427a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	3214      	adds	r2, #20
 800421a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800421e:	1c59      	adds	r1, r3, #1
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	3214      	adds	r2, #20
 8004226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800422a:	e026      	b.n	800427a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	3214      	adds	r2, #20
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004238:	e01f      	b.n	800427a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800423a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800423e:	2b02      	cmp	r3, #2
 8004240:	d006      	beq.n	8004250 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	3214      	adds	r2, #20
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800424e:	e014      	b.n	800427a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004250:	2300      	movs	r3, #0
 8004252:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8004254:	e011      	b.n	800427a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004256:	4b4e      	ldr	r3, [pc, #312]	; (8004390 <xTaskGenericNotify+0x238>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <xTaskGenericNotify+0x120>
        __asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	61bb      	str	r3, [r7, #24]
    }
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <xTaskGenericNotify+0x11a>
                    break;
 8004274:	bf00      	nop
 8004276:	e000      	b.n	800427a <xTaskGenericNotify+0x122>

                    break;
 8004278:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	4618      	mov	r0, r3
 800427e:	f003 fbdf 	bl	8007a40 <SEGGER_SYSVIEW_ShrinkId>
 8004282:	4601      	mov	r1, r0
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	4613      	mov	r3, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	203e      	movs	r0, #62	; 0x3e
 8004290:	f002 febe 	bl	8007010 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004298:	2b01      	cmp	r3, #1
 800429a:	d172      	bne.n	8004382 <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a8:	68d2      	ldr	r2, [r2, #12]
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b2:	6892      	ldr	r2, [r2, #8]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	3304      	adds	r3, #4
 80042be:	429a      	cmp	r2, r3
 80042c0:	d103      	bne.n	80042ca <xTaskGenericNotify+0x172>
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	2200      	movs	r2, #0
 80042ce:	615a      	str	r2, [r3, #20]
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	1e5a      	subs	r2, r3, #1
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	4618      	mov	r0, r3
 80042de:	f003 fb0d 	bl	80078fc <SEGGER_SYSVIEW_OnTaskStartReady>
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	2201      	movs	r2, #1
 80042e8:	409a      	lsls	r2, r3
 80042ea:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <xTaskGenericNotify+0x23c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	4a28      	ldr	r2, [pc, #160]	; (8004394 <xTaskGenericNotify+0x23c>)
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	4927      	ldr	r1, [pc, #156]	; (8004398 <xTaskGenericNotify+0x240>)
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	3304      	adds	r3, #4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	60da      	str	r2, [r3, #12]
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431e:	3204      	adds	r2, #4
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	1d1a      	adds	r2, r3, #4
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	609a      	str	r2, [r3, #8]
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4a18      	ldr	r2, [pc, #96]	; (8004398 <xTaskGenericNotify+0x240>)
 8004338:	441a      	add	r2, r3
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	615a      	str	r2, [r3, #20]
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004342:	4915      	ldr	r1, [pc, #84]	; (8004398 <xTaskGenericNotify+0x240>)
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	1c59      	adds	r1, r3, #1
 8004352:	4811      	ldr	r0, [pc, #68]	; (8004398 <xTaskGenericNotify+0x240>)
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4403      	add	r3, r0
 800435e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <xTaskGenericNotify+0x226>
        __asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	617b      	str	r3, [r7, #20]
    }
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800437e:	4b07      	ldr	r3, [pc, #28]	; (800439c <xTaskGenericNotify+0x244>)
 8004380:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004382:	f000 fcef 	bl	8004d64 <vPortExitCritical>

        return xReturn;
 8004386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004388:	4618      	mov	r0, r3
 800438a:	3738      	adds	r7, #56	; 0x38
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	2000021c 	.word	0x2000021c
 8004394:	20000220 	.word	0x20000220
 8004398:	20000144 	.word	0x20000144
 800439c:	20000140 	.word	0x20000140

080043a0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <prvAddCurrentTaskToDelayedList+0xe4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043b0:	4b35      	ldr	r3, [pc, #212]	; (8004488 <prvAddCurrentTaskToDelayedList+0xe8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe f96e 	bl	8002698 <uxListRemove>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <prvAddCurrentTaskToDelayedList+0xe8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	2201      	movs	r2, #1
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43da      	mvns	r2, r3
 80043d0:	4b2e      	ldr	r3, [pc, #184]	; (800448c <prvAddCurrentTaskToDelayedList+0xec>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4013      	ands	r3, r2
 80043d6:	4a2d      	ldr	r2, [pc, #180]	; (800448c <prvAddCurrentTaskToDelayedList+0xec>)
 80043d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d124      	bne.n	800442c <prvAddCurrentTaskToDelayedList+0x8c>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d021      	beq.n	800442c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043e8:	4b29      	ldr	r3, [pc, #164]	; (8004490 <prvAddCurrentTaskToDelayedList+0xf0>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	4b26      	ldr	r3, [pc, #152]	; (8004488 <prvAddCurrentTaskToDelayedList+0xe8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	609a      	str	r2, [r3, #8]
 80043f6:	4b24      	ldr	r3, [pc, #144]	; (8004488 <prvAddCurrentTaskToDelayedList+0xe8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	6892      	ldr	r2, [r2, #8]
 80043fe:	60da      	str	r2, [r3, #12]
 8004400:	4b21      	ldr	r3, [pc, #132]	; (8004488 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	3204      	adds	r2, #4
 800440a:	605a      	str	r2, [r3, #4]
 800440c:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <prvAddCurrentTaskToDelayedList+0xe8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	1d1a      	adds	r2, r3, #4
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	609a      	str	r2, [r3, #8]
 8004416:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <prvAddCurrentTaskToDelayedList+0xf0>)
 800441c:	615a      	str	r2, [r3, #20]
 800441e:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3301      	adds	r3, #1
 8004424:	4a1a      	ldr	r2, [pc, #104]	; (8004490 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800442a:	e026      	b.n	800447a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004434:	4b14      	ldr	r3, [pc, #80]	; (8004488 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	429a      	cmp	r2, r3
 8004442:	d209      	bcs.n	8004458 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004444:	4b13      	ldr	r3, [pc, #76]	; (8004494 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <prvAddCurrentTaskToDelayedList+0xe8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3304      	adds	r3, #4
 800444e:	4619      	mov	r1, r3
 8004450:	4610      	mov	r0, r2
 8004452:	f7fe f8e8 	bl	8002626 <vListInsert>
}
 8004456:	e010      	b.n	800447a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004458:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <prvAddCurrentTaskToDelayedList+0xf8>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <prvAddCurrentTaskToDelayedList+0xe8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3304      	adds	r3, #4
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f7fe f8de 	bl	8002626 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <prvAddCurrentTaskToDelayedList+0xfc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	429a      	cmp	r2, r3
 8004472:	d202      	bcs.n	800447a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004474:	4a09      	ldr	r2, [pc, #36]	; (800449c <prvAddCurrentTaskToDelayedList+0xfc>)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6013      	str	r3, [r2, #0]
}
 800447a:	bf00      	nop
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	2000021c 	.word	0x2000021c
 8004488:	20000140 	.word	0x20000140
 800448c:	20000220 	.word	0x20000220
 8004490:	20000204 	.word	0x20000204
 8004494:	200001d4 	.word	0x200001d4
 8004498:	200001d0 	.word	0x200001d0
 800449c:	20000238 	.word	0x20000238

080044a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80044aa:	f000 fa47 	bl	800493c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80044ae:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <xTimerCreateTimerTask+0x54>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00b      	beq.n	80044ce <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <xTimerCreateTimerTask+0x58>)
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	2302      	movs	r3, #2
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80044c4:	490d      	ldr	r1, [pc, #52]	; (80044fc <xTimerCreateTimerTask+0x5c>)
 80044c6:	480e      	ldr	r0, [pc, #56]	; (8004500 <xTimerCreateTimerTask+0x60>)
 80044c8:	f7fe fc28 	bl	8002d1c <xTaskCreate>
 80044cc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	603b      	str	r3, [r7, #0]
    }
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80044ea:	687b      	ldr	r3, [r7, #4]
    }
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000274 	.word	0x20000274
 80044f8:	20000278 	.word	0x20000278
 80044fc:	08008ef0 	.word	0x08008ef0
 8004500:	080045a9 	.word	0x080045a9

08004504 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004510:	e008      	b.n	8004524 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	4413      	add	r3, r2
 800451a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	18d1      	adds	r1, r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f8dd 	bl	80046f0 <prvInsertTimerInActiveList>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1ea      	bne.n	8004512 <prvReloadTimer+0xe>
        }
    }
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004552:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <prvProcessExpiredTimer+0x5c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3304      	adds	r3, #4
 8004560:	4618      	mov	r0, r3
 8004562:	f7fe f899 	bl	8002698 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f7ff ffc3 	bl	8004504 <prvReloadTimer>
 800457e:	e008      	b.n	8004592 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	b2da      	uxtb	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	4798      	blx	r3
    }
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	2000026c 	.word	0x2000026c

080045a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045b0:	f107 0308 	add.w	r3, r7, #8
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f857 	bl	8004668 <prvGetNextExpireTime>
 80045ba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4619      	mov	r1, r3
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f803 	bl	80045cc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80045c6:	f000 f8d5 	bl	8004774 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045ca:	e7f1      	b.n	80045b0 <prvTimerTask+0x8>

080045cc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80045d6:	f7fe ff97 	bl	8003508 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045da:	f107 0308 	add.w	r3, r7, #8
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f866 	bl	80046b0 <prvSampleTimeNow>
 80045e4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d130      	bne.n	800464e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <prvProcessTimerOrBlockTask+0x3c>
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d806      	bhi.n	8004608 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80045fa:	f7fe ff93 	bl	8003524 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045fe:	68f9      	ldr	r1, [r7, #12]
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff ffa1 	bl	8004548 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004606:	e024      	b.n	8004652 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800460e:	4b13      	ldr	r3, [pc, #76]	; (800465c <prvProcessTimerOrBlockTask+0x90>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <prvProcessTimerOrBlockTask+0x50>
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <prvProcessTimerOrBlockTask+0x52>
 800461c:	2300      	movs	r3, #0
 800461e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <prvProcessTimerOrBlockTask+0x94>)
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	4619      	mov	r1, r3
 800462e:	f7fe fb41 	bl	8002cb4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004632:	f7fe ff77 	bl	8003524 <xTaskResumeAll>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <prvProcessTimerOrBlockTask+0x98>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	f3bf 8f6f 	isb	sy
    }
 800464c:	e001      	b.n	8004652 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800464e:	f7fe ff69 	bl	8003524 <xTaskResumeAll>
    }
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000270 	.word	0x20000270
 8004660:	20000274 	.word	0x20000274
 8004664:	e000ed04 	.word	0xe000ed04

08004668 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004670:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <prvGetNextExpireTime+0x44>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <prvGetNextExpireTime+0x16>
 800467a:	2201      	movs	r2, #1
 800467c:	e000      	b.n	8004680 <prvGetNextExpireTime+0x18>
 800467e:	2200      	movs	r2, #0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <prvGetNextExpireTime+0x44>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e001      	b.n	800469c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800469c:	68fb      	ldr	r3, [r7, #12]
    }
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	2000026c 	.word	0x2000026c

080046b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80046b8:	f7ff f826 	bl	8003708 <xTaskGetTickCount>
 80046bc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80046be:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <prvSampleTimeNow+0x3c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d205      	bcs.n	80046d4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80046c8:	f000 f912 	bl	80048f0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e002      	b.n	80046da <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80046da:	4a04      	ldr	r2, [pc, #16]	; (80046ec <prvSampleTimeNow+0x3c>)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80046e0:	68fb      	ldr	r3, [r7, #12]
    }
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	2000027c 	.word	0x2000027c

080046f0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d812      	bhi.n	800473c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	1ad2      	subs	r2, r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	429a      	cmp	r2, r3
 8004722:	d302      	bcc.n	800472a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004724:	2301      	movs	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e01b      	b.n	8004762 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800472a:	4b10      	ldr	r3, [pc, #64]	; (800476c <prvInsertTimerInActiveList+0x7c>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3304      	adds	r3, #4
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f7fd ff76 	bl	8002626 <vListInsert>
 800473a:	e012      	b.n	8004762 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d206      	bcs.n	8004752 <prvInsertTimerInActiveList+0x62>
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e007      	b.n	8004762 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <prvInsertTimerInActiveList+0x80>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f7fd ff62 	bl	8002626 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004762:	697b      	ldr	r3, [r7, #20]
    }
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000270 	.word	0x20000270
 8004770:	2000026c 	.word	0x2000026c

08004774 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800477a:	e0a6      	b.n	80048ca <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	f2c0 80a2 	blt.w	80048c8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	3304      	adds	r3, #4
 8004794:	4618      	mov	r0, r3
 8004796:	f7fd ff7f 	bl	8002698 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800479a:	1d3b      	adds	r3, r7, #4
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff ff87 	bl	80046b0 <prvSampleTimeNow>
 80047a2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	f200 808e 	bhi.w	80048ca <prvProcessReceivedCommands+0x156>
 80047ae:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <prvProcessReceivedCommands+0x40>)
 80047b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b4:	080047d9 	.word	0x080047d9
 80047b8:	080047d9 	.word	0x080047d9
 80047bc:	08004841 	.word	0x08004841
 80047c0:	08004855 	.word	0x08004855
 80047c4:	0800489f 	.word	0x0800489f
 80047c8:	080047d9 	.word	0x080047d9
 80047cc:	080047d9 	.word	0x080047d9
 80047d0:	08004841 	.word	0x08004841
 80047d4:	08004855 	.word	0x08004855
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	18d1      	adds	r1, r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	69f8      	ldr	r0, [r7, #28]
 80047f8:	f7ff ff7a 	bl	80046f0 <prvInsertTimerInActiveList>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d063      	beq.n	80048ca <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d009      	beq.n	8004824 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	4413      	add	r3, r2
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4619      	mov	r1, r3
 800481c:	69f8      	ldr	r0, [r7, #28]
 800481e:	f7ff fe71 	bl	8004504 <prvReloadTimer>
 8004822:	e008      	b.n	8004836 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	b2da      	uxtb	r2, r3
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	69f8      	ldr	r0, [r7, #28]
 800483c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800483e:	e044      	b.n	80048ca <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004846:	f023 0301 	bic.w	r3, r3, #1
 800484a:	b2da      	uxtb	r2, r3
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004852:	e03a      	b.n	80048ca <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	b2da      	uxtb	r2, r3
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	617b      	str	r3, [r7, #20]
    }
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	18d1      	adds	r1, r2, r3
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	69f8      	ldr	r0, [r7, #28]
 8004898:	f7ff ff2a 	bl	80046f0 <prvInsertTimerInActiveList>
                        break;
 800489c:	e015      	b.n	80048ca <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d103      	bne.n	80048b4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80048ac:	69f8      	ldr	r0, [r7, #28]
 80048ae:	f000 fc0f 	bl	80050d0 <vPortFree>
 80048b2:	e00a      	b.n	80048ca <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80048c6:	e000      	b.n	80048ca <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80048c8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <prvProcessReceivedCommands+0x178>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f107 0108 	add.w	r1, r7, #8
 80048d2:	2200      	movs	r2, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fe f803 	bl	80028e0 <xQueueReceive>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f47f af4d 	bne.w	800477c <prvProcessReceivedCommands+0x8>
        }
    }
 80048e2:	bf00      	nop
 80048e4:	bf00      	nop
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000274 	.word	0x20000274

080048f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048f6:	e009      	b.n	800490c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048f8:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <prvSwitchTimerLists+0x44>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004902:	f04f 31ff 	mov.w	r1, #4294967295
 8004906:	6838      	ldr	r0, [r7, #0]
 8004908:	f7ff fe1e 	bl	8004548 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800490c:	4b09      	ldr	r3, [pc, #36]	; (8004934 <prvSwitchTimerLists+0x44>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004916:	4b07      	ldr	r3, [pc, #28]	; (8004934 <prvSwitchTimerLists+0x44>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <prvSwitchTimerLists+0x48>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a04      	ldr	r2, [pc, #16]	; (8004934 <prvSwitchTimerLists+0x44>)
 8004922:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004924:	4a04      	ldr	r2, [pc, #16]	; (8004938 <prvSwitchTimerLists+0x48>)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6013      	str	r3, [r2, #0]
    }
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	2000026c 	.word	0x2000026c
 8004938:	20000270 	.word	0x20000270

0800493c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004940:	f000 f9e0 	bl	8004d04 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004944:	4b12      	ldr	r3, [pc, #72]	; (8004990 <prvCheckForValidListAndQueue+0x54>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d11d      	bne.n	8004988 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800494c:	4811      	ldr	r0, [pc, #68]	; (8004994 <prvCheckForValidListAndQueue+0x58>)
 800494e:	f7fd fe19 	bl	8002584 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004952:	4811      	ldr	r0, [pc, #68]	; (8004998 <prvCheckForValidListAndQueue+0x5c>)
 8004954:	f7fd fe16 	bl	8002584 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004958:	4b10      	ldr	r3, [pc, #64]	; (800499c <prvCheckForValidListAndQueue+0x60>)
 800495a:	4a0e      	ldr	r2, [pc, #56]	; (8004994 <prvCheckForValidListAndQueue+0x58>)
 800495c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <prvCheckForValidListAndQueue+0x64>)
 8004960:	4a0d      	ldr	r2, [pc, #52]	; (8004998 <prvCheckForValidListAndQueue+0x5c>)
 8004962:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004964:	2200      	movs	r2, #0
 8004966:	210c      	movs	r1, #12
 8004968:	200a      	movs	r0, #10
 800496a:	f7fd ff41 	bl	80027f0 <xQueueGenericCreate>
 800496e:	4603      	mov	r3, r0
 8004970:	4a07      	ldr	r2, [pc, #28]	; (8004990 <prvCheckForValidListAndQueue+0x54>)
 8004972:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <prvCheckForValidListAndQueue+0x54>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <prvCheckForValidListAndQueue+0x54>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4908      	ldr	r1, [pc, #32]	; (80049a4 <prvCheckForValidListAndQueue+0x68>)
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe f940 	bl	8002c08 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004988:	f000 f9ec 	bl	8004d64 <vPortExitCritical>
    }
 800498c:	bf00      	nop
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000274 	.word	0x20000274
 8004994:	20000244 	.word	0x20000244
 8004998:	20000258 	.word	0x20000258
 800499c:	2000026c 	.word	0x2000026c
 80049a0:	20000270 	.word	0x20000270
 80049a4:	08008ef8 	.word	0x08008ef8

080049a8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3b04      	subs	r3, #4
 80049b8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3b04      	subs	r3, #4
 80049c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f023 0201 	bic.w	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3b04      	subs	r3, #4
 80049d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80049d8:	4a0c      	ldr	r2, [pc, #48]	; (8004a0c <pxPortInitialiseStack+0x64>)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3b14      	subs	r3, #20
 80049e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3b04      	subs	r3, #4
 80049ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f06f 0202 	mvn.w	r2, #2
 80049f6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3b20      	subs	r3, #32
 80049fc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80049fe:	68fb      	ldr	r3, [r7, #12]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	08004a11 	.word	0x08004a11

08004a10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <prvTaskExitError+0x54>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a22:	d00a      	beq.n	8004a3a <prvTaskExitError+0x2a>
        __asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	60fb      	str	r3, [r7, #12]
    }
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <prvTaskExitError+0x28>
        __asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	60bb      	str	r3, [r7, #8]
    }
 8004a4c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004a4e:	bf00      	nop
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0fc      	beq.n	8004a50 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004a56:	bf00      	nop
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	20000010 	.word	0x20000010
	...

08004a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <pxCurrentTCBConst2>)
 8004a72:	6819      	ldr	r1, [r3, #0]
 8004a74:	6808      	ldr	r0, [r1, #0]
 8004a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7a:	f380 8809 	msr	PSP, r0
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f380 8811 	msr	BASEPRI, r0
 8004a8a:	4770      	bx	lr
 8004a8c:	f3af 8000 	nop.w

08004a90 <pxCurrentTCBConst2>:
 8004a90:	20000140 	.word	0x20000140
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop

08004a98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004a98:	4808      	ldr	r0, [pc, #32]	; (8004abc <prvPortStartFirstTask+0x24>)
 8004a9a:	6800      	ldr	r0, [r0, #0]
 8004a9c:	6800      	ldr	r0, [r0, #0]
 8004a9e:	f380 8808 	msr	MSP, r0
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f380 8814 	msr	CONTROL, r0
 8004aaa:	b662      	cpsie	i
 8004aac:	b661      	cpsie	f
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	df00      	svc	0
 8004ab8:	bf00      	nop
 8004aba:	0000      	.short	0x0000
 8004abc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop

08004ac4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004aca:	4b46      	ldr	r3, [pc, #280]	; (8004be4 <xPortStartScheduler+0x120>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a46      	ldr	r2, [pc, #280]	; (8004be8 <xPortStartScheduler+0x124>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10a      	bne.n	8004aea <xPortStartScheduler+0x26>
        __asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	613b      	str	r3, [r7, #16]
    }
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004aea:	4b3e      	ldr	r3, [pc, #248]	; (8004be4 <xPortStartScheduler+0x120>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a3f      	ldr	r2, [pc, #252]	; (8004bec <xPortStartScheduler+0x128>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d10a      	bne.n	8004b0a <xPortStartScheduler+0x46>
        __asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	60fb      	str	r3, [r7, #12]
    }
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b0a:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <xPortStartScheduler+0x12c>)
 8004b0c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	22ff      	movs	r2, #255	; 0xff
 8004b1a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	4b31      	ldr	r3, [pc, #196]	; (8004bf4 <xPortStartScheduler+0x130>)
 8004b30:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b32:	4b31      	ldr	r3, [pc, #196]	; (8004bf8 <xPortStartScheduler+0x134>)
 8004b34:	2207      	movs	r2, #7
 8004b36:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b38:	e009      	b.n	8004b4e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8004b3a:	4b2f      	ldr	r3, [pc, #188]	; (8004bf8 <xPortStartScheduler+0x134>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	4a2d      	ldr	r2, [pc, #180]	; (8004bf8 <xPortStartScheduler+0x134>)
 8004b42:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b56:	2b80      	cmp	r3, #128	; 0x80
 8004b58:	d0ef      	beq.n	8004b3a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b5a:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <xPortStartScheduler+0x134>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f1c3 0307 	rsb	r3, r3, #7
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d00a      	beq.n	8004b7c <xPortStartScheduler+0xb8>
        __asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	60bb      	str	r3, [r7, #8]
    }
 8004b78:	bf00      	nop
 8004b7a:	e7fe      	b.n	8004b7a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b7c:	4b1e      	ldr	r3, [pc, #120]	; (8004bf8 <xPortStartScheduler+0x134>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	4a1d      	ldr	r2, [pc, #116]	; (8004bf8 <xPortStartScheduler+0x134>)
 8004b84:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b86:	4b1c      	ldr	r3, [pc, #112]	; (8004bf8 <xPortStartScheduler+0x134>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b8e:	4a1a      	ldr	r2, [pc, #104]	; (8004bf8 <xPortStartScheduler+0x134>)
 8004b90:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004b9a:	4b18      	ldr	r3, [pc, #96]	; (8004bfc <xPortStartScheduler+0x138>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <xPortStartScheduler+0x138>)
 8004ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ba4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <xPortStartScheduler+0x138>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a14      	ldr	r2, [pc, #80]	; (8004bfc <xPortStartScheduler+0x138>)
 8004bac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bb0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004bb2:	f000 f963 	bl	8004e7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004bb6:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <xPortStartScheduler+0x13c>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004bbc:	f000 f982 	bl	8004ec4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bc0:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <xPortStartScheduler+0x140>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a0f      	ldr	r2, [pc, #60]	; (8004c04 <xPortStartScheduler+0x140>)
 8004bc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004bca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004bcc:	f7ff ff64 	bl	8004a98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004bd0:	f7fe feb4 	bl	800393c <vTaskSwitchContext>
    prvTaskExitError();
 8004bd4:	f7ff ff1c 	bl	8004a10 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	e000ed00 	.word	0xe000ed00
 8004be8:	410fc271 	.word	0x410fc271
 8004bec:	410fc270 	.word	0x410fc270
 8004bf0:	e000e400 	.word	0xe000e400
 8004bf4:	20000280 	.word	0x20000280
 8004bf8:	20000284 	.word	0x20000284
 8004bfc:	e000ed20 	.word	0xe000ed20
 8004c00:	20000010 	.word	0x20000010
 8004c04:	e000ef34 	.word	0xe000ef34

08004c08 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c0e:	4b37      	ldr	r3, [pc, #220]	; (8004cec <vInitPrioGroupValue+0xe4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a37      	ldr	r2, [pc, #220]	; (8004cf0 <vInitPrioGroupValue+0xe8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10a      	bne.n	8004c2e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	613b      	str	r3, [r7, #16]
    }
 8004c2a:	bf00      	nop
 8004c2c:	e7fe      	b.n	8004c2c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c2e:	4b2f      	ldr	r3, [pc, #188]	; (8004cec <vInitPrioGroupValue+0xe4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a30      	ldr	r2, [pc, #192]	; (8004cf4 <vInitPrioGroupValue+0xec>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d10a      	bne.n	8004c4e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	60fb      	str	r3, [r7, #12]
    }
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c4e:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <vInitPrioGroupValue+0xf0>)
 8004c50:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	22ff      	movs	r2, #255	; 0xff
 8004c5e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	4b22      	ldr	r3, [pc, #136]	; (8004cfc <vInitPrioGroupValue+0xf4>)
 8004c74:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c76:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <vInitPrioGroupValue+0xf8>)
 8004c78:	2207      	movs	r2, #7
 8004c7a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c7c:	e009      	b.n	8004c92 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004c7e:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <vInitPrioGroupValue+0xf8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	4a1e      	ldr	r2, [pc, #120]	; (8004d00 <vInitPrioGroupValue+0xf8>)
 8004c86:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c92:	78fb      	ldrb	r3, [r7, #3]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9a:	2b80      	cmp	r3, #128	; 0x80
 8004c9c:	d0ef      	beq.n	8004c7e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c9e:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <vInitPrioGroupValue+0xf8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f1c3 0307 	rsb	r3, r3, #7
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d00a      	beq.n	8004cc0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	60bb      	str	r3, [r7, #8]
    }
 8004cbc:	bf00      	nop
 8004cbe:	e7fe      	b.n	8004cbe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cc0:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <vInitPrioGroupValue+0xf8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	4a0e      	ldr	r2, [pc, #56]	; (8004d00 <vInitPrioGroupValue+0xf8>)
 8004cc8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cca:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <vInitPrioGroupValue+0xf8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cd2:	4a0b      	ldr	r2, [pc, #44]	; (8004d00 <vInitPrioGroupValue+0xf8>)
 8004cd4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	e000ed00 	.word	0xe000ed00
 8004cf0:	410fc271 	.word	0x410fc271
 8004cf4:	410fc270 	.word	0x410fc270
 8004cf8:	e000e400 	.word	0xe000e400
 8004cfc:	20000280 	.word	0x20000280
 8004d00:	20000284 	.word	0x20000284

08004d04 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
        __asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	607b      	str	r3, [r7, #4]
    }
 8004d1c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <vPortEnterCritical+0x58>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	4a0d      	ldr	r2, [pc, #52]	; (8004d5c <vPortEnterCritical+0x58>)
 8004d26:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004d28:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <vPortEnterCritical+0x58>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d10f      	bne.n	8004d50 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <vPortEnterCritical+0x5c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <vPortEnterCritical+0x4c>
        __asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	603b      	str	r3, [r7, #0]
    }
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <vPortEnterCritical+0x4a>
    }
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	20000010 	.word	0x20000010
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004d6a:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <vPortExitCritical+0x50>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <vPortExitCritical+0x24>
        __asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	607b      	str	r3, [r7, #4]
    }
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004d88:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <vPortExitCritical+0x50>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <vPortExitCritical+0x50>)
 8004d90:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004d92:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <vPortExitCritical+0x50>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d105      	bne.n	8004da6 <vPortExitCritical+0x42>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004da4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20000010 	.word	0x20000010
	...

08004dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004dc0:	f3ef 8009 	mrs	r0, PSP
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	4b15      	ldr	r3, [pc, #84]	; (8004e20 <pxCurrentTCBConst>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	f01e 0f10 	tst.w	lr, #16
 8004dd0:	bf08      	it	eq
 8004dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dda:	6010      	str	r0, [r2, #0]
 8004ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004de4:	f380 8811 	msr	BASEPRI, r0
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f7fe fda4 	bl	800393c <vTaskSwitchContext>
 8004df4:	f04f 0000 	mov.w	r0, #0
 8004df8:	f380 8811 	msr	BASEPRI, r0
 8004dfc:	bc09      	pop	{r0, r3}
 8004dfe:	6819      	ldr	r1, [r3, #0]
 8004e00:	6808      	ldr	r0, [r1, #0]
 8004e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e06:	f01e 0f10 	tst.w	lr, #16
 8004e0a:	bf08      	it	eq
 8004e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e10:	f380 8809 	msr	PSP, r0
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	f3af 8000 	nop.w

08004e20 <pxCurrentTCBConst>:
 8004e20:	20000140 	.word	0x20000140
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop

08004e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
        __asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	607b      	str	r3, [r7, #4]
    }
 8004e40:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004e42:	f002 fc41 	bl	80076c8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004e46:	f7fe fc81 	bl	800374c <xTaskIncrementTick>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d006      	beq.n	8004e5e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004e50:	f002 fc98 	bl	8007784 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e54:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <SysTick_Handler+0x50>)
 8004e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	e001      	b.n	8004e62 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004e5e:	f002 fc75 	bl	800774c <SEGGER_SYSVIEW_RecordExitISR>
 8004e62:	2300      	movs	r3, #0
 8004e64:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	f383 8811 	msr	BASEPRI, r3
    }
 8004e6c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <vPortSetupTimerInterrupt+0x38>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <vPortSetupTimerInterrupt+0x3c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0a      	ldr	r2, [pc, #40]	; (8004ebc <vPortSetupTimerInterrupt+0x40>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	4a09      	ldr	r2, [pc, #36]	; (8004ec0 <vPortSetupTimerInterrupt+0x44>)
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e9e:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004ea0:	2207      	movs	r2, #7
 8004ea2:	601a      	str	r2, [r3, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	e000e010 	.word	0xe000e010
 8004eb4:	e000e018 	.word	0xe000e018
 8004eb8:	20000000 	.word	0x20000000
 8004ebc:	10624dd3 	.word	0x10624dd3
 8004ec0:	e000e014 	.word	0xe000e014

08004ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ed4 <vPortEnableVFP+0x10>
 8004ec8:	6801      	ldr	r1, [r0, #0]
 8004eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004ece:	6001      	str	r1, [r0, #0]
 8004ed0:	4770      	bx	lr
 8004ed2:	0000      	.short	0x0000
 8004ed4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop

08004edc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004ee2:	f3ef 8305 	mrs	r3, IPSR
 8004ee6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b0f      	cmp	r3, #15
 8004eec:	d914      	bls.n	8004f18 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eee:	4a17      	ldr	r2, [pc, #92]	; (8004f4c <vPortValidateInterruptPriority+0x70>)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ef8:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <vPortValidateInterruptPriority+0x74>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	7afa      	ldrb	r2, [r7, #11]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d20a      	bcs.n	8004f18 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	607b      	str	r3, [r7, #4]
    }
 8004f14:	bf00      	nop
 8004f16:	e7fe      	b.n	8004f16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f18:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <vPortValidateInterruptPriority+0x78>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f20:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <vPortValidateInterruptPriority+0x7c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d90a      	bls.n	8004f3e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	603b      	str	r3, [r7, #0]
    }
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <vPortValidateInterruptPriority+0x60>
    }
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	e000e3f0 	.word	0xe000e3f0
 8004f50:	20000280 	.word	0x20000280
 8004f54:	e000ed0c 	.word	0xe000ed0c
 8004f58:	20000284 	.word	0x20000284

08004f5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	; 0x28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004f68:	f7fe face 	bl	8003508 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004f6c:	4b53      	ldr	r3, [pc, #332]	; (80050bc <pvPortMalloc+0x160>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004f74:	f000 f908 	bl	8005188 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d012      	beq.n	8004fa4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004f7e:	2208      	movs	r2, #8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	3308      	adds	r3, #8
 8004f8a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d804      	bhi.n	8004fa0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	e001      	b.n	8004fa4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	db70      	blt.n	800508c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d06d      	beq.n	800508c <pvPortMalloc+0x130>
 8004fb0:	4b43      	ldr	r3, [pc, #268]	; (80050c0 <pvPortMalloc+0x164>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d868      	bhi.n	800508c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004fba:	4b42      	ldr	r3, [pc, #264]	; (80050c4 <pvPortMalloc+0x168>)
 8004fbc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004fbe:	4b41      	ldr	r3, [pc, #260]	; (80050c4 <pvPortMalloc+0x168>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fc4:	e004      	b.n	8004fd0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d903      	bls.n	8004fe2 <pvPortMalloc+0x86>
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f1      	bne.n	8004fc6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004fe2:	4b36      	ldr	r3, [pc, #216]	; (80050bc <pvPortMalloc+0x160>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d04f      	beq.n	800508c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2208      	movs	r2, #8
 8004ff2:	4413      	add	r3, r2
 8004ff4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	1ad2      	subs	r2, r2, r3
 8005006:	2308      	movs	r3, #8
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	429a      	cmp	r2, r3
 800500c:	d91f      	bls.n	800504e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800500e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <pvPortMalloc+0xda>
        __asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	613b      	str	r3, [r7, #16]
    }
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	1ad2      	subs	r2, r2, r3
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005048:	6978      	ldr	r0, [r7, #20]
 800504a:	f000 f8f9 	bl	8005240 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800504e:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <pvPortMalloc+0x164>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <pvPortMalloc+0x164>)
 800505a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800505c:	4b18      	ldr	r3, [pc, #96]	; (80050c0 <pvPortMalloc+0x164>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <pvPortMalloc+0x16c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d203      	bcs.n	8005070 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005068:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <pvPortMalloc+0x164>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a16      	ldr	r2, [pc, #88]	; (80050c8 <pvPortMalloc+0x16c>)
 800506e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <pvPortMalloc+0x170>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3301      	adds	r3, #1
 8005088:	4a10      	ldr	r2, [pc, #64]	; (80050cc <pvPortMalloc+0x170>)
 800508a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800508c:	f7fe fa4a 	bl	8003524 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <pvPortMalloc+0x154>
        __asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	60fb      	str	r3, [r7, #12]
    }
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <pvPortMalloc+0x152>
    return pvReturn;
 80050b0:	69fb      	ldr	r3, [r7, #28]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3728      	adds	r7, #40	; 0x28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20012e90 	.word	0x20012e90
 80050c0:	20012e94 	.word	0x20012e94
 80050c4:	20012e88 	.word	0x20012e88
 80050c8:	20012e98 	.word	0x20012e98
 80050cc:	20012e9c 	.word	0x20012e9c

080050d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d049      	beq.n	8005176 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80050e2:	2308      	movs	r3, #8
 80050e4:	425b      	negs	r3, r3
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4413      	add	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	db0a      	blt.n	800510e <vPortFree+0x3e>
        __asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	60fb      	str	r3, [r7, #12]
    }
 800510a:	bf00      	nop
 800510c:	e7fe      	b.n	800510c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <vPortFree+0x5c>
        __asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	60bb      	str	r3, [r7, #8]
    }
 8005128:	bf00      	nop
 800512a:	e7fe      	b.n	800512a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	0fdb      	lsrs	r3, r3, #31
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01c      	beq.n	8005176 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d118      	bne.n	8005176 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005150:	f7fe f9da 	bl	8003508 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	4b09      	ldr	r3, [pc, #36]	; (8005180 <vPortFree+0xb0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4413      	add	r3, r2
 800515e:	4a08      	ldr	r2, [pc, #32]	; (8005180 <vPortFree+0xb0>)
 8005160:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005162:	6938      	ldr	r0, [r7, #16]
 8005164:	f000 f86c 	bl	8005240 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <vPortFree+0xb4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3301      	adds	r3, #1
 800516e:	4a05      	ldr	r2, [pc, #20]	; (8005184 <vPortFree+0xb4>)
 8005170:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005172:	f7fe f9d7 	bl	8003524 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005176:	bf00      	nop
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20012e94 	.word	0x20012e94
 8005184:	20012ea0 	.word	0x20012ea0

08005188 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800518e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005192:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005194:	4b25      	ldr	r3, [pc, #148]	; (800522c <prvHeapInit+0xa4>)
 8005196:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00c      	beq.n	80051bc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3307      	adds	r3, #7
 80051a6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0307 	bic.w	r3, r3, #7
 80051ae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	4a1d      	ldr	r2, [pc, #116]	; (800522c <prvHeapInit+0xa4>)
 80051b8:	4413      	add	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051c0:	4a1b      	ldr	r2, [pc, #108]	; (8005230 <prvHeapInit+0xa8>)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80051c6:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <prvHeapInit+0xa8>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	4413      	add	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80051d4:	2208      	movs	r2, #8
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0307 	bic.w	r3, r3, #7
 80051e2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4a13      	ldr	r2, [pc, #76]	; (8005234 <prvHeapInit+0xac>)
 80051e8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <prvHeapInit+0xac>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2200      	movs	r2, #0
 80051f0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80051f2:	4b10      	ldr	r3, [pc, #64]	; (8005234 <prvHeapInit+0xac>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	1ad2      	subs	r2, r2, r3
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <prvHeapInit+0xac>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	4a08      	ldr	r2, [pc, #32]	; (8005238 <prvHeapInit+0xb0>)
 8005216:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	4a07      	ldr	r2, [pc, #28]	; (800523c <prvHeapInit+0xb4>)
 800521e:	6013      	str	r3, [r2, #0]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	20000288 	.word	0x20000288
 8005230:	20012e88 	.word	0x20012e88
 8005234:	20012e90 	.word	0x20012e90
 8005238:	20012e98 	.word	0x20012e98
 800523c:	20012e94 	.word	0x20012e94

08005240 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005248:	4b28      	ldr	r3, [pc, #160]	; (80052ec <prvInsertBlockIntoFreeList+0xac>)
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	e002      	b.n	8005254 <prvInsertBlockIntoFreeList+0x14>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d8f7      	bhi.n	800524e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4413      	add	r3, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	429a      	cmp	r2, r3
 800526e:	d108      	bne.n	8005282 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	441a      	add	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	441a      	add	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d118      	bne.n	80052c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <prvInsertBlockIntoFreeList+0xb0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d00d      	beq.n	80052be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	441a      	add	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	e008      	b.n	80052d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <prvInsertBlockIntoFreeList+0xb0>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e003      	b.n	80052d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d002      	beq.n	80052de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20012e88 	.word	0x20012e88
 80052f0:	20012e90 	.word	0x20012e90

080052f4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80052f8:	4803      	ldr	r0, [pc, #12]	; (8005308 <_cbSendSystemDesc+0x14>)
 80052fa:	f002 f98f 	bl	800761c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80052fe:	4803      	ldr	r0, [pc, #12]	; (800530c <_cbSendSystemDesc+0x18>)
 8005300:	f002 f98c 	bl	800761c <SEGGER_SYSVIEW_SendSysDesc>
}
 8005304:	bf00      	nop
 8005306:	bd80      	pop	{r7, pc}
 8005308:	08008f00 	.word	0x08008f00
 800530c:	08008f40 	.word	0x08008f40

08005310 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <SEGGER_SYSVIEW_Conf+0x20>)
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <SEGGER_SYSVIEW_Conf+0x20>)
 800531a:	6819      	ldr	r1, [r3, #0]
 800531c:	4b05      	ldr	r3, [pc, #20]	; (8005334 <SEGGER_SYSVIEW_Conf+0x24>)
 800531e:	4a06      	ldr	r2, [pc, #24]	; (8005338 <SEGGER_SYSVIEW_Conf+0x28>)
 8005320:	f001 fcf8 	bl	8006d14 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005324:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005328:	f001 fd38 	bl	8006d9c <SEGGER_SYSVIEW_SetRAMBase>
}
 800532c:	bf00      	nop
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20000000 	.word	0x20000000
 8005334:	080052f5 	.word	0x080052f5
 8005338:	08008fdc 	.word	0x08008fdc

0800533c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800533c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800533e:	b085      	sub	sp, #20
 8005340:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005342:	2300      	movs	r3, #0
 8005344:	607b      	str	r3, [r7, #4]
 8005346:	e033      	b.n	80053b0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005348:	491e      	ldr	r1, [pc, #120]	; (80053c4 <_cbSendTaskList+0x88>)
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	491a      	ldr	r1, [pc, #104]	; (80053c4 <_cbSendTaskList+0x88>)
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	3304      	adds	r3, #4
 8005368:	6819      	ldr	r1, [r3, #0]
 800536a:	4c16      	ldr	r4, [pc, #88]	; (80053c4 <_cbSendTaskList+0x88>)
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4423      	add	r3, r4
 8005378:	3308      	adds	r3, #8
 800537a:	681c      	ldr	r4, [r3, #0]
 800537c:	4d11      	ldr	r5, [pc, #68]	; (80053c4 <_cbSendTaskList+0x88>)
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	442b      	add	r3, r5
 800538a:	330c      	adds	r3, #12
 800538c:	681d      	ldr	r5, [r3, #0]
 800538e:	4e0d      	ldr	r6, [pc, #52]	; (80053c4 <_cbSendTaskList+0x88>)
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4433      	add	r3, r6
 800539c:	3310      	adds	r3, #16
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	462b      	mov	r3, r5
 80053a4:	4622      	mov	r2, r4
 80053a6:	f000 f8bd 	bl	8005524 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3301      	adds	r3, #1
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <_cbSendTaskList+0x8c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d3c6      	bcc.n	8005348 <_cbSendTaskList+0xc>
  }
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c4:	20012ea4 	.word	0x20012ea4
 80053c8:	20012f44 	.word	0x20012f44

080053cc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80053cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80053d4:	f7fe f9a8 	bl	8003728 <xTaskGetTickCountFromISR>
 80053d8:	4603      	mov	r3, r0
 80053da:	2200      	movs	r2, #0
 80053dc:	469a      	mov	sl, r3
 80053de:	4693      	mov	fp, r2
 80053e0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80053e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	f04f 0a00 	mov.w	sl, #0
 80053f0:	f04f 0b00 	mov.w	fp, #0
 80053f4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80053f8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80053fc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005400:	4652      	mov	r2, sl
 8005402:	465b      	mov	r3, fp
 8005404:	1a14      	subs	r4, r2, r0
 8005406:	eb63 0501 	sbc.w	r5, r3, r1
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	00ab      	lsls	r3, r5, #2
 8005414:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005418:	00a2      	lsls	r2, r4, #2
 800541a:	4614      	mov	r4, r2
 800541c:	461d      	mov	r5, r3
 800541e:	eb14 0800 	adds.w	r8, r4, r0
 8005422:	eb45 0901 	adc.w	r9, r5, r1
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800543a:	4690      	mov	r8, r2
 800543c:	4699      	mov	r9, r3
 800543e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005442:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005446:	4610      	mov	r0, r2
 8005448:	4619      	mov	r1, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005454 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005462:	2205      	movs	r2, #5
 8005464:	492b      	ldr	r1, [pc, #172]	; (8005514 <SYSVIEW_AddTask+0xc0>)
 8005466:	68b8      	ldr	r0, [r7, #8]
 8005468:	f002 fcba 	bl	8007de0 <memcmp>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d04b      	beq.n	800550a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005472:	4b29      	ldr	r3, [pc, #164]	; (8005518 <SYSVIEW_AddTask+0xc4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b07      	cmp	r3, #7
 8005478:	d903      	bls.n	8005482 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800547a:	4828      	ldr	r0, [pc, #160]	; (800551c <SYSVIEW_AddTask+0xc8>)
 800547c:	f002 fbea 	bl	8007c54 <SEGGER_SYSVIEW_Warn>
    return;
 8005480:	e044      	b.n	800550c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005482:	4b25      	ldr	r3, [pc, #148]	; (8005518 <SYSVIEW_AddTask+0xc4>)
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4926      	ldr	r1, [pc, #152]	; (8005520 <SYSVIEW_AddTask+0xcc>)
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	440b      	add	r3, r1
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005496:	4b20      	ldr	r3, [pc, #128]	; (8005518 <SYSVIEW_AddTask+0xc4>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4921      	ldr	r1, [pc, #132]	; (8005520 <SYSVIEW_AddTask+0xcc>)
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	3304      	adds	r3, #4
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80054ac:	4b1a      	ldr	r3, [pc, #104]	; (8005518 <SYSVIEW_AddTask+0xc4>)
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	491b      	ldr	r1, [pc, #108]	; (8005520 <SYSVIEW_AddTask+0xcc>)
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	3308      	adds	r3, #8
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80054c2:	4b15      	ldr	r3, [pc, #84]	; (8005518 <SYSVIEW_AddTask+0xc4>)
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	4916      	ldr	r1, [pc, #88]	; (8005520 <SYSVIEW_AddTask+0xcc>)
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	330c      	adds	r3, #12
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80054d8:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <SYSVIEW_AddTask+0xc4>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4910      	ldr	r1, [pc, #64]	; (8005520 <SYSVIEW_AddTask+0xcc>)
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	3310      	adds	r3, #16
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80054ee:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <SYSVIEW_AddTask+0xc4>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3301      	adds	r3, #1
 80054f4:	4a08      	ldr	r2, [pc, #32]	; (8005518 <SYSVIEW_AddTask+0xc4>)
 80054f6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f80e 	bl	8005524 <SYSVIEW_SendTaskInfo>
 8005508:	e000      	b.n	800550c <SYSVIEW_AddTask+0xb8>
    return;
 800550a:	bf00      	nop

}
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	08008f50 	.word	0x08008f50
 8005518:	20012f44 	.word	0x20012f44
 800551c:	08008f58 	.word	0x08008f58
 8005520:	20012ea4 	.word	0x20012ea4

08005524 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	; 0x28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005532:	f107 0310 	add.w	r3, r7, #16
 8005536:	2218      	movs	r2, #24
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f002 fc6e 	bl	8007e1c <memset>
  TaskInfo.TaskID     = TaskID;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005554:	f107 0310 	add.w	r3, r7, #16
 8005558:	4618      	mov	r0, r3
 800555a:	f001 ff67 	bl	800742c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800555e:	bf00      	nop
 8005560:	3728      	adds	r7, #40	; 0x28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <__NVIC_EnableIRQ>:
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	4603      	mov	r3, r0
 8005570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005576:	2b00      	cmp	r3, #0
 8005578:	db0b      	blt.n	8005592 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	f003 021f 	and.w	r2, r3, #31
 8005580:	4907      	ldr	r1, [pc, #28]	; (80055a0 <__NVIC_EnableIRQ+0x38>)
 8005582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	2001      	movs	r0, #1
 800558a:	fa00 f202 	lsl.w	r2, r0, r2
 800558e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	e000e100 	.word	0xe000e100

080055a4 <__NVIC_SetPriority>:
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	6039      	str	r1, [r7, #0]
 80055ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	db0a      	blt.n	80055ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	490c      	ldr	r1, [pc, #48]	; (80055f0 <__NVIC_SetPriority+0x4c>)
 80055be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c2:	0112      	lsls	r2, r2, #4
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	440b      	add	r3, r1
 80055c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80055cc:	e00a      	b.n	80055e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	4908      	ldr	r1, [pc, #32]	; (80055f4 <__NVIC_SetPriority+0x50>)
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	3b04      	subs	r3, #4
 80055dc:	0112      	lsls	r2, r2, #4
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	440b      	add	r3, r1
 80055e2:	761a      	strb	r2, [r3, #24]
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	e000e100 	.word	0xe000e100
 80055f4:	e000ed00 	.word	0xe000ed00

080055f8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80055fe:	f002 fb85 	bl	8007d0c <SEGGER_SYSVIEW_IsStarted>
 8005602:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800560a:	f001 fd93 	bl	8007134 <SEGGER_SYSVIEW_Start>
  }
}
 800560e:	bf00      	nop
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005622:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <_cbOnUARTRx+0x3c>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b03      	cmp	r3, #3
 8005628:	d806      	bhi.n	8005638 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800562a:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <_cbOnUARTRx+0x3c>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	3301      	adds	r3, #1
 8005630:	b2da      	uxtb	r2, r3
 8005632:	4b08      	ldr	r3, [pc, #32]	; (8005654 <_cbOnUARTRx+0x3c>)
 8005634:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005636:	e009      	b.n	800564c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005638:	f7ff ffde 	bl	80055f8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800563c:	4b05      	ldr	r3, [pc, #20]	; (8005654 <_cbOnUARTRx+0x3c>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4618      	mov	r0, r3
 8005642:	1dfb      	adds	r3, r7, #7
 8005644:	2201      	movs	r2, #1
 8005646:	4619      	mov	r1, r3
 8005648:	f000 fbec 	bl	8005e24 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800564c:	bf00      	nop
}
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	20000014 	.word	0x20000014

08005658 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005660:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <_cbOnUARTTx+0x5c>)
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	2b03      	cmp	r3, #3
 8005666:	d80f      	bhi.n	8005688 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005668:	4b12      	ldr	r3, [pc, #72]	; (80056b4 <_cbOnUARTTx+0x5c>)
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	461a      	mov	r2, r3
 800566e:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <_cbOnUARTTx+0x60>)
 8005670:	5c9a      	ldrb	r2, [r3, r2]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005676:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <_cbOnUARTTx+0x5c>)
 8005678:	785b      	ldrb	r3, [r3, #1]
 800567a:	3301      	adds	r3, #1
 800567c:	b2da      	uxtb	r2, r3
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <_cbOnUARTTx+0x5c>)
 8005680:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005682:	2301      	movs	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005686:	e00f      	b.n	80056a8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <_cbOnUARTTx+0x5c>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fa1b 	bl	8005acc <SEGGER_RTT_ReadUpBufferNoLock>
 8005696:	4603      	mov	r3, r0
 8005698:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	da02      	bge.n	80056a6 <_cbOnUARTTx+0x4e>
    r = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e000      	b.n	80056a8 <_cbOnUARTTx+0x50>
  }
Done:
 80056a6:	bf00      	nop
  return r;
 80056a8:	68fb      	ldr	r3, [r7, #12]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000014 	.word	0x20000014
 80056b8:	08008fe4 	.word	0x08008fe4

080056bc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80056c4:	4a04      	ldr	r2, [pc, #16]	; (80056d8 <SEGGER_UART_init+0x1c>)
 80056c6:	4905      	ldr	r1, [pc, #20]	; (80056dc <SEGGER_UART_init+0x20>)
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f863 	bl	8005794 <HIF_UART_Init>
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	08005619 	.word	0x08005619
 80056dc:	08005659 	.word	0x08005659

080056e0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80056e6:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <USART2_IRQHandler+0x80>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d011      	beq.n	800571a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80056f6:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <USART2_IRQHandler+0x84>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f003 030b 	and.w	r3, r3, #11
 8005704:	2b00      	cmp	r3, #0
 8005706:	d108      	bne.n	800571a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005708:	4b17      	ldr	r3, [pc, #92]	; (8005768 <USART2_IRQHandler+0x88>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005710:	4b15      	ldr	r3, [pc, #84]	; (8005768 <USART2_IRQHandler+0x88>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	79fa      	ldrb	r2, [r7, #7]
 8005716:	4610      	mov	r0, r2
 8005718:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01a      	beq.n	800575a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005724:	4b11      	ldr	r3, [pc, #68]	; (800576c <USART2_IRQHandler+0x8c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d015      	beq.n	8005758 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <USART2_IRQHandler+0x8c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	1dfa      	adds	r2, r7, #7
 8005732:	4610      	mov	r0, r2
 8005734:	4798      	blx	r3
 8005736:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800573e:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <USART2_IRQHandler+0x90>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a0b      	ldr	r2, [pc, #44]	; (8005770 <USART2_IRQHandler+0x90>)
 8005744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	e006      	b.n	800575a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800574c:	4b04      	ldr	r3, [pc, #16]	; (8005760 <USART2_IRQHandler+0x80>)
 800574e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005750:	79fa      	ldrb	r2, [r7, #7]
 8005752:	4b04      	ldr	r3, [pc, #16]	; (8005764 <USART2_IRQHandler+0x84>)
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	e000      	b.n	800575a <USART2_IRQHandler+0x7a>
      return;
 8005758:	bf00      	nop
    }
  }
}
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40004400 	.word	0x40004400
 8005764:	40004404 	.word	0x40004404
 8005768:	20012f48 	.word	0x20012f48
 800576c:	20012f4c 	.word	0x20012f4c
 8005770:	4000440c 	.word	0x4000440c

08005774 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005778:	4b05      	ldr	r3, [pc, #20]	; (8005790 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a04      	ldr	r2, [pc, #16]	; (8005790 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800577e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005782:	6013      	str	r3, [r2, #0]
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	4000440c 	.word	0x4000440c

08005794 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80057a0:	4b2e      	ldr	r3, [pc, #184]	; (800585c <HIF_UART_Init+0xc8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a2d      	ldr	r2, [pc, #180]	; (800585c <HIF_UART_Init+0xc8>)
 80057a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057aa:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80057ac:	4b2c      	ldr	r3, [pc, #176]	; (8005860 <HIF_UART_Init+0xcc>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a2b      	ldr	r2, [pc, #172]	; (8005860 <HIF_UART_Init+0xcc>)
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80057b8:	4b2a      	ldr	r3, [pc, #168]	; (8005864 <HIF_UART_Init+0xd0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057c4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80057cc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80057ce:	4a25      	ldr	r2, [pc, #148]	; (8005864 <HIF_UART_Init+0xd0>)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80057d4:	4b24      	ldr	r3, [pc, #144]	; (8005868 <HIF_UART_Init+0xd4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057e0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80057e8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80057ea:	4a1f      	ldr	r2, [pc, #124]	; (8005868 <HIF_UART_Init+0xd4>)
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80057f0:	4b1e      	ldr	r3, [pc, #120]	; (800586c <HIF_UART_Init+0xd8>)
 80057f2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80057f6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80057f8:	4b1d      	ldr	r3, [pc, #116]	; (8005870 <HIF_UART_Init+0xdc>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80057fe:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <HIF_UART_Init+0xe0>)
 8005800:	2280      	movs	r2, #128	; 0x80
 8005802:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800580a:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <HIF_UART_Init+0xe4>)
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005812:	3301      	adds	r3, #1
 8005814:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	085b      	lsrs	r3, r3, #1
 800581a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005822:	d302      	bcc.n	800582a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005824:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005828:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	4a11      	ldr	r2, [pc, #68]	; (800587c <HIF_UART_Init+0xe8>)
 8005836:	b29b      	uxth	r3, r3
 8005838:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800583a:	4a11      	ldr	r2, [pc, #68]	; (8005880 <HIF_UART_Init+0xec>)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005840:	4a10      	ldr	r2, [pc, #64]	; (8005884 <HIF_UART_Init+0xf0>)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005846:	2106      	movs	r1, #6
 8005848:	2026      	movs	r0, #38	; 0x26
 800584a:	f7ff feab 	bl	80055a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800584e:	2026      	movs	r0, #38	; 0x26
 8005850:	f7ff fe8a 	bl	8005568 <__NVIC_EnableIRQ>
}
 8005854:	bf00      	nop
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	40023840 	.word	0x40023840
 8005860:	40023830 	.word	0x40023830
 8005864:	40020020 	.word	0x40020020
 8005868:	40020000 	.word	0x40020000
 800586c:	4000440c 	.word	0x4000440c
 8005870:	40004410 	.word	0x40004410
 8005874:	40004414 	.word	0x40004414
 8005878:	0501bd00 	.word	0x0501bd00
 800587c:	40004408 	.word	0x40004408
 8005880:	20012f48 	.word	0x20012f48
 8005884:	20012f4c 	.word	0x20012f4c

08005888 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800588e:	4b26      	ldr	r3, [pc, #152]	; (8005928 <_DoInit+0xa0>)
 8005890:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005892:	22a8      	movs	r2, #168	; 0xa8
 8005894:	2100      	movs	r1, #0
 8005896:	6838      	ldr	r0, [r7, #0]
 8005898:	f002 fac0 	bl	8007e1c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2203      	movs	r2, #3
 80058a0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2203      	movs	r2, #3
 80058a6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	4a20      	ldr	r2, [pc, #128]	; (800592c <_DoInit+0xa4>)
 80058ac:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <_DoInit+0xa8>)
 80058b2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058ba:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2200      	movs	r2, #0
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2200      	movs	r2, #0
 80058c6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2200      	movs	r2, #0
 80058cc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	4a16      	ldr	r2, [pc, #88]	; (800592c <_DoInit+0xa4>)
 80058d2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	4a17      	ldr	r2, [pc, #92]	; (8005934 <_DoInit+0xac>)
 80058d8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2210      	movs	r2, #16
 80058de:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2200      	movs	r2, #0
 80058e4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2200      	movs	r2, #0
 80058ea:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2200      	movs	r2, #0
 80058f0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80058f2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80058f6:	2300      	movs	r3, #0
 80058f8:	607b      	str	r3, [r7, #4]
 80058fa:	e00c      	b.n	8005916 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f1c3 030f 	rsb	r3, r3, #15
 8005902:	4a0d      	ldr	r2, [pc, #52]	; (8005938 <_DoInit+0xb0>)
 8005904:	5cd1      	ldrb	r1, [r2, r3]
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4413      	add	r3, r2
 800590c:	460a      	mov	r2, r1
 800590e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3301      	adds	r3, #1
 8005914:	607b      	str	r3, [r7, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b0f      	cmp	r3, #15
 800591a:	d9ef      	bls.n	80058fc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800591c:	f3bf 8f5f 	dmb	sy
}
 8005920:	bf00      	nop
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20012f50 	.word	0x20012f50
 800592c:	08008fa8 	.word	0x08008fa8
 8005930:	20012ff8 	.word	0x20012ff8
 8005934:	200133f8 	.word	0x200133f8
 8005938:	08008fe8 	.word	0x08008fe8

0800593c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	; 0x28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005948:	2300      	movs	r3, #0
 800594a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	429a      	cmp	r2, r3
 800595e:	d905      	bls.n	800596c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
 800596a:	e007      	b.n	800597c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	69b9      	ldr	r1, [r7, #24]
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	1acb      	subs	r3, r1, r3
 8005976:	4413      	add	r3, r2
 8005978:	3b01      	subs	r3, #1
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005986:	4293      	cmp	r3, r2
 8005988:	bf28      	it	cs
 800598a:	4613      	movcs	r3, r2
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800598e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4293      	cmp	r3, r2
 8005994:	bf28      	it	cs
 8005996:	4613      	movcs	r3, r2
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80059a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	6978      	ldr	r0, [r7, #20]
 80059aa:	f002 fa29 	bl	8007e00 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80059ae:	6a3a      	ldr	r2, [r7, #32]
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	4413      	add	r3, r2
 80059b4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	4413      	add	r3, r2
 80059bc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	4413      	add	r3, r2
 80059cc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d101      	bne.n	80059dc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80059d8:	2300      	movs	r3, #0
 80059da:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80059dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1b2      	bne.n	8005952 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80059ec:	6a3b      	ldr	r3, [r7, #32]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3728      	adds	r7, #40	; 0x28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b088      	sub	sp, #32
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d911      	bls.n	8005a3e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	6938      	ldr	r0, [r7, #16]
 8005a2a:	f002 f9e9 	bl	8007e00 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a2e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	441a      	add	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005a3c:	e01f      	b.n	8005a7e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	68b9      	ldr	r1, [r7, #8]
 8005a50:	6938      	ldr	r0, [r7, #16]
 8005a52:	f002 f9d5 	bl	8007e00 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	4413      	add	r3, r2
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6938      	ldr	r0, [r7, #16]
 8005a70:	f002 f9c6 	bl	8007e00 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a74:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	60da      	str	r2, [r3, #12]
}
 8005a7e:	bf00      	nop
 8005a80:	3720      	adds	r7, #32
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005a86:	b480      	push	{r7}
 8005a88:	b087      	sub	sp, #28
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d808      	bhi.n	8005ab4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1ad2      	subs	r2, r2, r3
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4413      	add	r3, r2
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	e004      	b.n	8005abe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005abe:	697b      	ldr	r3, [r7, #20]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08c      	sub	sp, #48	; 0x30
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005ad8:	4b3e      	ldr	r3, [pc, #248]	; (8005bd4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005ada:	623b      	str	r3, [r7, #32]
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b53      	cmp	r3, #83	; 0x53
 8005ae4:	d001      	beq.n	8005aea <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005ae6:	f7ff fecf 	bl	8005888 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	4a37      	ldr	r2, [pc, #220]	; (8005bd4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005af8:	4413      	add	r3, r2
 8005afa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d92b      	bls.n	8005b70 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4293      	cmp	r3, r2
 8005b28:	bf28      	it	cs
 8005b2a:	4613      	movcs	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	4413      	add	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	6939      	ldr	r1, [r7, #16]
 8005b3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b3e:	f002 f95f 	bl	8007e00 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	4413      	add	r3, r2
 8005b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	4413      	add	r3, r2
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	4413      	add	r3, r2
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d101      	bne.n	8005b70 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	bf28      	it	cs
 8005b80:	4613      	movcs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d019      	beq.n	8005bbe <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	4413      	add	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	6939      	ldr	r1, [r7, #16]
 8005b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b9a:	f002 f931 	bl	8007e00 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4413      	add	r3, r2
 8005bbc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bc8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3730      	adds	r7, #48	; 0x30
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20012f50 	.word	0x20012f50

08005bd8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08c      	sub	sp, #48	; 0x30
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005be4:	4b3e      	ldr	r3, [pc, #248]	; (8005ce0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005be6:	623b      	str	r3, [r7, #32]
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b53      	cmp	r3, #83	; 0x53
 8005bf0:	d001      	beq.n	8005bf6 <SEGGER_RTT_ReadNoLock+0x1e>
 8005bf2:	f7ff fe49 	bl	8005888 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	4413      	add	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	3360      	adds	r3, #96	; 0x60
 8005c02:	4a37      	ldr	r2, [pc, #220]	; (8005ce0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005c04:	4413      	add	r3, r2
 8005c06:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d92b      	bls.n	8005c7c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4293      	cmp	r3, r2
 8005c34:	bf28      	it	cs
 8005c36:	4613      	movcs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	4413      	add	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	6939      	ldr	r1, [r7, #16]
 8005c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c4a:	f002 f8d9 	bl	8007e00 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	4413      	add	r3, r2
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d101      	bne.n	8005c7c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	bf28      	it	cs
 8005c8c:	4613      	movcs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d019      	beq.n	8005cca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	4413      	add	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	6939      	ldr	r1, [r7, #16]
 8005ca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ca6:	f002 f8ab 	bl	8007e00 <memcpy>
    NumBytesRead += NumBytesRem;
 8005caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	4413      	add	r3, r2
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3730      	adds	r7, #48	; 0x30
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	20012f50 	.word	0x20012f50

08005ce4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	4413      	add	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	3360      	adds	r3, #96	; 0x60
 8005d00:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005d02:	4413      	add	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d029      	beq.n	8005d62 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d82e      	bhi.n	8005d70 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d013      	beq.n	8005d42 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005d1a:	e029      	b.n	8005d70 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d1c:	6978      	ldr	r0, [r7, #20]
 8005d1e:	f7ff feb2 	bl	8005a86 <_GetAvailWriteSpace>
 8005d22:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d202      	bcs.n	8005d32 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005d30:	e021      	b.n	8005d76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	69b9      	ldr	r1, [r7, #24]
 8005d3a:	6978      	ldr	r0, [r7, #20]
 8005d3c:	f7ff fe5b 	bl	80059f6 <_WriteNoCheck>
    break;
 8005d40:	e019      	b.n	8005d76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d42:	6978      	ldr	r0, [r7, #20]
 8005d44:	f7ff fe9f 	bl	8005a86 <_GetAvailWriteSpace>
 8005d48:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	bf28      	it	cs
 8005d52:	4613      	movcs	r3, r2
 8005d54:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	69b9      	ldr	r1, [r7, #24]
 8005d5a:	6978      	ldr	r0, [r7, #20]
 8005d5c:	f7ff fe4b 	bl	80059f6 <_WriteNoCheck>
    break;
 8005d60:	e009      	b.n	8005d76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	6978      	ldr	r0, [r7, #20]
 8005d68:	f7ff fde8 	bl	800593c <_WriteBlocking>
 8005d6c:	61f8      	str	r0, [r7, #28]
    break;
 8005d6e:	e002      	b.n	8005d76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005d70:	2300      	movs	r3, #0
 8005d72:	61fb      	str	r3, [r7, #28]
    break;
 8005d74:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005d76:	69fb      	ldr	r3, [r7, #28]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20012f50 	.word	0x20012f50

08005d84 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	4613      	mov	r3, r2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	4413      	add	r3, r2
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	4a1f      	ldr	r2, [pc, #124]	; (8005e20 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005da2:	4413      	add	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d029      	beq.n	8005e02 <SEGGER_RTT_WriteNoLock+0x7e>
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d82e      	bhi.n	8005e10 <SEGGER_RTT_WriteNoLock+0x8c>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <SEGGER_RTT_WriteNoLock+0x38>
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d013      	beq.n	8005de2 <SEGGER_RTT_WriteNoLock+0x5e>
 8005dba:	e029      	b.n	8005e10 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005dbc:	6978      	ldr	r0, [r7, #20]
 8005dbe:	f7ff fe62 	bl	8005a86 <_GetAvailWriteSpace>
 8005dc2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d202      	bcs.n	8005dd2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005dd0:	e021      	b.n	8005e16 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	69b9      	ldr	r1, [r7, #24]
 8005dda:	6978      	ldr	r0, [r7, #20]
 8005ddc:	f7ff fe0b 	bl	80059f6 <_WriteNoCheck>
    break;
 8005de0:	e019      	b.n	8005e16 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005de2:	6978      	ldr	r0, [r7, #20]
 8005de4:	f7ff fe4f 	bl	8005a86 <_GetAvailWriteSpace>
 8005de8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	4293      	cmp	r3, r2
 8005df0:	bf28      	it	cs
 8005df2:	4613      	movcs	r3, r2
 8005df4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	69b9      	ldr	r1, [r7, #24]
 8005dfa:	6978      	ldr	r0, [r7, #20]
 8005dfc:	f7ff fdfb 	bl	80059f6 <_WriteNoCheck>
    break;
 8005e00:	e009      	b.n	8005e16 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	69b9      	ldr	r1, [r7, #24]
 8005e06:	6978      	ldr	r0, [r7, #20]
 8005e08:	f7ff fd98 	bl	800593c <_WriteBlocking>
 8005e0c:	61f8      	str	r0, [r7, #28]
    break;
 8005e0e:	e002      	b.n	8005e16 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
    break;
 8005e14:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005e16:	69fb      	ldr	r3, [r7, #28]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3720      	adds	r7, #32
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20012f50 	.word	0x20012f50

08005e24 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005e30:	4b0e      	ldr	r3, [pc, #56]	; (8005e6c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b53      	cmp	r3, #83	; 0x53
 8005e3c:	d001      	beq.n	8005e42 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005e3e:	f7ff fd23 	bl	8005888 <_DoInit>
  SEGGER_RTT_LOCK();
 8005e42:	f3ef 8311 	mrs	r3, BASEPRI
 8005e46:	f04f 0120 	mov.w	r1, #32
 8005e4a:	f381 8811 	msr	BASEPRI, r1
 8005e4e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	68b9      	ldr	r1, [r7, #8]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff ff45 	bl	8005ce4 <SEGGER_RTT_WriteDownBufferNoLock>
 8005e5a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005e62:	697b      	ldr	r3, [r7, #20]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20012f50 	.word	0x20012f50

08005e70 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <SEGGER_RTT_Write+0x48>)
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b53      	cmp	r3, #83	; 0x53
 8005e88:	d001      	beq.n	8005e8e <SEGGER_RTT_Write+0x1e>
 8005e8a:	f7ff fcfd 	bl	8005888 <_DoInit>
  SEGGER_RTT_LOCK();
 8005e8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e92:	f04f 0120 	mov.w	r1, #32
 8005e96:	f381 8811 	msr	BASEPRI, r1
 8005e9a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff ff6f 	bl	8005d84 <SEGGER_RTT_WriteNoLock>
 8005ea6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005eae:	697b      	ldr	r3, [r7, #20]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20012f50 	.word	0x20012f50

08005ebc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005eca:	4b3d      	ldr	r3, [pc, #244]	; (8005fc0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b53      	cmp	r3, #83	; 0x53
 8005ed6:	d001      	beq.n	8005edc <SEGGER_RTT_AllocUpBuffer+0x20>
 8005ed8:	f7ff fcd6 	bl	8005888 <_DoInit>
  SEGGER_RTT_LOCK();
 8005edc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee0:	f04f 0120 	mov.w	r1, #32
 8005ee4:	f381 8811 	msr	BASEPRI, r1
 8005ee8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005eea:	4b35      	ldr	r3, [pc, #212]	; (8005fc0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005eec:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005ef2:	6939      	ldr	r1, [r7, #16]
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	4613      	mov	r3, r2
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	4413      	add	r3, r2
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	440b      	add	r3, r1
 8005f02:	3304      	adds	r3, #4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d008      	beq.n	8005f1c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	dbeb      	blt.n	8005ef2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005f1a:	e000      	b.n	8005f1e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005f1c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	da3f      	bge.n	8005fa8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005f28:	6939      	ldr	r1, [r7, #16]
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	4613      	mov	r3, r2
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	4413      	add	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	440b      	add	r3, r1
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005f3c:	6939      	ldr	r1, [r7, #16]
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	4613      	mov	r3, r2
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	4413      	add	r3, r2
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	440b      	add	r3, r1
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005f52:	6939      	ldr	r1, [r7, #16]
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	4613      	mov	r3, r2
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	4413      	add	r3, r2
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	440b      	add	r3, r1
 8005f60:	3320      	adds	r3, #32
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005f66:	6939      	ldr	r1, [r7, #16]
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	4413      	add	r3, r2
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	440b      	add	r3, r1
 8005f74:	3328      	adds	r3, #40	; 0x28
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005f7a:	6939      	ldr	r1, [r7, #16]
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	4413      	add	r3, r2
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	440b      	add	r3, r1
 8005f88:	3324      	adds	r3, #36	; 0x24
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005f8e:	6939      	ldr	r1, [r7, #16]
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	4613      	mov	r3, r2
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	4413      	add	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	440b      	add	r3, r1
 8005f9c:	332c      	adds	r3, #44	; 0x2c
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005fa2:	f3bf 8f5f 	dmb	sy
 8005fa6:	e002      	b.n	8005fae <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fac:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3720      	adds	r7, #32
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20012f50 	.word	0x20012f50

08005fc4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	; 0x28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005fd2:	4b21      	ldr	r3, [pc, #132]	; (8006058 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005fd4:	623b      	str	r3, [r7, #32]
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b53      	cmp	r3, #83	; 0x53
 8005fde:	d001      	beq.n	8005fe4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005fe0:	f7ff fc52 	bl	8005888 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005fe4:	4b1c      	ldr	r3, [pc, #112]	; (8006058 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005fe6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d82c      	bhi.n	8006048 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005fee:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff2:	f04f 0120 	mov.w	r1, #32
 8005ff6:	f381 8811 	msr	BASEPRI, r1
 8005ffa:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4613      	mov	r3, r2
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	4413      	add	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	3360      	adds	r3, #96	; 0x60
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00e      	beq.n	8006032 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2200      	movs	r2, #0
 800602a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2200      	movs	r2, #0
 8006030:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006036:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006038:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006042:	2300      	movs	r3, #0
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
 8006046:	e002      	b.n	800604e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006048:	f04f 33ff 	mov.w	r3, #4294967295
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006050:	4618      	mov	r0, r3
 8006052:	3728      	adds	r7, #40	; 0x28
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20012f50 	.word	0x20012f50

0800605c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d105      	bne.n	800607a <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	60fa      	str	r2, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	e022      	b.n	80060c0 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	60fa      	str	r2, [r7, #12]
 8006084:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b80      	cmp	r3, #128	; 0x80
 800608a:	d90a      	bls.n	80060a2 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800608c:	2380      	movs	r3, #128	; 0x80
 800608e:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8006090:	e007      	b.n	80060a2 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	1c53      	adds	r3, r2, #1
 8006096:	60bb      	str	r3, [r7, #8]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	1c59      	adds	r1, r3, #1
 800609c:	60f9      	str	r1, [r7, #12]
 800609e:	7812      	ldrb	r2, [r2, #0]
 80060a0:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	1e5a      	subs	r2, r3, #1
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <_EncodeStr+0x58>
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1ee      	bne.n	8006092 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80060c0:	68fb      	ldr	r3, [r7, #12]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3307      	adds	r3, #7
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060ee:	4b35      	ldr	r3, [pc, #212]	; (80061c4 <_HandleIncomingPacket+0xdc>)
 80060f0:	7e1b      	ldrb	r3, [r3, #24]
 80060f2:	4618      	mov	r0, r3
 80060f4:	1cfb      	adds	r3, r7, #3
 80060f6:	2201      	movs	r2, #1
 80060f8:	4619      	mov	r1, r3
 80060fa:	f7ff fd6d 	bl	8005bd8 <SEGGER_RTT_ReadNoLock>
 80060fe:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d052      	beq.n	80061ac <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	2b80      	cmp	r3, #128	; 0x80
 800610a:	d031      	beq.n	8006170 <_HandleIncomingPacket+0x88>
 800610c:	2b80      	cmp	r3, #128	; 0x80
 800610e:	dc40      	bgt.n	8006192 <_HandleIncomingPacket+0xaa>
 8006110:	2b07      	cmp	r3, #7
 8006112:	dc15      	bgt.n	8006140 <_HandleIncomingPacket+0x58>
 8006114:	2b00      	cmp	r3, #0
 8006116:	dd3c      	ble.n	8006192 <_HandleIncomingPacket+0xaa>
 8006118:	3b01      	subs	r3, #1
 800611a:	2b06      	cmp	r3, #6
 800611c:	d839      	bhi.n	8006192 <_HandleIncomingPacket+0xaa>
 800611e:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <_HandleIncomingPacket+0x3c>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	08006147 	.word	0x08006147
 8006128:	0800614d 	.word	0x0800614d
 800612c:	08006153 	.word	0x08006153
 8006130:	08006159 	.word	0x08006159
 8006134:	0800615f 	.word	0x0800615f
 8006138:	08006165 	.word	0x08006165
 800613c:	0800616b 	.word	0x0800616b
 8006140:	2b7f      	cmp	r3, #127	; 0x7f
 8006142:	d035      	beq.n	80061b0 <_HandleIncomingPacket+0xc8>
 8006144:	e025      	b.n	8006192 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006146:	f000 fff5 	bl	8007134 <SEGGER_SYSVIEW_Start>
      break;
 800614a:	e036      	b.n	80061ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800614c:	f001 f8ae 	bl	80072ac <SEGGER_SYSVIEW_Stop>
      break;
 8006150:	e033      	b.n	80061ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006152:	f001 fa87 	bl	8007664 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006156:	e030      	b.n	80061ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006158:	f001 fa4c 	bl	80075f4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800615c:	e02d      	b.n	80061ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800615e:	f001 f8cb 	bl	80072f8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006162:	e02a      	b.n	80061ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006164:	f001 fd24 	bl	8007bb0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006168:	e027      	b.n	80061ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800616a:	f001 fd03 	bl	8007b74 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800616e:	e024      	b.n	80061ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006170:	4b14      	ldr	r3, [pc, #80]	; (80061c4 <_HandleIncomingPacket+0xdc>)
 8006172:	7e1b      	ldrb	r3, [r3, #24]
 8006174:	4618      	mov	r0, r3
 8006176:	1cfb      	adds	r3, r7, #3
 8006178:	2201      	movs	r2, #1
 800617a:	4619      	mov	r1, r3
 800617c:	f7ff fd2c 	bl	8005bd8 <SEGGER_RTT_ReadNoLock>
 8006180:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d015      	beq.n	80061b4 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	4618      	mov	r0, r3
 800618c:	f001 fc68 	bl	8007a60 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006190:	e010      	b.n	80061b4 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	b25b      	sxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	da0e      	bge.n	80061b8 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <_HandleIncomingPacket+0xdc>)
 800619c:	7e1b      	ldrb	r3, [r3, #24]
 800619e:	4618      	mov	r0, r3
 80061a0:	1cfb      	adds	r3, r7, #3
 80061a2:	2201      	movs	r2, #1
 80061a4:	4619      	mov	r1, r3
 80061a6:	f7ff fd17 	bl	8005bd8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80061aa:	e005      	b.n	80061b8 <_HandleIncomingPacket+0xd0>
    }
  }
 80061ac:	bf00      	nop
 80061ae:	e004      	b.n	80061ba <_HandleIncomingPacket+0xd2>
      break;
 80061b0:	bf00      	nop
 80061b2:	e002      	b.n	80061ba <_HandleIncomingPacket+0xd2>
      break;
 80061b4:	bf00      	nop
 80061b6:	e000      	b.n	80061ba <_HandleIncomingPacket+0xd2>
      break;
 80061b8:	bf00      	nop
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20013810 	.word	0x20013810

080061c8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08c      	sub	sp, #48	; 0x30
 80061cc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80061ce:	2301      	movs	r3, #1
 80061d0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80061d2:	1d3b      	adds	r3, r7, #4
 80061d4:	3301      	adds	r3, #1
 80061d6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061dc:	4b32      	ldr	r3, [pc, #200]	; (80062a8 <_TrySendOverflowPacket+0xe0>)
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061e2:	e00b      	b.n	80061fc <_TrySendOverflowPacket+0x34>
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	1c59      	adds	r1, r3, #1
 80061ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	09db      	lsrs	r3, r3, #7
 80061fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006200:	d8f0      	bhi.n	80061e4 <_TrySendOverflowPacket+0x1c>
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006212:	4b26      	ldr	r3, [pc, #152]	; (80062ac <_TrySendOverflowPacket+0xe4>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8006218:	4b23      	ldr	r3, [pc, #140]	; (80062a8 <_TrySendOverflowPacket+0xe0>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	623b      	str	r3, [r7, #32]
 800622a:	e00b      	b.n	8006244 <_TrySendOverflowPacket+0x7c>
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	b2da      	uxtb	r2, r3
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	1c59      	adds	r1, r3, #1
 8006234:	6279      	str	r1, [r7, #36]	; 0x24
 8006236:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	09db      	lsrs	r3, r3, #7
 8006242:	623b      	str	r3, [r7, #32]
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	2b7f      	cmp	r3, #127	; 0x7f
 8006248:	d8f0      	bhi.n	800622c <_TrySendOverflowPacket+0x64>
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	627a      	str	r2, [r7, #36]	; 0x24
 8006250:	6a3a      	ldr	r2, [r7, #32]
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800625a:	4b13      	ldr	r3, [pc, #76]	; (80062a8 <_TrySendOverflowPacket+0xe0>)
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	4618      	mov	r0, r3
 8006260:	1d3b      	adds	r3, r7, #4
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	461a      	mov	r2, r3
 8006268:	1d3b      	adds	r3, r7, #4
 800626a:	4619      	mov	r1, r3
 800626c:	f7f9 ffb0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006270:	4603      	mov	r3, r0
 8006272:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8006274:	f7ff fa7e 	bl	8005774 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d009      	beq.n	8006292 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800627e:	4a0a      	ldr	r2, [pc, #40]	; (80062a8 <_TrySendOverflowPacket+0xe0>)
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006284:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <_TrySendOverflowPacket+0xe0>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	3b01      	subs	r3, #1
 800628a:	b2da      	uxtb	r2, r3
 800628c:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <_TrySendOverflowPacket+0xe0>)
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	e004      	b.n	800629c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006292:	4b05      	ldr	r3, [pc, #20]	; (80062a8 <_TrySendOverflowPacket+0xe0>)
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	3301      	adds	r3, #1
 8006298:	4a03      	ldr	r2, [pc, #12]	; (80062a8 <_TrySendOverflowPacket+0xe0>)
 800629a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800629c:	693b      	ldr	r3, [r7, #16]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3730      	adds	r7, #48	; 0x30
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20013810 	.word	0x20013810
 80062ac:	e0001004 	.word	0xe0001004

080062b0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	; 0x28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80062bc:	4b96      	ldr	r3, [pc, #600]	; (8006518 <_SendPacket+0x268>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d010      	beq.n	80062e6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80062c4:	4b94      	ldr	r3, [pc, #592]	; (8006518 <_SendPacket+0x268>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8130 	beq.w	800652e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80062ce:	4b92      	ldr	r3, [pc, #584]	; (8006518 <_SendPacket+0x268>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d109      	bne.n	80062ea <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80062d6:	f7ff ff77 	bl	80061c8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80062da:	4b8f      	ldr	r3, [pc, #572]	; (8006518 <_SendPacket+0x268>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	f040 8127 	bne.w	8006532 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80062e4:	e001      	b.n	80062ea <_SendPacket+0x3a>
    goto Send;
 80062e6:	bf00      	nop
 80062e8:	e000      	b.n	80062ec <_SendPacket+0x3c>
Send:
 80062ea:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b1f      	cmp	r3, #31
 80062f0:	d809      	bhi.n	8006306 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80062f2:	4b89      	ldr	r3, [pc, #548]	; (8006518 <_SendPacket+0x268>)
 80062f4:	69da      	ldr	r2, [r3, #28]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	f040 8118 	bne.w	8006536 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b17      	cmp	r3, #23
 800630a:	d807      	bhi.n	800631c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3b01      	subs	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	b2da      	uxtb	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	e0c4      	b.n	80064a6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	2b7f      	cmp	r3, #127	; 0x7f
 8006328:	d912      	bls.n	8006350 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	09da      	lsrs	r2, r3, #7
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3b01      	subs	r3, #1
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	3a01      	subs	r2, #1
 8006342:	60fa      	str	r2, [r7, #12]
 8006344:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006348:	b2da      	uxtb	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	e006      	b.n	800635e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	3b01      	subs	r3, #1
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	b2da      	uxtb	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b7e      	cmp	r3, #126	; 0x7e
 8006362:	d807      	bhi.n	8006374 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b01      	subs	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	b2da      	uxtb	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	e098      	b.n	80064a6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800637a:	d212      	bcs.n	80063a2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	09da      	lsrs	r2, r3, #7
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3b01      	subs	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	3a01      	subs	r2, #1
 8006394:	60fa      	str	r2, [r7, #12]
 8006396:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800639a:	b2da      	uxtb	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	701a      	strb	r2, [r3, #0]
 80063a0:	e081      	b.n	80064a6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063a8:	d21d      	bcs.n	80063e6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	0b9a      	lsrs	r2, r3, #14
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	09db      	lsrs	r3, r3, #7
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	3a01      	subs	r2, #1
 80063c4:	60fa      	str	r2, [r7, #12]
 80063c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	3a01      	subs	r2, #1
 80063d8:	60fa      	str	r2, [r7, #12]
 80063da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	e05f      	b.n	80064a6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ec:	d228      	bcs.n	8006440 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	0d5a      	lsrs	r2, r3, #21
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	0b9b      	lsrs	r3, r3, #14
 8006402:	b2db      	uxtb	r3, r3
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	3a01      	subs	r2, #1
 8006408:	60fa      	str	r2, [r7, #12]
 800640a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800640e:	b2da      	uxtb	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	09db      	lsrs	r3, r3, #7
 8006418:	b2db      	uxtb	r3, r3
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	3a01      	subs	r2, #1
 800641e:	60fa      	str	r2, [r7, #12]
 8006420:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006424:	b2da      	uxtb	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	3a01      	subs	r2, #1
 8006432:	60fa      	str	r2, [r7, #12]
 8006434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006438:	b2da      	uxtb	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	e032      	b.n	80064a6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	0f1a      	lsrs	r2, r3, #28
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3b01      	subs	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	0d5b      	lsrs	r3, r3, #21
 8006454:	b2db      	uxtb	r3, r3
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	3a01      	subs	r2, #1
 800645a:	60fa      	str	r2, [r7, #12]
 800645c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006460:	b2da      	uxtb	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	0b9b      	lsrs	r3, r3, #14
 800646a:	b2db      	uxtb	r3, r3
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	3a01      	subs	r2, #1
 8006470:	60fa      	str	r2, [r7, #12]
 8006472:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006476:	b2da      	uxtb	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	09db      	lsrs	r3, r3, #7
 8006480:	b2db      	uxtb	r3, r3
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	3a01      	subs	r2, #1
 8006486:	60fa      	str	r2, [r7, #12]
 8006488:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800648c:	b2da      	uxtb	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	3a01      	subs	r2, #1
 800649a:	60fa      	str	r2, [r7, #12]
 800649c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80064a6:	4b1d      	ldr	r3, [pc, #116]	; (800651c <_SendPacket+0x26c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80064ac:	4b1a      	ldr	r3, [pc, #104]	; (8006518 <_SendPacket+0x268>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	623b      	str	r3, [r7, #32]
 80064be:	e00b      	b.n	80064d8 <_SendPacket+0x228>
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	1c59      	adds	r1, r3, #1
 80064c8:	6279      	str	r1, [r7, #36]	; 0x24
 80064ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	09db      	lsrs	r3, r3, #7
 80064d6:	623b      	str	r3, [r7, #32]
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	2b7f      	cmp	r3, #127	; 0x7f
 80064dc:	d8f0      	bhi.n	80064c0 <_SendPacket+0x210>
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	627a      	str	r2, [r7, #36]	; 0x24
 80064e4:	6a3a      	ldr	r2, [r7, #32]
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80064ee:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <_SendPacket+0x268>)
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	4618      	mov	r0, r3
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	68f9      	ldr	r1, [r7, #12]
 80064fe:	f7f9 fe67 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006502:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006504:	f7ff f936 	bl	8005774 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d008      	beq.n	8006520 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800650e:	4a02      	ldr	r2, [pc, #8]	; (8006518 <_SendPacket+0x268>)
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	60d3      	str	r3, [r2, #12]
 8006514:	e010      	b.n	8006538 <_SendPacket+0x288>
 8006516:	bf00      	nop
 8006518:	20013810 	.word	0x20013810
 800651c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006520:	4b19      	ldr	r3, [pc, #100]	; (8006588 <_SendPacket+0x2d8>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	b2da      	uxtb	r2, r3
 8006528:	4b17      	ldr	r3, [pc, #92]	; (8006588 <_SendPacket+0x2d8>)
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	e004      	b.n	8006538 <_SendPacket+0x288>
    goto SendDone;
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <_SendPacket+0x288>
      goto SendDone;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <_SendPacket+0x288>
      goto SendDone;
 8006536:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006538:	4b13      	ldr	r3, [pc, #76]	; (8006588 <_SendPacket+0x2d8>)
 800653a:	7e1b      	ldrb	r3, [r3, #24]
 800653c:	4619      	mov	r1, r3
 800653e:	4a13      	ldr	r2, [pc, #76]	; (800658c <_SendPacket+0x2dc>)
 8006540:	460b      	mov	r3, r1
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	440b      	add	r3, r1
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	4413      	add	r3, r2
 800654a:	336c      	adds	r3, #108	; 0x6c
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <_SendPacket+0x2d8>)
 8006550:	7e1b      	ldrb	r3, [r3, #24]
 8006552:	4618      	mov	r0, r3
 8006554:	490d      	ldr	r1, [pc, #52]	; (800658c <_SendPacket+0x2dc>)
 8006556:	4603      	mov	r3, r0
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	4403      	add	r3, r0
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	440b      	add	r3, r1
 8006560:	3370      	adds	r3, #112	; 0x70
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d00b      	beq.n	8006580 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006568:	4b07      	ldr	r3, [pc, #28]	; (8006588 <_SendPacket+0x2d8>)
 800656a:	789b      	ldrb	r3, [r3, #2]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d107      	bne.n	8006580 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006570:	4b05      	ldr	r3, [pc, #20]	; (8006588 <_SendPacket+0x2d8>)
 8006572:	2201      	movs	r2, #1
 8006574:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006576:	f7ff fdb7 	bl	80060e8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800657a:	4b03      	ldr	r3, [pc, #12]	; (8006588 <_SendPacket+0x2d8>)
 800657c:	2200      	movs	r2, #0
 800657e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006580:	bf00      	nop
 8006582:	3728      	adds	r7, #40	; 0x28
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20013810 	.word	0x20013810
 800658c:	20012f50 	.word	0x20012f50

08006590 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b08a      	sub	sp, #40	; 0x28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	3301      	adds	r3, #1
 80065a6:	2b80      	cmp	r3, #128	; 0x80
 80065a8:	d80a      	bhi.n	80065c0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	1c59      	adds	r1, r3, #1
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6051      	str	r1, [r2, #4]
 80065b4:	78fa      	ldrb	r2, [r7, #3]
 80065b6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b80      	cmp	r3, #128	; 0x80
 80065c6:	d15a      	bne.n	800667e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	623b      	str	r3, [r7, #32]
 80065e8:	e00b      	b.n	8006602 <_StoreChar+0x72>
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	1c59      	adds	r1, r3, #1
 80065f2:	6279      	str	r1, [r7, #36]	; 0x24
 80065f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	09db      	lsrs	r3, r3, #7
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	2b7f      	cmp	r3, #127	; 0x7f
 8006606:	d8f0      	bhi.n	80065ea <_StoreChar+0x5a>
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	627a      	str	r2, [r7, #36]	; 0x24
 800660e:	6a3a      	ldr	r2, [r7, #32]
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	2300      	movs	r3, #0
 800661e:	61bb      	str	r3, [r7, #24]
 8006620:	e00b      	b.n	800663a <_StoreChar+0xaa>
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	b2da      	uxtb	r2, r3
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	1c59      	adds	r1, r3, #1
 800662a:	61f9      	str	r1, [r7, #28]
 800662c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	09db      	lsrs	r3, r3, #7
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	2b7f      	cmp	r3, #127	; 0x7f
 800663e:	d8f0      	bhi.n	8006622 <_StoreChar+0x92>
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	61fa      	str	r2, [r7, #28]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	221a      	movs	r2, #26
 8006656:	6939      	ldr	r1, [r7, #16]
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff fe29 	bl	80062b0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff fd33 	bl	80060ce <_PreparePacket>
 8006668:	4602      	mov	r2, r0
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	611a      	str	r2, [r3, #16]
  }
}
 800667e:	bf00      	nop
 8006680:	3728      	adds	r7, #40	; 0x28
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800669a:	2301      	movs	r3, #1
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800669e:	2301      	movs	r3, #1
 80066a0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80066a2:	e007      	b.n	80066b4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80066a4:	6a3a      	ldr	r2, [r7, #32]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ac:	623b      	str	r3, [r7, #32]
    Width++;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	3301      	adds	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80066b4:	6a3a      	ldr	r2, [r7, #32]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d2f3      	bcs.n	80066a4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d901      	bls.n	80066c8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80066c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d11f      	bne.n	8006712 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01c      	beq.n	8006712 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80066d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <_PrintUnsigned+0x66>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d102      	bne.n	80066ee <_PrintUnsigned+0x66>
        c = '0';
 80066e8:	2330      	movs	r3, #48	; 0x30
 80066ea:	76fb      	strb	r3, [r7, #27]
 80066ec:	e001      	b.n	80066f2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80066ee:	2320      	movs	r3, #32
 80066f0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066f2:	e007      	b.n	8006704 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f6:	3b01      	subs	r3, #1
 80066f8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80066fa:	7efb      	ldrb	r3, [r7, #27]
 80066fc:	4619      	mov	r1, r3
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7ff ff46 	bl	8006590 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <_PrintUnsigned+0x8a>
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	429a      	cmp	r2, r3
 8006710:	d3f0      	bcc.n	80066f4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d903      	bls.n	8006720 <_PrintUnsigned+0x98>
      NumDigits--;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	3b01      	subs	r3, #1
 800671c:	603b      	str	r3, [r7, #0]
 800671e:	e009      	b.n	8006734 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	fbb2 f3f3 	udiv	r3, r2, r3
 8006728:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	429a      	cmp	r2, r3
 8006730:	d200      	bcs.n	8006734 <_PrintUnsigned+0xac>
        break;
 8006732:	e005      	b.n	8006740 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	fb02 f303 	mul.w	r3, r2, r3
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800673e:	e7e8      	b.n	8006712 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	fbb2 f3f3 	udiv	r3, r2, r3
 8006748:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006758:	4a15      	ldr	r2, [pc, #84]	; (80067b0 <_PrintUnsigned+0x128>)
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	4413      	add	r3, r2
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	4619      	mov	r1, r3
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f7ff ff14 	bl	8006590 <_StoreChar>
    Digit /= Base;
 8006768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e3      	bne.n	8006740 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d011      	beq.n	80067a6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00e      	beq.n	80067a6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006788:	e006      	b.n	8006798 <_PrintUnsigned+0x110>
        FieldWidth--;
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	3b01      	subs	r3, #1
 800678e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006790:	2120      	movs	r1, #32
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff fefc 	bl	8006590 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <_PrintUnsigned+0x11e>
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d3f1      	bcc.n	800678a <_PrintUnsigned+0x102>
      }
    }
  }
}
 80067a6:	bf00      	nop
 80067a8:	3728      	adds	r7, #40	; 0x28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	08009008 	.word	0x08009008

080067b4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af02      	add	r7, sp, #8
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bfb8      	it	lt
 80067c8:	425b      	neglt	r3, r3
 80067ca:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80067cc:	2301      	movs	r3, #1
 80067ce:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80067d0:	e007      	b.n	80067e2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80067da:	613b      	str	r3, [r7, #16]
    Width++;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	3301      	adds	r3, #1
 80067e0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	daf3      	bge.n	80067d2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d901      	bls.n	80067f6 <_PrintInt+0x42>
    Width = NumDigits;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <_PrintInt+0x5e>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	db04      	blt.n	800680c <_PrintInt+0x58>
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <_PrintInt+0x5e>
    FieldWidth--;
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	3b01      	subs	r3, #1
 8006810:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <_PrintInt+0x6e>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d016      	beq.n	8006850 <_PrintInt+0x9c>
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d111      	bne.n	8006850 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00e      	beq.n	8006850 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006832:	e006      	b.n	8006842 <_PrintInt+0x8e>
        FieldWidth--;
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	3b01      	subs	r3, #1
 8006838:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800683a:	2120      	movs	r1, #32
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7ff fea7 	bl	8006590 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <_PrintInt+0x9c>
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	429a      	cmp	r2, r3
 800684e:	d3f1      	bcc.n	8006834 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	da07      	bge.n	8006866 <_PrintInt+0xb2>
    v = -v;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	425b      	negs	r3, r3
 800685a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800685c:	212d      	movs	r1, #45	; 0x2d
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f7ff fe96 	bl	8006590 <_StoreChar>
 8006864:	e008      	b.n	8006878 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006870:	212b      	movs	r1, #43	; 0x2b
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f7ff fe8c 	bl	8006590 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d019      	beq.n	80068b6 <_PrintInt+0x102>
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d114      	bne.n	80068b6 <_PrintInt+0x102>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d111      	bne.n	80068b6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00e      	beq.n	80068b6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006898:	e006      	b.n	80068a8 <_PrintInt+0xf4>
        FieldWidth--;
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	3b01      	subs	r3, #1
 800689e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80068a0:	2130      	movs	r1, #48	; 0x30
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7ff fe74 	bl	8006590 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <_PrintInt+0x102>
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d3f1      	bcc.n	800689a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f7ff fedf 	bl	8006688 <_PrintUnsigned>
}
 80068ca:	bf00      	nop
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b098      	sub	sp, #96	; 0x60
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80068e0:	f3ef 8311 	mrs	r3, BASEPRI
 80068e4:	f04f 0120 	mov.w	r1, #32
 80068e8:	f381 8811 	msr	BASEPRI, r1
 80068ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ee:	48b7      	ldr	r0, [pc, #732]	; (8006bcc <_VPrintTarget+0x2f8>)
 80068f0:	f7ff fbed 	bl	80060ce <_PreparePacket>
 80068f4:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80068f6:	4bb5      	ldr	r3, [pc, #724]	; (8006bcc <_VPrintTarget+0x2f8>)
 80068f8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80068fa:	2300      	movs	r3, #0
 80068fc:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	3301      	adds	r3, #1
 8006906:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3301      	adds	r3, #1
 8006918:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800691a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 81a8 	beq.w	8006c74 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8006924:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006928:	2b25      	cmp	r3, #37	; 0x25
 800692a:	f040 8195 	bne.w	8006c58 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800692e:	2300      	movs	r3, #0
 8006930:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006932:	2301      	movs	r3, #1
 8006934:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800693e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006942:	3b23      	subs	r3, #35	; 0x23
 8006944:	2b0d      	cmp	r3, #13
 8006946:	d83f      	bhi.n	80069c8 <_VPrintTarget+0xf4>
 8006948:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <_VPrintTarget+0x7c>)
 800694a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694e:	bf00      	nop
 8006950:	080069b9 	.word	0x080069b9
 8006954:	080069c9 	.word	0x080069c9
 8006958:	080069c9 	.word	0x080069c9
 800695c:	080069c9 	.word	0x080069c9
 8006960:	080069c9 	.word	0x080069c9
 8006964:	080069c9 	.word	0x080069c9
 8006968:	080069c9 	.word	0x080069c9
 800696c:	080069c9 	.word	0x080069c9
 8006970:	080069a9 	.word	0x080069a9
 8006974:	080069c9 	.word	0x080069c9
 8006978:	08006989 	.word	0x08006989
 800697c:	080069c9 	.word	0x080069c9
 8006980:	080069c9 	.word	0x080069c9
 8006984:	08006999 	.word	0x08006999
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800698a:	f043 0301 	orr.w	r3, r3, #1
 800698e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3301      	adds	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	e01a      	b.n	80069ce <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800699a:	f043 0302 	orr.w	r3, r3, #2
 800699e:	64bb      	str	r3, [r7, #72]	; 0x48
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	e012      	b.n	80069ce <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80069a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069aa:	f043 0304 	orr.w	r3, r3, #4
 80069ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	e00a      	b.n	80069ce <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80069b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ba:	f043 0308 	orr.w	r3, r3, #8
 80069be:	64bb      	str	r3, [r7, #72]	; 0x48
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3301      	adds	r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	e002      	b.n	80069ce <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80069c8:	2300      	movs	r3, #0
 80069ca:	653b      	str	r3, [r7, #80]	; 0x50
 80069cc:	bf00      	nop
        }
      } while (v);
 80069ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1b0      	bne.n	8006936 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80069d4:	2300      	movs	r3, #0
 80069d6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80069e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069e4:	2b2f      	cmp	r3, #47	; 0x2f
 80069e6:	d912      	bls.n	8006a0e <_VPrintTarget+0x13a>
 80069e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069ec:	2b39      	cmp	r3, #57	; 0x39
 80069ee:	d80e      	bhi.n	8006a0e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3301      	adds	r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80069f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069f8:	4613      	mov	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	461a      	mov	r2, r3
 8006a02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a06:	4413      	add	r3, r2
 8006a08:	3b30      	subs	r3, #48	; 0x30
 8006a0a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006a0c:	e7e4      	b.n	80069d8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006a1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a20:	d11d      	bne.n	8006a5e <_VPrintTarget+0x18a>
        sFormat++;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3301      	adds	r3, #1
 8006a26:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006a30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a34:	2b2f      	cmp	r3, #47	; 0x2f
 8006a36:	d912      	bls.n	8006a5e <_VPrintTarget+0x18a>
 8006a38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a3c:	2b39      	cmp	r3, #57	; 0x39
 8006a3e:	d80e      	bhi.n	8006a5e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3301      	adds	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006a46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	461a      	mov	r2, r3
 8006a52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a56:	4413      	add	r3, r2
 8006a58:	3b30      	subs	r3, #48	; 0x30
 8006a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006a5c:	e7e4      	b.n	8006a28 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006a66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a6a:	2b6c      	cmp	r3, #108	; 0x6c
 8006a6c:	d003      	beq.n	8006a76 <_VPrintTarget+0x1a2>
 8006a6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a72:	2b68      	cmp	r3, #104	; 0x68
 8006a74:	d107      	bne.n	8006a86 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3301      	adds	r3, #1
 8006a82:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006a84:	e7ef      	b.n	8006a66 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006a86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a8a:	2b25      	cmp	r3, #37	; 0x25
 8006a8c:	f000 80d8 	beq.w	8006c40 <_VPrintTarget+0x36c>
 8006a90:	2b25      	cmp	r3, #37	; 0x25
 8006a92:	f2c0 80dc 	blt.w	8006c4e <_VPrintTarget+0x37a>
 8006a96:	2b78      	cmp	r3, #120	; 0x78
 8006a98:	f300 80d9 	bgt.w	8006c4e <_VPrintTarget+0x37a>
 8006a9c:	2b58      	cmp	r3, #88	; 0x58
 8006a9e:	f2c0 80d6 	blt.w	8006c4e <_VPrintTarget+0x37a>
 8006aa2:	3b58      	subs	r3, #88	; 0x58
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	f200 80d2 	bhi.w	8006c4e <_VPrintTarget+0x37a>
 8006aaa:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <_VPrintTarget+0x1dc>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006ba7 	.word	0x08006ba7
 8006ab4:	08006c4f 	.word	0x08006c4f
 8006ab8:	08006c4f 	.word	0x08006c4f
 8006abc:	08006c4f 	.word	0x08006c4f
 8006ac0:	08006c4f 	.word	0x08006c4f
 8006ac4:	08006c4f 	.word	0x08006c4f
 8006ac8:	08006c4f 	.word	0x08006c4f
 8006acc:	08006c4f 	.word	0x08006c4f
 8006ad0:	08006c4f 	.word	0x08006c4f
 8006ad4:	08006c4f 	.word	0x08006c4f
 8006ad8:	08006c4f 	.word	0x08006c4f
 8006adc:	08006b35 	.word	0x08006b35
 8006ae0:	08006b5b 	.word	0x08006b5b
 8006ae4:	08006c4f 	.word	0x08006c4f
 8006ae8:	08006c4f 	.word	0x08006c4f
 8006aec:	08006c4f 	.word	0x08006c4f
 8006af0:	08006c4f 	.word	0x08006c4f
 8006af4:	08006c4f 	.word	0x08006c4f
 8006af8:	08006c4f 	.word	0x08006c4f
 8006afc:	08006c4f 	.word	0x08006c4f
 8006b00:	08006c4f 	.word	0x08006c4f
 8006b04:	08006c4f 	.word	0x08006c4f
 8006b08:	08006c4f 	.word	0x08006c4f
 8006b0c:	08006c4f 	.word	0x08006c4f
 8006b10:	08006c1b 	.word	0x08006c1b
 8006b14:	08006c4f 	.word	0x08006c4f
 8006b18:	08006c4f 	.word	0x08006c4f
 8006b1c:	08006bd1 	.word	0x08006bd1
 8006b20:	08006c4f 	.word	0x08006c4f
 8006b24:	08006b81 	.word	0x08006b81
 8006b28:	08006c4f 	.word	0x08006c4f
 8006b2c:	08006c4f 	.word	0x08006c4f
 8006b30:	08006ba7 	.word	0x08006ba7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	1d19      	adds	r1, r3, #4
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	6011      	str	r1, [r2, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8006b48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006b4c:	f107 0310 	add.w	r3, r7, #16
 8006b50:	4611      	mov	r1, r2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fd1c 	bl	8006590 <_StoreChar>
        break;
 8006b58:	e07a      	b.n	8006c50 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	1d19      	adds	r1, r3, #4
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6011      	str	r1, [r2, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006b68:	f107 0010 	add.w	r0, r7, #16
 8006b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b6e:	9301      	str	r3, [sp, #4]
 8006b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b76:	220a      	movs	r2, #10
 8006b78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b7a:	f7ff fe1b 	bl	80067b4 <_PrintInt>
        break;
 8006b7e:	e067      	b.n	8006c50 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	1d19      	adds	r1, r3, #4
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6011      	str	r1, [r2, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006b8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b90:	f107 0010 	add.w	r0, r7, #16
 8006b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9e:	220a      	movs	r2, #10
 8006ba0:	f7ff fd72 	bl	8006688 <_PrintUnsigned>
        break;
 8006ba4:	e054      	b.n	8006c50 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	1d19      	adds	r1, r3, #4
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6011      	str	r1, [r2, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006bb4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006bb6:	f107 0010 	add.w	r0, r7, #16
 8006bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc4:	2210      	movs	r2, #16
 8006bc6:	f7ff fd5f 	bl	8006688 <_PrintUnsigned>
        break;
 8006bca:	e041      	b.n	8006c50 <_VPrintTarget+0x37c>
 8006bcc:	20013840 	.word	0x20013840
      case 's':
        s = va_arg(*pParamList, const char*);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	1d19      	adds	r1, r3, #4
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6011      	str	r1, [r2, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8006bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <_VPrintTarget+0x314>
          s = "(null)";
 8006be4:	4b4a      	ldr	r3, [pc, #296]	; (8006d10 <_VPrintTarget+0x43c>)
 8006be6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8006be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8006bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8006bf6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006bfe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006c02:	f107 0310 	add.w	r3, r7, #16
 8006c06:	4611      	mov	r1, r2
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff fcc1 	bl	8006590 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	2b7f      	cmp	r3, #127	; 0x7f
 8006c12:	d9e9      	bls.n	8006be8 <_VPrintTarget+0x314>
        break;
 8006c14:	e01c      	b.n	8006c50 <_VPrintTarget+0x37c>
            break;
 8006c16:	bf00      	nop
        break;
 8006c18:	e01a      	b.n	8006c50 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	1d19      	adds	r1, r3, #4
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6011      	str	r1, [r2, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006c28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c2a:	f107 0010 	add.w	r0, r7, #16
 8006c2e:	2300      	movs	r3, #0
 8006c30:	9301      	str	r3, [sp, #4]
 8006c32:	2308      	movs	r3, #8
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	2308      	movs	r3, #8
 8006c38:	2210      	movs	r2, #16
 8006c3a:	f7ff fd25 	bl	8006688 <_PrintUnsigned>
        break;
 8006c3e:	e007      	b.n	8006c50 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006c40:	f107 0310 	add.w	r3, r7, #16
 8006c44:	2125      	movs	r1, #37	; 0x25
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff fca2 	bl	8006590 <_StoreChar>
        break;
 8006c4c:	e000      	b.n	8006c50 <_VPrintTarget+0x37c>
      default:
        break;
 8006c4e:	bf00      	nop
      }
      sFormat++;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	e007      	b.n	8006c68 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006c58:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006c5c:	f107 0310 	add.w	r3, r7, #16
 8006c60:	4611      	mov	r1, r2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7ff fc94 	bl	8006590 <_StoreChar>
    }
  } while (*sFormat);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f47f ae4d 	bne.w	800690c <_VPrintTarget+0x38>
 8006c72:	e000      	b.n	8006c76 <_VPrintTarget+0x3a2>
      break;
 8006c74:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d041      	beq.n	8006d00 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006c7c:	6a3a      	ldr	r2, [r7, #32]
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c8c:	e00b      	b.n	8006ca6 <_VPrintTarget+0x3d2>
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c94:	1c59      	adds	r1, r3, #1
 8006c96:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006c98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c9c:	b2d2      	uxtb	r2, r2
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	09db      	lsrs	r3, r3, #7
 8006ca4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8006caa:	d8f0      	bhi.n	8006c8e <_VPrintTarget+0x3ba>
 8006cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cb4:	b2d2      	uxtb	r2, r2
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cba:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8006cc4:	e00b      	b.n	8006cde <_VPrintTarget+0x40a>
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ccc:	1c59      	adds	r1, r3, #1
 8006cce:	6379      	str	r1, [r7, #52]	; 0x34
 8006cd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	09db      	lsrs	r3, r3, #7
 8006cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ce2:	d8f0      	bhi.n	8006cc6 <_VPrintTarget+0x3f2>
 8006ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	637a      	str	r2, [r7, #52]	; 0x34
 8006cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	6979      	ldr	r1, [r7, #20]
 8006cf8:	221a      	movs	r2, #26
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fad8 	bl	80062b0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006d06:	bf00      	nop
 8006d08:	3758      	adds	r7, #88	; 0x58
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	08008fb4 	.word	0x08008fb4

08006d14 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af02      	add	r7, sp, #8
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006d22:	2300      	movs	r3, #0
 8006d24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d28:	4917      	ldr	r1, [pc, #92]	; (8006d88 <SEGGER_SYSVIEW_Init+0x74>)
 8006d2a:	4818      	ldr	r0, [pc, #96]	; (8006d8c <SEGGER_SYSVIEW_Init+0x78>)
 8006d2c:	f7ff f8c6 	bl	8005ebc <SEGGER_RTT_AllocUpBuffer>
 8006d30:	4603      	mov	r3, r0
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	4b16      	ldr	r3, [pc, #88]	; (8006d90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d36:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006d38:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d3a:	785a      	ldrb	r2, [r3, #1]
 8006d3c:	4b14      	ldr	r3, [pc, #80]	; (8006d90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d3e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006d40:	4b13      	ldr	r3, [pc, #76]	; (8006d90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d42:	7e1b      	ldrb	r3, [r3, #24]
 8006d44:	4618      	mov	r0, r3
 8006d46:	2300      	movs	r3, #0
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	2308      	movs	r3, #8
 8006d4c:	4a11      	ldr	r2, [pc, #68]	; (8006d94 <SEGGER_SYSVIEW_Init+0x80>)
 8006d4e:	490f      	ldr	r1, [pc, #60]	; (8006d8c <SEGGER_SYSVIEW_Init+0x78>)
 8006d50:	f7ff f938 	bl	8005fc4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006d54:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006d5a:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <SEGGER_SYSVIEW_Init+0x84>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a0c      	ldr	r2, [pc, #48]	; (8006d90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d60:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006d62:	4a0b      	ldr	r2, [pc, #44]	; (8006d90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006d68:	4a09      	ldr	r2, [pc, #36]	; (8006d90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006d6e:	4a08      	ldr	r2, [pc, #32]	; (8006d90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006d74:	4a06      	ldr	r2, [pc, #24]	; (8006d90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006d7a:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006d80:	bf00      	nop
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20013408 	.word	0x20013408
 8006d8c:	08008fbc 	.word	0x08008fbc
 8006d90:	20013810 	.word	0x20013810
 8006d94:	20013808 	.word	0x20013808
 8006d98:	e0001004 	.word	0xe0001004

08006d9c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006da4:	4a04      	ldr	r2, [pc, #16]	; (8006db8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6113      	str	r3, [r2, #16]
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	20013810 	.word	0x20013810

08006dbc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc8:	f04f 0120 	mov.w	r1, #32
 8006dcc:	f381 8811 	msr	BASEPRI, r1
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	4808      	ldr	r0, [pc, #32]	; (8006df4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006dd4:	f7ff f97b 	bl	80060ce <_PreparePacket>
 8006dd8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	68b8      	ldr	r0, [r7, #8]
 8006de0:	f7ff fa66 	bl	80062b0 <_SendPacket>
  RECORD_END();
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f383 8811 	msr	BASEPRI, r3
}
 8006dea:	bf00      	nop
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20013840 	.word	0x20013840

08006df8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e02:	f3ef 8311 	mrs	r3, BASEPRI
 8006e06:	f04f 0120 	mov.w	r1, #32
 8006e0a:	f381 8811 	msr	BASEPRI, r1
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	4816      	ldr	r0, [pc, #88]	; (8006e6c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006e12:	f7ff f95c 	bl	80060ce <_PreparePacket>
 8006e16:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	61fb      	str	r3, [r7, #28]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	61bb      	str	r3, [r7, #24]
 8006e24:	e00b      	b.n	8006e3e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	1c59      	adds	r1, r3, #1
 8006e2e:	61f9      	str	r1, [r7, #28]
 8006e30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	09db      	lsrs	r3, r3, #7
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b7f      	cmp	r3, #127	; 0x7f
 8006e42:	d8f0      	bhi.n	8006e26 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	61fa      	str	r2, [r7, #28]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	701a      	strb	r2, [r3, #0]
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	68f9      	ldr	r1, [r7, #12]
 8006e58:	6938      	ldr	r0, [r7, #16]
 8006e5a:	f7ff fa29 	bl	80062b0 <_SendPacket>
  RECORD_END();
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f383 8811 	msr	BASEPRI, r3
}
 8006e64:	bf00      	nop
 8006e66:	3720      	adds	r7, #32
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20013840 	.word	0x20013840

08006e70 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08c      	sub	sp, #48	; 0x30
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e80:	f04f 0120 	mov.w	r1, #32
 8006e84:	f381 8811 	msr	BASEPRI, r1
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	4825      	ldr	r0, [pc, #148]	; (8006f20 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006e8c:	f7ff f91f 	bl	80060ce <_PreparePacket>
 8006e90:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e9e:	e00b      	b.n	8006eb8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	1c59      	adds	r1, r3, #1
 8006ea8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006eaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	09db      	lsrs	r3, r3, #7
 8006eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	2b7f      	cmp	r3, #127	; 0x7f
 8006ebc:	d8f0      	bhi.n	8006ea0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	623b      	str	r3, [r7, #32]
 8006ed6:	e00b      	b.n	8006ef0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	1c59      	adds	r1, r3, #1
 8006ee0:	6279      	str	r1, [r7, #36]	; 0x24
 8006ee2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	09db      	lsrs	r3, r3, #7
 8006eee:	623b      	str	r3, [r7, #32]
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ef4:	d8f0      	bhi.n	8006ed8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	627a      	str	r2, [r7, #36]	; 0x24
 8006efc:	6a3a      	ldr	r2, [r7, #32]
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	701a      	strb	r2, [r3, #0]
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	6979      	ldr	r1, [r7, #20]
 8006f0a:	69b8      	ldr	r0, [r7, #24]
 8006f0c:	f7ff f9d0 	bl	80062b0 <_SendPacket>
  RECORD_END();
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	f383 8811 	msr	BASEPRI, r3
}
 8006f16:	bf00      	nop
 8006f18:	3730      	adds	r7, #48	; 0x30
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20013840 	.word	0x20013840

08006f24 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08e      	sub	sp, #56	; 0x38
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f32:	f3ef 8311 	mrs	r3, BASEPRI
 8006f36:	f04f 0120 	mov.w	r1, #32
 8006f3a:	f381 8811 	msr	BASEPRI, r1
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	4832      	ldr	r0, [pc, #200]	; (800700c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006f42:	f7ff f8c4 	bl	80060ce <_PreparePacket>
 8006f46:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	633b      	str	r3, [r7, #48]	; 0x30
 8006f54:	e00b      	b.n	8006f6e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5c:	1c59      	adds	r1, r3, #1
 8006f5e:	6379      	str	r1, [r7, #52]	; 0x34
 8006f60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f64:	b2d2      	uxtb	r2, r2
 8006f66:	701a      	strb	r2, [r3, #0]
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	09db      	lsrs	r3, r3, #7
 8006f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	2b7f      	cmp	r3, #127	; 0x7f
 8006f72:	d8f0      	bhi.n	8006f56 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	637a      	str	r2, [r7, #52]	; 0x34
 8006f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f7c:	b2d2      	uxtb	r2, r2
 8006f7e:	701a      	strb	r2, [r3, #0]
 8006f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f8c:	e00b      	b.n	8006fa6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	1c59      	adds	r1, r3, #1
 8006f96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	09db      	lsrs	r3, r3, #7
 8006fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8006faa:	d8f0      	bhi.n	8006f8e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	701a      	strb	r2, [r3, #0]
 8006fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	623b      	str	r3, [r7, #32]
 8006fc4:	e00b      	b.n	8006fde <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	1c59      	adds	r1, r3, #1
 8006fce:	6279      	str	r1, [r7, #36]	; 0x24
 8006fd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	09db      	lsrs	r3, r3, #7
 8006fdc:	623b      	str	r3, [r7, #32]
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe2:	d8f0      	bhi.n	8006fc6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	627a      	str	r2, [r7, #36]	; 0x24
 8006fea:	6a3a      	ldr	r2, [r7, #32]
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	701a      	strb	r2, [r3, #0]
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	6979      	ldr	r1, [r7, #20]
 8006ff8:	69b8      	ldr	r0, [r7, #24]
 8006ffa:	f7ff f959 	bl	80062b0 <_SendPacket>
  RECORD_END();
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f383 8811 	msr	BASEPRI, r3
}
 8007004:	bf00      	nop
 8007006:	3738      	adds	r7, #56	; 0x38
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20013840 	.word	0x20013840

08007010 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007010:	b580      	push	{r7, lr}
 8007012:	b090      	sub	sp, #64	; 0x40
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800701e:	f3ef 8311 	mrs	r3, BASEPRI
 8007022:	f04f 0120 	mov.w	r1, #32
 8007026:	f381 8811 	msr	BASEPRI, r1
 800702a:	61fb      	str	r3, [r7, #28]
 800702c:	4840      	ldr	r0, [pc, #256]	; (8007130 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800702e:	f7ff f84e 	bl	80060ce <_PreparePacket>
 8007032:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007040:	e00b      	b.n	800705a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	b2da      	uxtb	r2, r3
 8007046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007048:	1c59      	adds	r1, r3, #1
 800704a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800704c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	09db      	lsrs	r3, r3, #7
 8007058:	63bb      	str	r3, [r7, #56]	; 0x38
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	2b7f      	cmp	r3, #127	; 0x7f
 800705e:	d8f0      	bhi.n	8007042 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007068:	b2d2      	uxtb	r2, r2
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800706e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	637b      	str	r3, [r7, #52]	; 0x34
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	633b      	str	r3, [r7, #48]	; 0x30
 8007078:	e00b      	b.n	8007092 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	b2da      	uxtb	r2, r3
 800707e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007080:	1c59      	adds	r1, r3, #1
 8007082:	6379      	str	r1, [r7, #52]	; 0x34
 8007084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	09db      	lsrs	r3, r3, #7
 8007090:	633b      	str	r3, [r7, #48]	; 0x30
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	2b7f      	cmp	r3, #127	; 0x7f
 8007096:	d8f0      	bhi.n	800707a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	637a      	str	r2, [r7, #52]	; 0x34
 800709e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	701a      	strb	r2, [r3, #0]
 80070a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80070b0:	e00b      	b.n	80070ca <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	1c59      	adds	r1, r3, #1
 80070ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80070bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c6:	09db      	lsrs	r3, r3, #7
 80070c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	2b7f      	cmp	r3, #127	; 0x7f
 80070ce:	d8f0      	bhi.n	80070b2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070d8:	b2d2      	uxtb	r2, r2
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
 80070e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070e6:	623b      	str	r3, [r7, #32]
 80070e8:	e00b      	b.n	8007102 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	1c59      	adds	r1, r3, #1
 80070f2:	6279      	str	r1, [r7, #36]	; 0x24
 80070f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	701a      	strb	r2, [r3, #0]
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	09db      	lsrs	r3, r3, #7
 8007100:	623b      	str	r3, [r7, #32]
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	2b7f      	cmp	r3, #127	; 0x7f
 8007106:	d8f0      	bhi.n	80070ea <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	627a      	str	r2, [r7, #36]	; 0x24
 800710e:	6a3a      	ldr	r2, [r7, #32]
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	701a      	strb	r2, [r3, #0]
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	6979      	ldr	r1, [r7, #20]
 800711c:	69b8      	ldr	r0, [r7, #24]
 800711e:	f7ff f8c7 	bl	80062b0 <_SendPacket>
  RECORD_END();
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	f383 8811 	msr	BASEPRI, r3
}
 8007128:	bf00      	nop
 800712a:	3740      	adds	r7, #64	; 0x40
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	20013840 	.word	0x20013840

08007134 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007134:	b580      	push	{r7, lr}
 8007136:	b08c      	sub	sp, #48	; 0x30
 8007138:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800713a:	4b59      	ldr	r3, [pc, #356]	; (80072a0 <SEGGER_SYSVIEW_Start+0x16c>)
 800713c:	2201      	movs	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007140:	f3ef 8311 	mrs	r3, BASEPRI
 8007144:	f04f 0120 	mov.w	r1, #32
 8007148:	f381 8811 	msr	BASEPRI, r1
 800714c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800714e:	4b54      	ldr	r3, [pc, #336]	; (80072a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	220a      	movs	r2, #10
 8007154:	4953      	ldr	r1, [pc, #332]	; (80072a4 <SEGGER_SYSVIEW_Start+0x170>)
 8007156:	4618      	mov	r0, r3
 8007158:	f7f9 f83a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8007162:	f7fe fb07 	bl	8005774 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007166:	200a      	movs	r0, #10
 8007168:	f7ff fe28 	bl	8006dbc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800716c:	f3ef 8311 	mrs	r3, BASEPRI
 8007170:	f04f 0120 	mov.w	r1, #32
 8007174:	f381 8811 	msr	BASEPRI, r1
 8007178:	60bb      	str	r3, [r7, #8]
 800717a:	484b      	ldr	r0, [pc, #300]	; (80072a8 <SEGGER_SYSVIEW_Start+0x174>)
 800717c:	f7fe ffa7 	bl	80060ce <_PreparePacket>
 8007180:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800718a:	4b45      	ldr	r3, [pc, #276]	; (80072a0 <SEGGER_SYSVIEW_Start+0x16c>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007190:	e00b      	b.n	80071aa <SEGGER_SYSVIEW_Start+0x76>
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	b2da      	uxtb	r2, r3
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	1c59      	adds	r1, r3, #1
 800719a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800719c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071a0:	b2d2      	uxtb	r2, r2
 80071a2:	701a      	strb	r2, [r3, #0]
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	09db      	lsrs	r3, r3, #7
 80071a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ac:	2b7f      	cmp	r3, #127	; 0x7f
 80071ae:	d8f0      	bhi.n	8007192 <SEGGER_SYSVIEW_Start+0x5e>
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	701a      	strb	r2, [r3, #0]
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
 80071c4:	4b36      	ldr	r3, [pc, #216]	; (80072a0 <SEGGER_SYSVIEW_Start+0x16c>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	623b      	str	r3, [r7, #32]
 80071ca:	e00b      	b.n	80071e4 <SEGGER_SYSVIEW_Start+0xb0>
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	1c59      	adds	r1, r3, #1
 80071d4:	6279      	str	r1, [r7, #36]	; 0x24
 80071d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	09db      	lsrs	r3, r3, #7
 80071e2:	623b      	str	r3, [r7, #32]
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	2b7f      	cmp	r3, #127	; 0x7f
 80071e8:	d8f0      	bhi.n	80071cc <SEGGER_SYSVIEW_Start+0x98>
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	627a      	str	r2, [r7, #36]	; 0x24
 80071f0:	6a3a      	ldr	r2, [r7, #32]
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	61fb      	str	r3, [r7, #28]
 80071fe:	4b28      	ldr	r3, [pc, #160]	; (80072a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	e00b      	b.n	800721e <SEGGER_SYSVIEW_Start+0xea>
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	b2da      	uxtb	r2, r3
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	1c59      	adds	r1, r3, #1
 800720e:	61f9      	str	r1, [r7, #28]
 8007210:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007214:	b2d2      	uxtb	r2, r2
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	09db      	lsrs	r3, r3, #7
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b7f      	cmp	r3, #127	; 0x7f
 8007222:	d8f0      	bhi.n	8007206 <SEGGER_SYSVIEW_Start+0xd2>
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	61fa      	str	r2, [r7, #28]
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	701a      	strb	r2, [r3, #0]
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	2300      	movs	r3, #0
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	e00b      	b.n	8007256 <SEGGER_SYSVIEW_Start+0x122>
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	b2da      	uxtb	r2, r3
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	1c59      	adds	r1, r3, #1
 8007246:	6179      	str	r1, [r7, #20]
 8007248:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800724c:	b2d2      	uxtb	r2, r2
 800724e:	701a      	strb	r2, [r3, #0]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	09db      	lsrs	r3, r3, #7
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b7f      	cmp	r3, #127	; 0x7f
 800725a:	d8f0      	bhi.n	800723e <SEGGER_SYSVIEW_Start+0x10a>
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	617a      	str	r2, [r7, #20]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	b2d2      	uxtb	r2, r2
 8007266:	701a      	strb	r2, [r3, #0]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800726c:	2218      	movs	r2, #24
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff f81d 	bl	80062b0 <_SendPacket>
      RECORD_END();
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800727c:	4b08      	ldr	r3, [pc, #32]	; (80072a0 <SEGGER_SYSVIEW_Start+0x16c>)
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007284:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800728a:	f000 f9eb 	bl	8007664 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800728e:	f000 f9b1 	bl	80075f4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007292:	f000 fc8d 	bl	8007bb0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007296:	bf00      	nop
 8007298:	3730      	adds	r7, #48	; 0x30
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20013810 	.word	0x20013810
 80072a4:	08008ffc 	.word	0x08008ffc
 80072a8:	20013840 	.word	0x20013840

080072ac <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80072b2:	f3ef 8311 	mrs	r3, BASEPRI
 80072b6:	f04f 0120 	mov.w	r1, #32
 80072ba:	f381 8811 	msr	BASEPRI, r1
 80072be:	607b      	str	r3, [r7, #4]
 80072c0:	480b      	ldr	r0, [pc, #44]	; (80072f0 <SEGGER_SYSVIEW_Stop+0x44>)
 80072c2:	f7fe ff04 	bl	80060ce <_PreparePacket>
 80072c6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80072c8:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d007      	beq.n	80072e0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80072d0:	220b      	movs	r2, #11
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6838      	ldr	r0, [r7, #0]
 80072d6:	f7fe ffeb 	bl	80062b0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80072da:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80072dc:	2200      	movs	r2, #0
 80072de:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f383 8811 	msr	BASEPRI, r3
}
 80072e6:	bf00      	nop
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20013840 	.word	0x20013840
 80072f4:	20013810 	.word	0x20013810

080072f8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08c      	sub	sp, #48	; 0x30
 80072fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80072fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007302:	f04f 0120 	mov.w	r1, #32
 8007306:	f381 8811 	msr	BASEPRI, r1
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	4845      	ldr	r0, [pc, #276]	; (8007424 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800730e:	f7fe fede 	bl	80060ce <_PreparePacket>
 8007312:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800731c:	4b42      	ldr	r3, [pc, #264]	; (8007428 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	62bb      	str	r3, [r7, #40]	; 0x28
 8007322:	e00b      	b.n	800733c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	b2da      	uxtb	r2, r3
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732a:	1c59      	adds	r1, r3, #1
 800732c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800732e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	09db      	lsrs	r3, r3, #7
 800733a:	62bb      	str	r3, [r7, #40]	; 0x28
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	2b7f      	cmp	r3, #127	; 0x7f
 8007340:	d8f0      	bhi.n	8007324 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
 8007356:	4b34      	ldr	r3, [pc, #208]	; (8007428 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	623b      	str	r3, [r7, #32]
 800735c:	e00b      	b.n	8007376 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	b2da      	uxtb	r2, r3
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	1c59      	adds	r1, r3, #1
 8007366:	6279      	str	r1, [r7, #36]	; 0x24
 8007368:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800736c:	b2d2      	uxtb	r2, r2
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	09db      	lsrs	r3, r3, #7
 8007374:	623b      	str	r3, [r7, #32]
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	2b7f      	cmp	r3, #127	; 0x7f
 800737a:	d8f0      	bhi.n	800735e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	627a      	str	r2, [r7, #36]	; 0x24
 8007382:	6a3a      	ldr	r2, [r7, #32]
 8007384:	b2d2      	uxtb	r2, r2
 8007386:	701a      	strb	r2, [r3, #0]
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	61fb      	str	r3, [r7, #28]
 8007390:	4b25      	ldr	r3, [pc, #148]	; (8007428 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	e00b      	b.n	80073b0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	b2da      	uxtb	r2, r3
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	1c59      	adds	r1, r3, #1
 80073a0:	61f9      	str	r1, [r7, #28]
 80073a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	701a      	strb	r2, [r3, #0]
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	09db      	lsrs	r3, r3, #7
 80073ae:	61bb      	str	r3, [r7, #24]
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	2b7f      	cmp	r3, #127	; 0x7f
 80073b4:	d8f0      	bhi.n	8007398 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	61fa      	str	r2, [r7, #28]
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	2300      	movs	r3, #0
 80073cc:	613b      	str	r3, [r7, #16]
 80073ce:	e00b      	b.n	80073e8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	1c59      	adds	r1, r3, #1
 80073d8:	6179      	str	r1, [r7, #20]
 80073da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	09db      	lsrs	r3, r3, #7
 80073e6:	613b      	str	r3, [r7, #16]
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	2b7f      	cmp	r3, #127	; 0x7f
 80073ec:	d8f0      	bhi.n	80073d0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	617a      	str	r2, [r7, #20]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80073fe:	2218      	movs	r2, #24
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	68b8      	ldr	r0, [r7, #8]
 8007404:	f7fe ff54 	bl	80062b0 <_SendPacket>
  RECORD_END();
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800740e:	4b06      	ldr	r3, [pc, #24]	; (8007428 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007416:	4b04      	ldr	r3, [pc, #16]	; (8007428 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	4798      	blx	r3
  }
}
 800741c:	bf00      	nop
 800741e:	3730      	adds	r7, #48	; 0x30
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20013840 	.word	0x20013840
 8007428:	20013810 	.word	0x20013810

0800742c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800742c:	b580      	push	{r7, lr}
 800742e:	b092      	sub	sp, #72	; 0x48
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007434:	f3ef 8311 	mrs	r3, BASEPRI
 8007438:	f04f 0120 	mov.w	r1, #32
 800743c:	f381 8811 	msr	BASEPRI, r1
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	486a      	ldr	r0, [pc, #424]	; (80075ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007444:	f7fe fe43 	bl	80060ce <_PreparePacket>
 8007448:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	647b      	str	r3, [r7, #68]	; 0x44
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4b66      	ldr	r3, [pc, #408]	; (80075f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	643b      	str	r3, [r7, #64]	; 0x40
 800745e:	e00b      	b.n	8007478 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007462:	b2da      	uxtb	r2, r3
 8007464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007466:	1c59      	adds	r1, r3, #1
 8007468:	6479      	str	r1, [r7, #68]	; 0x44
 800746a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]
 8007472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007474:	09db      	lsrs	r3, r3, #7
 8007476:	643b      	str	r3, [r7, #64]	; 0x40
 8007478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800747a:	2b7f      	cmp	r3, #127	; 0x7f
 800747c:	d8f0      	bhi.n	8007460 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800747e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	647a      	str	r2, [r7, #68]	; 0x44
 8007484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]
 800748a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800748c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	63bb      	str	r3, [r7, #56]	; 0x38
 8007498:	e00b      	b.n	80074b2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	b2da      	uxtb	r2, r3
 800749e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a0:	1c59      	adds	r1, r3, #1
 80074a2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80074a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074a8:	b2d2      	uxtb	r2, r2
 80074aa:	701a      	strb	r2, [r3, #0]
 80074ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ae:	09db      	lsrs	r3, r3, #7
 80074b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	2b7f      	cmp	r3, #127	; 0x7f
 80074b6:	d8f0      	bhi.n	800749a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80074b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80074be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	4619      	mov	r1, r3
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f7fe fdc3 	bl	800605c <_EncodeStr>
 80074d6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80074d8:	2209      	movs	r2, #9
 80074da:	68f9      	ldr	r1, [r7, #12]
 80074dc:	6938      	ldr	r0, [r7, #16]
 80074de:	f7fe fee7 	bl	80062b0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4b40      	ldr	r3, [pc, #256]	; (80075f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	633b      	str	r3, [r7, #48]	; 0x30
 80074f6:	e00b      	b.n	8007510 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074fe:	1c59      	adds	r1, r3, #1
 8007500:	6379      	str	r1, [r7, #52]	; 0x34
 8007502:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	09db      	lsrs	r3, r3, #7
 800750e:	633b      	str	r3, [r7, #48]	; 0x30
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	2b7f      	cmp	r3, #127	; 0x7f
 8007514:	d8f0      	bhi.n	80074f8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	637a      	str	r2, [r7, #52]	; 0x34
 800751c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007524:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007530:	e00b      	b.n	800754a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	b2da      	uxtb	r2, r3
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	1c59      	adds	r1, r3, #1
 800753a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800753c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007540:	b2d2      	uxtb	r2, r2
 8007542:	701a      	strb	r2, [r3, #0]
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	09db      	lsrs	r3, r3, #7
 8007548:	62bb      	str	r3, [r7, #40]	; 0x28
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	2b7f      	cmp	r3, #127	; 0x7f
 800754e:	d8f0      	bhi.n	8007532 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007558:	b2d2      	uxtb	r2, r2
 800755a:	701a      	strb	r2, [r3, #0]
 800755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	623b      	str	r3, [r7, #32]
 800756a:	e00b      	b.n	8007584 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	b2da      	uxtb	r2, r3
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	1c59      	adds	r1, r3, #1
 8007574:	6279      	str	r1, [r7, #36]	; 0x24
 8007576:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800757a:	b2d2      	uxtb	r2, r2
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	09db      	lsrs	r3, r3, #7
 8007582:	623b      	str	r3, [r7, #32]
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	2b7f      	cmp	r3, #127	; 0x7f
 8007588:	d8f0      	bhi.n	800756c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	627a      	str	r2, [r7, #36]	; 0x24
 8007590:	6a3a      	ldr	r2, [r7, #32]
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	61fb      	str	r3, [r7, #28]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	61bb      	str	r3, [r7, #24]
 80075a4:	e00b      	b.n	80075be <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	1c59      	adds	r1, r3, #1
 80075ae:	61f9      	str	r1, [r7, #28]
 80075b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	701a      	strb	r2, [r3, #0]
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	09db      	lsrs	r3, r3, #7
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	2b7f      	cmp	r3, #127	; 0x7f
 80075c2:	d8f0      	bhi.n	80075a6 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	61fa      	str	r2, [r7, #28]
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	701a      	strb	r2, [r3, #0]
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80075d4:	2215      	movs	r2, #21
 80075d6:	68f9      	ldr	r1, [r7, #12]
 80075d8:	6938      	ldr	r0, [r7, #16]
 80075da:	f7fe fe69 	bl	80062b0 <_SendPacket>
  RECORD_END();
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f383 8811 	msr	BASEPRI, r3
}
 80075e4:	bf00      	nop
 80075e6:	3748      	adds	r7, #72	; 0x48
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20013840 	.word	0x20013840
 80075f0:	20013810 	.word	0x20013810

080075f4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80075f8:	4b07      	ldr	r3, [pc, #28]	; (8007618 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007600:	4b05      	ldr	r3, [pc, #20]	; (8007618 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800760a:	4b03      	ldr	r3, [pc, #12]	; (8007618 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	4798      	blx	r3
  }
}
 8007612:	bf00      	nop
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20013810 	.word	0x20013810

0800761c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007624:	f3ef 8311 	mrs	r3, BASEPRI
 8007628:	f04f 0120 	mov.w	r1, #32
 800762c:	f381 8811 	msr	BASEPRI, r1
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	480b      	ldr	r0, [pc, #44]	; (8007660 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007634:	f7fe fd4b 	bl	80060ce <_PreparePacket>
 8007638:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800763a:	2280      	movs	r2, #128	; 0x80
 800763c:	6879      	ldr	r1, [r7, #4]
 800763e:	6938      	ldr	r0, [r7, #16]
 8007640:	f7fe fd0c 	bl	800605c <_EncodeStr>
 8007644:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007646:	220e      	movs	r2, #14
 8007648:	68f9      	ldr	r1, [r7, #12]
 800764a:	6938      	ldr	r0, [r7, #16]
 800764c:	f7fe fe30 	bl	80062b0 <_SendPacket>
  RECORD_END();
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f383 8811 	msr	BASEPRI, r3
}
 8007656:	bf00      	nop
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20013840 	.word	0x20013840

08007664 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007664:	b590      	push	{r4, r7, lr}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800766a:	4b15      	ldr	r3, [pc, #84]	; (80076c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d01a      	beq.n	80076a8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007672:	4b13      	ldr	r3, [pc, #76]	; (80076c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d015      	beq.n	80076a8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800767c:	4b10      	ldr	r3, [pc, #64]	; (80076c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4798      	blx	r3
 8007684:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007688:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800768a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800768e:	f04f 0200 	mov.w	r2, #0
 8007692:	f04f 0300 	mov.w	r3, #0
 8007696:	000a      	movs	r2, r1
 8007698:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800769a:	4613      	mov	r3, r2
 800769c:	461a      	mov	r2, r3
 800769e:	4621      	mov	r1, r4
 80076a0:	200d      	movs	r0, #13
 80076a2:	f7ff fbe5 	bl	8006e70 <SEGGER_SYSVIEW_RecordU32x2>
 80076a6:	e006      	b.n	80076b6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80076a8:	4b06      	ldr	r3, [pc, #24]	; (80076c4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4619      	mov	r1, r3
 80076ae:	200c      	movs	r0, #12
 80076b0:	f7ff fba2 	bl	8006df8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd90      	pop	{r4, r7, pc}
 80076be:	bf00      	nop
 80076c0:	20013810 	.word	0x20013810
 80076c4:	e0001004 	.word	0xe0001004

080076c8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80076ce:	f3ef 8311 	mrs	r3, BASEPRI
 80076d2:	f04f 0120 	mov.w	r1, #32
 80076d6:	f381 8811 	msr	BASEPRI, r1
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	4819      	ldr	r0, [pc, #100]	; (8007744 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80076de:	f7fe fcf6 	bl	80060ce <_PreparePacket>
 80076e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80076e8:	4b17      	ldr	r3, [pc, #92]	; (8007748 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	613b      	str	r3, [r7, #16]
 80076fa:	e00b      	b.n	8007714 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	1c59      	adds	r1, r3, #1
 8007704:	6179      	str	r1, [r7, #20]
 8007706:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	701a      	strb	r2, [r3, #0]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	09db      	lsrs	r3, r3, #7
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b7f      	cmp	r3, #127	; 0x7f
 8007718:	d8f0      	bhi.n	80076fc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	617a      	str	r2, [r7, #20]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800772a:	2202      	movs	r2, #2
 800772c:	6879      	ldr	r1, [r7, #4]
 800772e:	68b8      	ldr	r0, [r7, #8]
 8007730:	f7fe fdbe 	bl	80062b0 <_SendPacket>
  RECORD_END();
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f383 8811 	msr	BASEPRI, r3
}
 800773a:	bf00      	nop
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20013840 	.word	0x20013840
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007752:	f3ef 8311 	mrs	r3, BASEPRI
 8007756:	f04f 0120 	mov.w	r1, #32
 800775a:	f381 8811 	msr	BASEPRI, r1
 800775e:	607b      	str	r3, [r7, #4]
 8007760:	4807      	ldr	r0, [pc, #28]	; (8007780 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007762:	f7fe fcb4 	bl	80060ce <_PreparePacket>
 8007766:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007768:	2203      	movs	r2, #3
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6838      	ldr	r0, [r7, #0]
 800776e:	f7fe fd9f 	bl	80062b0 <_SendPacket>
  RECORD_END();
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f383 8811 	msr	BASEPRI, r3
}
 8007778:	bf00      	nop
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	20013840 	.word	0x20013840

08007784 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800778a:	f3ef 8311 	mrs	r3, BASEPRI
 800778e:	f04f 0120 	mov.w	r1, #32
 8007792:	f381 8811 	msr	BASEPRI, r1
 8007796:	607b      	str	r3, [r7, #4]
 8007798:	4807      	ldr	r0, [pc, #28]	; (80077b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800779a:	f7fe fc98 	bl	80060ce <_PreparePacket>
 800779e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80077a0:	2212      	movs	r2, #18
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6838      	ldr	r0, [r7, #0]
 80077a6:	f7fe fd83 	bl	80062b0 <_SendPacket>
  RECORD_END();
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f383 8811 	msr	BASEPRI, r3
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20013840 	.word	0x20013840

080077bc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80077c2:	f3ef 8311 	mrs	r3, BASEPRI
 80077c6:	f04f 0120 	mov.w	r1, #32
 80077ca:	f381 8811 	msr	BASEPRI, r1
 80077ce:	607b      	str	r3, [r7, #4]
 80077d0:	4807      	ldr	r0, [pc, #28]	; (80077f0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80077d2:	f7fe fc7c 	bl	80060ce <_PreparePacket>
 80077d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80077d8:	2211      	movs	r2, #17
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6838      	ldr	r0, [r7, #0]
 80077de:	f7fe fd67 	bl	80062b0 <_SendPacket>
  RECORD_END();
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f383 8811 	msr	BASEPRI, r3
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20013840 	.word	0x20013840

080077f4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80077fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007800:	f04f 0120 	mov.w	r1, #32
 8007804:	f381 8811 	msr	BASEPRI, r1
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	4819      	ldr	r0, [pc, #100]	; (8007870 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800780c:	f7fe fc5f 	bl	80060ce <_PreparePacket>
 8007810:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007816:	4b17      	ldr	r3, [pc, #92]	; (8007874 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	61fb      	str	r3, [r7, #28]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	e00b      	b.n	8007842 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	b2da      	uxtb	r2, r3
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	1c59      	adds	r1, r3, #1
 8007832:	61f9      	str	r1, [r7, #28]
 8007834:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007838:	b2d2      	uxtb	r2, r2
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	09db      	lsrs	r3, r3, #7
 8007840:	61bb      	str	r3, [r7, #24]
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b7f      	cmp	r3, #127	; 0x7f
 8007846:	d8f0      	bhi.n	800782a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	61fa      	str	r2, [r7, #28]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	b2d2      	uxtb	r2, r2
 8007852:	701a      	strb	r2, [r3, #0]
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007858:	2208      	movs	r2, #8
 800785a:	68f9      	ldr	r1, [r7, #12]
 800785c:	6938      	ldr	r0, [r7, #16]
 800785e:	f7fe fd27 	bl	80062b0 <_SendPacket>
  RECORD_END();
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f383 8811 	msr	BASEPRI, r3
}
 8007868:	bf00      	nop
 800786a:	3720      	adds	r7, #32
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	20013840 	.word	0x20013840
 8007874:	20013810 	.word	0x20013810

08007878 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007880:	f3ef 8311 	mrs	r3, BASEPRI
 8007884:	f04f 0120 	mov.w	r1, #32
 8007888:	f381 8811 	msr	BASEPRI, r1
 800788c:	617b      	str	r3, [r7, #20]
 800788e:	4819      	ldr	r0, [pc, #100]	; (80078f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007890:	f7fe fc1d 	bl	80060ce <_PreparePacket>
 8007894:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800789a:	4b17      	ldr	r3, [pc, #92]	; (80078f8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	61bb      	str	r3, [r7, #24]
 80078ac:	e00b      	b.n	80078c6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	1c59      	adds	r1, r3, #1
 80078b6:	61f9      	str	r1, [r7, #28]
 80078b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078bc:	b2d2      	uxtb	r2, r2
 80078be:	701a      	strb	r2, [r3, #0]
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	09db      	lsrs	r3, r3, #7
 80078c4:	61bb      	str	r3, [r7, #24]
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b7f      	cmp	r3, #127	; 0x7f
 80078ca:	d8f0      	bhi.n	80078ae <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	61fa      	str	r2, [r7, #28]
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	b2d2      	uxtb	r2, r2
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80078dc:	2204      	movs	r2, #4
 80078de:	68f9      	ldr	r1, [r7, #12]
 80078e0:	6938      	ldr	r0, [r7, #16]
 80078e2:	f7fe fce5 	bl	80062b0 <_SendPacket>
  RECORD_END();
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f383 8811 	msr	BASEPRI, r3
}
 80078ec:	bf00      	nop
 80078ee:	3720      	adds	r7, #32
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20013840 	.word	0x20013840
 80078f8:	20013810 	.word	0x20013810

080078fc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b088      	sub	sp, #32
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007904:	f3ef 8311 	mrs	r3, BASEPRI
 8007908:	f04f 0120 	mov.w	r1, #32
 800790c:	f381 8811 	msr	BASEPRI, r1
 8007910:	617b      	str	r3, [r7, #20]
 8007912:	4819      	ldr	r0, [pc, #100]	; (8007978 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007914:	f7fe fbdb 	bl	80060ce <_PreparePacket>
 8007918:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800791e:	4b17      	ldr	r3, [pc, #92]	; (800797c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	61fb      	str	r3, [r7, #28]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	61bb      	str	r3, [r7, #24]
 8007930:	e00b      	b.n	800794a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	b2da      	uxtb	r2, r3
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	1c59      	adds	r1, r3, #1
 800793a:	61f9      	str	r1, [r7, #28]
 800793c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007940:	b2d2      	uxtb	r2, r2
 8007942:	701a      	strb	r2, [r3, #0]
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	09db      	lsrs	r3, r3, #7
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	2b7f      	cmp	r3, #127	; 0x7f
 800794e:	d8f0      	bhi.n	8007932 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	1c5a      	adds	r2, r3, #1
 8007954:	61fa      	str	r2, [r7, #28]
 8007956:	69ba      	ldr	r2, [r7, #24]
 8007958:	b2d2      	uxtb	r2, r2
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007960:	2206      	movs	r2, #6
 8007962:	68f9      	ldr	r1, [r7, #12]
 8007964:	6938      	ldr	r0, [r7, #16]
 8007966:	f7fe fca3 	bl	80062b0 <_SendPacket>
  RECORD_END();
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f383 8811 	msr	BASEPRI, r3
}
 8007970:	bf00      	nop
 8007972:	3720      	adds	r7, #32
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20013840 	.word	0x20013840
 800797c:	20013810 	.word	0x20013810

08007980 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b08a      	sub	sp, #40	; 0x28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800798a:	f3ef 8311 	mrs	r3, BASEPRI
 800798e:	f04f 0120 	mov.w	r1, #32
 8007992:	f381 8811 	msr	BASEPRI, r1
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	4827      	ldr	r0, [pc, #156]	; (8007a38 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800799a:	f7fe fb98 	bl	80060ce <_PreparePacket>
 800799e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80079a4:	4b25      	ldr	r3, [pc, #148]	; (8007a3c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	627b      	str	r3, [r7, #36]	; 0x24
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	623b      	str	r3, [r7, #32]
 80079b6:	e00b      	b.n	80079d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	1c59      	adds	r1, r3, #1
 80079c0:	6279      	str	r1, [r7, #36]	; 0x24
 80079c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	09db      	lsrs	r3, r3, #7
 80079ce:	623b      	str	r3, [r7, #32]
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	2b7f      	cmp	r3, #127	; 0x7f
 80079d4:	d8f0      	bhi.n	80079b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	627a      	str	r2, [r7, #36]	; 0x24
 80079dc:	6a3a      	ldr	r2, [r7, #32]
 80079de:	b2d2      	uxtb	r2, r2
 80079e0:	701a      	strb	r2, [r3, #0]
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	61fb      	str	r3, [r7, #28]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	61bb      	str	r3, [r7, #24]
 80079ee:	e00b      	b.n	8007a08 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	1c59      	adds	r1, r3, #1
 80079f8:	61f9      	str	r1, [r7, #28]
 80079fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	09db      	lsrs	r3, r3, #7
 8007a06:	61bb      	str	r3, [r7, #24]
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a0c:	d8f0      	bhi.n	80079f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	61fa      	str	r2, [r7, #28]
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	701a      	strb	r2, [r3, #0]
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007a1e:	2207      	movs	r2, #7
 8007a20:	68f9      	ldr	r1, [r7, #12]
 8007a22:	6938      	ldr	r0, [r7, #16]
 8007a24:	f7fe fc44 	bl	80062b0 <_SendPacket>
  RECORD_END();
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f383 8811 	msr	BASEPRI, r3
}
 8007a2e:	bf00      	nop
 8007a30:	3728      	adds	r7, #40	; 0x28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20013840 	.word	0x20013840
 8007a3c:	20013810 	.word	0x20013810

08007a40 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007a48:	4b04      	ldr	r3, [pc, #16]	; (8007a5c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	1ad3      	subs	r3, r2, r3
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	20013810 	.word	0x20013810

08007a60 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b08c      	sub	sp, #48	; 0x30
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007a6a:	4b40      	ldr	r3, [pc, #256]	; (8007b6c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d077      	beq.n	8007b62 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007a72:	4b3e      	ldr	r3, [pc, #248]	; (8007b6c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007a78:	2300      	movs	r3, #0
 8007a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a7c:	e008      	b.n	8007a90 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d007      	beq.n	8007a9a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a90:	79fb      	ldrb	r3, [r7, #7]
 8007a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d3f2      	bcc.n	8007a7e <SEGGER_SYSVIEW_SendModule+0x1e>
 8007a98:	e000      	b.n	8007a9c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007a9a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d055      	beq.n	8007b4e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007aa2:	f3ef 8311 	mrs	r3, BASEPRI
 8007aa6:	f04f 0120 	mov.w	r1, #32
 8007aaa:	f381 8811 	msr	BASEPRI, r1
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	482f      	ldr	r0, [pc, #188]	; (8007b70 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007ab2:	f7fe fb0c 	bl	80060ce <_PreparePacket>
 8007ab6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
 8007ac2:	623b      	str	r3, [r7, #32]
 8007ac4:	e00b      	b.n	8007ade <SEGGER_SYSVIEW_SendModule+0x7e>
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	1c59      	adds	r1, r3, #1
 8007ace:	6279      	str	r1, [r7, #36]	; 0x24
 8007ad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	09db      	lsrs	r3, r3, #7
 8007adc:	623b      	str	r3, [r7, #32]
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ae2:	d8f0      	bhi.n	8007ac6 <SEGGER_SYSVIEW_SendModule+0x66>
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	627a      	str	r2, [r7, #36]	; 0x24
 8007aea:	6a3a      	ldr	r2, [r7, #32]
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	61fb      	str	r3, [r7, #28]
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	e00b      	b.n	8007b18 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	1c59      	adds	r1, r3, #1
 8007b08:	61f9      	str	r1, [r7, #28]
 8007b0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b0e:	b2d2      	uxtb	r2, r2
 8007b10:	701a      	strb	r2, [r3, #0]
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	09db      	lsrs	r3, r3, #7
 8007b16:	61bb      	str	r3, [r7, #24]
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8007b1c:	d8f0      	bhi.n	8007b00 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	61fa      	str	r2, [r7, #28]
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	b2d2      	uxtb	r2, r2
 8007b28:	701a      	strb	r2, [r3, #0]
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2280      	movs	r2, #128	; 0x80
 8007b34:	4619      	mov	r1, r3
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f7fe fa90 	bl	800605c <_EncodeStr>
 8007b3c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007b3e:	2216      	movs	r2, #22
 8007b40:	68f9      	ldr	r1, [r7, #12]
 8007b42:	6938      	ldr	r0, [r7, #16]
 8007b44:	f7fe fbb4 	bl	80062b0 <_SendPacket>
      RECORD_END();
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d006      	beq.n	8007b62 <SEGGER_SYSVIEW_SendModule+0x102>
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	4798      	blx	r3
    }
  }
}
 8007b62:	bf00      	nop
 8007b64:	3730      	adds	r7, #48	; 0x30
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20013838 	.word	0x20013838
 8007b70:	20013840 	.word	0x20013840

08007b74 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007b7a:	4b0c      	ldr	r3, [pc, #48]	; (8007bac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00f      	beq.n	8007ba2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007b82:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f2      	bne.n	8007b88 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007ba2:	bf00      	nop
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20013838 	.word	0x20013838

08007bb0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8007bba:	f04f 0120 	mov.w	r1, #32
 8007bbe:	f381 8811 	msr	BASEPRI, r1
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	4817      	ldr	r0, [pc, #92]	; (8007c24 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007bc6:	f7fe fa82 	bl	80060ce <_PreparePacket>
 8007bca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	613b      	str	r3, [r7, #16]
 8007bda:	e00b      	b.n	8007bf4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	1c59      	adds	r1, r3, #1
 8007be4:	6179      	str	r1, [r7, #20]
 8007be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	701a      	strb	r2, [r3, #0]
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	09db      	lsrs	r3, r3, #7
 8007bf2:	613b      	str	r3, [r7, #16]
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8007bf8:	d8f0      	bhi.n	8007bdc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	617a      	str	r2, [r7, #20]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	b2d2      	uxtb	r2, r2
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007c0a:	221b      	movs	r2, #27
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	68b8      	ldr	r0, [r7, #8]
 8007c10:	f7fe fb4e 	bl	80062b0 <_SendPacket>
  RECORD_END();
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f383 8811 	msr	BASEPRI, r3
}
 8007c1a:	bf00      	nop
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20013840 	.word	0x20013840
 8007c28:	2001383c 	.word	0x2001383c

08007c2c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007c2c:	b40f      	push	{r0, r1, r2, r3}
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007c34:	f107 0314 	add.w	r3, r7, #20
 8007c38:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007c3a:	1d3b      	adds	r3, r7, #4
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	2100      	movs	r1, #0
 8007c40:	6938      	ldr	r0, [r7, #16]
 8007c42:	f7fe fe47 	bl	80068d4 <_VPrintTarget>
  va_end(ParamList);
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c50:	b004      	add	sp, #16
 8007c52:	4770      	bx	lr

08007c54 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08a      	sub	sp, #40	; 0x28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007c5c:	f3ef 8311 	mrs	r3, BASEPRI
 8007c60:	f04f 0120 	mov.w	r1, #32
 8007c64:	f381 8811 	msr	BASEPRI, r1
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	4827      	ldr	r0, [pc, #156]	; (8007d08 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007c6c:	f7fe fa2f 	bl	80060ce <_PreparePacket>
 8007c70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007c72:	2280      	movs	r2, #128	; 0x80
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	6938      	ldr	r0, [r7, #16]
 8007c78:	f7fe f9f0 	bl	800605c <_EncodeStr>
 8007c7c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	627b      	str	r3, [r7, #36]	; 0x24
 8007c82:	2301      	movs	r3, #1
 8007c84:	623b      	str	r3, [r7, #32]
 8007c86:	e00b      	b.n	8007ca0 <SEGGER_SYSVIEW_Warn+0x4c>
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	1c59      	adds	r1, r3, #1
 8007c90:	6279      	str	r1, [r7, #36]	; 0x24
 8007c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c96:	b2d2      	uxtb	r2, r2
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	09db      	lsrs	r3, r3, #7
 8007c9e:	623b      	str	r3, [r7, #32]
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ca4:	d8f0      	bhi.n	8007c88 <SEGGER_SYSVIEW_Warn+0x34>
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	627a      	str	r2, [r7, #36]	; 0x24
 8007cac:	6a3a      	ldr	r2, [r7, #32]
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	701a      	strb	r2, [r3, #0]
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	61fb      	str	r3, [r7, #28]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	61bb      	str	r3, [r7, #24]
 8007cbe:	e00b      	b.n	8007cd8 <SEGGER_SYSVIEW_Warn+0x84>
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	1c59      	adds	r1, r3, #1
 8007cc8:	61f9      	str	r1, [r7, #28]
 8007cca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	09db      	lsrs	r3, r3, #7
 8007cd6:	61bb      	str	r3, [r7, #24]
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	2b7f      	cmp	r3, #127	; 0x7f
 8007cdc:	d8f0      	bhi.n	8007cc0 <SEGGER_SYSVIEW_Warn+0x6c>
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	61fa      	str	r2, [r7, #28]
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	b2d2      	uxtb	r2, r2
 8007ce8:	701a      	strb	r2, [r3, #0]
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007cee:	221a      	movs	r2, #26
 8007cf0:	68f9      	ldr	r1, [r7, #12]
 8007cf2:	6938      	ldr	r0, [r7, #16]
 8007cf4:	f7fe fadc 	bl	80062b0 <_SendPacket>
  RECORD_END();
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f383 8811 	msr	BASEPRI, r3
}
 8007cfe:	bf00      	nop
 8007d00:	3728      	adds	r7, #40	; 0x28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20013840 	.word	0x20013840

08007d0c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007d10:	4b13      	ldr	r3, [pc, #76]	; (8007d60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007d12:	7e1b      	ldrb	r3, [r3, #24]
 8007d14:	4619      	mov	r1, r3
 8007d16:	4a13      	ldr	r2, [pc, #76]	; (8007d64 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007d18:	460b      	mov	r3, r1
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	440b      	add	r3, r1
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	4413      	add	r3, r2
 8007d22:	336c      	adds	r3, #108	; 0x6c
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	4b0e      	ldr	r3, [pc, #56]	; (8007d60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007d28:	7e1b      	ldrb	r3, [r3, #24]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	490d      	ldr	r1, [pc, #52]	; (8007d64 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007d2e:	4603      	mov	r3, r0
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	4403      	add	r3, r0
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	440b      	add	r3, r1
 8007d38:	3370      	adds	r3, #112	; 0x70
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d00b      	beq.n	8007d58 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007d40:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007d42:	789b      	ldrb	r3, [r3, #2]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d107      	bne.n	8007d58 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007d4e:	f7fe f9cb 	bl	80060e8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007d52:	4b03      	ldr	r3, [pc, #12]	; (8007d60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007d58:	4b01      	ldr	r3, [pc, #4]	; (8007d60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	20013810 	.word	0x20013810
 8007d64:	20012f50 	.word	0x20012f50

08007d68 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
 8007d74:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	6879      	ldr	r1, [r7, #4]
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	f7fe f878 	bl	8005e70 <SEGGER_RTT_Write>
  return len;
 8007d80:	683b      	ldr	r3, [r7, #0]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <__errno>:
 8007d8c:	4b01      	ldr	r3, [pc, #4]	; (8007d94 <__errno+0x8>)
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	2000001c 	.word	0x2000001c

08007d98 <__libc_init_array>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	4d0d      	ldr	r5, [pc, #52]	; (8007dd0 <__libc_init_array+0x38>)
 8007d9c:	4c0d      	ldr	r4, [pc, #52]	; (8007dd4 <__libc_init_array+0x3c>)
 8007d9e:	1b64      	subs	r4, r4, r5
 8007da0:	10a4      	asrs	r4, r4, #2
 8007da2:	2600      	movs	r6, #0
 8007da4:	42a6      	cmp	r6, r4
 8007da6:	d109      	bne.n	8007dbc <__libc_init_array+0x24>
 8007da8:	4d0b      	ldr	r5, [pc, #44]	; (8007dd8 <__libc_init_array+0x40>)
 8007daa:	4c0c      	ldr	r4, [pc, #48]	; (8007ddc <__libc_init_array+0x44>)
 8007dac:	f001 f830 	bl	8008e10 <_init>
 8007db0:	1b64      	subs	r4, r4, r5
 8007db2:	10a4      	asrs	r4, r4, #2
 8007db4:	2600      	movs	r6, #0
 8007db6:	42a6      	cmp	r6, r4
 8007db8:	d105      	bne.n	8007dc6 <__libc_init_array+0x2e>
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc0:	4798      	blx	r3
 8007dc2:	3601      	adds	r6, #1
 8007dc4:	e7ee      	b.n	8007da4 <__libc_init_array+0xc>
 8007dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dca:	4798      	blx	r3
 8007dcc:	3601      	adds	r6, #1
 8007dce:	e7f2      	b.n	8007db6 <__libc_init_array+0x1e>
 8007dd0:	080090b8 	.word	0x080090b8
 8007dd4:	080090b8 	.word	0x080090b8
 8007dd8:	080090b8 	.word	0x080090b8
 8007ddc:	080090bc 	.word	0x080090bc

08007de0 <memcmp>:
 8007de0:	b510      	push	{r4, lr}
 8007de2:	3901      	subs	r1, #1
 8007de4:	4402      	add	r2, r0
 8007de6:	4290      	cmp	r0, r2
 8007de8:	d101      	bne.n	8007dee <memcmp+0xe>
 8007dea:	2000      	movs	r0, #0
 8007dec:	e005      	b.n	8007dfa <memcmp+0x1a>
 8007dee:	7803      	ldrb	r3, [r0, #0]
 8007df0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007df4:	42a3      	cmp	r3, r4
 8007df6:	d001      	beq.n	8007dfc <memcmp+0x1c>
 8007df8:	1b18      	subs	r0, r3, r4
 8007dfa:	bd10      	pop	{r4, pc}
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	e7f2      	b.n	8007de6 <memcmp+0x6>

08007e00 <memcpy>:
 8007e00:	440a      	add	r2, r1
 8007e02:	4291      	cmp	r1, r2
 8007e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e08:	d100      	bne.n	8007e0c <memcpy+0xc>
 8007e0a:	4770      	bx	lr
 8007e0c:	b510      	push	{r4, lr}
 8007e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e16:	4291      	cmp	r1, r2
 8007e18:	d1f9      	bne.n	8007e0e <memcpy+0xe>
 8007e1a:	bd10      	pop	{r4, pc}

08007e1c <memset>:
 8007e1c:	4402      	add	r2, r0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d100      	bne.n	8007e26 <memset+0xa>
 8007e24:	4770      	bx	lr
 8007e26:	f803 1b01 	strb.w	r1, [r3], #1
 8007e2a:	e7f9      	b.n	8007e20 <memset+0x4>

08007e2c <iprintf>:
 8007e2c:	b40f      	push	{r0, r1, r2, r3}
 8007e2e:	4b0a      	ldr	r3, [pc, #40]	; (8007e58 <iprintf+0x2c>)
 8007e30:	b513      	push	{r0, r1, r4, lr}
 8007e32:	681c      	ldr	r4, [r3, #0]
 8007e34:	b124      	cbz	r4, 8007e40 <iprintf+0x14>
 8007e36:	69a3      	ldr	r3, [r4, #24]
 8007e38:	b913      	cbnz	r3, 8007e40 <iprintf+0x14>
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fa5e 	bl	80082fc <__sinit>
 8007e40:	ab05      	add	r3, sp, #20
 8007e42:	9a04      	ldr	r2, [sp, #16]
 8007e44:	68a1      	ldr	r1, [r4, #8]
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f000 fc67 	bl	800871c <_vfiprintf_r>
 8007e4e:	b002      	add	sp, #8
 8007e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e54:	b004      	add	sp, #16
 8007e56:	4770      	bx	lr
 8007e58:	2000001c 	.word	0x2000001c

08007e5c <_puts_r>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	460e      	mov	r6, r1
 8007e60:	4605      	mov	r5, r0
 8007e62:	b118      	cbz	r0, 8007e6c <_puts_r+0x10>
 8007e64:	6983      	ldr	r3, [r0, #24]
 8007e66:	b90b      	cbnz	r3, 8007e6c <_puts_r+0x10>
 8007e68:	f000 fa48 	bl	80082fc <__sinit>
 8007e6c:	69ab      	ldr	r3, [r5, #24]
 8007e6e:	68ac      	ldr	r4, [r5, #8]
 8007e70:	b913      	cbnz	r3, 8007e78 <_puts_r+0x1c>
 8007e72:	4628      	mov	r0, r5
 8007e74:	f000 fa42 	bl	80082fc <__sinit>
 8007e78:	4b2c      	ldr	r3, [pc, #176]	; (8007f2c <_puts_r+0xd0>)
 8007e7a:	429c      	cmp	r4, r3
 8007e7c:	d120      	bne.n	8007ec0 <_puts_r+0x64>
 8007e7e:	686c      	ldr	r4, [r5, #4]
 8007e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e82:	07db      	lsls	r3, r3, #31
 8007e84:	d405      	bmi.n	8007e92 <_puts_r+0x36>
 8007e86:	89a3      	ldrh	r3, [r4, #12]
 8007e88:	0598      	lsls	r0, r3, #22
 8007e8a:	d402      	bmi.n	8007e92 <_puts_r+0x36>
 8007e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e8e:	f000 fad3 	bl	8008438 <__retarget_lock_acquire_recursive>
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	0719      	lsls	r1, r3, #28
 8007e96:	d51d      	bpl.n	8007ed4 <_puts_r+0x78>
 8007e98:	6923      	ldr	r3, [r4, #16]
 8007e9a:	b1db      	cbz	r3, 8007ed4 <_puts_r+0x78>
 8007e9c:	3e01      	subs	r6, #1
 8007e9e:	68a3      	ldr	r3, [r4, #8]
 8007ea0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	60a3      	str	r3, [r4, #8]
 8007ea8:	bb39      	cbnz	r1, 8007efa <_puts_r+0x9e>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da38      	bge.n	8007f20 <_puts_r+0xc4>
 8007eae:	4622      	mov	r2, r4
 8007eb0:	210a      	movs	r1, #10
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	f000 f848 	bl	8007f48 <__swbuf_r>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d011      	beq.n	8007ee0 <_puts_r+0x84>
 8007ebc:	250a      	movs	r5, #10
 8007ebe:	e011      	b.n	8007ee4 <_puts_r+0x88>
 8007ec0:	4b1b      	ldr	r3, [pc, #108]	; (8007f30 <_puts_r+0xd4>)
 8007ec2:	429c      	cmp	r4, r3
 8007ec4:	d101      	bne.n	8007eca <_puts_r+0x6e>
 8007ec6:	68ac      	ldr	r4, [r5, #8]
 8007ec8:	e7da      	b.n	8007e80 <_puts_r+0x24>
 8007eca:	4b1a      	ldr	r3, [pc, #104]	; (8007f34 <_puts_r+0xd8>)
 8007ecc:	429c      	cmp	r4, r3
 8007ece:	bf08      	it	eq
 8007ed0:	68ec      	ldreq	r4, [r5, #12]
 8007ed2:	e7d5      	b.n	8007e80 <_puts_r+0x24>
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 f888 	bl	8007fec <__swsetup_r>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	d0dd      	beq.n	8007e9c <_puts_r+0x40>
 8007ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ee6:	07da      	lsls	r2, r3, #31
 8007ee8:	d405      	bmi.n	8007ef6 <_puts_r+0x9a>
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	059b      	lsls	r3, r3, #22
 8007eee:	d402      	bmi.n	8007ef6 <_puts_r+0x9a>
 8007ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ef2:	f000 faa2 	bl	800843a <__retarget_lock_release_recursive>
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	bd70      	pop	{r4, r5, r6, pc}
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	da04      	bge.n	8007f08 <_puts_r+0xac>
 8007efe:	69a2      	ldr	r2, [r4, #24]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	dc06      	bgt.n	8007f12 <_puts_r+0xb6>
 8007f04:	290a      	cmp	r1, #10
 8007f06:	d004      	beq.n	8007f12 <_puts_r+0xb6>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	6022      	str	r2, [r4, #0]
 8007f0e:	7019      	strb	r1, [r3, #0]
 8007f10:	e7c5      	b.n	8007e9e <_puts_r+0x42>
 8007f12:	4622      	mov	r2, r4
 8007f14:	4628      	mov	r0, r5
 8007f16:	f000 f817 	bl	8007f48 <__swbuf_r>
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	d1bf      	bne.n	8007e9e <_puts_r+0x42>
 8007f1e:	e7df      	b.n	8007ee0 <_puts_r+0x84>
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	250a      	movs	r5, #10
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	6022      	str	r2, [r4, #0]
 8007f28:	701d      	strb	r5, [r3, #0]
 8007f2a:	e7db      	b.n	8007ee4 <_puts_r+0x88>
 8007f2c:	0800903c 	.word	0x0800903c
 8007f30:	0800905c 	.word	0x0800905c
 8007f34:	0800901c 	.word	0x0800901c

08007f38 <puts>:
 8007f38:	4b02      	ldr	r3, [pc, #8]	; (8007f44 <puts+0xc>)
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	f7ff bf8d 	b.w	8007e5c <_puts_r>
 8007f42:	bf00      	nop
 8007f44:	2000001c 	.word	0x2000001c

08007f48 <__swbuf_r>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	460e      	mov	r6, r1
 8007f4c:	4614      	mov	r4, r2
 8007f4e:	4605      	mov	r5, r0
 8007f50:	b118      	cbz	r0, 8007f5a <__swbuf_r+0x12>
 8007f52:	6983      	ldr	r3, [r0, #24]
 8007f54:	b90b      	cbnz	r3, 8007f5a <__swbuf_r+0x12>
 8007f56:	f000 f9d1 	bl	80082fc <__sinit>
 8007f5a:	4b21      	ldr	r3, [pc, #132]	; (8007fe0 <__swbuf_r+0x98>)
 8007f5c:	429c      	cmp	r4, r3
 8007f5e:	d12b      	bne.n	8007fb8 <__swbuf_r+0x70>
 8007f60:	686c      	ldr	r4, [r5, #4]
 8007f62:	69a3      	ldr	r3, [r4, #24]
 8007f64:	60a3      	str	r3, [r4, #8]
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	071a      	lsls	r2, r3, #28
 8007f6a:	d52f      	bpl.n	8007fcc <__swbuf_r+0x84>
 8007f6c:	6923      	ldr	r3, [r4, #16]
 8007f6e:	b36b      	cbz	r3, 8007fcc <__swbuf_r+0x84>
 8007f70:	6923      	ldr	r3, [r4, #16]
 8007f72:	6820      	ldr	r0, [r4, #0]
 8007f74:	1ac0      	subs	r0, r0, r3
 8007f76:	6963      	ldr	r3, [r4, #20]
 8007f78:	b2f6      	uxtb	r6, r6
 8007f7a:	4283      	cmp	r3, r0
 8007f7c:	4637      	mov	r7, r6
 8007f7e:	dc04      	bgt.n	8007f8a <__swbuf_r+0x42>
 8007f80:	4621      	mov	r1, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 f926 	bl	80081d4 <_fflush_r>
 8007f88:	bb30      	cbnz	r0, 8007fd8 <__swbuf_r+0x90>
 8007f8a:	68a3      	ldr	r3, [r4, #8]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	60a3      	str	r3, [r4, #8]
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	1c5a      	adds	r2, r3, #1
 8007f94:	6022      	str	r2, [r4, #0]
 8007f96:	701e      	strb	r6, [r3, #0]
 8007f98:	6963      	ldr	r3, [r4, #20]
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	4283      	cmp	r3, r0
 8007f9e:	d004      	beq.n	8007faa <__swbuf_r+0x62>
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	07db      	lsls	r3, r3, #31
 8007fa4:	d506      	bpl.n	8007fb4 <__swbuf_r+0x6c>
 8007fa6:	2e0a      	cmp	r6, #10
 8007fa8:	d104      	bne.n	8007fb4 <__swbuf_r+0x6c>
 8007faa:	4621      	mov	r1, r4
 8007fac:	4628      	mov	r0, r5
 8007fae:	f000 f911 	bl	80081d4 <_fflush_r>
 8007fb2:	b988      	cbnz	r0, 8007fd8 <__swbuf_r+0x90>
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb8:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <__swbuf_r+0x9c>)
 8007fba:	429c      	cmp	r4, r3
 8007fbc:	d101      	bne.n	8007fc2 <__swbuf_r+0x7a>
 8007fbe:	68ac      	ldr	r4, [r5, #8]
 8007fc0:	e7cf      	b.n	8007f62 <__swbuf_r+0x1a>
 8007fc2:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <__swbuf_r+0xa0>)
 8007fc4:	429c      	cmp	r4, r3
 8007fc6:	bf08      	it	eq
 8007fc8:	68ec      	ldreq	r4, [r5, #12]
 8007fca:	e7ca      	b.n	8007f62 <__swbuf_r+0x1a>
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 f80c 	bl	8007fec <__swsetup_r>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d0cb      	beq.n	8007f70 <__swbuf_r+0x28>
 8007fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8007fdc:	e7ea      	b.n	8007fb4 <__swbuf_r+0x6c>
 8007fde:	bf00      	nop
 8007fe0:	0800903c 	.word	0x0800903c
 8007fe4:	0800905c 	.word	0x0800905c
 8007fe8:	0800901c 	.word	0x0800901c

08007fec <__swsetup_r>:
 8007fec:	4b32      	ldr	r3, [pc, #200]	; (80080b8 <__swsetup_r+0xcc>)
 8007fee:	b570      	push	{r4, r5, r6, lr}
 8007ff0:	681d      	ldr	r5, [r3, #0]
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	b125      	cbz	r5, 8008002 <__swsetup_r+0x16>
 8007ff8:	69ab      	ldr	r3, [r5, #24]
 8007ffa:	b913      	cbnz	r3, 8008002 <__swsetup_r+0x16>
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f000 f97d 	bl	80082fc <__sinit>
 8008002:	4b2e      	ldr	r3, [pc, #184]	; (80080bc <__swsetup_r+0xd0>)
 8008004:	429c      	cmp	r4, r3
 8008006:	d10f      	bne.n	8008028 <__swsetup_r+0x3c>
 8008008:	686c      	ldr	r4, [r5, #4]
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008010:	0719      	lsls	r1, r3, #28
 8008012:	d42c      	bmi.n	800806e <__swsetup_r+0x82>
 8008014:	06dd      	lsls	r5, r3, #27
 8008016:	d411      	bmi.n	800803c <__swsetup_r+0x50>
 8008018:	2309      	movs	r3, #9
 800801a:	6033      	str	r3, [r6, #0]
 800801c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008020:	81a3      	strh	r3, [r4, #12]
 8008022:	f04f 30ff 	mov.w	r0, #4294967295
 8008026:	e03e      	b.n	80080a6 <__swsetup_r+0xba>
 8008028:	4b25      	ldr	r3, [pc, #148]	; (80080c0 <__swsetup_r+0xd4>)
 800802a:	429c      	cmp	r4, r3
 800802c:	d101      	bne.n	8008032 <__swsetup_r+0x46>
 800802e:	68ac      	ldr	r4, [r5, #8]
 8008030:	e7eb      	b.n	800800a <__swsetup_r+0x1e>
 8008032:	4b24      	ldr	r3, [pc, #144]	; (80080c4 <__swsetup_r+0xd8>)
 8008034:	429c      	cmp	r4, r3
 8008036:	bf08      	it	eq
 8008038:	68ec      	ldreq	r4, [r5, #12]
 800803a:	e7e6      	b.n	800800a <__swsetup_r+0x1e>
 800803c:	0758      	lsls	r0, r3, #29
 800803e:	d512      	bpl.n	8008066 <__swsetup_r+0x7a>
 8008040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008042:	b141      	cbz	r1, 8008056 <__swsetup_r+0x6a>
 8008044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008048:	4299      	cmp	r1, r3
 800804a:	d002      	beq.n	8008052 <__swsetup_r+0x66>
 800804c:	4630      	mov	r0, r6
 800804e:	f000 fa5b 	bl	8008508 <_free_r>
 8008052:	2300      	movs	r3, #0
 8008054:	6363      	str	r3, [r4, #52]	; 0x34
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	2300      	movs	r3, #0
 8008060:	6063      	str	r3, [r4, #4]
 8008062:	6923      	ldr	r3, [r4, #16]
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	f043 0308 	orr.w	r3, r3, #8
 800806c:	81a3      	strh	r3, [r4, #12]
 800806e:	6923      	ldr	r3, [r4, #16]
 8008070:	b94b      	cbnz	r3, 8008086 <__swsetup_r+0x9a>
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800807c:	d003      	beq.n	8008086 <__swsetup_r+0x9a>
 800807e:	4621      	mov	r1, r4
 8008080:	4630      	mov	r0, r6
 8008082:	f000 fa01 	bl	8008488 <__smakebuf_r>
 8008086:	89a0      	ldrh	r0, [r4, #12]
 8008088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800808c:	f010 0301 	ands.w	r3, r0, #1
 8008090:	d00a      	beq.n	80080a8 <__swsetup_r+0xbc>
 8008092:	2300      	movs	r3, #0
 8008094:	60a3      	str	r3, [r4, #8]
 8008096:	6963      	ldr	r3, [r4, #20]
 8008098:	425b      	negs	r3, r3
 800809a:	61a3      	str	r3, [r4, #24]
 800809c:	6923      	ldr	r3, [r4, #16]
 800809e:	b943      	cbnz	r3, 80080b2 <__swsetup_r+0xc6>
 80080a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080a4:	d1ba      	bne.n	800801c <__swsetup_r+0x30>
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
 80080a8:	0781      	lsls	r1, r0, #30
 80080aa:	bf58      	it	pl
 80080ac:	6963      	ldrpl	r3, [r4, #20]
 80080ae:	60a3      	str	r3, [r4, #8]
 80080b0:	e7f4      	b.n	800809c <__swsetup_r+0xb0>
 80080b2:	2000      	movs	r0, #0
 80080b4:	e7f7      	b.n	80080a6 <__swsetup_r+0xba>
 80080b6:	bf00      	nop
 80080b8:	2000001c 	.word	0x2000001c
 80080bc:	0800903c 	.word	0x0800903c
 80080c0:	0800905c 	.word	0x0800905c
 80080c4:	0800901c 	.word	0x0800901c

080080c8 <__sflush_r>:
 80080c8:	898a      	ldrh	r2, [r1, #12]
 80080ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ce:	4605      	mov	r5, r0
 80080d0:	0710      	lsls	r0, r2, #28
 80080d2:	460c      	mov	r4, r1
 80080d4:	d458      	bmi.n	8008188 <__sflush_r+0xc0>
 80080d6:	684b      	ldr	r3, [r1, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	dc05      	bgt.n	80080e8 <__sflush_r+0x20>
 80080dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080de:	2b00      	cmp	r3, #0
 80080e0:	dc02      	bgt.n	80080e8 <__sflush_r+0x20>
 80080e2:	2000      	movs	r0, #0
 80080e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080ea:	2e00      	cmp	r6, #0
 80080ec:	d0f9      	beq.n	80080e2 <__sflush_r+0x1a>
 80080ee:	2300      	movs	r3, #0
 80080f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080f4:	682f      	ldr	r7, [r5, #0]
 80080f6:	602b      	str	r3, [r5, #0]
 80080f8:	d032      	beq.n	8008160 <__sflush_r+0x98>
 80080fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	075a      	lsls	r2, r3, #29
 8008100:	d505      	bpl.n	800810e <__sflush_r+0x46>
 8008102:	6863      	ldr	r3, [r4, #4]
 8008104:	1ac0      	subs	r0, r0, r3
 8008106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008108:	b10b      	cbz	r3, 800810e <__sflush_r+0x46>
 800810a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800810c:	1ac0      	subs	r0, r0, r3
 800810e:	2300      	movs	r3, #0
 8008110:	4602      	mov	r2, r0
 8008112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008114:	6a21      	ldr	r1, [r4, #32]
 8008116:	4628      	mov	r0, r5
 8008118:	47b0      	blx	r6
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	d106      	bne.n	800812e <__sflush_r+0x66>
 8008120:	6829      	ldr	r1, [r5, #0]
 8008122:	291d      	cmp	r1, #29
 8008124:	d82c      	bhi.n	8008180 <__sflush_r+0xb8>
 8008126:	4a2a      	ldr	r2, [pc, #168]	; (80081d0 <__sflush_r+0x108>)
 8008128:	40ca      	lsrs	r2, r1
 800812a:	07d6      	lsls	r6, r2, #31
 800812c:	d528      	bpl.n	8008180 <__sflush_r+0xb8>
 800812e:	2200      	movs	r2, #0
 8008130:	6062      	str	r2, [r4, #4]
 8008132:	04d9      	lsls	r1, r3, #19
 8008134:	6922      	ldr	r2, [r4, #16]
 8008136:	6022      	str	r2, [r4, #0]
 8008138:	d504      	bpl.n	8008144 <__sflush_r+0x7c>
 800813a:	1c42      	adds	r2, r0, #1
 800813c:	d101      	bne.n	8008142 <__sflush_r+0x7a>
 800813e:	682b      	ldr	r3, [r5, #0]
 8008140:	b903      	cbnz	r3, 8008144 <__sflush_r+0x7c>
 8008142:	6560      	str	r0, [r4, #84]	; 0x54
 8008144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008146:	602f      	str	r7, [r5, #0]
 8008148:	2900      	cmp	r1, #0
 800814a:	d0ca      	beq.n	80080e2 <__sflush_r+0x1a>
 800814c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008150:	4299      	cmp	r1, r3
 8008152:	d002      	beq.n	800815a <__sflush_r+0x92>
 8008154:	4628      	mov	r0, r5
 8008156:	f000 f9d7 	bl	8008508 <_free_r>
 800815a:	2000      	movs	r0, #0
 800815c:	6360      	str	r0, [r4, #52]	; 0x34
 800815e:	e7c1      	b.n	80080e4 <__sflush_r+0x1c>
 8008160:	6a21      	ldr	r1, [r4, #32]
 8008162:	2301      	movs	r3, #1
 8008164:	4628      	mov	r0, r5
 8008166:	47b0      	blx	r6
 8008168:	1c41      	adds	r1, r0, #1
 800816a:	d1c7      	bne.n	80080fc <__sflush_r+0x34>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d0c4      	beq.n	80080fc <__sflush_r+0x34>
 8008172:	2b1d      	cmp	r3, #29
 8008174:	d001      	beq.n	800817a <__sflush_r+0xb2>
 8008176:	2b16      	cmp	r3, #22
 8008178:	d101      	bne.n	800817e <__sflush_r+0xb6>
 800817a:	602f      	str	r7, [r5, #0]
 800817c:	e7b1      	b.n	80080e2 <__sflush_r+0x1a>
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	e7ad      	b.n	80080e4 <__sflush_r+0x1c>
 8008188:	690f      	ldr	r7, [r1, #16]
 800818a:	2f00      	cmp	r7, #0
 800818c:	d0a9      	beq.n	80080e2 <__sflush_r+0x1a>
 800818e:	0793      	lsls	r3, r2, #30
 8008190:	680e      	ldr	r6, [r1, #0]
 8008192:	bf08      	it	eq
 8008194:	694b      	ldreq	r3, [r1, #20]
 8008196:	600f      	str	r7, [r1, #0]
 8008198:	bf18      	it	ne
 800819a:	2300      	movne	r3, #0
 800819c:	eba6 0807 	sub.w	r8, r6, r7
 80081a0:	608b      	str	r3, [r1, #8]
 80081a2:	f1b8 0f00 	cmp.w	r8, #0
 80081a6:	dd9c      	ble.n	80080e2 <__sflush_r+0x1a>
 80081a8:	6a21      	ldr	r1, [r4, #32]
 80081aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081ac:	4643      	mov	r3, r8
 80081ae:	463a      	mov	r2, r7
 80081b0:	4628      	mov	r0, r5
 80081b2:	47b0      	blx	r6
 80081b4:	2800      	cmp	r0, #0
 80081b6:	dc06      	bgt.n	80081c6 <__sflush_r+0xfe>
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081be:	81a3      	strh	r3, [r4, #12]
 80081c0:	f04f 30ff 	mov.w	r0, #4294967295
 80081c4:	e78e      	b.n	80080e4 <__sflush_r+0x1c>
 80081c6:	4407      	add	r7, r0
 80081c8:	eba8 0800 	sub.w	r8, r8, r0
 80081cc:	e7e9      	b.n	80081a2 <__sflush_r+0xda>
 80081ce:	bf00      	nop
 80081d0:	20400001 	.word	0x20400001

080081d4 <_fflush_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	690b      	ldr	r3, [r1, #16]
 80081d8:	4605      	mov	r5, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	b913      	cbnz	r3, 80081e4 <_fflush_r+0x10>
 80081de:	2500      	movs	r5, #0
 80081e0:	4628      	mov	r0, r5
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	b118      	cbz	r0, 80081ee <_fflush_r+0x1a>
 80081e6:	6983      	ldr	r3, [r0, #24]
 80081e8:	b90b      	cbnz	r3, 80081ee <_fflush_r+0x1a>
 80081ea:	f000 f887 	bl	80082fc <__sinit>
 80081ee:	4b14      	ldr	r3, [pc, #80]	; (8008240 <_fflush_r+0x6c>)
 80081f0:	429c      	cmp	r4, r3
 80081f2:	d11b      	bne.n	800822c <_fflush_r+0x58>
 80081f4:	686c      	ldr	r4, [r5, #4]
 80081f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0ef      	beq.n	80081de <_fflush_r+0xa>
 80081fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008200:	07d0      	lsls	r0, r2, #31
 8008202:	d404      	bmi.n	800820e <_fflush_r+0x3a>
 8008204:	0599      	lsls	r1, r3, #22
 8008206:	d402      	bmi.n	800820e <_fflush_r+0x3a>
 8008208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800820a:	f000 f915 	bl	8008438 <__retarget_lock_acquire_recursive>
 800820e:	4628      	mov	r0, r5
 8008210:	4621      	mov	r1, r4
 8008212:	f7ff ff59 	bl	80080c8 <__sflush_r>
 8008216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008218:	07da      	lsls	r2, r3, #31
 800821a:	4605      	mov	r5, r0
 800821c:	d4e0      	bmi.n	80081e0 <_fflush_r+0xc>
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	059b      	lsls	r3, r3, #22
 8008222:	d4dd      	bmi.n	80081e0 <_fflush_r+0xc>
 8008224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008226:	f000 f908 	bl	800843a <__retarget_lock_release_recursive>
 800822a:	e7d9      	b.n	80081e0 <_fflush_r+0xc>
 800822c:	4b05      	ldr	r3, [pc, #20]	; (8008244 <_fflush_r+0x70>)
 800822e:	429c      	cmp	r4, r3
 8008230:	d101      	bne.n	8008236 <_fflush_r+0x62>
 8008232:	68ac      	ldr	r4, [r5, #8]
 8008234:	e7df      	b.n	80081f6 <_fflush_r+0x22>
 8008236:	4b04      	ldr	r3, [pc, #16]	; (8008248 <_fflush_r+0x74>)
 8008238:	429c      	cmp	r4, r3
 800823a:	bf08      	it	eq
 800823c:	68ec      	ldreq	r4, [r5, #12]
 800823e:	e7da      	b.n	80081f6 <_fflush_r+0x22>
 8008240:	0800903c 	.word	0x0800903c
 8008244:	0800905c 	.word	0x0800905c
 8008248:	0800901c 	.word	0x0800901c

0800824c <std>:
 800824c:	2300      	movs	r3, #0
 800824e:	b510      	push	{r4, lr}
 8008250:	4604      	mov	r4, r0
 8008252:	e9c0 3300 	strd	r3, r3, [r0]
 8008256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800825a:	6083      	str	r3, [r0, #8]
 800825c:	8181      	strh	r1, [r0, #12]
 800825e:	6643      	str	r3, [r0, #100]	; 0x64
 8008260:	81c2      	strh	r2, [r0, #14]
 8008262:	6183      	str	r3, [r0, #24]
 8008264:	4619      	mov	r1, r3
 8008266:	2208      	movs	r2, #8
 8008268:	305c      	adds	r0, #92	; 0x5c
 800826a:	f7ff fdd7 	bl	8007e1c <memset>
 800826e:	4b05      	ldr	r3, [pc, #20]	; (8008284 <std+0x38>)
 8008270:	6263      	str	r3, [r4, #36]	; 0x24
 8008272:	4b05      	ldr	r3, [pc, #20]	; (8008288 <std+0x3c>)
 8008274:	62a3      	str	r3, [r4, #40]	; 0x28
 8008276:	4b05      	ldr	r3, [pc, #20]	; (800828c <std+0x40>)
 8008278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800827a:	4b05      	ldr	r3, [pc, #20]	; (8008290 <std+0x44>)
 800827c:	6224      	str	r4, [r4, #32]
 800827e:	6323      	str	r3, [r4, #48]	; 0x30
 8008280:	bd10      	pop	{r4, pc}
 8008282:	bf00      	nop
 8008284:	08008cc5 	.word	0x08008cc5
 8008288:	08008ce7 	.word	0x08008ce7
 800828c:	08008d1f 	.word	0x08008d1f
 8008290:	08008d43 	.word	0x08008d43

08008294 <_cleanup_r>:
 8008294:	4901      	ldr	r1, [pc, #4]	; (800829c <_cleanup_r+0x8>)
 8008296:	f000 b8af 	b.w	80083f8 <_fwalk_reent>
 800829a:	bf00      	nop
 800829c:	080081d5 	.word	0x080081d5

080082a0 <__sfmoreglue>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	2268      	movs	r2, #104	; 0x68
 80082a4:	1e4d      	subs	r5, r1, #1
 80082a6:	4355      	muls	r5, r2
 80082a8:	460e      	mov	r6, r1
 80082aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082ae:	f000 f997 	bl	80085e0 <_malloc_r>
 80082b2:	4604      	mov	r4, r0
 80082b4:	b140      	cbz	r0, 80082c8 <__sfmoreglue+0x28>
 80082b6:	2100      	movs	r1, #0
 80082b8:	e9c0 1600 	strd	r1, r6, [r0]
 80082bc:	300c      	adds	r0, #12
 80082be:	60a0      	str	r0, [r4, #8]
 80082c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082c4:	f7ff fdaa 	bl	8007e1c <memset>
 80082c8:	4620      	mov	r0, r4
 80082ca:	bd70      	pop	{r4, r5, r6, pc}

080082cc <__sfp_lock_acquire>:
 80082cc:	4801      	ldr	r0, [pc, #4]	; (80082d4 <__sfp_lock_acquire+0x8>)
 80082ce:	f000 b8b3 	b.w	8008438 <__retarget_lock_acquire_recursive>
 80082d2:	bf00      	nop
 80082d4:	20013924 	.word	0x20013924

080082d8 <__sfp_lock_release>:
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <__sfp_lock_release+0x8>)
 80082da:	f000 b8ae 	b.w	800843a <__retarget_lock_release_recursive>
 80082de:	bf00      	nop
 80082e0:	20013924 	.word	0x20013924

080082e4 <__sinit_lock_acquire>:
 80082e4:	4801      	ldr	r0, [pc, #4]	; (80082ec <__sinit_lock_acquire+0x8>)
 80082e6:	f000 b8a7 	b.w	8008438 <__retarget_lock_acquire_recursive>
 80082ea:	bf00      	nop
 80082ec:	20013925 	.word	0x20013925

080082f0 <__sinit_lock_release>:
 80082f0:	4801      	ldr	r0, [pc, #4]	; (80082f8 <__sinit_lock_release+0x8>)
 80082f2:	f000 b8a2 	b.w	800843a <__retarget_lock_release_recursive>
 80082f6:	bf00      	nop
 80082f8:	20013925 	.word	0x20013925

080082fc <__sinit>:
 80082fc:	b510      	push	{r4, lr}
 80082fe:	4604      	mov	r4, r0
 8008300:	f7ff fff0 	bl	80082e4 <__sinit_lock_acquire>
 8008304:	69a3      	ldr	r3, [r4, #24]
 8008306:	b11b      	cbz	r3, 8008310 <__sinit+0x14>
 8008308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800830c:	f7ff bff0 	b.w	80082f0 <__sinit_lock_release>
 8008310:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008314:	6523      	str	r3, [r4, #80]	; 0x50
 8008316:	4b13      	ldr	r3, [pc, #76]	; (8008364 <__sinit+0x68>)
 8008318:	4a13      	ldr	r2, [pc, #76]	; (8008368 <__sinit+0x6c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	62a2      	str	r2, [r4, #40]	; 0x28
 800831e:	42a3      	cmp	r3, r4
 8008320:	bf04      	itt	eq
 8008322:	2301      	moveq	r3, #1
 8008324:	61a3      	streq	r3, [r4, #24]
 8008326:	4620      	mov	r0, r4
 8008328:	f000 f820 	bl	800836c <__sfp>
 800832c:	6060      	str	r0, [r4, #4]
 800832e:	4620      	mov	r0, r4
 8008330:	f000 f81c 	bl	800836c <__sfp>
 8008334:	60a0      	str	r0, [r4, #8]
 8008336:	4620      	mov	r0, r4
 8008338:	f000 f818 	bl	800836c <__sfp>
 800833c:	2200      	movs	r2, #0
 800833e:	60e0      	str	r0, [r4, #12]
 8008340:	2104      	movs	r1, #4
 8008342:	6860      	ldr	r0, [r4, #4]
 8008344:	f7ff ff82 	bl	800824c <std>
 8008348:	68a0      	ldr	r0, [r4, #8]
 800834a:	2201      	movs	r2, #1
 800834c:	2109      	movs	r1, #9
 800834e:	f7ff ff7d 	bl	800824c <std>
 8008352:	68e0      	ldr	r0, [r4, #12]
 8008354:	2202      	movs	r2, #2
 8008356:	2112      	movs	r1, #18
 8008358:	f7ff ff78 	bl	800824c <std>
 800835c:	2301      	movs	r3, #1
 800835e:	61a3      	str	r3, [r4, #24]
 8008360:	e7d2      	b.n	8008308 <__sinit+0xc>
 8008362:	bf00      	nop
 8008364:	08009018 	.word	0x08009018
 8008368:	08008295 	.word	0x08008295

0800836c <__sfp>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	4607      	mov	r7, r0
 8008370:	f7ff ffac 	bl	80082cc <__sfp_lock_acquire>
 8008374:	4b1e      	ldr	r3, [pc, #120]	; (80083f0 <__sfp+0x84>)
 8008376:	681e      	ldr	r6, [r3, #0]
 8008378:	69b3      	ldr	r3, [r6, #24]
 800837a:	b913      	cbnz	r3, 8008382 <__sfp+0x16>
 800837c:	4630      	mov	r0, r6
 800837e:	f7ff ffbd 	bl	80082fc <__sinit>
 8008382:	3648      	adds	r6, #72	; 0x48
 8008384:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008388:	3b01      	subs	r3, #1
 800838a:	d503      	bpl.n	8008394 <__sfp+0x28>
 800838c:	6833      	ldr	r3, [r6, #0]
 800838e:	b30b      	cbz	r3, 80083d4 <__sfp+0x68>
 8008390:	6836      	ldr	r6, [r6, #0]
 8008392:	e7f7      	b.n	8008384 <__sfp+0x18>
 8008394:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008398:	b9d5      	cbnz	r5, 80083d0 <__sfp+0x64>
 800839a:	4b16      	ldr	r3, [pc, #88]	; (80083f4 <__sfp+0x88>)
 800839c:	60e3      	str	r3, [r4, #12]
 800839e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083a2:	6665      	str	r5, [r4, #100]	; 0x64
 80083a4:	f000 f847 	bl	8008436 <__retarget_lock_init_recursive>
 80083a8:	f7ff ff96 	bl	80082d8 <__sfp_lock_release>
 80083ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083b4:	6025      	str	r5, [r4, #0]
 80083b6:	61a5      	str	r5, [r4, #24]
 80083b8:	2208      	movs	r2, #8
 80083ba:	4629      	mov	r1, r5
 80083bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083c0:	f7ff fd2c 	bl	8007e1c <memset>
 80083c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083cc:	4620      	mov	r0, r4
 80083ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d0:	3468      	adds	r4, #104	; 0x68
 80083d2:	e7d9      	b.n	8008388 <__sfp+0x1c>
 80083d4:	2104      	movs	r1, #4
 80083d6:	4638      	mov	r0, r7
 80083d8:	f7ff ff62 	bl	80082a0 <__sfmoreglue>
 80083dc:	4604      	mov	r4, r0
 80083de:	6030      	str	r0, [r6, #0]
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1d5      	bne.n	8008390 <__sfp+0x24>
 80083e4:	f7ff ff78 	bl	80082d8 <__sfp_lock_release>
 80083e8:	230c      	movs	r3, #12
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	e7ee      	b.n	80083cc <__sfp+0x60>
 80083ee:	bf00      	nop
 80083f0:	08009018 	.word	0x08009018
 80083f4:	ffff0001 	.word	0xffff0001

080083f8 <_fwalk_reent>:
 80083f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083fc:	4606      	mov	r6, r0
 80083fe:	4688      	mov	r8, r1
 8008400:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008404:	2700      	movs	r7, #0
 8008406:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800840a:	f1b9 0901 	subs.w	r9, r9, #1
 800840e:	d505      	bpl.n	800841c <_fwalk_reent+0x24>
 8008410:	6824      	ldr	r4, [r4, #0]
 8008412:	2c00      	cmp	r4, #0
 8008414:	d1f7      	bne.n	8008406 <_fwalk_reent+0xe>
 8008416:	4638      	mov	r0, r7
 8008418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800841c:	89ab      	ldrh	r3, [r5, #12]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d907      	bls.n	8008432 <_fwalk_reent+0x3a>
 8008422:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008426:	3301      	adds	r3, #1
 8008428:	d003      	beq.n	8008432 <_fwalk_reent+0x3a>
 800842a:	4629      	mov	r1, r5
 800842c:	4630      	mov	r0, r6
 800842e:	47c0      	blx	r8
 8008430:	4307      	orrs	r7, r0
 8008432:	3568      	adds	r5, #104	; 0x68
 8008434:	e7e9      	b.n	800840a <_fwalk_reent+0x12>

08008436 <__retarget_lock_init_recursive>:
 8008436:	4770      	bx	lr

08008438 <__retarget_lock_acquire_recursive>:
 8008438:	4770      	bx	lr

0800843a <__retarget_lock_release_recursive>:
 800843a:	4770      	bx	lr

0800843c <__swhatbuf_r>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	460e      	mov	r6, r1
 8008440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008444:	2900      	cmp	r1, #0
 8008446:	b096      	sub	sp, #88	; 0x58
 8008448:	4614      	mov	r4, r2
 800844a:	461d      	mov	r5, r3
 800844c:	da08      	bge.n	8008460 <__swhatbuf_r+0x24>
 800844e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	602a      	str	r2, [r5, #0]
 8008456:	061a      	lsls	r2, r3, #24
 8008458:	d410      	bmi.n	800847c <__swhatbuf_r+0x40>
 800845a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800845e:	e00e      	b.n	800847e <__swhatbuf_r+0x42>
 8008460:	466a      	mov	r2, sp
 8008462:	f000 fc83 	bl	8008d6c <_fstat_r>
 8008466:	2800      	cmp	r0, #0
 8008468:	dbf1      	blt.n	800844e <__swhatbuf_r+0x12>
 800846a:	9a01      	ldr	r2, [sp, #4]
 800846c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008470:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008474:	425a      	negs	r2, r3
 8008476:	415a      	adcs	r2, r3
 8008478:	602a      	str	r2, [r5, #0]
 800847a:	e7ee      	b.n	800845a <__swhatbuf_r+0x1e>
 800847c:	2340      	movs	r3, #64	; 0x40
 800847e:	2000      	movs	r0, #0
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	b016      	add	sp, #88	; 0x58
 8008484:	bd70      	pop	{r4, r5, r6, pc}
	...

08008488 <__smakebuf_r>:
 8008488:	898b      	ldrh	r3, [r1, #12]
 800848a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800848c:	079d      	lsls	r5, r3, #30
 800848e:	4606      	mov	r6, r0
 8008490:	460c      	mov	r4, r1
 8008492:	d507      	bpl.n	80084a4 <__smakebuf_r+0x1c>
 8008494:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	2301      	movs	r3, #1
 800849e:	6163      	str	r3, [r4, #20]
 80084a0:	b002      	add	sp, #8
 80084a2:	bd70      	pop	{r4, r5, r6, pc}
 80084a4:	ab01      	add	r3, sp, #4
 80084a6:	466a      	mov	r2, sp
 80084a8:	f7ff ffc8 	bl	800843c <__swhatbuf_r>
 80084ac:	9900      	ldr	r1, [sp, #0]
 80084ae:	4605      	mov	r5, r0
 80084b0:	4630      	mov	r0, r6
 80084b2:	f000 f895 	bl	80085e0 <_malloc_r>
 80084b6:	b948      	cbnz	r0, 80084cc <__smakebuf_r+0x44>
 80084b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084bc:	059a      	lsls	r2, r3, #22
 80084be:	d4ef      	bmi.n	80084a0 <__smakebuf_r+0x18>
 80084c0:	f023 0303 	bic.w	r3, r3, #3
 80084c4:	f043 0302 	orr.w	r3, r3, #2
 80084c8:	81a3      	strh	r3, [r4, #12]
 80084ca:	e7e3      	b.n	8008494 <__smakebuf_r+0xc>
 80084cc:	4b0d      	ldr	r3, [pc, #52]	; (8008504 <__smakebuf_r+0x7c>)
 80084ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	6020      	str	r0, [r4, #0]
 80084d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	9b00      	ldr	r3, [sp, #0]
 80084dc:	6163      	str	r3, [r4, #20]
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	6120      	str	r0, [r4, #16]
 80084e2:	b15b      	cbz	r3, 80084fc <__smakebuf_r+0x74>
 80084e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e8:	4630      	mov	r0, r6
 80084ea:	f000 fc51 	bl	8008d90 <_isatty_r>
 80084ee:	b128      	cbz	r0, 80084fc <__smakebuf_r+0x74>
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	f023 0303 	bic.w	r3, r3, #3
 80084f6:	f043 0301 	orr.w	r3, r3, #1
 80084fa:	81a3      	strh	r3, [r4, #12]
 80084fc:	89a0      	ldrh	r0, [r4, #12]
 80084fe:	4305      	orrs	r5, r0
 8008500:	81a5      	strh	r5, [r4, #12]
 8008502:	e7cd      	b.n	80084a0 <__smakebuf_r+0x18>
 8008504:	08008295 	.word	0x08008295

08008508 <_free_r>:
 8008508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800850a:	2900      	cmp	r1, #0
 800850c:	d044      	beq.n	8008598 <_free_r+0x90>
 800850e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008512:	9001      	str	r0, [sp, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	f1a1 0404 	sub.w	r4, r1, #4
 800851a:	bfb8      	it	lt
 800851c:	18e4      	addlt	r4, r4, r3
 800851e:	f000 fc59 	bl	8008dd4 <__malloc_lock>
 8008522:	4a1e      	ldr	r2, [pc, #120]	; (800859c <_free_r+0x94>)
 8008524:	9801      	ldr	r0, [sp, #4]
 8008526:	6813      	ldr	r3, [r2, #0]
 8008528:	b933      	cbnz	r3, 8008538 <_free_r+0x30>
 800852a:	6063      	str	r3, [r4, #4]
 800852c:	6014      	str	r4, [r2, #0]
 800852e:	b003      	add	sp, #12
 8008530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008534:	f000 bc54 	b.w	8008de0 <__malloc_unlock>
 8008538:	42a3      	cmp	r3, r4
 800853a:	d908      	bls.n	800854e <_free_r+0x46>
 800853c:	6825      	ldr	r5, [r4, #0]
 800853e:	1961      	adds	r1, r4, r5
 8008540:	428b      	cmp	r3, r1
 8008542:	bf01      	itttt	eq
 8008544:	6819      	ldreq	r1, [r3, #0]
 8008546:	685b      	ldreq	r3, [r3, #4]
 8008548:	1949      	addeq	r1, r1, r5
 800854a:	6021      	streq	r1, [r4, #0]
 800854c:	e7ed      	b.n	800852a <_free_r+0x22>
 800854e:	461a      	mov	r2, r3
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	b10b      	cbz	r3, 8008558 <_free_r+0x50>
 8008554:	42a3      	cmp	r3, r4
 8008556:	d9fa      	bls.n	800854e <_free_r+0x46>
 8008558:	6811      	ldr	r1, [r2, #0]
 800855a:	1855      	adds	r5, r2, r1
 800855c:	42a5      	cmp	r5, r4
 800855e:	d10b      	bne.n	8008578 <_free_r+0x70>
 8008560:	6824      	ldr	r4, [r4, #0]
 8008562:	4421      	add	r1, r4
 8008564:	1854      	adds	r4, r2, r1
 8008566:	42a3      	cmp	r3, r4
 8008568:	6011      	str	r1, [r2, #0]
 800856a:	d1e0      	bne.n	800852e <_free_r+0x26>
 800856c:	681c      	ldr	r4, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	6053      	str	r3, [r2, #4]
 8008572:	4421      	add	r1, r4
 8008574:	6011      	str	r1, [r2, #0]
 8008576:	e7da      	b.n	800852e <_free_r+0x26>
 8008578:	d902      	bls.n	8008580 <_free_r+0x78>
 800857a:	230c      	movs	r3, #12
 800857c:	6003      	str	r3, [r0, #0]
 800857e:	e7d6      	b.n	800852e <_free_r+0x26>
 8008580:	6825      	ldr	r5, [r4, #0]
 8008582:	1961      	adds	r1, r4, r5
 8008584:	428b      	cmp	r3, r1
 8008586:	bf04      	itt	eq
 8008588:	6819      	ldreq	r1, [r3, #0]
 800858a:	685b      	ldreq	r3, [r3, #4]
 800858c:	6063      	str	r3, [r4, #4]
 800858e:	bf04      	itt	eq
 8008590:	1949      	addeq	r1, r1, r5
 8008592:	6021      	streq	r1, [r4, #0]
 8008594:	6054      	str	r4, [r2, #4]
 8008596:	e7ca      	b.n	800852e <_free_r+0x26>
 8008598:	b003      	add	sp, #12
 800859a:	bd30      	pop	{r4, r5, pc}
 800859c:	20013928 	.word	0x20013928

080085a0 <sbrk_aligned>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	4e0e      	ldr	r6, [pc, #56]	; (80085dc <sbrk_aligned+0x3c>)
 80085a4:	460c      	mov	r4, r1
 80085a6:	6831      	ldr	r1, [r6, #0]
 80085a8:	4605      	mov	r5, r0
 80085aa:	b911      	cbnz	r1, 80085b2 <sbrk_aligned+0x12>
 80085ac:	f000 fb7a 	bl	8008ca4 <_sbrk_r>
 80085b0:	6030      	str	r0, [r6, #0]
 80085b2:	4621      	mov	r1, r4
 80085b4:	4628      	mov	r0, r5
 80085b6:	f000 fb75 	bl	8008ca4 <_sbrk_r>
 80085ba:	1c43      	adds	r3, r0, #1
 80085bc:	d00a      	beq.n	80085d4 <sbrk_aligned+0x34>
 80085be:	1cc4      	adds	r4, r0, #3
 80085c0:	f024 0403 	bic.w	r4, r4, #3
 80085c4:	42a0      	cmp	r0, r4
 80085c6:	d007      	beq.n	80085d8 <sbrk_aligned+0x38>
 80085c8:	1a21      	subs	r1, r4, r0
 80085ca:	4628      	mov	r0, r5
 80085cc:	f000 fb6a 	bl	8008ca4 <_sbrk_r>
 80085d0:	3001      	adds	r0, #1
 80085d2:	d101      	bne.n	80085d8 <sbrk_aligned+0x38>
 80085d4:	f04f 34ff 	mov.w	r4, #4294967295
 80085d8:	4620      	mov	r0, r4
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	2001392c 	.word	0x2001392c

080085e0 <_malloc_r>:
 80085e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e4:	1ccd      	adds	r5, r1, #3
 80085e6:	f025 0503 	bic.w	r5, r5, #3
 80085ea:	3508      	adds	r5, #8
 80085ec:	2d0c      	cmp	r5, #12
 80085ee:	bf38      	it	cc
 80085f0:	250c      	movcc	r5, #12
 80085f2:	2d00      	cmp	r5, #0
 80085f4:	4607      	mov	r7, r0
 80085f6:	db01      	blt.n	80085fc <_malloc_r+0x1c>
 80085f8:	42a9      	cmp	r1, r5
 80085fa:	d905      	bls.n	8008608 <_malloc_r+0x28>
 80085fc:	230c      	movs	r3, #12
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	2600      	movs	r6, #0
 8008602:	4630      	mov	r0, r6
 8008604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008608:	4e2e      	ldr	r6, [pc, #184]	; (80086c4 <_malloc_r+0xe4>)
 800860a:	f000 fbe3 	bl	8008dd4 <__malloc_lock>
 800860e:	6833      	ldr	r3, [r6, #0]
 8008610:	461c      	mov	r4, r3
 8008612:	bb34      	cbnz	r4, 8008662 <_malloc_r+0x82>
 8008614:	4629      	mov	r1, r5
 8008616:	4638      	mov	r0, r7
 8008618:	f7ff ffc2 	bl	80085a0 <sbrk_aligned>
 800861c:	1c43      	adds	r3, r0, #1
 800861e:	4604      	mov	r4, r0
 8008620:	d14d      	bne.n	80086be <_malloc_r+0xde>
 8008622:	6834      	ldr	r4, [r6, #0]
 8008624:	4626      	mov	r6, r4
 8008626:	2e00      	cmp	r6, #0
 8008628:	d140      	bne.n	80086ac <_malloc_r+0xcc>
 800862a:	6823      	ldr	r3, [r4, #0]
 800862c:	4631      	mov	r1, r6
 800862e:	4638      	mov	r0, r7
 8008630:	eb04 0803 	add.w	r8, r4, r3
 8008634:	f000 fb36 	bl	8008ca4 <_sbrk_r>
 8008638:	4580      	cmp	r8, r0
 800863a:	d13a      	bne.n	80086b2 <_malloc_r+0xd2>
 800863c:	6821      	ldr	r1, [r4, #0]
 800863e:	3503      	adds	r5, #3
 8008640:	1a6d      	subs	r5, r5, r1
 8008642:	f025 0503 	bic.w	r5, r5, #3
 8008646:	3508      	adds	r5, #8
 8008648:	2d0c      	cmp	r5, #12
 800864a:	bf38      	it	cc
 800864c:	250c      	movcc	r5, #12
 800864e:	4629      	mov	r1, r5
 8008650:	4638      	mov	r0, r7
 8008652:	f7ff ffa5 	bl	80085a0 <sbrk_aligned>
 8008656:	3001      	adds	r0, #1
 8008658:	d02b      	beq.n	80086b2 <_malloc_r+0xd2>
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	442b      	add	r3, r5
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	e00e      	b.n	8008680 <_malloc_r+0xa0>
 8008662:	6822      	ldr	r2, [r4, #0]
 8008664:	1b52      	subs	r2, r2, r5
 8008666:	d41e      	bmi.n	80086a6 <_malloc_r+0xc6>
 8008668:	2a0b      	cmp	r2, #11
 800866a:	d916      	bls.n	800869a <_malloc_r+0xba>
 800866c:	1961      	adds	r1, r4, r5
 800866e:	42a3      	cmp	r3, r4
 8008670:	6025      	str	r5, [r4, #0]
 8008672:	bf18      	it	ne
 8008674:	6059      	strne	r1, [r3, #4]
 8008676:	6863      	ldr	r3, [r4, #4]
 8008678:	bf08      	it	eq
 800867a:	6031      	streq	r1, [r6, #0]
 800867c:	5162      	str	r2, [r4, r5]
 800867e:	604b      	str	r3, [r1, #4]
 8008680:	4638      	mov	r0, r7
 8008682:	f104 060b 	add.w	r6, r4, #11
 8008686:	f000 fbab 	bl	8008de0 <__malloc_unlock>
 800868a:	f026 0607 	bic.w	r6, r6, #7
 800868e:	1d23      	adds	r3, r4, #4
 8008690:	1af2      	subs	r2, r6, r3
 8008692:	d0b6      	beq.n	8008602 <_malloc_r+0x22>
 8008694:	1b9b      	subs	r3, r3, r6
 8008696:	50a3      	str	r3, [r4, r2]
 8008698:	e7b3      	b.n	8008602 <_malloc_r+0x22>
 800869a:	6862      	ldr	r2, [r4, #4]
 800869c:	42a3      	cmp	r3, r4
 800869e:	bf0c      	ite	eq
 80086a0:	6032      	streq	r2, [r6, #0]
 80086a2:	605a      	strne	r2, [r3, #4]
 80086a4:	e7ec      	b.n	8008680 <_malloc_r+0xa0>
 80086a6:	4623      	mov	r3, r4
 80086a8:	6864      	ldr	r4, [r4, #4]
 80086aa:	e7b2      	b.n	8008612 <_malloc_r+0x32>
 80086ac:	4634      	mov	r4, r6
 80086ae:	6876      	ldr	r6, [r6, #4]
 80086b0:	e7b9      	b.n	8008626 <_malloc_r+0x46>
 80086b2:	230c      	movs	r3, #12
 80086b4:	603b      	str	r3, [r7, #0]
 80086b6:	4638      	mov	r0, r7
 80086b8:	f000 fb92 	bl	8008de0 <__malloc_unlock>
 80086bc:	e7a1      	b.n	8008602 <_malloc_r+0x22>
 80086be:	6025      	str	r5, [r4, #0]
 80086c0:	e7de      	b.n	8008680 <_malloc_r+0xa0>
 80086c2:	bf00      	nop
 80086c4:	20013928 	.word	0x20013928

080086c8 <__sfputc_r>:
 80086c8:	6893      	ldr	r3, [r2, #8]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	b410      	push	{r4}
 80086d0:	6093      	str	r3, [r2, #8]
 80086d2:	da08      	bge.n	80086e6 <__sfputc_r+0x1e>
 80086d4:	6994      	ldr	r4, [r2, #24]
 80086d6:	42a3      	cmp	r3, r4
 80086d8:	db01      	blt.n	80086de <__sfputc_r+0x16>
 80086da:	290a      	cmp	r1, #10
 80086dc:	d103      	bne.n	80086e6 <__sfputc_r+0x1e>
 80086de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086e2:	f7ff bc31 	b.w	8007f48 <__swbuf_r>
 80086e6:	6813      	ldr	r3, [r2, #0]
 80086e8:	1c58      	adds	r0, r3, #1
 80086ea:	6010      	str	r0, [r2, #0]
 80086ec:	7019      	strb	r1, [r3, #0]
 80086ee:	4608      	mov	r0, r1
 80086f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <__sfputs_r>:
 80086f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f8:	4606      	mov	r6, r0
 80086fa:	460f      	mov	r7, r1
 80086fc:	4614      	mov	r4, r2
 80086fe:	18d5      	adds	r5, r2, r3
 8008700:	42ac      	cmp	r4, r5
 8008702:	d101      	bne.n	8008708 <__sfputs_r+0x12>
 8008704:	2000      	movs	r0, #0
 8008706:	e007      	b.n	8008718 <__sfputs_r+0x22>
 8008708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870c:	463a      	mov	r2, r7
 800870e:	4630      	mov	r0, r6
 8008710:	f7ff ffda 	bl	80086c8 <__sfputc_r>
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	d1f3      	bne.n	8008700 <__sfputs_r+0xa>
 8008718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800871c <_vfiprintf_r>:
 800871c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	460d      	mov	r5, r1
 8008722:	b09d      	sub	sp, #116	; 0x74
 8008724:	4614      	mov	r4, r2
 8008726:	4698      	mov	r8, r3
 8008728:	4606      	mov	r6, r0
 800872a:	b118      	cbz	r0, 8008734 <_vfiprintf_r+0x18>
 800872c:	6983      	ldr	r3, [r0, #24]
 800872e:	b90b      	cbnz	r3, 8008734 <_vfiprintf_r+0x18>
 8008730:	f7ff fde4 	bl	80082fc <__sinit>
 8008734:	4b89      	ldr	r3, [pc, #548]	; (800895c <_vfiprintf_r+0x240>)
 8008736:	429d      	cmp	r5, r3
 8008738:	d11b      	bne.n	8008772 <_vfiprintf_r+0x56>
 800873a:	6875      	ldr	r5, [r6, #4]
 800873c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800873e:	07d9      	lsls	r1, r3, #31
 8008740:	d405      	bmi.n	800874e <_vfiprintf_r+0x32>
 8008742:	89ab      	ldrh	r3, [r5, #12]
 8008744:	059a      	lsls	r2, r3, #22
 8008746:	d402      	bmi.n	800874e <_vfiprintf_r+0x32>
 8008748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800874a:	f7ff fe75 	bl	8008438 <__retarget_lock_acquire_recursive>
 800874e:	89ab      	ldrh	r3, [r5, #12]
 8008750:	071b      	lsls	r3, r3, #28
 8008752:	d501      	bpl.n	8008758 <_vfiprintf_r+0x3c>
 8008754:	692b      	ldr	r3, [r5, #16]
 8008756:	b9eb      	cbnz	r3, 8008794 <_vfiprintf_r+0x78>
 8008758:	4629      	mov	r1, r5
 800875a:	4630      	mov	r0, r6
 800875c:	f7ff fc46 	bl	8007fec <__swsetup_r>
 8008760:	b1c0      	cbz	r0, 8008794 <_vfiprintf_r+0x78>
 8008762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008764:	07dc      	lsls	r4, r3, #31
 8008766:	d50e      	bpl.n	8008786 <_vfiprintf_r+0x6a>
 8008768:	f04f 30ff 	mov.w	r0, #4294967295
 800876c:	b01d      	add	sp, #116	; 0x74
 800876e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008772:	4b7b      	ldr	r3, [pc, #492]	; (8008960 <_vfiprintf_r+0x244>)
 8008774:	429d      	cmp	r5, r3
 8008776:	d101      	bne.n	800877c <_vfiprintf_r+0x60>
 8008778:	68b5      	ldr	r5, [r6, #8]
 800877a:	e7df      	b.n	800873c <_vfiprintf_r+0x20>
 800877c:	4b79      	ldr	r3, [pc, #484]	; (8008964 <_vfiprintf_r+0x248>)
 800877e:	429d      	cmp	r5, r3
 8008780:	bf08      	it	eq
 8008782:	68f5      	ldreq	r5, [r6, #12]
 8008784:	e7da      	b.n	800873c <_vfiprintf_r+0x20>
 8008786:	89ab      	ldrh	r3, [r5, #12]
 8008788:	0598      	lsls	r0, r3, #22
 800878a:	d4ed      	bmi.n	8008768 <_vfiprintf_r+0x4c>
 800878c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800878e:	f7ff fe54 	bl	800843a <__retarget_lock_release_recursive>
 8008792:	e7e9      	b.n	8008768 <_vfiprintf_r+0x4c>
 8008794:	2300      	movs	r3, #0
 8008796:	9309      	str	r3, [sp, #36]	; 0x24
 8008798:	2320      	movs	r3, #32
 800879a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800879e:	f8cd 800c 	str.w	r8, [sp, #12]
 80087a2:	2330      	movs	r3, #48	; 0x30
 80087a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008968 <_vfiprintf_r+0x24c>
 80087a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087ac:	f04f 0901 	mov.w	r9, #1
 80087b0:	4623      	mov	r3, r4
 80087b2:	469a      	mov	sl, r3
 80087b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087b8:	b10a      	cbz	r2, 80087be <_vfiprintf_r+0xa2>
 80087ba:	2a25      	cmp	r2, #37	; 0x25
 80087bc:	d1f9      	bne.n	80087b2 <_vfiprintf_r+0x96>
 80087be:	ebba 0b04 	subs.w	fp, sl, r4
 80087c2:	d00b      	beq.n	80087dc <_vfiprintf_r+0xc0>
 80087c4:	465b      	mov	r3, fp
 80087c6:	4622      	mov	r2, r4
 80087c8:	4629      	mov	r1, r5
 80087ca:	4630      	mov	r0, r6
 80087cc:	f7ff ff93 	bl	80086f6 <__sfputs_r>
 80087d0:	3001      	adds	r0, #1
 80087d2:	f000 80aa 	beq.w	800892a <_vfiprintf_r+0x20e>
 80087d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087d8:	445a      	add	r2, fp
 80087da:	9209      	str	r2, [sp, #36]	; 0x24
 80087dc:	f89a 3000 	ldrb.w	r3, [sl]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 80a2 	beq.w	800892a <_vfiprintf_r+0x20e>
 80087e6:	2300      	movs	r3, #0
 80087e8:	f04f 32ff 	mov.w	r2, #4294967295
 80087ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087f0:	f10a 0a01 	add.w	sl, sl, #1
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	9307      	str	r3, [sp, #28]
 80087f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087fc:	931a      	str	r3, [sp, #104]	; 0x68
 80087fe:	4654      	mov	r4, sl
 8008800:	2205      	movs	r2, #5
 8008802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008806:	4858      	ldr	r0, [pc, #352]	; (8008968 <_vfiprintf_r+0x24c>)
 8008808:	f7f7 fd32 	bl	8000270 <memchr>
 800880c:	9a04      	ldr	r2, [sp, #16]
 800880e:	b9d8      	cbnz	r0, 8008848 <_vfiprintf_r+0x12c>
 8008810:	06d1      	lsls	r1, r2, #27
 8008812:	bf44      	itt	mi
 8008814:	2320      	movmi	r3, #32
 8008816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800881a:	0713      	lsls	r3, r2, #28
 800881c:	bf44      	itt	mi
 800881e:	232b      	movmi	r3, #43	; 0x2b
 8008820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008824:	f89a 3000 	ldrb.w	r3, [sl]
 8008828:	2b2a      	cmp	r3, #42	; 0x2a
 800882a:	d015      	beq.n	8008858 <_vfiprintf_r+0x13c>
 800882c:	9a07      	ldr	r2, [sp, #28]
 800882e:	4654      	mov	r4, sl
 8008830:	2000      	movs	r0, #0
 8008832:	f04f 0c0a 	mov.w	ip, #10
 8008836:	4621      	mov	r1, r4
 8008838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800883c:	3b30      	subs	r3, #48	; 0x30
 800883e:	2b09      	cmp	r3, #9
 8008840:	d94e      	bls.n	80088e0 <_vfiprintf_r+0x1c4>
 8008842:	b1b0      	cbz	r0, 8008872 <_vfiprintf_r+0x156>
 8008844:	9207      	str	r2, [sp, #28]
 8008846:	e014      	b.n	8008872 <_vfiprintf_r+0x156>
 8008848:	eba0 0308 	sub.w	r3, r0, r8
 800884c:	fa09 f303 	lsl.w	r3, r9, r3
 8008850:	4313      	orrs	r3, r2
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	46a2      	mov	sl, r4
 8008856:	e7d2      	b.n	80087fe <_vfiprintf_r+0xe2>
 8008858:	9b03      	ldr	r3, [sp, #12]
 800885a:	1d19      	adds	r1, r3, #4
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	9103      	str	r1, [sp, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	bfbb      	ittet	lt
 8008864:	425b      	neglt	r3, r3
 8008866:	f042 0202 	orrlt.w	r2, r2, #2
 800886a:	9307      	strge	r3, [sp, #28]
 800886c:	9307      	strlt	r3, [sp, #28]
 800886e:	bfb8      	it	lt
 8008870:	9204      	strlt	r2, [sp, #16]
 8008872:	7823      	ldrb	r3, [r4, #0]
 8008874:	2b2e      	cmp	r3, #46	; 0x2e
 8008876:	d10c      	bne.n	8008892 <_vfiprintf_r+0x176>
 8008878:	7863      	ldrb	r3, [r4, #1]
 800887a:	2b2a      	cmp	r3, #42	; 0x2a
 800887c:	d135      	bne.n	80088ea <_vfiprintf_r+0x1ce>
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	1d1a      	adds	r2, r3, #4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	9203      	str	r2, [sp, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	bfb8      	it	lt
 800888a:	f04f 33ff 	movlt.w	r3, #4294967295
 800888e:	3402      	adds	r4, #2
 8008890:	9305      	str	r3, [sp, #20]
 8008892:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008978 <_vfiprintf_r+0x25c>
 8008896:	7821      	ldrb	r1, [r4, #0]
 8008898:	2203      	movs	r2, #3
 800889a:	4650      	mov	r0, sl
 800889c:	f7f7 fce8 	bl	8000270 <memchr>
 80088a0:	b140      	cbz	r0, 80088b4 <_vfiprintf_r+0x198>
 80088a2:	2340      	movs	r3, #64	; 0x40
 80088a4:	eba0 000a 	sub.w	r0, r0, sl
 80088a8:	fa03 f000 	lsl.w	r0, r3, r0
 80088ac:	9b04      	ldr	r3, [sp, #16]
 80088ae:	4303      	orrs	r3, r0
 80088b0:	3401      	adds	r4, #1
 80088b2:	9304      	str	r3, [sp, #16]
 80088b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b8:	482c      	ldr	r0, [pc, #176]	; (800896c <_vfiprintf_r+0x250>)
 80088ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088be:	2206      	movs	r2, #6
 80088c0:	f7f7 fcd6 	bl	8000270 <memchr>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d03f      	beq.n	8008948 <_vfiprintf_r+0x22c>
 80088c8:	4b29      	ldr	r3, [pc, #164]	; (8008970 <_vfiprintf_r+0x254>)
 80088ca:	bb1b      	cbnz	r3, 8008914 <_vfiprintf_r+0x1f8>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	3307      	adds	r3, #7
 80088d0:	f023 0307 	bic.w	r3, r3, #7
 80088d4:	3308      	adds	r3, #8
 80088d6:	9303      	str	r3, [sp, #12]
 80088d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088da:	443b      	add	r3, r7
 80088dc:	9309      	str	r3, [sp, #36]	; 0x24
 80088de:	e767      	b.n	80087b0 <_vfiprintf_r+0x94>
 80088e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80088e4:	460c      	mov	r4, r1
 80088e6:	2001      	movs	r0, #1
 80088e8:	e7a5      	b.n	8008836 <_vfiprintf_r+0x11a>
 80088ea:	2300      	movs	r3, #0
 80088ec:	3401      	adds	r4, #1
 80088ee:	9305      	str	r3, [sp, #20]
 80088f0:	4619      	mov	r1, r3
 80088f2:	f04f 0c0a 	mov.w	ip, #10
 80088f6:	4620      	mov	r0, r4
 80088f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088fc:	3a30      	subs	r2, #48	; 0x30
 80088fe:	2a09      	cmp	r2, #9
 8008900:	d903      	bls.n	800890a <_vfiprintf_r+0x1ee>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0c5      	beq.n	8008892 <_vfiprintf_r+0x176>
 8008906:	9105      	str	r1, [sp, #20]
 8008908:	e7c3      	b.n	8008892 <_vfiprintf_r+0x176>
 800890a:	fb0c 2101 	mla	r1, ip, r1, r2
 800890e:	4604      	mov	r4, r0
 8008910:	2301      	movs	r3, #1
 8008912:	e7f0      	b.n	80088f6 <_vfiprintf_r+0x1da>
 8008914:	ab03      	add	r3, sp, #12
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	462a      	mov	r2, r5
 800891a:	4b16      	ldr	r3, [pc, #88]	; (8008974 <_vfiprintf_r+0x258>)
 800891c:	a904      	add	r1, sp, #16
 800891e:	4630      	mov	r0, r6
 8008920:	f3af 8000 	nop.w
 8008924:	4607      	mov	r7, r0
 8008926:	1c78      	adds	r0, r7, #1
 8008928:	d1d6      	bne.n	80088d8 <_vfiprintf_r+0x1bc>
 800892a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800892c:	07d9      	lsls	r1, r3, #31
 800892e:	d405      	bmi.n	800893c <_vfiprintf_r+0x220>
 8008930:	89ab      	ldrh	r3, [r5, #12]
 8008932:	059a      	lsls	r2, r3, #22
 8008934:	d402      	bmi.n	800893c <_vfiprintf_r+0x220>
 8008936:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008938:	f7ff fd7f 	bl	800843a <__retarget_lock_release_recursive>
 800893c:	89ab      	ldrh	r3, [r5, #12]
 800893e:	065b      	lsls	r3, r3, #25
 8008940:	f53f af12 	bmi.w	8008768 <_vfiprintf_r+0x4c>
 8008944:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008946:	e711      	b.n	800876c <_vfiprintf_r+0x50>
 8008948:	ab03      	add	r3, sp, #12
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	462a      	mov	r2, r5
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <_vfiprintf_r+0x258>)
 8008950:	a904      	add	r1, sp, #16
 8008952:	4630      	mov	r0, r6
 8008954:	f000 f880 	bl	8008a58 <_printf_i>
 8008958:	e7e4      	b.n	8008924 <_vfiprintf_r+0x208>
 800895a:	bf00      	nop
 800895c:	0800903c 	.word	0x0800903c
 8008960:	0800905c 	.word	0x0800905c
 8008964:	0800901c 	.word	0x0800901c
 8008968:	0800907c 	.word	0x0800907c
 800896c:	08009086 	.word	0x08009086
 8008970:	00000000 	.word	0x00000000
 8008974:	080086f7 	.word	0x080086f7
 8008978:	08009082 	.word	0x08009082

0800897c <_printf_common>:
 800897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	4616      	mov	r6, r2
 8008982:	4699      	mov	r9, r3
 8008984:	688a      	ldr	r2, [r1, #8]
 8008986:	690b      	ldr	r3, [r1, #16]
 8008988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800898c:	4293      	cmp	r3, r2
 800898e:	bfb8      	it	lt
 8008990:	4613      	movlt	r3, r2
 8008992:	6033      	str	r3, [r6, #0]
 8008994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008998:	4607      	mov	r7, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b10a      	cbz	r2, 80089a2 <_printf_common+0x26>
 800899e:	3301      	adds	r3, #1
 80089a0:	6033      	str	r3, [r6, #0]
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	0699      	lsls	r1, r3, #26
 80089a6:	bf42      	ittt	mi
 80089a8:	6833      	ldrmi	r3, [r6, #0]
 80089aa:	3302      	addmi	r3, #2
 80089ac:	6033      	strmi	r3, [r6, #0]
 80089ae:	6825      	ldr	r5, [r4, #0]
 80089b0:	f015 0506 	ands.w	r5, r5, #6
 80089b4:	d106      	bne.n	80089c4 <_printf_common+0x48>
 80089b6:	f104 0a19 	add.w	sl, r4, #25
 80089ba:	68e3      	ldr	r3, [r4, #12]
 80089bc:	6832      	ldr	r2, [r6, #0]
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	42ab      	cmp	r3, r5
 80089c2:	dc26      	bgt.n	8008a12 <_printf_common+0x96>
 80089c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089c8:	1e13      	subs	r3, r2, #0
 80089ca:	6822      	ldr	r2, [r4, #0]
 80089cc:	bf18      	it	ne
 80089ce:	2301      	movne	r3, #1
 80089d0:	0692      	lsls	r2, r2, #26
 80089d2:	d42b      	bmi.n	8008a2c <_printf_common+0xb0>
 80089d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089d8:	4649      	mov	r1, r9
 80089da:	4638      	mov	r0, r7
 80089dc:	47c0      	blx	r8
 80089de:	3001      	adds	r0, #1
 80089e0:	d01e      	beq.n	8008a20 <_printf_common+0xa4>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	68e5      	ldr	r5, [r4, #12]
 80089e6:	6832      	ldr	r2, [r6, #0]
 80089e8:	f003 0306 	and.w	r3, r3, #6
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	bf08      	it	eq
 80089f0:	1aad      	subeq	r5, r5, r2
 80089f2:	68a3      	ldr	r3, [r4, #8]
 80089f4:	6922      	ldr	r2, [r4, #16]
 80089f6:	bf0c      	ite	eq
 80089f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089fc:	2500      	movne	r5, #0
 80089fe:	4293      	cmp	r3, r2
 8008a00:	bfc4      	itt	gt
 8008a02:	1a9b      	subgt	r3, r3, r2
 8008a04:	18ed      	addgt	r5, r5, r3
 8008a06:	2600      	movs	r6, #0
 8008a08:	341a      	adds	r4, #26
 8008a0a:	42b5      	cmp	r5, r6
 8008a0c:	d11a      	bne.n	8008a44 <_printf_common+0xc8>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e008      	b.n	8008a24 <_printf_common+0xa8>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4652      	mov	r2, sl
 8008a16:	4649      	mov	r1, r9
 8008a18:	4638      	mov	r0, r7
 8008a1a:	47c0      	blx	r8
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d103      	bne.n	8008a28 <_printf_common+0xac>
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
 8008a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a28:	3501      	adds	r5, #1
 8008a2a:	e7c6      	b.n	80089ba <_printf_common+0x3e>
 8008a2c:	18e1      	adds	r1, r4, r3
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	2030      	movs	r0, #48	; 0x30
 8008a32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a36:	4422      	add	r2, r4
 8008a38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a40:	3302      	adds	r3, #2
 8008a42:	e7c7      	b.n	80089d4 <_printf_common+0x58>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4622      	mov	r2, r4
 8008a48:	4649      	mov	r1, r9
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	47c0      	blx	r8
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d0e6      	beq.n	8008a20 <_printf_common+0xa4>
 8008a52:	3601      	adds	r6, #1
 8008a54:	e7d9      	b.n	8008a0a <_printf_common+0x8e>
	...

08008a58 <_printf_i>:
 8008a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a5c:	7e0f      	ldrb	r7, [r1, #24]
 8008a5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a60:	2f78      	cmp	r7, #120	; 0x78
 8008a62:	4691      	mov	r9, r2
 8008a64:	4680      	mov	r8, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	469a      	mov	sl, r3
 8008a6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a6e:	d807      	bhi.n	8008a80 <_printf_i+0x28>
 8008a70:	2f62      	cmp	r7, #98	; 0x62
 8008a72:	d80a      	bhi.n	8008a8a <_printf_i+0x32>
 8008a74:	2f00      	cmp	r7, #0
 8008a76:	f000 80d8 	beq.w	8008c2a <_printf_i+0x1d2>
 8008a7a:	2f58      	cmp	r7, #88	; 0x58
 8008a7c:	f000 80a3 	beq.w	8008bc6 <_printf_i+0x16e>
 8008a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a88:	e03a      	b.n	8008b00 <_printf_i+0xa8>
 8008a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a8e:	2b15      	cmp	r3, #21
 8008a90:	d8f6      	bhi.n	8008a80 <_printf_i+0x28>
 8008a92:	a101      	add	r1, pc, #4	; (adr r1, 8008a98 <_printf_i+0x40>)
 8008a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a98:	08008af1 	.word	0x08008af1
 8008a9c:	08008b05 	.word	0x08008b05
 8008aa0:	08008a81 	.word	0x08008a81
 8008aa4:	08008a81 	.word	0x08008a81
 8008aa8:	08008a81 	.word	0x08008a81
 8008aac:	08008a81 	.word	0x08008a81
 8008ab0:	08008b05 	.word	0x08008b05
 8008ab4:	08008a81 	.word	0x08008a81
 8008ab8:	08008a81 	.word	0x08008a81
 8008abc:	08008a81 	.word	0x08008a81
 8008ac0:	08008a81 	.word	0x08008a81
 8008ac4:	08008c11 	.word	0x08008c11
 8008ac8:	08008b35 	.word	0x08008b35
 8008acc:	08008bf3 	.word	0x08008bf3
 8008ad0:	08008a81 	.word	0x08008a81
 8008ad4:	08008a81 	.word	0x08008a81
 8008ad8:	08008c33 	.word	0x08008c33
 8008adc:	08008a81 	.word	0x08008a81
 8008ae0:	08008b35 	.word	0x08008b35
 8008ae4:	08008a81 	.word	0x08008a81
 8008ae8:	08008a81 	.word	0x08008a81
 8008aec:	08008bfb 	.word	0x08008bfb
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	1d1a      	adds	r2, r3, #4
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	602a      	str	r2, [r5, #0]
 8008af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b00:	2301      	movs	r3, #1
 8008b02:	e0a3      	b.n	8008c4c <_printf_i+0x1f4>
 8008b04:	6820      	ldr	r0, [r4, #0]
 8008b06:	6829      	ldr	r1, [r5, #0]
 8008b08:	0606      	lsls	r6, r0, #24
 8008b0a:	f101 0304 	add.w	r3, r1, #4
 8008b0e:	d50a      	bpl.n	8008b26 <_printf_i+0xce>
 8008b10:	680e      	ldr	r6, [r1, #0]
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	2e00      	cmp	r6, #0
 8008b16:	da03      	bge.n	8008b20 <_printf_i+0xc8>
 8008b18:	232d      	movs	r3, #45	; 0x2d
 8008b1a:	4276      	negs	r6, r6
 8008b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b20:	485e      	ldr	r0, [pc, #376]	; (8008c9c <_printf_i+0x244>)
 8008b22:	230a      	movs	r3, #10
 8008b24:	e019      	b.n	8008b5a <_printf_i+0x102>
 8008b26:	680e      	ldr	r6, [r1, #0]
 8008b28:	602b      	str	r3, [r5, #0]
 8008b2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b2e:	bf18      	it	ne
 8008b30:	b236      	sxthne	r6, r6
 8008b32:	e7ef      	b.n	8008b14 <_printf_i+0xbc>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	6820      	ldr	r0, [r4, #0]
 8008b38:	1d19      	adds	r1, r3, #4
 8008b3a:	6029      	str	r1, [r5, #0]
 8008b3c:	0601      	lsls	r1, r0, #24
 8008b3e:	d501      	bpl.n	8008b44 <_printf_i+0xec>
 8008b40:	681e      	ldr	r6, [r3, #0]
 8008b42:	e002      	b.n	8008b4a <_printf_i+0xf2>
 8008b44:	0646      	lsls	r6, r0, #25
 8008b46:	d5fb      	bpl.n	8008b40 <_printf_i+0xe8>
 8008b48:	881e      	ldrh	r6, [r3, #0]
 8008b4a:	4854      	ldr	r0, [pc, #336]	; (8008c9c <_printf_i+0x244>)
 8008b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8008b4e:	bf0c      	ite	eq
 8008b50:	2308      	moveq	r3, #8
 8008b52:	230a      	movne	r3, #10
 8008b54:	2100      	movs	r1, #0
 8008b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b5a:	6865      	ldr	r5, [r4, #4]
 8008b5c:	60a5      	str	r5, [r4, #8]
 8008b5e:	2d00      	cmp	r5, #0
 8008b60:	bfa2      	ittt	ge
 8008b62:	6821      	ldrge	r1, [r4, #0]
 8008b64:	f021 0104 	bicge.w	r1, r1, #4
 8008b68:	6021      	strge	r1, [r4, #0]
 8008b6a:	b90e      	cbnz	r6, 8008b70 <_printf_i+0x118>
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	d04d      	beq.n	8008c0c <_printf_i+0x1b4>
 8008b70:	4615      	mov	r5, r2
 8008b72:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b76:	fb03 6711 	mls	r7, r3, r1, r6
 8008b7a:	5dc7      	ldrb	r7, [r0, r7]
 8008b7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b80:	4637      	mov	r7, r6
 8008b82:	42bb      	cmp	r3, r7
 8008b84:	460e      	mov	r6, r1
 8008b86:	d9f4      	bls.n	8008b72 <_printf_i+0x11a>
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d10b      	bne.n	8008ba4 <_printf_i+0x14c>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	07de      	lsls	r6, r3, #31
 8008b90:	d508      	bpl.n	8008ba4 <_printf_i+0x14c>
 8008b92:	6923      	ldr	r3, [r4, #16]
 8008b94:	6861      	ldr	r1, [r4, #4]
 8008b96:	4299      	cmp	r1, r3
 8008b98:	bfde      	ittt	le
 8008b9a:	2330      	movle	r3, #48	; 0x30
 8008b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ba4:	1b52      	subs	r2, r2, r5
 8008ba6:	6122      	str	r2, [r4, #16]
 8008ba8:	f8cd a000 	str.w	sl, [sp]
 8008bac:	464b      	mov	r3, r9
 8008bae:	aa03      	add	r2, sp, #12
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	f7ff fee2 	bl	800897c <_printf_common>
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d14c      	bne.n	8008c56 <_printf_i+0x1fe>
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	b004      	add	sp, #16
 8008bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc6:	4835      	ldr	r0, [pc, #212]	; (8008c9c <_printf_i+0x244>)
 8008bc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bcc:	6829      	ldr	r1, [r5, #0]
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bd4:	6029      	str	r1, [r5, #0]
 8008bd6:	061d      	lsls	r5, r3, #24
 8008bd8:	d514      	bpl.n	8008c04 <_printf_i+0x1ac>
 8008bda:	07df      	lsls	r7, r3, #31
 8008bdc:	bf44      	itt	mi
 8008bde:	f043 0320 	orrmi.w	r3, r3, #32
 8008be2:	6023      	strmi	r3, [r4, #0]
 8008be4:	b91e      	cbnz	r6, 8008bee <_printf_i+0x196>
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	f023 0320 	bic.w	r3, r3, #32
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	2310      	movs	r3, #16
 8008bf0:	e7b0      	b.n	8008b54 <_printf_i+0xfc>
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	f043 0320 	orr.w	r3, r3, #32
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	2378      	movs	r3, #120	; 0x78
 8008bfc:	4828      	ldr	r0, [pc, #160]	; (8008ca0 <_printf_i+0x248>)
 8008bfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c02:	e7e3      	b.n	8008bcc <_printf_i+0x174>
 8008c04:	0659      	lsls	r1, r3, #25
 8008c06:	bf48      	it	mi
 8008c08:	b2b6      	uxthmi	r6, r6
 8008c0a:	e7e6      	b.n	8008bda <_printf_i+0x182>
 8008c0c:	4615      	mov	r5, r2
 8008c0e:	e7bb      	b.n	8008b88 <_printf_i+0x130>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	6826      	ldr	r6, [r4, #0]
 8008c14:	6961      	ldr	r1, [r4, #20]
 8008c16:	1d18      	adds	r0, r3, #4
 8008c18:	6028      	str	r0, [r5, #0]
 8008c1a:	0635      	lsls	r5, r6, #24
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	d501      	bpl.n	8008c24 <_printf_i+0x1cc>
 8008c20:	6019      	str	r1, [r3, #0]
 8008c22:	e002      	b.n	8008c2a <_printf_i+0x1d2>
 8008c24:	0670      	lsls	r0, r6, #25
 8008c26:	d5fb      	bpl.n	8008c20 <_printf_i+0x1c8>
 8008c28:	8019      	strh	r1, [r3, #0]
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	6123      	str	r3, [r4, #16]
 8008c2e:	4615      	mov	r5, r2
 8008c30:	e7ba      	b.n	8008ba8 <_printf_i+0x150>
 8008c32:	682b      	ldr	r3, [r5, #0]
 8008c34:	1d1a      	adds	r2, r3, #4
 8008c36:	602a      	str	r2, [r5, #0]
 8008c38:	681d      	ldr	r5, [r3, #0]
 8008c3a:	6862      	ldr	r2, [r4, #4]
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f7f7 fb16 	bl	8000270 <memchr>
 8008c44:	b108      	cbz	r0, 8008c4a <_printf_i+0x1f2>
 8008c46:	1b40      	subs	r0, r0, r5
 8008c48:	6060      	str	r0, [r4, #4]
 8008c4a:	6863      	ldr	r3, [r4, #4]
 8008c4c:	6123      	str	r3, [r4, #16]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c54:	e7a8      	b.n	8008ba8 <_printf_i+0x150>
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	462a      	mov	r2, r5
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	47d0      	blx	sl
 8008c60:	3001      	adds	r0, #1
 8008c62:	d0ab      	beq.n	8008bbc <_printf_i+0x164>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	079b      	lsls	r3, r3, #30
 8008c68:	d413      	bmi.n	8008c92 <_printf_i+0x23a>
 8008c6a:	68e0      	ldr	r0, [r4, #12]
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	4298      	cmp	r0, r3
 8008c70:	bfb8      	it	lt
 8008c72:	4618      	movlt	r0, r3
 8008c74:	e7a4      	b.n	8008bc0 <_printf_i+0x168>
 8008c76:	2301      	movs	r3, #1
 8008c78:	4632      	mov	r2, r6
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	47d0      	blx	sl
 8008c80:	3001      	adds	r0, #1
 8008c82:	d09b      	beq.n	8008bbc <_printf_i+0x164>
 8008c84:	3501      	adds	r5, #1
 8008c86:	68e3      	ldr	r3, [r4, #12]
 8008c88:	9903      	ldr	r1, [sp, #12]
 8008c8a:	1a5b      	subs	r3, r3, r1
 8008c8c:	42ab      	cmp	r3, r5
 8008c8e:	dcf2      	bgt.n	8008c76 <_printf_i+0x21e>
 8008c90:	e7eb      	b.n	8008c6a <_printf_i+0x212>
 8008c92:	2500      	movs	r5, #0
 8008c94:	f104 0619 	add.w	r6, r4, #25
 8008c98:	e7f5      	b.n	8008c86 <_printf_i+0x22e>
 8008c9a:	bf00      	nop
 8008c9c:	0800908d 	.word	0x0800908d
 8008ca0:	0800909e 	.word	0x0800909e

08008ca4 <_sbrk_r>:
 8008ca4:	b538      	push	{r3, r4, r5, lr}
 8008ca6:	4d06      	ldr	r5, [pc, #24]	; (8008cc0 <_sbrk_r+0x1c>)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4604      	mov	r4, r0
 8008cac:	4608      	mov	r0, r1
 8008cae:	602b      	str	r3, [r5, #0]
 8008cb0:	f7f8 f986 	bl	8000fc0 <_sbrk>
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	d102      	bne.n	8008cbe <_sbrk_r+0x1a>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	b103      	cbz	r3, 8008cbe <_sbrk_r+0x1a>
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
 8008cc0:	20013930 	.word	0x20013930

08008cc4 <__sread>:
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ccc:	f000 f88e 	bl	8008dec <_read_r>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	bfab      	itete	ge
 8008cd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8008cd8:	181b      	addge	r3, r3, r0
 8008cda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cde:	bfac      	ite	ge
 8008ce0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ce2:	81a3      	strhlt	r3, [r4, #12]
 8008ce4:	bd10      	pop	{r4, pc}

08008ce6 <__swrite>:
 8008ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cea:	461f      	mov	r7, r3
 8008cec:	898b      	ldrh	r3, [r1, #12]
 8008cee:	05db      	lsls	r3, r3, #23
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	4616      	mov	r6, r2
 8008cf6:	d505      	bpl.n	8008d04 <__swrite+0x1e>
 8008cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f000 f856 	bl	8008db0 <_lseek_r>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	4632      	mov	r2, r6
 8008d12:	463b      	mov	r3, r7
 8008d14:	4628      	mov	r0, r5
 8008d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1a:	f7ff b825 	b.w	8007d68 <_write_r>

08008d1e <__sseek>:
 8008d1e:	b510      	push	{r4, lr}
 8008d20:	460c      	mov	r4, r1
 8008d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d26:	f000 f843 	bl	8008db0 <_lseek_r>
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	bf15      	itete	ne
 8008d30:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d3a:	81a3      	strheq	r3, [r4, #12]
 8008d3c:	bf18      	it	ne
 8008d3e:	81a3      	strhne	r3, [r4, #12]
 8008d40:	bd10      	pop	{r4, pc}

08008d42 <__sclose>:
 8008d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d46:	f000 b801 	b.w	8008d4c <_close_r>
	...

08008d4c <_close_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d06      	ldr	r5, [pc, #24]	; (8008d68 <_close_r+0x1c>)
 8008d50:	2300      	movs	r3, #0
 8008d52:	4604      	mov	r4, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	602b      	str	r3, [r5, #0]
 8008d58:	f7f8 f8fd 	bl	8000f56 <_close>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	d102      	bne.n	8008d66 <_close_r+0x1a>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	b103      	cbz	r3, 8008d66 <_close_r+0x1a>
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	bd38      	pop	{r3, r4, r5, pc}
 8008d68:	20013930 	.word	0x20013930

08008d6c <_fstat_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d07      	ldr	r5, [pc, #28]	; (8008d8c <_fstat_r+0x20>)
 8008d70:	2300      	movs	r3, #0
 8008d72:	4604      	mov	r4, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	4611      	mov	r1, r2
 8008d78:	602b      	str	r3, [r5, #0]
 8008d7a:	f7f8 f8f8 	bl	8000f6e <_fstat>
 8008d7e:	1c43      	adds	r3, r0, #1
 8008d80:	d102      	bne.n	8008d88 <_fstat_r+0x1c>
 8008d82:	682b      	ldr	r3, [r5, #0]
 8008d84:	b103      	cbz	r3, 8008d88 <_fstat_r+0x1c>
 8008d86:	6023      	str	r3, [r4, #0]
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20013930 	.word	0x20013930

08008d90 <_isatty_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d06      	ldr	r5, [pc, #24]	; (8008dac <_isatty_r+0x1c>)
 8008d94:	2300      	movs	r3, #0
 8008d96:	4604      	mov	r4, r0
 8008d98:	4608      	mov	r0, r1
 8008d9a:	602b      	str	r3, [r5, #0]
 8008d9c:	f7f8 f8f7 	bl	8000f8e <_isatty>
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	d102      	bne.n	8008daa <_isatty_r+0x1a>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	b103      	cbz	r3, 8008daa <_isatty_r+0x1a>
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	bd38      	pop	{r3, r4, r5, pc}
 8008dac:	20013930 	.word	0x20013930

08008db0 <_lseek_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4d07      	ldr	r5, [pc, #28]	; (8008dd0 <_lseek_r+0x20>)
 8008db4:	4604      	mov	r4, r0
 8008db6:	4608      	mov	r0, r1
 8008db8:	4611      	mov	r1, r2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	602a      	str	r2, [r5, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f7f8 f8f0 	bl	8000fa4 <_lseek>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d102      	bne.n	8008dce <_lseek_r+0x1e>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	b103      	cbz	r3, 8008dce <_lseek_r+0x1e>
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	20013930 	.word	0x20013930

08008dd4 <__malloc_lock>:
 8008dd4:	4801      	ldr	r0, [pc, #4]	; (8008ddc <__malloc_lock+0x8>)
 8008dd6:	f7ff bb2f 	b.w	8008438 <__retarget_lock_acquire_recursive>
 8008dda:	bf00      	nop
 8008ddc:	20013923 	.word	0x20013923

08008de0 <__malloc_unlock>:
 8008de0:	4801      	ldr	r0, [pc, #4]	; (8008de8 <__malloc_unlock+0x8>)
 8008de2:	f7ff bb2a 	b.w	800843a <__retarget_lock_release_recursive>
 8008de6:	bf00      	nop
 8008de8:	20013923 	.word	0x20013923

08008dec <_read_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	4d07      	ldr	r5, [pc, #28]	; (8008e0c <_read_r+0x20>)
 8008df0:	4604      	mov	r4, r0
 8008df2:	4608      	mov	r0, r1
 8008df4:	4611      	mov	r1, r2
 8008df6:	2200      	movs	r2, #0
 8008df8:	602a      	str	r2, [r5, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f7f8 f88e 	bl	8000f1c <_read>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d102      	bne.n	8008e0a <_read_r+0x1e>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	b103      	cbz	r3, 8008e0a <_read_r+0x1e>
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	bd38      	pop	{r3, r4, r5, pc}
 8008e0c:	20013930 	.word	0x20013930

08008e10 <_init>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr

08008e1c <_fini>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	bf00      	nop
 8008e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e22:	bc08      	pop	{r3}
 8008e24:	469e      	mov	lr, r3
 8008e26:	4770      	bx	lr


002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08008c1c  08008c1c  00018c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e64  08008e64  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008e64  08008e64  00018e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e6c  08008e6c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e6c  08008e6c  00018e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e70  08008e70  00018e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000138b0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013930  20013930  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017465  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034fd  00000000  00000000  00037515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  0003aa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001328  00000000  00000000  0003bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ce2  00000000  00000000  0003d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000172ce  00000000  00000000  00061f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da849  00000000  00000000  000791d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00153a19  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e8c  00000000  00000000  00153a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c04 	.word	0x08008c04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08008c04 	.word	0x08008c04

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f4c 	.word	0x20012f4c
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fcc7 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f87d 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8e5 	bl	80007f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // enable CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000626:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <main+0xd4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a2f      	ldr	r2, [pc, #188]	; (80006e8 <main+0xd4>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000632:	482e      	ldr	r0, [pc, #184]	; (80006ec <main+0xd8>)
 8000634:	f004 feee 	bl	8005414 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000638:	f004 fc5a 	bl	8004ef0 <SEGGER_SYSVIEW_Conf>
  printf(" start here");
 800063c:	482c      	ldr	r0, [pc, #176]	; (80006f0 <main+0xdc>)
 800063e:	f007 faef 	bl	8007c20 <iprintf>

  status = xTaskCreate(LED_green_handler, "TASK_GREEN", 200, NULL, 3, &task_green_handle);
 8000642:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <main+0xe0>)
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2303      	movs	r3, #3
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	22c8      	movs	r2, #200	; 0xc8
 800064e:	492a      	ldr	r1, [pc, #168]	; (80006f8 <main+0xe4>)
 8000650:	482a      	ldr	r0, [pc, #168]	; (80006fc <main+0xe8>)
 8000652:	f002 faf3 	bl	8002c3c <xTaskCreate>
 8000656:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d00a      	beq.n	8000674 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000670:	bf00      	nop
 8000672:	e7fe      	b.n	8000672 <main+0x5e>

  next_task_handle = task_green_handle;
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <main+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <main+0xec>)
 800067a:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(LED_orange_handler, "TASK_ORANGE", 200, NULL, 2, &task_orange_handle);
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <main+0xf0>)
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	2302      	movs	r3, #2
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2300      	movs	r3, #0
 8000686:	22c8      	movs	r2, #200	; 0xc8
 8000688:	491f      	ldr	r1, [pc, #124]	; (8000708 <main+0xf4>)
 800068a:	4820      	ldr	r0, [pc, #128]	; (800070c <main+0xf8>)
 800068c:	f002 fad6 	bl	8002c3c <xTaskCreate>
 8000690:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d00a      	beq.n	80006ae <main+0x9a>
        __asm volatile
 8000698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800069c:	f383 8811 	msr	BASEPRI, r3
 80006a0:	f3bf 8f6f 	isb	sy
 80006a4:	f3bf 8f4f 	dsb	sy
 80006a8:	607b      	str	r3, [r7, #4]
    }
 80006aa:	bf00      	nop
 80006ac:	e7fe      	b.n	80006ac <main+0x98>

  status = xTaskCreate(LED_red_handler, "TASK_RED", 200, NULL, 1, &task_red_handle);
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <main+0xfc>)
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2301      	movs	r3, #1
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	22c8      	movs	r2, #200	; 0xc8
 80006ba:	4916      	ldr	r1, [pc, #88]	; (8000714 <main+0x100>)
 80006bc:	4816      	ldr	r0, [pc, #88]	; (8000718 <main+0x104>)
 80006be:	f002 fabd 	bl	8002c3c <xTaskCreate>
 80006c2:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d00a      	beq.n	80006e0 <main+0xcc>
        __asm volatile
 80006ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ce:	f383 8811 	msr	BASEPRI, r3
 80006d2:	f3bf 8f6f 	isb	sy
 80006d6:	f3bf 8f4f 	dsb	sy
 80006da:	603b      	str	r3, [r7, #0]
    }
 80006dc:	bf00      	nop
 80006de:	e7fe      	b.n	80006de <main+0xca>

  // start task scheduler
  vTaskStartScheduler();
 80006e0:	f002 fcd4 	bl	800308c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <main+0xd0>
 80006e6:	bf00      	nop
 80006e8:	e0001000 	.word	0xe0001000
 80006ec:	0007a120 	.word	0x0007a120
 80006f0:	08008c1c 	.word	0x08008c1c
 80006f4:	2000009c 	.word	0x2000009c
 80006f8:	08008c28 	.word	0x08008c28
 80006fc:	08000b0d 	.word	0x08000b0d
 8000700:	200000a8 	.word	0x200000a8
 8000704:	200000a0 	.word	0x200000a0
 8000708:	08008c34 	.word	0x08008c34
 800070c:	08000b79 	.word	0x08000b79
 8000710:	200000a4 	.word	0x200000a4
 8000714:	08008c40 	.word	0x08008c40
 8000718:	08000be5 	.word	0x08000be5

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f007 fa70 	bl	8007c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <SystemClock_Config+0xcc>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <SystemClock_Config+0xcc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <SystemClock_Config+0xd0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <SystemClock_Config+0xd0>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <SystemClock_Config+0xd0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2310      	movs	r3, #16
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800078c:	2308      	movs	r3, #8
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000790:	2332      	movs	r3, #50	; 0x32
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000798:	2307      	movs	r3, #7
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 ff1b 	bl	80015dc <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007ac:	f000 fa64 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 f97c 	bl	8001acc <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007da:	f000 fa4d 	bl	8000c78 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4ba6      	ldr	r3, [pc, #664]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4aa5      	ldr	r2, [pc, #660]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4ba3      	ldr	r3, [pc, #652]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0310 	and.w	r3, r3, #16
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b9f      	ldr	r3, [pc, #636]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a9e      	ldr	r2, [pc, #632]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b9c      	ldr	r3, [pc, #624]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b98      	ldr	r3, [pc, #608]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a97      	ldr	r2, [pc, #604]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b95      	ldr	r3, [pc, #596]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b91      	ldr	r3, [pc, #580]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a90      	ldr	r2, [pc, #576]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b8e      	ldr	r3, [pc, #568]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b8a      	ldr	r3, [pc, #552]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a89      	ldr	r2, [pc, #548]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b87      	ldr	r3, [pc, #540]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b83      	ldr	r3, [pc, #524]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a82      	ldr	r2, [pc, #520]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b80      	ldr	r3, [pc, #512]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2108      	movs	r1, #8
 80008b2:	487d      	ldr	r0, [pc, #500]	; (8000aa8 <MX_GPIO_Init+0x2b8>)
 80008b4:	f000 fe3a 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2101      	movs	r1, #1
 80008bc:	487b      	ldr	r0, [pc, #492]	; (8000aac <MX_GPIO_Init+0x2bc>)
 80008be:	f000 fe35 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c2:	2200      	movs	r2, #0
 80008c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008c8:	4879      	ldr	r0, [pc, #484]	; (8000ab0 <MX_GPIO_Init+0x2c0>)
 80008ca:	f000 fe2f 	bl	800152c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ce:	2308      	movs	r3, #8
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4870      	ldr	r0, [pc, #448]	; (8000aa8 <MX_GPIO_Init+0x2b8>)
 80008e6:	f000 fc85 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	486a      	ldr	r0, [pc, #424]	; (8000aac <MX_GPIO_Init+0x2bc>)
 8000902:	f000 fc77 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000906:	2308      	movs	r3, #8
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000916:	2305      	movs	r3, #5
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4862      	ldr	r0, [pc, #392]	; (8000aac <MX_GPIO_Init+0x2bc>)
 8000922:	f000 fc67 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800092a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	485e      	ldr	r0, [pc, #376]	; (8000ab4 <MX_GPIO_Init+0x2c4>)
 800093c:	f000 fc5a 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000940:	2310      	movs	r3, #16
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000950:	2306      	movs	r3, #6
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4856      	ldr	r0, [pc, #344]	; (8000ab4 <MX_GPIO_Init+0x2c4>)
 800095c:	f000 fc4a 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000960:	23e0      	movs	r3, #224	; 0xe0
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000970:	2305      	movs	r3, #5
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	484e      	ldr	r0, [pc, #312]	; (8000ab4 <MX_GPIO_Init+0x2c4>)
 800097c:	f000 fc3a 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000980:	2304      	movs	r3, #4
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4849      	ldr	r0, [pc, #292]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000994:	f000 fc2e 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009aa:	2305      	movs	r3, #5
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4840      	ldr	r0, [pc, #256]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 80009b6:	f000 fc1d 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ba:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009be:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4837      	ldr	r0, [pc, #220]	; (8000ab0 <MX_GPIO_Init+0x2c0>)
 80009d4:	f000 fc0e 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009d8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ea:	2306      	movs	r3, #6
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	482d      	ldr	r0, [pc, #180]	; (8000aac <MX_GPIO_Init+0x2bc>)
 80009f6:	f000 fbfd 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4829      	ldr	r0, [pc, #164]	; (8000ab4 <MX_GPIO_Init+0x2c4>)
 8000a10:	f000 fbf0 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a26:	230a      	movs	r3, #10
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4820      	ldr	r0, [pc, #128]	; (8000ab4 <MX_GPIO_Init+0x2c4>)
 8000a32:	f000 fbdf 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a36:	2320      	movs	r3, #32
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4819      	ldr	r0, [pc, #100]	; (8000ab0 <MX_GPIO_Init+0x2c0>)
 8000a4a:	f000 fbd3 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a4e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a54:	2312      	movs	r3, #18
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a60:	2304      	movs	r3, #4
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000a6c:	f000 fbc2 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a74:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <MX_GPIO_Init+0x2b8>)
 8000a86:	f000 fbb5 	bl	80011f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2106      	movs	r1, #6
 8000a8e:	2006      	movs	r0, #6
 8000a90:	f000 fb86 	bl	80011a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a94:	2006      	movs	r0, #6
 8000a96:	f000 fb9f 	bl	80011d8 <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3730      	adds	r7, #48	; 0x30
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020400 	.word	0x40020400

08000abc <button_interrupt_handler>:

/* USER CODE BEGIN 4 */
void button_interrupt_handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken = pdFALSE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();
 8000ac6:	f006 fd59 	bl	800757c <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&pxHigherPriorityTaskWoken);
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <button_interrupt_handler+0x48>)
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	f003 f8e2 	bl	8003ca4 <xTaskGenericNotifyFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d007      	beq.n	8000af6 <button_interrupt_handler+0x3a>
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <button_interrupt_handler+0x4c>)
 8000ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	f3bf 8f4f 	dsb	sy
 8000af2:	f3bf 8f6f 	isb	sy
	traceISR_EXIT();
 8000af6:	f006 fd83 	bl	8007600 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000a8 	.word	0x200000a8
 8000b08:	e000ed04 	.word	0xe000ed04

08000b0c <LED_green_handler>:

static void LED_green_handler(void* parameters)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af02      	add	r7, sp, #8
 8000b12:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f007 f909 	bl	8007d2c <puts>
		// GREEN LED: LD12
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000b1a:	4813      	ldr	r0, [pc, #76]	; (8000b68 <LED_green_handler+0x5c>)
 8000b1c:	f006 ff80 	bl	8007a20 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <LED_green_handler+0x60>)
 8000b26:	f000 fd1a 	bl	800155e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2300      	movs	r3, #0
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2000      	movs	r0, #0
 8000b38:	f003 f82c 	bl	8003b94 <xTaskGenericNotifyWait>
 8000b3c:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d1e7      	bne.n	8000b14 <LED_green_handler+0x8>
		{
			portENTER_CRITICAL();
 8000b44:	f003 fece 	bl	80048e4 <vPortEnterCritical>
			next_task_handle = task_orange_handle;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <LED_green_handler+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <LED_green_handler+0x68>)
 8000b4e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <LED_green_handler+0x60>)
 8000b58:	f000 fce8 	bl	800152c <HAL_GPIO_WritePin>
			//SEGGER_SYSVIEW_PrintfTarget("Delete green task");
			portEXIT_CRITICAL();
 8000b5c:	f003 fef2 	bl	8004944 <vPortExitCritical>
			vTaskDelete(NULL);
 8000b60:	2000      	movs	r0, #0
 8000b62:	f002 f9e5 	bl	8002f30 <vTaskDelete>
		printf("%s\n", (char*)parameters);
 8000b66:	e7d5      	b.n	8000b14 <LED_green_handler+0x8>
 8000b68:	08008c4c 	.word	0x08008c4c
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	200000a0 	.word	0x200000a0
 8000b74:	200000a8 	.word	0x200000a8

08000b78 <LED_orange_handler>:
		}
	}
}

static void LED_orange_handler(void* parameters)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f007 f8d3 	bl	8007d2c <puts>
		// ORANGE LED: LD13
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000b86:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <LED_orange_handler+0x5c>)
 8000b88:	f006 ff4a 	bl	8007a20 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b90:	4811      	ldr	r0, [pc, #68]	; (8000bd8 <LED_orange_handler+0x60>)
 8000b92:	f000 fce4 	bl	800155e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000b96:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f002 fff6 	bl	8003b94 <xTaskGenericNotifyWait>
 8000ba8:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d1e7      	bne.n	8000b80 <LED_orange_handler+0x8>
		{
			portENTER_CRITICAL();
 8000bb0:	f003 fe98 	bl	80048e4 <vPortEnterCritical>
			next_task_handle = task_red_handle;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <LED_orange_handler+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <LED_orange_handler+0x68>)
 8000bba:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <LED_orange_handler+0x60>)
 8000bc4:	f000 fcb2 	bl	800152c <HAL_GPIO_WritePin>
			//SEGGER_SYSVIEW_PrintfTarget("Delete orange task");
			portEXIT_CRITICAL();
 8000bc8:	f003 febc 	bl	8004944 <vPortExitCritical>
			vTaskDelete(NULL);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f002 f9af 	bl	8002f30 <vTaskDelete>
		printf("%s\n", (char*)parameters);
 8000bd2:	e7d5      	b.n	8000b80 <LED_orange_handler+0x8>
 8000bd4:	08008c60 	.word	0x08008c60
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	200000a4 	.word	0x200000a4
 8000be0:	200000a8 	.word	0x200000a8

08000be4 <LED_red_handler>:
		}
	}
}

static void LED_red_handler(void* parameters)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f007 f89d 	bl	8007d2c <puts>
		// RED LED: LD14
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000bf2:	4814      	ldr	r0, [pc, #80]	; (8000c44 <LED_red_handler+0x60>)
 8000bf4:	f006 ff14 	bl	8007a20 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000bf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfc:	4812      	ldr	r0, [pc, #72]	; (8000c48 <LED_red_handler+0x64>)
 8000bfe:	f000 fcae 	bl	800155e <HAL_GPIO_TogglePin>
		status =  xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000c02:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f002 ffc0 	bl	8003b94 <xTaskGenericNotifyWait>
 8000c14:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d1e7      	bne.n	8000bec <LED_red_handler+0x8>
		{
			portENTER_CRITICAL();
 8000c1c:	f003 fe62 	bl	80048e4 <vPortEnterCritical>
			next_task_handle = NULL;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <LED_red_handler+0x68>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <LED_red_handler+0x64>)
 8000c2e:	f000 fc7d 	bl	800152c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete button task");
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <LED_red_handler+0x6c>)
 8000c34:	f006 fef4 	bl	8007a20 <SEGGER_SYSVIEW_PrintfTarget>
			//vTaskDelete(task_btn_handle);
			//SEGGER_SYSVIEW_PrintfTarget("Delete Red task");
			portEXIT_CRITICAL();
 8000c38:	f003 fe84 	bl	8004944 <vPortExitCritical>
			vTaskDelete(NULL);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f002 f977 	bl	8002f30 <vTaskDelete>
		printf("%s\n", (char*)parameters);
 8000c42:	e7d3      	b.n	8000bec <LED_red_handler+0x8>
 8000c44:	08008c74 	.word	0x08008c74
 8000c48:	40020c00 	.word	0x40020c00
 8000c4c:	200000a8 	.word	0x200000a8
 8000c50:	08008c88 	.word	0x08008c88

08000c54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d101      	bne.n	8000c6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c66:	f000 f9c3 	bl	8000ff0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40001000 	.word	0x40001000

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>
	...

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000cc2:	f003 fd91 	bl	80047e8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08e      	sub	sp, #56	; 0x38
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <HAL_InitTick+0xe4>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a32      	ldr	r2, [pc, #200]	; (8000db8 <HAL_InitTick+0xe4>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <HAL_InitTick+0xe4>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 f8ea 	bl	8001ee4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d10:	6a3b      	ldr	r3, [r7, #32]
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d103      	bne.n	8000d22 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d1a:	f001 f8cf 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 8000d1e:	6378      	str	r0, [r7, #52]	; 0x34
 8000d20:	e004      	b.n	8000d2c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d22:	f001 f8cb 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 8000d26:	4603      	mov	r3, r0
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d2e:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <HAL_InitTick+0xe8>)
 8000d30:	fba2 2303 	umull	r2, r3, r2, r3
 8000d34:	0c9b      	lsrs	r3, r3, #18
 8000d36:	3b01      	subs	r3, #1
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d3c:	4a21      	ldr	r2, [pc, #132]	; (8000dc4 <HAL_InitTick+0xf0>)
 8000d3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d48:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d60:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d62:	f001 f8f1 	bl	8001f48 <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d11b      	bne.n	8000dac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d76:	f001 f941 	bl	8001ffc <HAL_TIM_Base_Start_IT>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d111      	bne.n	8000dac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d88:	2036      	movs	r0, #54	; 0x36
 8000d8a:	f000 fa25 	bl	80011d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d808      	bhi.n	8000da6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	2036      	movs	r0, #54	; 0x36
 8000d9a:	f000 fa01 	bl	80011a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_InitTick+0xf4>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e002      	b.n	8000dac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3738      	adds	r7, #56	; 0x38
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	431bde83 	.word	0x431bde83
 8000dc0:	200000ac 	.word	0x200000ac
 8000dc4:	40001000 	.word	0x40001000
 8000dc8:	20000004 	.word	0x20000004

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000dfc:	f7ff fe5e 	bl	8000abc <button_interrupt_handler>

	// clear EXTI 0 pending bit in the EXTI pending register
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f000 fbc7 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 fbc4 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <TIM6_DAC_IRQHandler+0x10>)
 8000e16:	f001 f961 	bl	80020dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000ac 	.word	0x200000ac

08000e24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e00a      	b.n	8000e4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e36:	f3af 8000 	nop.w
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbf0      	blt.n	8000e36 <_read+0x12>
	}

return len;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	return -1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e86:	605a      	str	r2, [r3, #4]
	return 0;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_isatty>:

int _isatty(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
	return 0;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f006 fe42 	bl	8007b80 <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20020000 	.word	0x20020000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	200000f4 	.word	0x200000f4
 8000f30:	20013930 	.word	0x20013930

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5e:	490e      	ldr	r1, [pc, #56]	; (8000f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f74:	4c0b      	ldr	r4, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f82:	f7ff ffd7 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f006 fe01 	bl	8007b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fb43 	bl	8000614 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f9c:	08008e74 	.word	0x08008e74
  ldr r2, =_sbss
 8000fa0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000fa4:	20013930 	.word	0x20013930

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f8d8 	bl	800118a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff fe7a 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fe50 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	200000f8 	.word	0x200000f8

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200000f8 	.word	0x200000f8

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff4c 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b2:	f7ff ff61 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	68b9      	ldr	r1, [r7, #8]
 80011bc:	6978      	ldr	r0, [r7, #20]
 80011be:	f7ff ffb1 	bl	8001124 <NVIC_EncodePriority>
 80011c2:	4602      	mov	r2, r0
 80011c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff80 	bl	80010d0 <__NVIC_SetPriority>
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff54 	bl	8001094 <__NVIC_EnableIRQ>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	e16b      	b.n	80014e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	429a      	cmp	r2, r3
 800122a:	f040 815a 	bne.w	80014e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b01      	cmp	r3, #1
 8001238:	d005      	beq.n	8001246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	2b02      	cmp	r3, #2
 8001244:	d130      	bne.n	80012a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 0201 	and.w	r2, r3, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d017      	beq.n	80012e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d123      	bne.n	8001338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0203 	and.w	r2, r3, #3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80b4 	beq.w	80014e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b60      	ldr	r3, [pc, #384]	; (8001500 <HAL_GPIO_Init+0x30c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a5f      	ldr	r2, [pc, #380]	; (8001500 <HAL_GPIO_Init+0x30c>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <HAL_GPIO_Init+0x30c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001396:	4a5b      	ldr	r2, [pc, #364]	; (8001504 <HAL_GPIO_Init+0x310>)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_GPIO_Init+0x314>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d02b      	beq.n	800141a <HAL_GPIO_Init+0x226>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a51      	ldr	r2, [pc, #324]	; (800150c <HAL_GPIO_Init+0x318>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d025      	beq.n	8001416 <HAL_GPIO_Init+0x222>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a50      	ldr	r2, [pc, #320]	; (8001510 <HAL_GPIO_Init+0x31c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d01f      	beq.n	8001412 <HAL_GPIO_Init+0x21e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4f      	ldr	r2, [pc, #316]	; (8001514 <HAL_GPIO_Init+0x320>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d019      	beq.n	800140e <HAL_GPIO_Init+0x21a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4e      	ldr	r2, [pc, #312]	; (8001518 <HAL_GPIO_Init+0x324>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0x216>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4d      	ldr	r2, [pc, #308]	; (800151c <HAL_GPIO_Init+0x328>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00d      	beq.n	8001406 <HAL_GPIO_Init+0x212>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <HAL_GPIO_Init+0x32c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x20e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4b      	ldr	r2, [pc, #300]	; (8001524 <HAL_GPIO_Init+0x330>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_GPIO_Init+0x20a>
 80013fa:	2307      	movs	r3, #7
 80013fc:	e00e      	b.n	800141c <HAL_GPIO_Init+0x228>
 80013fe:	2308      	movs	r3, #8
 8001400:	e00c      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001402:	2306      	movs	r3, #6
 8001404:	e00a      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001406:	2305      	movs	r3, #5
 8001408:	e008      	b.n	800141c <HAL_GPIO_Init+0x228>
 800140a:	2304      	movs	r3, #4
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x228>
 800140e:	2303      	movs	r3, #3
 8001410:	e004      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001412:	2302      	movs	r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x228>
 800141a:	2300      	movs	r3, #0
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f002 0203 	and.w	r2, r2, #3
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	4093      	lsls	r3, r2
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800142c:	4935      	ldr	r1, [pc, #212]	; (8001504 <HAL_GPIO_Init+0x310>)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143a:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <HAL_GPIO_Init+0x334>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145e:	4a32      	ldr	r2, [pc, #200]	; (8001528 <HAL_GPIO_Init+0x334>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001464:	4b30      	ldr	r3, [pc, #192]	; (8001528 <HAL_GPIO_Init+0x334>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001488:	4a27      	ldr	r2, [pc, #156]	; (8001528 <HAL_GPIO_Init+0x334>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <HAL_GPIO_Init+0x334>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b2:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <HAL_GPIO_Init+0x334>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_GPIO_Init+0x334>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014dc:	4a12      	ldr	r2, [pc, #72]	; (8001528 <HAL_GPIO_Init+0x334>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	f67f ae90 	bls.w	8001210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40013800 	.word	0x40013800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	40020800 	.word	0x40020800
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40021000 	.word	0x40021000
 800151c:	40021400 	.word	0x40021400
 8001520:	40021800 	.word	0x40021800
 8001524:	40021c00 	.word	0x40021c00
 8001528:	40013c00 	.word	0x40013c00

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	619a      	str	r2, [r3, #24]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001570:	887a      	ldrh	r2, [r7, #2]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4013      	ands	r3, r2
 8001576:	041a      	lsls	r2, r3, #16
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43d9      	mvns	r1, r3
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	400b      	ands	r3, r1
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	619a      	str	r2, [r3, #24]
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f806 	bl	80015c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40013c00 	.word	0x40013c00

080015c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e267      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d075      	beq.n	80016e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015fa:	4b88      	ldr	r3, [pc, #544]	; (800181c <HAL_RCC_OscConfig+0x240>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b04      	cmp	r3, #4
 8001604:	d00c      	beq.n	8001620 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001606:	4b85      	ldr	r3, [pc, #532]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800160e:	2b08      	cmp	r3, #8
 8001610:	d112      	bne.n	8001638 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001612:	4b82      	ldr	r3, [pc, #520]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800161e:	d10b      	bne.n	8001638 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	4b7e      	ldr	r3, [pc, #504]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d05b      	beq.n	80016e4 <HAL_RCC_OscConfig+0x108>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d157      	bne.n	80016e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e242      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001640:	d106      	bne.n	8001650 <HAL_RCC_OscConfig+0x74>
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a75      	ldr	r2, [pc, #468]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e01d      	b.n	800168c <HAL_RCC_OscConfig+0xb0>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x98>
 800165a:	4b70      	ldr	r3, [pc, #448]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a6f      	ldr	r2, [pc, #444]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b6d      	ldr	r3, [pc, #436]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a6c      	ldr	r2, [pc, #432]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0xb0>
 8001674:	4b69      	ldr	r3, [pc, #420]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a68      	ldr	r2, [pc, #416]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800167a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b66      	ldr	r3, [pc, #408]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a65      	ldr	r2, [pc, #404]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fcc0 	bl	8001018 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff fcbc 	bl	8001018 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e207      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b5b      	ldr	r3, [pc, #364]	; (800181c <HAL_RCC_OscConfig+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0xc0>
 80016ba:	e014      	b.n	80016e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fcac 	bl	8001018 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fca8 	bl	8001018 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e1f3      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	4b51      	ldr	r3, [pc, #324]	; (800181c <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0xe8>
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d063      	beq.n	80017ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <HAL_RCC_OscConfig+0x240>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00b      	beq.n	8001716 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fe:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001706:	2b08      	cmp	r3, #8
 8001708:	d11c      	bne.n	8001744 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170a:	4b44      	ldr	r3, [pc, #272]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d116      	bne.n	8001744 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <HAL_RCC_OscConfig+0x152>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e1c7      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4937      	ldr	r1, [pc, #220]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	e03a      	b.n	80017ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d020      	beq.n	800178e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <HAL_RCC_OscConfig+0x244>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7ff fc61 	bl	8001018 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff fc5d 	bl	8001018 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1a8      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4925      	ldr	r1, [pc, #148]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
 800178c:	e015      	b.n	80017ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_RCC_OscConfig+0x244>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fc40 	bl	8001018 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff fc3c 	bl	8001018 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e187      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d036      	beq.n	8001834 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d016      	beq.n	80017fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_RCC_OscConfig+0x248>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff fc20 	bl	8001018 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017dc:	f7ff fc1c 	bl	8001018 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e167      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_OscConfig+0x240>)
 80017f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x200>
 80017fa:	e01b      	b.n	8001834 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_RCC_OscConfig+0x248>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7ff fc09 	bl	8001018 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001808:	e00e      	b.n	8001828 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180a:	f7ff fc05 	bl	8001018 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d907      	bls.n	8001828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e150      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
 800181c:	40023800 	.word	0x40023800
 8001820:	42470000 	.word	0x42470000
 8001824:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001828:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 800182a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ea      	bne.n	800180a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8097 	beq.w	8001970 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001846:	4b81      	ldr	r3, [pc, #516]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b7d      	ldr	r3, [pc, #500]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a7c      	ldr	r2, [pc, #496]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b7a      	ldr	r3, [pc, #488]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186e:	2301      	movs	r3, #1
 8001870:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	4b77      	ldr	r3, [pc, #476]	; (8001a50 <HAL_RCC_OscConfig+0x474>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d118      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187e:	4b74      	ldr	r3, [pc, #464]	; (8001a50 <HAL_RCC_OscConfig+0x474>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a73      	ldr	r2, [pc, #460]	; (8001a50 <HAL_RCC_OscConfig+0x474>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188a:	f7ff fbc5 	bl	8001018 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001892:	f7ff fbc1 	bl	8001018 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e10c      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	4b6a      	ldr	r3, [pc, #424]	; (8001a50 <HAL_RCC_OscConfig+0x474>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x2ea>
 80018b8:	4b64      	ldr	r3, [pc, #400]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	4a63      	ldr	r2, [pc, #396]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6713      	str	r3, [r2, #112]	; 0x70
 80018c4:	e01c      	b.n	8001900 <HAL_RCC_OscConfig+0x324>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x30c>
 80018ce:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	4a5e      	ldr	r2, [pc, #376]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6713      	str	r3, [r2, #112]	; 0x70
 80018da:	4b5c      	ldr	r3, [pc, #368]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018de:	4a5b      	ldr	r2, [pc, #364]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6713      	str	r3, [r2, #112]	; 0x70
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0x324>
 80018e8:	4b58      	ldr	r3, [pc, #352]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	4a57      	ldr	r2, [pc, #348]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6713      	str	r3, [r2, #112]	; 0x70
 80018f4:	4b55      	ldr	r3, [pc, #340]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	4a54      	ldr	r2, [pc, #336]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018fa:	f023 0304 	bic.w	r3, r3, #4
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d015      	beq.n	8001934 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff fb86 	bl	8001018 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff fb82 	bl	8001018 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0cb      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001926:	4b49      	ldr	r3, [pc, #292]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0ee      	beq.n	8001910 <HAL_RCC_OscConfig+0x334>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7ff fb70 	bl	8001018 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193a:	e00a      	b.n	8001952 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7ff fb6c 	bl	8001018 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0b5      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001952:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ee      	bne.n	800193c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a38      	ldr	r2, [pc, #224]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 800196a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a1 	beq.w	8001abc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800197a:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b08      	cmp	r3, #8
 8001984:	d05c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d141      	bne.n	8001a12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_RCC_OscConfig+0x478>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fb40 	bl	8001018 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff fb3c 	bl	8001018 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e087      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	019b      	lsls	r3, r3, #6
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	3b01      	subs	r3, #1
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	491b      	ldr	r1, [pc, #108]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x478>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff fb15 	bl	8001018 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f2:	f7ff fb11 	bl	8001018 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e05c      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x416>
 8001a10:	e054      	b.n	8001abc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_RCC_OscConfig+0x478>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fafe 	bl	8001018 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff fafa 	bl	8001018 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e045      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x444>
 8001a3e:	e03d      	b.n	8001abc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e038      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000
 8001a54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_RCC_OscConfig+0x4ec>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d028      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d121      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d11a      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a88:	4013      	ands	r3, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d111      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	085b      	lsrs	r3, r3, #1
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d107      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0cc      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b68      	ldr	r3, [pc, #416]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d90c      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b65      	ldr	r3, [pc, #404]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b63      	ldr	r3, [pc, #396]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0b8      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b20:	4b59      	ldr	r3, [pc, #356]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a58      	ldr	r2, [pc, #352]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b38:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a52      	ldr	r2, [pc, #328]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b44:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	494d      	ldr	r1, [pc, #308]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d044      	beq.n	8001bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d119      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e07f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d003      	beq.n	8001b8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e06f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e067      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f023 0203 	bic.w	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4934      	ldr	r1, [pc, #208]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bbc:	f7ff fa2c 	bl	8001018 <HAL_GetTick>
 8001bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc4:	f7ff fa28 	bl	8001018 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e04f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 020c 	and.w	r2, r3, #12
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d1eb      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d20c      	bcs.n	8001c14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e032      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4916      	ldr	r1, [pc, #88]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	490e      	ldr	r1, [pc, #56]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c52:	f000 f821 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001c56:	4602      	mov	r2, r0
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	490a      	ldr	r1, [pc, #40]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	5ccb      	ldrb	r3, [r1, r3]
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff f82e 	bl	8000cd4 <HAL_InitTick>

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023c00 	.word	0x40023c00
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	08008d78 	.word	0x08008d78
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c9c:	b094      	sub	sp, #80	; 0x50
 8001c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ca8:	2300      	movs	r3, #0
 8001caa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb0:	4b79      	ldr	r3, [pc, #484]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d00d      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	f200 80e1 	bhi.w	8001e84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x34>
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d003      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cca:	e0db      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ccc:	4b73      	ldr	r3, [pc, #460]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001cce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001cd0:	e0db      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cd2:	4b73      	ldr	r3, [pc, #460]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cd6:	e0d8      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd8:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce2:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d063      	beq.n	8001db6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cee:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	099b      	lsrs	r3, r3, #6
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
 8001d02:	2300      	movs	r3, #0
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
 8001d06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d0a:	4622      	mov	r2, r4
 8001d0c:	462b      	mov	r3, r5
 8001d0e:	f04f 0000 	mov.w	r0, #0
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	0159      	lsls	r1, r3, #5
 8001d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d1c:	0150      	lsls	r0, r2, #5
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4621      	mov	r1, r4
 8001d24:	1a51      	subs	r1, r2, r1
 8001d26:	6139      	str	r1, [r7, #16]
 8001d28:	4629      	mov	r1, r5
 8001d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d3c:	4659      	mov	r1, fp
 8001d3e:	018b      	lsls	r3, r1, #6
 8001d40:	4651      	mov	r1, sl
 8001d42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d46:	4651      	mov	r1, sl
 8001d48:	018a      	lsls	r2, r1, #6
 8001d4a:	4651      	mov	r1, sl
 8001d4c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d50:	4659      	mov	r1, fp
 8001d52:	eb63 0901 	sbc.w	r9, r3, r1
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d6a:	4690      	mov	r8, r2
 8001d6c:	4699      	mov	r9, r3
 8001d6e:	4623      	mov	r3, r4
 8001d70:	eb18 0303 	adds.w	r3, r8, r3
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	462b      	mov	r3, r5
 8001d78:	eb49 0303 	adc.w	r3, r9, r3
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	024b      	lsls	r3, r1, #9
 8001d8e:	4621      	mov	r1, r4
 8001d90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d94:	4621      	mov	r1, r4
 8001d96:	024a      	lsls	r2, r1, #9
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d9e:	2200      	movs	r2, #0
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001da2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001da4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001da8:	f7fe fab2 	bl	8000310 <__aeabi_uldivmod>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4613      	mov	r3, r2
 8001db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001db4:	e058      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db6:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	099b      	lsrs	r3, r3, #6
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dc6:	623b      	str	r3, [r7, #32]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
 8001dcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dd0:	4642      	mov	r2, r8
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	f04f 0000 	mov.w	r0, #0
 8001dd8:	f04f 0100 	mov.w	r1, #0
 8001ddc:	0159      	lsls	r1, r3, #5
 8001dde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de2:	0150      	lsls	r0, r2, #5
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4641      	mov	r1, r8
 8001dea:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dee:	4649      	mov	r1, r9
 8001df0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e08:	ebb2 040a 	subs.w	r4, r2, sl
 8001e0c:	eb63 050b 	sbc.w	r5, r3, fp
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	00eb      	lsls	r3, r5, #3
 8001e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e1e:	00e2      	lsls	r2, r4, #3
 8001e20:	4614      	mov	r4, r2
 8001e22:	461d      	mov	r5, r3
 8001e24:	4643      	mov	r3, r8
 8001e26:	18e3      	adds	r3, r4, r3
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	464b      	mov	r3, r9
 8001e2c:	eb45 0303 	adc.w	r3, r5, r3
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e3e:	4629      	mov	r1, r5
 8001e40:	028b      	lsls	r3, r1, #10
 8001e42:	4621      	mov	r1, r4
 8001e44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e48:	4621      	mov	r1, r4
 8001e4a:	028a      	lsls	r2, r1, #10
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e52:	2200      	movs	r2, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	61fa      	str	r2, [r7, #28]
 8001e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e5c:	f7fe fa58 	bl	8000310 <__aeabi_uldivmod>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4613      	mov	r3, r2
 8001e66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	0c1b      	lsrs	r3, r3, #16
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	3301      	adds	r3, #1
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e82:	e002      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3750      	adds	r7, #80	; 0x50
 8001e90:	46bd      	mov	sp, r7
 8001e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	00f42400 	.word	0x00f42400
 8001ea0:	007a1200 	.word	0x007a1200

08001ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000000 	.word	0x20000000

08001ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ec0:	f7ff fff0 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	0a9b      	lsrs	r3, r3, #10
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4903      	ldr	r1, [pc, #12]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	08008d88 	.word	0x08008d88

08001ee4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0203 	and.w	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	08db      	lsrs	r3, r3, #3
 8001f1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_RCC_GetClockConfig+0x60>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0207 	and.w	r2, r3, #7
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	601a      	str	r2, [r3, #0]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40023c00 	.word	0x40023c00

08001f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e041      	b.n	8001fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f839 	bl	8001fe6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3304      	adds	r3, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4610      	mov	r0, r2
 8001f88:	f000 f9d8 	bl	800233c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	d001      	beq.n	8002014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e04e      	b.n	80020b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d022      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x80>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203e:	d01d      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x80>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d018      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x80>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d013      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x80>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <HAL_TIM_Base_Start_IT+0xd0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00e      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x80>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d009      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x80>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d004      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x80>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d111      	bne.n	80020a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b06      	cmp	r3, #6
 800208c:	d010      	beq.n	80020b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209e:	e007      	b.n	80020b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40000400 	.word	0x40000400
 80020c8:	40000800 	.word	0x40000800
 80020cc:	40000c00 	.word	0x40000c00
 80020d0:	40010400 	.word	0x40010400
 80020d4:	40014000 	.word	0x40014000
 80020d8:	40001800 	.word	0x40001800

080020dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0202 	mvn.w	r2, #2
 8002108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f8ee 	bl	8002300 <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f8e0 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f8f1 	bl	8002314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b04      	cmp	r3, #4
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0204 	mvn.w	r2, #4
 800215c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2202      	movs	r2, #2
 8002162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f8c4 	bl	8002300 <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f8b6 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f8c7 	bl	8002314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b08      	cmp	r3, #8
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0208 	mvn.w	r2, #8
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2204      	movs	r2, #4
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f89a 	bl	8002300 <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f88c 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f89d 	bl	8002314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d122      	bne.n	8002234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d11b      	bne.n	8002234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0210 	mvn.w	r2, #16
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2208      	movs	r2, #8
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f870 	bl	8002300 <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f862 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f873 	bl	8002314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d107      	bne.n	8002260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0201 	mvn.w	r2, #1
 8002258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fcfa 	bl	8000c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226a:	2b80      	cmp	r3, #128	; 0x80
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f902 	bl	8002490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a4:	2b40      	cmp	r3, #64	; 0x40
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f838 	bl	8002328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	d107      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0220 	mvn.w	r2, #32
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f8cc 	bl	800247c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a40      	ldr	r2, [pc, #256]	; (8002450 <TIM_Base_SetConfig+0x114>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d013      	beq.n	800237c <TIM_Base_SetConfig+0x40>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235a:	d00f      	beq.n	800237c <TIM_Base_SetConfig+0x40>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a3d      	ldr	r2, [pc, #244]	; (8002454 <TIM_Base_SetConfig+0x118>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00b      	beq.n	800237c <TIM_Base_SetConfig+0x40>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3c      	ldr	r2, [pc, #240]	; (8002458 <TIM_Base_SetConfig+0x11c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d007      	beq.n	800237c <TIM_Base_SetConfig+0x40>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a3b      	ldr	r2, [pc, #236]	; (800245c <TIM_Base_SetConfig+0x120>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d003      	beq.n	800237c <TIM_Base_SetConfig+0x40>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3a      	ldr	r2, [pc, #232]	; (8002460 <TIM_Base_SetConfig+0x124>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d108      	bne.n	800238e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a2f      	ldr	r2, [pc, #188]	; (8002450 <TIM_Base_SetConfig+0x114>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d02b      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239c:	d027      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a2c      	ldr	r2, [pc, #176]	; (8002454 <TIM_Base_SetConfig+0x118>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d023      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a2b      	ldr	r2, [pc, #172]	; (8002458 <TIM_Base_SetConfig+0x11c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d01f      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a2a      	ldr	r2, [pc, #168]	; (800245c <TIM_Base_SetConfig+0x120>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01b      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a29      	ldr	r2, [pc, #164]	; (8002460 <TIM_Base_SetConfig+0x124>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d017      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a28      	ldr	r2, [pc, #160]	; (8002464 <TIM_Base_SetConfig+0x128>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a27      	ldr	r2, [pc, #156]	; (8002468 <TIM_Base_SetConfig+0x12c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00f      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a26      	ldr	r2, [pc, #152]	; (800246c <TIM_Base_SetConfig+0x130>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00b      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a25      	ldr	r2, [pc, #148]	; (8002470 <TIM_Base_SetConfig+0x134>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a24      	ldr	r2, [pc, #144]	; (8002474 <TIM_Base_SetConfig+0x138>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d003      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a23      	ldr	r2, [pc, #140]	; (8002478 <TIM_Base_SetConfig+0x13c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d108      	bne.n	8002400 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <TIM_Base_SetConfig+0x114>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d003      	beq.n	8002434 <TIM_Base_SetConfig+0xf8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <TIM_Base_SetConfig+0x124>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d103      	bne.n	800243c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	615a      	str	r2, [r3, #20]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40010000 	.word	0x40010000
 8002454:	40000400 	.word	0x40000400
 8002458:	40000800 	.word	0x40000800
 800245c:	40000c00 	.word	0x40000c00
 8002460:	40010400 	.word	0x40010400
 8002464:	40014000 	.word	0x40014000
 8002468:	40014400 	.word	0x40014400
 800246c:	40014800 	.word	0x40014800
 8002470:	40001800 	.word	0x40001800
 8002474:	40001c00 	.word	0x40001c00
 8002478:	40002000 	.word	0x40002000

0800247c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f103 0208 	add.w	r2, r3, #8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295
 80024bc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f103 0208 	add.w	r2, r3, #8
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f103 0208 	add.w	r2, r3, #8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80024fe:	b480      	push	{r7}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d103      	bne.n	8002566 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e00c      	b.n	8002580 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3308      	adds	r3, #8
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e002      	b.n	8002574 <vListInsert+0x2e>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	429a      	cmp	r2, r3
 800257e:	d2f6      	bcs.n	800256e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	601a      	str	r2, [r3, #0]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6892      	ldr	r2, [r2, #8]
 80025ce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6852      	ldr	r2, [r2, #4]
 80025d8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d103      	bne.n	80025ec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	1e5a      	subs	r2, r3, #1
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002616:	2301      	movs	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <xQueueGenericReset+0x2e>
        __asm volatile
 8002624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002628:	f383 8811 	msr	BASEPRI, r3
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	60fb      	str	r3, [r7, #12]
    }
 8002636:	bf00      	nop
 8002638:	e7fe      	b.n	8002638 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d052      	beq.n	80026e6 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002644:	2b00      	cmp	r3, #0
 8002646:	d04e      	beq.n	80026e6 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002650:	2100      	movs	r1, #0
 8002652:	fba3 2302 	umull	r2, r3, r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d000      	beq.n	800265c <xQueueGenericReset+0x50>
 800265a:	2101      	movs	r1, #1
 800265c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800265e:	2b00      	cmp	r3, #0
 8002660:	d141      	bne.n	80026e6 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8002662:	f002 f93f 	bl	80048e4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	6939      	ldr	r1, [r7, #16]
 8002670:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	441a      	add	r2, r3
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2200      	movs	r2, #0
 8002680:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	3b01      	subs	r3, #1
 8002694:	6939      	ldr	r1, [r7, #16]
 8002696:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	441a      	add	r2, r3
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	22ff      	movs	r2, #255	; 0xff
 80026a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	22ff      	movs	r2, #255	; 0xff
 80026ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d109      	bne.n	80026cc <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00f      	beq.n	80026e0 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	3310      	adds	r3, #16
 80026c4:	4618      	mov	r0, r3
 80026c6:	f001 f83b 	bl	8003740 <xTaskRemoveFromEventList>
 80026ca:	e009      	b.n	80026e0 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	3310      	adds	r3, #16
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fee7 	bl	80024a4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	3324      	adds	r3, #36	; 0x24
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fee2 	bl	80024a4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80026e0:	f002 f930 	bl	8004944 <vPortExitCritical>
 80026e4:	e001      	b.n	80026ea <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <xQueueGenericReset+0xfa>
        __asm volatile
 80026f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	60bb      	str	r3, [r7, #8]
    }
 8002702:	bf00      	nop
 8002704:	e7fe      	b.n	8002704 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002706:	697b      	ldr	r3, [r7, #20]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d02e      	beq.n	8002786 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002728:	2100      	movs	r1, #0
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	fba3 2302 	umull	r2, r3, r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d000      	beq.n	8002738 <xQueueGenericCreate+0x28>
 8002736:	2101      	movs	r1, #1
 8002738:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800273a:	2b00      	cmp	r3, #0
 800273c:	d123      	bne.n	8002786 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002746:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800274a:	d81c      	bhi.n	8002786 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	3350      	adds	r3, #80	; 0x50
 800275a:	4618      	mov	r0, r3
 800275c:	f002 f9ee 	bl	8004b3c <pvPortMalloc>
 8002760:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01c      	beq.n	80027a2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3350      	adds	r3, #80	; 0x50
 8002770:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002772:	79fa      	ldrb	r2, [r7, #7]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	4613      	mov	r3, r2
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f814 	bl	80027ac <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002784:	e00d      	b.n	80027a2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <xQueueGenericCreate+0x92>
        __asm volatile
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	613b      	str	r3, [r7, #16]
    }
 800279e:	bf00      	nop
 80027a0:	e7fe      	b.n	80027a0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80027a2:	69fb      	ldr	r3, [r7, #28]
    }
 80027a4:	4618      	mov	r0, r3
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d103      	bne.n	80027c8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	e002      	b.n	80027ce <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027da:	2101      	movs	r1, #1
 80027dc:	69b8      	ldr	r0, [r7, #24]
 80027de:	f7ff ff15 	bl	800260c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	68f9      	ldr	r1, [r7, #12]
 80027f0:	2073      	movs	r0, #115	; 0x73
 80027f2:	f004 fa43 	bl	8006c7c <SEGGER_SYSVIEW_RecordU32x3>
}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b08f      	sub	sp, #60	; 0x3c
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800280c:	2300      	movs	r3, #0
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <xQueueReceive+0x30>
        __asm volatile
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	623b      	str	r3, [r7, #32]
    }
 800282c:	bf00      	nop
 800282e:	e7fe      	b.n	800282e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <xQueueReceive+0x3e>
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <xQueueReceive+0x42>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <xQueueReceive+0x44>
 8002842:	2300      	movs	r3, #0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <xQueueReceive+0x5e>
        __asm volatile
 8002848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284c:	f383 8811 	msr	BASEPRI, r3
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	61fb      	str	r3, [r7, #28]
    }
 800285a:	bf00      	nop
 800285c:	e7fe      	b.n	800285c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800285e:	f001 f97b 	bl	8003b58 <xTaskGetSchedulerState>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <xQueueReceive+0x6e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <xQueueReceive+0x72>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <xQueueReceive+0x74>
 8002872:	2300      	movs	r3, #0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <xQueueReceive+0x8e>
        __asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	61bb      	str	r3, [r7, #24]
    }
 800288a:	bf00      	nop
 800288c:	e7fe      	b.n	800288c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800288e:	f002 f829 	bl	80048e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002896:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	2b00      	cmp	r3, #0
 800289c:	d024      	beq.n	80028e8 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a2:	f000 f8b3 	bl	8002a0c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	4618      	mov	r0, r3
 80028aa:	f004 ffc3 	bl	8007834 <SEGGER_SYSVIEW_ShrinkId>
 80028ae:	4604      	mov	r4, r0
 80028b0:	2000      	movs	r0, #0
 80028b2:	f004 ffbf 	bl	8007834 <SEGGER_SYSVIEW_ShrinkId>
 80028b6:	4602      	mov	r2, r0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2101      	movs	r1, #1
 80028bc:	9100      	str	r1, [sp, #0]
 80028be:	4621      	mov	r1, r4
 80028c0:	205c      	movs	r0, #92	; 0x5c
 80028c2:	f004 fa51 	bl	8006d68 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d004      	beq.n	80028e0 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	3310      	adds	r3, #16
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 ff30 	bl	8003740 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80028e0:	f002 f830 	bl	8004944 <vPortExitCritical>
                return pdPASS;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e08a      	b.n	80029fe <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d113      	bne.n	8002916 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028ee:	f002 f829 	bl	8004944 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 ff9d 	bl	8007834 <SEGGER_SYSVIEW_ShrinkId>
 80028fa:	4604      	mov	r4, r0
 80028fc:	2000      	movs	r0, #0
 80028fe:	f004 ff99 	bl	8007834 <SEGGER_SYSVIEW_ShrinkId>
 8002902:	4602      	mov	r2, r0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2101      	movs	r1, #1
 8002908:	9100      	str	r1, [sp, #0]
 800290a:	4621      	mov	r1, r4
 800290c:	205c      	movs	r0, #92	; 0x5c
 800290e:	f004 fa2b 	bl	8006d68 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002912:	2300      	movs	r3, #0
 8002914:	e073      	b.n	80029fe <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d106      	bne.n	800292a <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	4618      	mov	r0, r3
 8002922:	f000 ffe5 	bl	80038f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002926:	2301      	movs	r3, #1
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800292a:	f002 f80b 	bl	8004944 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800292e:	f000 fc13 	bl	8003158 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002932:	f001 ffd7 	bl	80048e4 <vPortEnterCritical>
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800293c:	b25b      	sxtb	r3, r3
 800293e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002942:	d103      	bne.n	800294c <xQueueReceive+0x14c>
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002952:	b25b      	sxtb	r3, r3
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d103      	bne.n	8002962 <xQueueReceive+0x162>
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002962:	f001 ffef 	bl	8004944 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002966:	1d3a      	adds	r2, r7, #4
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f000 ffd4 	bl	800391c <xTaskCheckForTimeOut>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d124      	bne.n	80029c4 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800297a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800297c:	f000 f8be 	bl	8002afc <prvIsQueueEmpty>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d018      	beq.n	80029b8 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	3324      	adds	r3, #36	; 0x24
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fe6a 	bl	8003668 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002996:	f000 f85f 	bl	8002a58 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800299a:	f000 fbeb 	bl	8003174 <xTaskResumeAll>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f47f af74 	bne.w	800288e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80029a6:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <xQueueReceive+0x208>)
 80029a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	f3bf 8f6f 	isb	sy
 80029b6:	e76a      	b.n	800288e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ba:	f000 f84d 	bl	8002a58 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029be:	f000 fbd9 	bl	8003174 <xTaskResumeAll>
 80029c2:	e764      	b.n	800288e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80029c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029c6:	f000 f847 	bl	8002a58 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029ca:	f000 fbd3 	bl	8003174 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d0:	f000 f894 	bl	8002afc <prvIsQueueEmpty>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f43f af59 	beq.w	800288e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 ff28 	bl	8007834 <SEGGER_SYSVIEW_ShrinkId>
 80029e4:	4604      	mov	r4, r0
 80029e6:	2000      	movs	r0, #0
 80029e8:	f004 ff24 	bl	8007834 <SEGGER_SYSVIEW_ShrinkId>
 80029ec:	4602      	mov	r2, r0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2101      	movs	r1, #1
 80029f2:	9100      	str	r1, [sp, #0]
 80029f4:	4621      	mov	r1, r4
 80029f6:	205c      	movs	r0, #92	; 0x5c
 80029f8:	f004 f9b6 	bl	8006d68 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80029fc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3734      	adds	r7, #52	; 0x34
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd90      	pop	{r4, r7, pc}
 8002a06:	bf00      	nop
 8002a08:	e000ed04 	.word	0xe000ed04

08002a0c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d018      	beq.n	8002a50 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	441a      	add	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d303      	bcc.n	8002a40 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68d9      	ldr	r1, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	461a      	mov	r2, r3
 8002a4a:	6838      	ldr	r0, [r7, #0]
 8002a4c:	f005 f8d2 	bl	8007bf4 <memcpy>
    }
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a60:	f001 ff40 	bl	80048e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a6a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a6c:	e011      	b.n	8002a92 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d012      	beq.n	8002a9c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3324      	adds	r3, #36	; 0x24
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fe60 	bl	8003740 <xTaskRemoveFromEventList>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002a86:	f000 ffaf 	bl	80039e8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	dce9      	bgt.n	8002a6e <prvUnlockQueue+0x16>
 8002a9a:	e000      	b.n	8002a9e <prvUnlockQueue+0x46>
                    break;
 8002a9c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	22ff      	movs	r2, #255	; 0xff
 8002aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002aa6:	f001 ff4d 	bl	8004944 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002aaa:	f001 ff1b 	bl	80048e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ab4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ab6:	e011      	b.n	8002adc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d012      	beq.n	8002ae6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3310      	adds	r3, #16
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fe3b 	bl	8003740 <xTaskRemoveFromEventList>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002ad0:	f000 ff8a 	bl	80039e8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ad4:	7bbb      	ldrb	r3, [r7, #14]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	dce9      	bgt.n	8002ab8 <prvUnlockQueue+0x60>
 8002ae4:	e000      	b.n	8002ae8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002ae6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	22ff      	movs	r2, #255	; 0xff
 8002aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002af0:	f001 ff28 	bl	8004944 <vPortExitCritical>
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b04:	f001 feee 	bl	80048e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b10:	2301      	movs	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e001      	b.n	8002b1a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b1a:	f001 ff13 	bl	8004944 <vPortExitCritical>

    return xReturn;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	60fb      	str	r3, [r7, #12]
    }
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d024      	beq.n	8002ba2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	e01e      	b.n	8002b9c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <vQueueAddToRegistry+0xa8>)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d105      	bne.n	8002b7a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <vQueueAddToRegistry+0xa8>)
 8002b74:	4413      	add	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
                    break;
 8002b78:	e013      	b.n	8002ba2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <vQueueAddToRegistry+0x6e>
 8002b80:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <vQueueAddToRegistry+0xa8>)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d104      	bne.n	8002b96 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4a0f      	ldr	r2, [pc, #60]	; (8002bd0 <vQueueAddToRegistry+0xa8>)
 8002b92:	4413      	add	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2b07      	cmp	r3, #7
 8002ba0:	d9dd      	bls.n	8002b5e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00f      	beq.n	8002bc8 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f004 fe3c 	bl	8007834 <SEGGER_SYSVIEW_ShrinkId>
 8002bbc:	4601      	mov	r1, r0
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2071      	movs	r0, #113	; 0x71
 8002bc4:	f004 f800 	bl	8006bc8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002bc8:	bf00      	nop
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200000fc 	.word	0x200000fc

08002bd4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002be4:	f001 fe7e 	bl	80048e4 <vPortEnterCritical>
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bee:	b25b      	sxtb	r3, r3
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d103      	bne.n	8002bfe <vQueueWaitForMessageRestricted+0x2a>
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0a:	d103      	bne.n	8002c14 <vQueueWaitForMessageRestricted+0x40>
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c14:	f001 fe96 	bl	8004944 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d106      	bne.n	8002c2e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	3324      	adds	r3, #36	; 0x24
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fd41 	bl	80036b0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c2e:	6978      	ldr	r0, [r7, #20]
 8002c30:	f7ff ff12 	bl	8002a58 <prvUnlockQueue>
    }
 8002c34:	bf00      	nop
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	; 0x30
 8002c40:	af04      	add	r7, sp, #16
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 ff73 	bl	8004b3c <pvPortMalloc>
 8002c56:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d013      	beq.n	8002c86 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c5e:	2058      	movs	r0, #88	; 0x58
 8002c60:	f001 ff6c 	bl	8004b3c <pvPortMalloc>
 8002c64:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002c6c:	2258      	movs	r2, #88	; 0x58
 8002c6e:	2100      	movs	r1, #0
 8002c70:	69f8      	ldr	r0, [r7, #28]
 8002c72:	f004 ffcd 	bl	8007c10 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c7c:	e005      	b.n	8002c8a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f002 f816 	bl	8004cb0 <vPortFree>
 8002c84:	e001      	b.n	8002c8a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d013      	beq.n	8002cb8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c90:	88fa      	ldrh	r2, [r7, #6]
 8002c92:	2300      	movs	r3, #0
 8002c94:	9303      	str	r3, [sp, #12]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f80e 	bl	8002cc8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002cac:	69f8      	ldr	r0, [r7, #28]
 8002cae:	f000 f899 	bl	8002de4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	e002      	b.n	8002cbe <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cbc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
    }
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	461a      	mov	r2, r3
 8002ce0:	21a5      	movs	r1, #165	; 0xa5
 8002ce2:	f004 ff95 	bl	8007c10 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f023 0307 	bic.w	r3, r3, #7
 8002cfe:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	617b      	str	r3, [r7, #20]
    }
 8002d1c:	bf00      	nop
 8002d1e:	e7fe      	b.n	8002d1e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d01e      	beq.n	8002d64 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	e012      	b.n	8002d52 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	4413      	add	r3, r2
 8002d32:	7819      	ldrb	r1, [r3, #0]
 8002d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	3334      	adds	r3, #52	; 0x34
 8002d3c:	460a      	mov	r2, r1
 8002d3e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	2b09      	cmp	r3, #9
 8002d56:	d9e9      	bls.n	8002d2c <prvInitialiseNewTask+0x64>
 8002d58:	e000      	b.n	8002d5c <prvInitialiseNewTask+0x94>
            {
                break;
 8002d5a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d90a      	bls.n	8002d80 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	613b      	str	r3, [r7, #16]
    }
 8002d7c:	bf00      	nop
 8002d7e:	e7fe      	b.n	8002d7e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d901      	bls.n	8002d8a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d86:	2304      	movs	r3, #4
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d94:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	3304      	adds	r3, #4
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fba2 	bl	80024e4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	3318      	adds	r3, #24
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fb9d 	bl	80024e4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	f1c3 0205 	rsb	r2, r3, #5
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	68f9      	ldr	r1, [r7, #12]
 8002dc4:	69b8      	ldr	r0, [r7, #24]
 8002dc6:	f001 fbdf 	bl	8004588 <pxPortInitialiseStack>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dda:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ddc:	bf00      	nop
 8002dde:	3720      	adds	r7, #32
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002de4:	b5b0      	push	{r4, r5, r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002dec:	f001 fd7a 	bl	80048e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002df0:	4b49      	ldr	r3, [pc, #292]	; (8002f18 <prvAddNewTaskToReadyList+0x134>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	4a48      	ldr	r2, [pc, #288]	; (8002f18 <prvAddNewTaskToReadyList+0x134>)
 8002df8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002dfa:	4b48      	ldr	r3, [pc, #288]	; (8002f1c <prvAddNewTaskToReadyList+0x138>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e02:	4a46      	ldr	r2, [pc, #280]	; (8002f1c <prvAddNewTaskToReadyList+0x138>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e08:	4b43      	ldr	r3, [pc, #268]	; (8002f18 <prvAddNewTaskToReadyList+0x134>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d110      	bne.n	8002e32 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e10:	f000 fe08 	bl	8003a24 <prvInitialiseTaskLists>
 8002e14:	e00d      	b.n	8002e32 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e16:	4b42      	ldr	r3, [pc, #264]	; (8002f20 <prvAddNewTaskToReadyList+0x13c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e1e:	4b3f      	ldr	r3, [pc, #252]	; (8002f1c <prvAddNewTaskToReadyList+0x138>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d802      	bhi.n	8002e32 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e2c:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <prvAddNewTaskToReadyList+0x138>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002e32:	4b3c      	ldr	r3, [pc, #240]	; (8002f24 <prvAddNewTaskToReadyList+0x140>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3301      	adds	r3, #1
 8002e38:	4a3a      	ldr	r2, [pc, #232]	; (8002f24 <prvAddNewTaskToReadyList+0x140>)
 8002e3a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e3c:	4b39      	ldr	r3, [pc, #228]	; (8002f24 <prvAddNewTaskToReadyList+0x140>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <prvAddNewTaskToReadyList+0x94>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f004 fc2b 	bl	80076a8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	461d      	mov	r5, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	461c      	mov	r4, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	1ae3      	subs	r3, r4, r3
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	462b      	mov	r3, r5
 8002e74:	f002 f8de 	bl	8005034 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f004 fc98 	bl	80077b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	2201      	movs	r2, #1
 8002e86:	409a      	lsls	r2, r3
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <prvAddNewTaskToReadyList+0x144>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	4a26      	ldr	r2, [pc, #152]	; (8002f28 <prvAddNewTaskToReadyList+0x144>)
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e96:	4925      	ldr	r1, [pc, #148]	; (8002f2c <prvAddNewTaskToReadyList+0x148>)
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	3204      	adds	r2, #4
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	1d1a      	adds	r2, r3, #4
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <prvAddNewTaskToReadyList+0x148>)
 8002ed6:	441a      	add	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	615a      	str	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee0:	4912      	ldr	r1, [pc, #72]	; (8002f2c <prvAddNewTaskToReadyList+0x148>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	1c59      	adds	r1, r3, #1
 8002ef0:	480e      	ldr	r0, [pc, #56]	; (8002f2c <prvAddNewTaskToReadyList+0x148>)
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4403      	add	r3, r0
 8002efc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002efe:	f001 fd21 	bl	8004944 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <prvAddNewTaskToReadyList+0x13c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f0a:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <prvAddNewTaskToReadyList+0x138>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bdb0      	pop	{r4, r5, r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000214 	.word	0x20000214
 8002f1c:	2000013c 	.word	0x2000013c
 8002f20:	20000220 	.word	0x20000220
 8002f24:	20000230 	.word	0x20000230
 8002f28:	2000021c 	.word	0x2000021c
 8002f2c:	20000140 	.word	0x20000140

08002f30 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002f38:	f001 fcd4 	bl	80048e4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <vTaskDelete+0x18>
 8002f42:	4b48      	ldr	r3, [pc, #288]	; (8003064 <vTaskDelete+0x134>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	e000      	b.n	8002f4a <vTaskDelete+0x1a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fb31 	bl	80025b8 <uxListRemove>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d115      	bne.n	8002f88 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f60:	4941      	ldr	r1, [pc, #260]	; (8003068 <vTaskDelete+0x138>)
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <vTaskDelete+0x58>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	2201      	movs	r2, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <vTaskDelete+0x13c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4013      	ands	r3, r2
 8002f84:	4a39      	ldr	r2, [pc, #228]	; (800306c <vTaskDelete+0x13c>)
 8002f86:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d004      	beq.n	8002f9a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3318      	adds	r3, #24
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fb0f 	bl	80025b8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002f9a:	4b35      	ldr	r3, [pc, #212]	; (8003070 <vTaskDelete+0x140>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	4a33      	ldr	r2, [pc, #204]	; (8003070 <vTaskDelete+0x140>)
 8002fa2:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002fa4:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <vTaskDelete+0x134>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d118      	bne.n	8002fe0 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	482f      	ldr	r0, [pc, #188]	; (8003074 <vTaskDelete+0x144>)
 8002fb6:	f7ff faa2 	bl	80024fe <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002fba:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <vTaskDelete+0x148>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <vTaskDelete+0x148>)
 8002fc2:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f004 fc34 	bl	8007834 <SEGGER_SYSVIEW_ShrinkId>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4619      	mov	r1, r3
 8002fd0:	2022      	movs	r0, #34	; 0x22
 8002fd2:	f003 fdbd 	bl	8006b50 <SEGGER_SYSVIEW_RecordU32>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 f893 	bl	8005104 <SYSVIEW_DeleteTask>
 8002fde:	e013      	b.n	8003008 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002fe0:	4b26      	ldr	r3, [pc, #152]	; (800307c <vTaskDelete+0x14c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	4a25      	ldr	r2, [pc, #148]	; (800307c <vTaskDelete+0x14c>)
 8002fe8:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f004 fc21 	bl	8007834 <SEGGER_SYSVIEW_ShrinkId>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	2022      	movs	r0, #34	; 0x22
 8002ff8:	f003 fdaa 	bl	8006b50 <SEGGER_SYSVIEW_RecordU32>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f002 f880 	bl	8005104 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003004:	f000 fd8c 	bl	8003b20 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003008:	f001 fc9c 	bl	8004944 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 800300c:	4b15      	ldr	r3, [pc, #84]	; (8003064 <vTaskDelete+0x134>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	429a      	cmp	r2, r3
 8003014:	d002      	beq.n	800301c <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 fd72 	bl	8003b00 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800301c:	4b18      	ldr	r3, [pc, #96]	; (8003080 <vTaskDelete+0x150>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01b      	beq.n	800305c <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <vTaskDelete+0x134>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	429a      	cmp	r2, r3
 800302c:	d116      	bne.n	800305c <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <vTaskDelete+0x154>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <vTaskDelete+0x11c>
        __asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	60bb      	str	r3, [r7, #8]
    }
 8003048:	bf00      	nop
 800304a:	e7fe      	b.n	800304a <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 800304c:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <vTaskDelete+0x158>)
 800304e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	2000013c 	.word	0x2000013c
 8003068:	20000140 	.word	0x20000140
 800306c:	2000021c 	.word	0x2000021c
 8003070:	20000230 	.word	0x20000230
 8003074:	200001e8 	.word	0x200001e8
 8003078:	200001fc 	.word	0x200001fc
 800307c:	20000214 	.word	0x20000214
 8003080:	20000220 	.word	0x20000220
 8003084:	2000023c 	.word	0x2000023c
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003092:	4b29      	ldr	r3, [pc, #164]	; (8003138 <vTaskStartScheduler+0xac>)
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2300      	movs	r3, #0
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2300      	movs	r3, #0
 800309c:	2282      	movs	r2, #130	; 0x82
 800309e:	4927      	ldr	r1, [pc, #156]	; (800313c <vTaskStartScheduler+0xb0>)
 80030a0:	4827      	ldr	r0, [pc, #156]	; (8003140 <vTaskStartScheduler+0xb4>)
 80030a2:	f7ff fdcb 	bl	8002c3c <xTaskCreate>
 80030a6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d102      	bne.n	80030b4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80030ae:	f000 ffe7 	bl	8004080 <xTimerCreateTimerTask>
 80030b2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d129      	bne.n	800310e <vTaskStartScheduler+0x82>
        __asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	60bb      	str	r3, [r7, #8]
    }
 80030cc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80030ce:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <vTaskStartScheduler+0xb8>)
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
 80030d4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80030d6:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <vTaskStartScheduler+0xbc>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <vTaskStartScheduler+0xc0>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <vTaskStartScheduler+0xc4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3334      	adds	r3, #52	; 0x34
 80030e8:	2205      	movs	r2, #5
 80030ea:	4914      	ldr	r1, [pc, #80]	; (800313c <vTaskStartScheduler+0xb0>)
 80030ec:	4618      	mov	r0, r3
 80030ee:	f004 fd71 	bl	8007bd4 <memcmp>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <vTaskStartScheduler+0x78>
 80030f8:	4b15      	ldr	r3, [pc, #84]	; (8003150 <vTaskStartScheduler+0xc4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 fb15 	bl	800772c <SEGGER_SYSVIEW_OnTaskStartExec>
 8003102:	e001      	b.n	8003108 <vTaskStartScheduler+0x7c>
 8003104:	f004 fab4 	bl	8007670 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003108:	f001 facc 	bl	80046a4 <xPortStartScheduler>
 800310c:	e00e      	b.n	800312c <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d10a      	bne.n	800312c <vTaskStartScheduler+0xa0>
        __asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	607b      	str	r3, [r7, #4]
    }
 8003128:	bf00      	nop
 800312a:	e7fe      	b.n	800312a <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <vTaskStartScheduler+0xc8>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000238 	.word	0x20000238
 800313c:	08008c9c 	.word	0x08008c9c
 8003140:	08003a01 	.word	0x08003a01
 8003144:	20000234 	.word	0x20000234
 8003148:	20000220 	.word	0x20000220
 800314c:	20000218 	.word	0x20000218
 8003150:	2000013c 	.word	0x2000013c
 8003154:	2000000c 	.word	0x2000000c

08003158 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <vTaskSuspendAll+0x18>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	4a03      	ldr	r2, [pc, #12]	; (8003170 <vTaskSuspendAll+0x18>)
 8003164:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	2000023c 	.word	0x2000023c

08003174 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003182:	4b6d      	ldr	r3, [pc, #436]	; (8003338 <xTaskResumeAll+0x1c4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <xTaskResumeAll+0x2c>
        __asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	607b      	str	r3, [r7, #4]
    }
 800319c:	bf00      	nop
 800319e:	e7fe      	b.n	800319e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80031a0:	f001 fba0 	bl	80048e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80031a4:	4b64      	ldr	r3, [pc, #400]	; (8003338 <xTaskResumeAll+0x1c4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	4a63      	ldr	r2, [pc, #396]	; (8003338 <xTaskResumeAll+0x1c4>)
 80031ac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ae:	4b62      	ldr	r3, [pc, #392]	; (8003338 <xTaskResumeAll+0x1c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f040 80b8 	bne.w	8003328 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031b8:	4b60      	ldr	r3, [pc, #384]	; (800333c <xTaskResumeAll+0x1c8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80b3 	beq.w	8003328 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031c2:	e08e      	b.n	80032e2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031c4:	4b5e      	ldr	r3, [pc, #376]	; (8003340 <xTaskResumeAll+0x1cc>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	6a12      	ldr	r2, [r2, #32]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	69d2      	ldr	r2, [r2, #28]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3318      	adds	r3, #24
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d103      	bne.n	80031fa <xTaskResumeAll+0x86>
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	2200      	movs	r2, #0
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	1e5a      	subs	r2, r3, #1
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	68d2      	ldr	r2, [r2, #12]
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	6892      	ldr	r2, [r2, #8]
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	3304      	adds	r3, #4
 800322c:	429a      	cmp	r2, r3
 800322e:	d103      	bne.n	8003238 <xTaskResumeAll+0xc4>
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2200      	movs	r2, #0
 800323c:	615a      	str	r2, [r3, #20]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	1e5a      	subs	r2, r3, #1
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	4618      	mov	r0, r3
 800324c:	f004 fab0 	bl	80077b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	2201      	movs	r2, #1
 8003256:	409a      	lsls	r2, r3
 8003258:	4b3a      	ldr	r3, [pc, #232]	; (8003344 <xTaskResumeAll+0x1d0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4313      	orrs	r3, r2
 800325e:	4a39      	ldr	r2, [pc, #228]	; (8003344 <xTaskResumeAll+0x1d0>)
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003266:	4938      	ldr	r1, [pc, #224]	; (8003348 <xTaskResumeAll+0x1d4>)
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	3304      	adds	r3, #4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	609a      	str	r2, [r3, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	3204      	adds	r2, #4
 800328e:	605a      	str	r2, [r3, #4]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	1d1a      	adds	r2, r3, #4
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4a28      	ldr	r2, [pc, #160]	; (8003348 <xTaskResumeAll+0x1d4>)
 80032a6:	441a      	add	r2, r3
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	615a      	str	r2, [r3, #20]
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b0:	4925      	ldr	r1, [pc, #148]	; (8003348 <xTaskResumeAll+0x1d4>)
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	1c59      	adds	r1, r3, #1
 80032c0:	4821      	ldr	r0, [pc, #132]	; (8003348 <xTaskResumeAll+0x1d4>)
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4403      	add	r3, r0
 80032cc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	4b1e      	ldr	r3, [pc, #120]	; (800334c <xTaskResumeAll+0x1d8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	429a      	cmp	r2, r3
 80032da:	d302      	bcc.n	80032e2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80032dc:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <xTaskResumeAll+0x1dc>)
 80032de:	2201      	movs	r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032e2:	4b17      	ldr	r3, [pc, #92]	; (8003340 <xTaskResumeAll+0x1cc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f47f af6c 	bne.w	80031c4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80032f2:	f000 fc15 	bl	8003b20 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032f6:	4b17      	ldr	r3, [pc, #92]	; (8003354 <xTaskResumeAll+0x1e0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d010      	beq.n	8003324 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003302:	f000 f84b 	bl	800339c <xTaskIncrementTick>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <xTaskResumeAll+0x1dc>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	3b01      	subs	r3, #1
 8003316:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f1      	bne.n	8003302 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800331e:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <xTaskResumeAll+0x1e0>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003324:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <xTaskResumeAll+0x1dc>)
 8003326:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003328:	f001 fb0c 	bl	8004944 <vPortExitCritical>

    return xAlreadyYielded;
 800332c:	697b      	ldr	r3, [r7, #20]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	2000023c 	.word	0x2000023c
 800333c:	20000214 	.word	0x20000214
 8003340:	200001d4 	.word	0x200001d4
 8003344:	2000021c 	.word	0x2000021c
 8003348:	20000140 	.word	0x20000140
 800334c:	2000013c 	.word	0x2000013c
 8003350:	20000228 	.word	0x20000228
 8003354:	20000224 	.word	0x20000224

08003358 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <xTaskGetTickCount+0x1c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003364:	687b      	ldr	r3, [r7, #4]
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000218 	.word	0x20000218

08003378 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800337e:	f001 fb9d 	bl	8004abc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <xTaskGetTickCountFromISR+0x20>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800338c:	683b      	ldr	r3, [r7, #0]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000218 	.word	0x20000218

0800339c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033a6:	4b70      	ldr	r3, [pc, #448]	; (8003568 <xTaskIncrementTick+0x1cc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 80d1 	bne.w	8003552 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033b0:	4b6e      	ldr	r3, [pc, #440]	; (800356c <xTaskIncrementTick+0x1d0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80033b8:	4a6c      	ldr	r2, [pc, #432]	; (800356c <xTaskIncrementTick+0x1d0>)
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d120      	bne.n	8003406 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80033c4:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <xTaskIncrementTick+0x1d4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <xTaskIncrementTick+0x48>
        __asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	607b      	str	r3, [r7, #4]
    }
 80033e0:	bf00      	nop
 80033e2:	e7fe      	b.n	80033e2 <xTaskIncrementTick+0x46>
 80033e4:	4b62      	ldr	r3, [pc, #392]	; (8003570 <xTaskIncrementTick+0x1d4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	4b62      	ldr	r3, [pc, #392]	; (8003574 <xTaskIncrementTick+0x1d8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a60      	ldr	r2, [pc, #384]	; (8003570 <xTaskIncrementTick+0x1d4>)
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4a60      	ldr	r2, [pc, #384]	; (8003574 <xTaskIncrementTick+0x1d8>)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <xTaskIncrementTick+0x1dc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	4a5e      	ldr	r2, [pc, #376]	; (8003578 <xTaskIncrementTick+0x1dc>)
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	f000 fb8d 	bl	8003b20 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003406:	4b5d      	ldr	r3, [pc, #372]	; (800357c <xTaskIncrementTick+0x1e0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a3a      	ldr	r2, [r7, #32]
 800340c:	429a      	cmp	r2, r3
 800340e:	f0c0 80a5 	bcc.w	800355c <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003412:	4b57      	ldr	r3, [pc, #348]	; (8003570 <xTaskIncrementTick+0x1d4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800341c:	4b57      	ldr	r3, [pc, #348]	; (800357c <xTaskIncrementTick+0x1e0>)
 800341e:	f04f 32ff 	mov.w	r2, #4294967295
 8003422:	601a      	str	r2, [r3, #0]
                    break;
 8003424:	e09a      	b.n	800355c <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003426:	4b52      	ldr	r3, [pc, #328]	; (8003570 <xTaskIncrementTick+0x1d4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003436:	6a3a      	ldr	r2, [r7, #32]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	429a      	cmp	r2, r3
 800343c:	d203      	bcs.n	8003446 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800343e:	4a4f      	ldr	r2, [pc, #316]	; (800357c <xTaskIncrementTick+0x1e0>)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003444:	e08a      	b.n	800355c <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	68d2      	ldr	r2, [r2, #12]
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	6892      	ldr	r2, [r2, #8]
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	3304      	adds	r3, #4
 8003468:	429a      	cmp	r2, r3
 800346a:	d103      	bne.n	8003474 <xTaskIncrementTick+0xd8>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2200      	movs	r2, #0
 8003478:	615a      	str	r2, [r3, #20]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	1e5a      	subs	r2, r3, #1
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01e      	beq.n	80034ca <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	6a12      	ldr	r2, [r2, #32]
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	69d2      	ldr	r2, [r2, #28]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	3318      	adds	r3, #24
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d103      	bne.n	80034ba <xTaskIncrementTick+0x11e>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	6a1a      	ldr	r2, [r3, #32]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2200      	movs	r2, #0
 80034be:	629a      	str	r2, [r3, #40]	; 0x28
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1e5a      	subs	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 f96f 	bl	80077b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	2201      	movs	r2, #1
 80034d8:	409a      	lsls	r2, r3
 80034da:	4b29      	ldr	r3, [pc, #164]	; (8003580 <xTaskIncrementTick+0x1e4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	4a27      	ldr	r2, [pc, #156]	; (8003580 <xTaskIncrementTick+0x1e4>)
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e8:	4926      	ldr	r1, [pc, #152]	; (8003584 <xTaskIncrementTick+0x1e8>)
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3304      	adds	r3, #4
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	60da      	str	r2, [r3, #12]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	3204      	adds	r2, #4
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	1d1a      	adds	r2, r3, #4
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	609a      	str	r2, [r3, #8]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4a17      	ldr	r2, [pc, #92]	; (8003584 <xTaskIncrementTick+0x1e8>)
 8003528:	441a      	add	r2, r3
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	615a      	str	r2, [r3, #20]
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003532:	4914      	ldr	r1, [pc, #80]	; (8003584 <xTaskIncrementTick+0x1e8>)
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1c59      	adds	r1, r3, #1
 8003542:	4810      	ldr	r0, [pc, #64]	; (8003584 <xTaskIncrementTick+0x1e8>)
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4403      	add	r3, r0
 800354e:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003550:	e75f      	b.n	8003412 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <xTaskIncrementTick+0x1ec>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3301      	adds	r3, #1
 8003558:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <xTaskIncrementTick+0x1ec>)
 800355a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800355e:	4618      	mov	r0, r3
 8003560:	3728      	adds	r7, #40	; 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	2000023c 	.word	0x2000023c
 800356c:	20000218 	.word	0x20000218
 8003570:	200001cc 	.word	0x200001cc
 8003574:	200001d0 	.word	0x200001d0
 8003578:	2000022c 	.word	0x2000022c
 800357c:	20000234 	.word	0x20000234
 8003580:	2000021c 	.word	0x2000021c
 8003584:	20000140 	.word	0x20000140
 8003588:	20000224 	.word	0x20000224

0800358c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003592:	4b2f      	ldr	r3, [pc, #188]	; (8003650 <vTaskSwitchContext+0xc4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800359a:	4b2e      	ldr	r3, [pc, #184]	; (8003654 <vTaskSwitchContext+0xc8>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80035a0:	e052      	b.n	8003648 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 80035a2:	4b2c      	ldr	r3, [pc, #176]	; (8003654 <vTaskSwitchContext+0xc8>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035a8:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <vTaskSwitchContext+0xcc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80035b6:	7afb      	ldrb	r3, [r7, #11]
 80035b8:	f1c3 031f 	rsb	r3, r3, #31
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	4927      	ldr	r1, [pc, #156]	; (800365c <vTaskSwitchContext+0xd0>)
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	607b      	str	r3, [r7, #4]
    }
 80035e4:	bf00      	nop
 80035e6:	e7fe      	b.n	80035e6 <vTaskSwitchContext+0x5a>
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4a1a      	ldr	r2, [pc, #104]	; (800365c <vTaskSwitchContext+0xd0>)
 80035f4:	4413      	add	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	3308      	adds	r3, #8
 800360a:	429a      	cmp	r2, r3
 800360c:	d104      	bne.n	8003618 <vTaskSwitchContext+0x8c>
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	605a      	str	r2, [r3, #4]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4a10      	ldr	r2, [pc, #64]	; (8003660 <vTaskSwitchContext+0xd4>)
 8003620:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <vTaskSwitchContext+0xd4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3334      	adds	r3, #52	; 0x34
 8003628:	2205      	movs	r2, #5
 800362a:	490e      	ldr	r1, [pc, #56]	; (8003664 <vTaskSwitchContext+0xd8>)
 800362c:	4618      	mov	r0, r3
 800362e:	f004 fad1 	bl	8007bd4 <memcmp>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <vTaskSwitchContext+0xb8>
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <vTaskSwitchContext+0xd4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f004 f875 	bl	800772c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003642:	e001      	b.n	8003648 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8003644:	f004 f814 	bl	8007670 <SEGGER_SYSVIEW_OnIdle>
}
 8003648:	bf00      	nop
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	2000023c 	.word	0x2000023c
 8003654:	20000228 	.word	0x20000228
 8003658:	2000021c 	.word	0x2000021c
 800365c:	20000140 	.word	0x20000140
 8003660:	2000013c 	.word	0x2000013c
 8003664:	08008c9c 	.word	0x08008c9c

08003668 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	60fb      	str	r3, [r7, #12]
    }
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800368e:	4b07      	ldr	r3, [pc, #28]	; (80036ac <vTaskPlaceOnEventList+0x44>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3318      	adds	r3, #24
 8003694:	4619      	mov	r1, r3
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fe ff55 	bl	8002546 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800369c:	2101      	movs	r1, #1
 800369e:	6838      	ldr	r0, [r7, #0]
 80036a0:	f000 fc6e 	bl	8003f80 <prvAddCurrentTaskToDelayedList>
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	2000013c 	.word	0x2000013c

080036b0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	613b      	str	r3, [r7, #16]
    }
 80036d4:	bf00      	nop
 80036d6:	e7fe      	b.n	80036d6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <vTaskPlaceOnEventListRestricted+0x8c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	61da      	str	r2, [r3, #28]
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <vTaskPlaceOnEventListRestricted+0x8c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	6892      	ldr	r2, [r2, #8]
 80036ee:	621a      	str	r2, [r3, #32]
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <vTaskPlaceOnEventListRestricted+0x8c>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	3218      	adds	r2, #24
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	4b0f      	ldr	r3, [pc, #60]	; (800373c <vTaskPlaceOnEventListRestricted+0x8c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f103 0218 	add.w	r2, r3, #24
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	4b0c      	ldr	r3, [pc, #48]	; (800373c <vTaskPlaceOnEventListRestricted+0x8c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
 8003724:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003726:	2024      	movs	r0, #36	; 0x24
 8003728:	f003 f9f4 	bl	8006b14 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	68b8      	ldr	r0, [r7, #8]
 8003730:	f000 fc26 	bl	8003f80 <prvAddCurrentTaskToDelayedList>
    }
 8003734:	bf00      	nop
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	2000013c 	.word	0x2000013c

08003740 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10a      	bne.n	800376c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	60fb      	str	r3, [r7, #12]
    }
 8003768:	bf00      	nop
 800376a:	e7fe      	b.n	800376a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	6a3a      	ldr	r2, [r7, #32]
 8003778:	6a12      	ldr	r2, [r2, #32]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	6a3a      	ldr	r2, [r7, #32]
 8003782:	69d2      	ldr	r2, [r2, #28]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	3318      	adds	r3, #24
 800378e:	429a      	cmp	r2, r3
 8003790:	d103      	bne.n	800379a <xTaskRemoveFromEventList+0x5a>
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	6a1a      	ldr	r2, [r3, #32]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	2200      	movs	r2, #0
 800379e:	629a      	str	r2, [r3, #40]	; 0x28
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	1e5a      	subs	r2, r3, #1
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037aa:	4b4b      	ldr	r3, [pc, #300]	; (80038d8 <xTaskRemoveFromEventList+0x198>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d162      	bne.n	8003878 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	68d2      	ldr	r2, [r2, #12]
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	6a3a      	ldr	r2, [r7, #32]
 80037c8:	6892      	ldr	r2, [r2, #8]
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	3304      	adds	r3, #4
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d103      	bne.n	80037e0 <xTaskRemoveFromEventList+0xa0>
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	2200      	movs	r2, #0
 80037e4:	615a      	str	r2, [r3, #20]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f003 ffdc 	bl	80077b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	2201      	movs	r2, #1
 80037fe:	409a      	lsls	r2, r3
 8003800:	4b36      	ldr	r3, [pc, #216]	; (80038dc <xTaskRemoveFromEventList+0x19c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4313      	orrs	r3, r2
 8003806:	4a35      	ldr	r2, [pc, #212]	; (80038dc <xTaskRemoveFromEventList+0x19c>)
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380e:	4934      	ldr	r1, [pc, #208]	; (80038e0 <xTaskRemoveFromEventList+0x1a0>)
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	3304      	adds	r3, #4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	609a      	str	r2, [r3, #8]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	6a3a      	ldr	r2, [r7, #32]
 8003834:	3204      	adds	r2, #4
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	1d1a      	adds	r2, r3, #4
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4a24      	ldr	r2, [pc, #144]	; (80038e0 <xTaskRemoveFromEventList+0x1a0>)
 800384e:	441a      	add	r2, r3
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	615a      	str	r2, [r3, #20]
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003858:	4921      	ldr	r1, [pc, #132]	; (80038e0 <xTaskRemoveFromEventList+0x1a0>)
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	1c59      	adds	r1, r3, #1
 8003868:	481d      	ldr	r0, [pc, #116]	; (80038e0 <xTaskRemoveFromEventList+0x1a0>)
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4403      	add	r3, r0
 8003874:	6019      	str	r1, [r3, #0]
 8003876:	e01b      	b.n	80038b0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003878:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <xTaskRemoveFromEventList+0x1a4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	61da      	str	r2, [r3, #28]
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	621a      	str	r2, [r3, #32]
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	3218      	adds	r2, #24
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	f103 0218 	add.w	r2, r3, #24
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	4a10      	ldr	r2, [pc, #64]	; (80038e4 <xTaskRemoveFromEventList+0x1a4>)
 80038a4:	629a      	str	r2, [r3, #40]	; 0x28
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <xTaskRemoveFromEventList+0x1a4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3301      	adds	r3, #1
 80038ac:	4a0d      	ldr	r2, [pc, #52]	; (80038e4 <xTaskRemoveFromEventList+0x1a4>)
 80038ae:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <xTaskRemoveFromEventList+0x1a8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d905      	bls.n	80038ca <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80038be:	2301      	movs	r3, #1
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <xTaskRemoveFromEventList+0x1ac>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	e001      	b.n	80038ce <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3728      	adds	r7, #40	; 0x28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	2000023c 	.word	0x2000023c
 80038dc:	2000021c 	.word	0x2000021c
 80038e0:	20000140 	.word	0x20000140
 80038e4:	200001d4 	.word	0x200001d4
 80038e8:	2000013c 	.word	0x2000013c
 80038ec:	20000228 	.word	0x20000228

080038f0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <vTaskInternalSetTimeOutState+0x24>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <vTaskInternalSetTimeOutState+0x28>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	605a      	str	r2, [r3, #4]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	2000022c 	.word	0x2000022c
 8003918:	20000218 	.word	0x20000218

0800391c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	613b      	str	r3, [r7, #16]
    }
 800393e:	bf00      	nop
 8003940:	e7fe      	b.n	8003940 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	60fb      	str	r3, [r7, #12]
    }
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800395e:	f000 ffc1 	bl	80048e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003962:	4b1f      	ldr	r3, [pc, #124]	; (80039e0 <xTaskCheckForTimeOut+0xc4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397a:	d102      	bne.n	8003982 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e026      	b.n	80039d0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4b17      	ldr	r3, [pc, #92]	; (80039e4 <xTaskCheckForTimeOut+0xc8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d00a      	beq.n	80039a4 <xTaskCheckForTimeOut+0x88>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	429a      	cmp	r2, r3
 8003996:	d305      	bcc.n	80039a4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003998:	2301      	movs	r3, #1
 800399a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e015      	b.n	80039d0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d20b      	bcs.n	80039c6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	1ad2      	subs	r2, r2, r3
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ff98 	bl	80038f0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	e004      	b.n	80039d0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80039cc:	2301      	movs	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80039d0:	f000 ffb8 	bl	8004944 <vPortExitCritical>

    return xReturn;
 80039d4:	69fb      	ldr	r3, [r7, #28]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000218 	.word	0x20000218
 80039e4:	2000022c 	.word	0x2000022c

080039e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <vTaskMissedYield+0x14>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	20000228 	.word	0x20000228

08003a00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a08:	f000 f84c 	bl	8003aa4 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <prvIdleTask+0x20>)
 8003a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a1c:	e7f4      	b.n	8003a08 <prvIdleTask+0x8>
 8003a1e:	bf00      	nop
 8003a20:	e000ed04 	.word	0xe000ed04

08003a24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	e00c      	b.n	8003a4a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <prvInitialiseTaskLists+0x60>)
 8003a3c:	4413      	add	r3, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fd30 	bl	80024a4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3301      	adds	r3, #1
 8003a48:	607b      	str	r3, [r7, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d9ef      	bls.n	8003a30 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a50:	480d      	ldr	r0, [pc, #52]	; (8003a88 <prvInitialiseTaskLists+0x64>)
 8003a52:	f7fe fd27 	bl	80024a4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a56:	480d      	ldr	r0, [pc, #52]	; (8003a8c <prvInitialiseTaskLists+0x68>)
 8003a58:	f7fe fd24 	bl	80024a4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a5c:	480c      	ldr	r0, [pc, #48]	; (8003a90 <prvInitialiseTaskLists+0x6c>)
 8003a5e:	f7fe fd21 	bl	80024a4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003a62:	480c      	ldr	r0, [pc, #48]	; (8003a94 <prvInitialiseTaskLists+0x70>)
 8003a64:	f7fe fd1e 	bl	80024a4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003a68:	480b      	ldr	r0, [pc, #44]	; (8003a98 <prvInitialiseTaskLists+0x74>)
 8003a6a:	f7fe fd1b 	bl	80024a4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <prvInitialiseTaskLists+0x78>)
 8003a70:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <prvInitialiseTaskLists+0x64>)
 8003a72:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <prvInitialiseTaskLists+0x7c>)
 8003a76:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <prvInitialiseTaskLists+0x68>)
 8003a78:	601a      	str	r2, [r3, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000140 	.word	0x20000140
 8003a88:	200001a4 	.word	0x200001a4
 8003a8c:	200001b8 	.word	0x200001b8
 8003a90:	200001d4 	.word	0x200001d4
 8003a94:	200001e8 	.word	0x200001e8
 8003a98:	20000200 	.word	0x20000200
 8003a9c:	200001cc 	.word	0x200001cc
 8003aa0:	200001d0 	.word	0x200001d0

08003aa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aaa:	e019      	b.n	8003ae0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003aac:	f000 ff1a 	bl	80048e4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab0:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <prvCheckTasksWaitingTermination+0x50>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe fd7b 	bl	80025b8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <prvCheckTasksWaitingTermination+0x54>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <prvCheckTasksWaitingTermination+0x54>)
 8003aca:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <prvCheckTasksWaitingTermination+0x58>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <prvCheckTasksWaitingTermination+0x58>)
 8003ad4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003ad6:	f000 ff35 	bl	8004944 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f810 	bl	8003b00 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <prvCheckTasksWaitingTermination+0x58>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e1      	bne.n	8003aac <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	200001e8 	.word	0x200001e8
 8003af8:	20000214 	.word	0x20000214
 8003afc:	200001fc 	.word	0x200001fc

08003b00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 f8cf 	bl	8004cb0 <vPortFree>
            vPortFree( pxTCB );
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f001 f8cc 	bl	8004cb0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <prvResetNextTaskUnblockTime+0x30>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <prvResetNextTaskUnblockTime+0x34>)
 8003b30:	f04f 32ff 	mov.w	r2, #4294967295
 8003b34:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b36:	e005      	b.n	8003b44 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <prvResetNextTaskUnblockTime+0x30>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <prvResetNextTaskUnblockTime+0x34>)
 8003b42:	6013      	str	r3, [r2, #0]
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	200001cc 	.word	0x200001cc
 8003b54:	20000234 	.word	0x20000234

08003b58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <xTaskGetSchedulerState+0x34>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d102      	bne.n	8003b6c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b66:	2301      	movs	r3, #1
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	e008      	b.n	8003b7e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b6c:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <xTaskGetSchedulerState+0x38>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b74:	2302      	movs	r3, #2
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	e001      	b.n	8003b7e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b7e:	687b      	ldr	r3, [r7, #4]
    }
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	20000220 	.word	0x20000220
 8003b90:	2000023c 	.word	0x2000023c

08003b94 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	613b      	str	r3, [r7, #16]
    }
 8003bba:	bf00      	nop
 8003bbc:	e7fe      	b.n	8003bbc <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003bbe:	f000 fe91 	bl	80048e4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003bc2:	4b36      	ldr	r3, [pc, #216]	; (8003c9c <xTaskGenericNotifyWait+0x108>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	3354      	adds	r3, #84	; 0x54
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d022      	beq.n	8003c1a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003bd4:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <xTaskGenericNotifyWait+0x108>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	3214      	adds	r2, #20
 8003bdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	43d2      	mvns	r2, r2
 8003be4:	4011      	ands	r1, r2
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	3214      	adds	r2, #20
 8003bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003bee:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <xTaskGenericNotifyWait+0x108>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3354      	adds	r3, #84	; 0x54
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c02:	2101      	movs	r1, #1
 8003c04:	6a38      	ldr	r0, [r7, #32]
 8003c06:	f000 f9bb 	bl	8003f80 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003c0a:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <xTaskGenericNotifyWait+0x10c>)
 8003c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c1a:	f000 fe93 	bl	8004944 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003c1e:	f000 fe61 	bl	80048e4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	2040      	movs	r0, #64	; 0x40
 8003c30:	f003 f89a 	bl	8006d68 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d007      	beq.n	8003c4a <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003c3a:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <xTaskGenericNotifyWait+0x108>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	3214      	adds	r2, #20
 8003c42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003c4a:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <xTaskGenericNotifyWait+0x108>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4413      	add	r3, r2
 8003c52:	3354      	adds	r3, #84	; 0x54
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d002      	beq.n	8003c62 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e00e      	b.n	8003c80 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <xTaskGenericNotifyWait+0x108>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	3214      	adds	r2, #20
 8003c6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	43d2      	mvns	r2, r2
 8003c72:	4011      	ands	r1, r2
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	3214      	adds	r2, #20
 8003c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <xTaskGenericNotifyWait+0x108>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	3354      	adds	r3, #84	; 0x54
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003c8e:	f000 fe59 	bl	8004944 <vPortExitCritical>

        return xReturn;
 8003c92:	697b      	ldr	r3, [r7, #20]
    }
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	2000013c 	.word	0x2000013c
 8003ca0:	e000ed04 	.word	0xe000ed04

08003ca4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b094      	sub	sp, #80	; 0x50
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003cea:	bf00      	nop
 8003cec:	e7fe      	b.n	8003cec <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cee:	f000 fee5 	bl	8004abc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003cf6:	f3ef 8211 	mrs	r2, BASEPRI
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	623a      	str	r2, [r7, #32]
 8003d0c:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003d0e:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8003d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d006      	beq.n	8003d26 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	3214      	adds	r2, #20
 8003d1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d24:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003d26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3354      	adds	r3, #84	; 0x54
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003d34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4413      	add	r3, r2
 8003d3a:	3354      	adds	r3, #84	; 0x54
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d83b      	bhi.n	8003dbe <xTaskGenericNotifyFromISR+0x11a>
 8003d46:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <xTaskGenericNotifyFromISR+0xa8>)
 8003d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4c:	08003ddd 	.word	0x08003ddd
 8003d50:	08003d61 	.word	0x08003d61
 8003d54:	08003d7d 	.word	0x08003d7d
 8003d58:	08003d95 	.word	0x08003d95
 8003d5c:	08003da3 	.word	0x08003da3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	3214      	adds	r2, #20
 8003d66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	ea42 0103 	orr.w	r1, r2, r3
 8003d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	3214      	adds	r2, #20
 8003d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d7a:	e032      	b.n	8003de2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	3214      	adds	r2, #20
 8003d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d86:	1c59      	adds	r1, r3, #1
 8003d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	3214      	adds	r2, #20
 8003d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d92:	e026      	b.n	8003de2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	3214      	adds	r2, #20
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003da0:	e01f      	b.n	8003de2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003da2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d006      	beq.n	8003db8 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	3214      	adds	r2, #20
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003db6:	e014      	b.n	8003de2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8003dbc:	e011      	b.n	8003de2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003dbe:	4b69      	ldr	r3, [pc, #420]	; (8003f64 <xTaskGenericNotifyFromISR+0x2c0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00c      	beq.n	8003de0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	61bb      	str	r3, [r7, #24]
    }
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003ddc:	bf00      	nop
 8003dde:	e000      	b.n	8003de2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003de0:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de4:	4618      	mov	r0, r3
 8003de6:	f003 fd25 	bl	8007834 <SEGGER_SYSVIEW_ShrinkId>
 8003dea:	78f9      	ldrb	r1, [r7, #3]
 8003dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003df0:	9201      	str	r2, [sp, #4]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	460b      	mov	r3, r1
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	4601      	mov	r1, r0
 8003dfa:	203f      	movs	r0, #63	; 0x3f
 8003dfc:	f003 f846 	bl	8006e8c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003e00:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	f040 80a2 	bne.w	8003f4e <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	617b      	str	r3, [r7, #20]
    }
 8003e24:	bf00      	nop
 8003e26:	e7fe      	b.n	8003e26 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e28:	4b4f      	ldr	r3, [pc, #316]	; (8003f68 <xTaskGenericNotifyFromISR+0x2c4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d162      	bne.n	8003ef6 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	633b      	str	r3, [r7, #48]	; 0x30
 8003e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e3c:	68d2      	ldr	r2, [r2, #12]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e46:	6892      	ldr	r2, [r2, #8]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e50:	3304      	adds	r3, #4
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d103      	bne.n	8003e5e <xTaskGenericNotifyFromISR+0x1ba>
 8003e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e60:	2200      	movs	r2, #0
 8003e62:	615a      	str	r2, [r3, #20]
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	1e5a      	subs	r2, r3, #1
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 fc9d 	bl	80077b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <xTaskGenericNotifyFromISR+0x2c8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	4a39      	ldr	r2, [pc, #228]	; (8003f6c <xTaskGenericNotifyFromISR+0x2c8>)
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	4938      	ldr	r1, [pc, #224]	; (8003f70 <xTaskGenericNotifyFromISR+0x2cc>)
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	3304      	adds	r3, #4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eaa:	60da      	str	r2, [r3, #12]
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eb2:	3204      	adds	r2, #4
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eb8:	1d1a      	adds	r2, r3, #4
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	609a      	str	r2, [r3, #8]
 8003ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4a29      	ldr	r2, [pc, #164]	; (8003f70 <xTaskGenericNotifyFromISR+0x2cc>)
 8003ecc:	441a      	add	r2, r3
 8003ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed0:	615a      	str	r2, [r3, #20]
 8003ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed6:	4926      	ldr	r1, [pc, #152]	; (8003f70 <xTaskGenericNotifyFromISR+0x2cc>)
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	1c59      	adds	r1, r3, #1
 8003ee6:	4822      	ldr	r0, [pc, #136]	; (8003f70 <xTaskGenericNotifyFromISR+0x2cc>)
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4403      	add	r3, r0
 8003ef2:	6019      	str	r1, [r3, #0]
 8003ef4:	e01b      	b.n	8003f2e <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003ef6:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <xTaskGenericNotifyFromISR+0x2d0>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	637b      	str	r3, [r7, #52]	; 0x34
 8003efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f00:	61da      	str	r2, [r3, #28]
 8003f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f08:	621a      	str	r2, [r3, #32]
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f10:	3218      	adds	r2, #24
 8003f12:	605a      	str	r2, [r3, #4]
 8003f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f16:	f103 0218 	add.w	r2, r3, #24
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1c:	609a      	str	r2, [r3, #8]
 8003f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f20:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <xTaskGenericNotifyFromISR+0x2d0>)
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <xTaskGenericNotifyFromISR+0x2d0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	4a12      	ldr	r2, [pc, #72]	; (8003f74 <xTaskGenericNotifyFromISR+0x2d0>)
 8003f2c:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f32:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <xTaskGenericNotifyFromISR+0x2d4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d908      	bls.n	8003f4e <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <xTaskGenericNotifyFromISR+0x2d8>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f50:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003f58:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3748      	adds	r7, #72	; 0x48
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20000218 	.word	0x20000218
 8003f68:	2000023c 	.word	0x2000023c
 8003f6c:	2000021c 	.word	0x2000021c
 8003f70:	20000140 	.word	0x20000140
 8003f74:	200001d4 	.word	0x200001d4
 8003f78:	2000013c 	.word	0x2000013c
 8003f7c:	20000228 	.word	0x20000228

08003f80 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003f8a:	4b36      	ldr	r3, [pc, #216]	; (8004064 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f90:	4b35      	ldr	r3, [pc, #212]	; (8004068 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3304      	adds	r3, #4
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fb0e 	bl	80025b8 <uxListRemove>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003fa2:	4b31      	ldr	r3, [pc, #196]	; (8004068 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	2201      	movs	r2, #1
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	4b2e      	ldr	r3, [pc, #184]	; (800406c <prvAddCurrentTaskToDelayedList+0xec>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	4a2d      	ldr	r2, [pc, #180]	; (800406c <prvAddCurrentTaskToDelayedList+0xec>)
 8003fb8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d124      	bne.n	800400c <prvAddCurrentTaskToDelayedList+0x8c>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d021      	beq.n	800400c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fc8:	4b29      	ldr	r3, [pc, #164]	; (8004070 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	4b26      	ldr	r3, [pc, #152]	; (8004068 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	6892      	ldr	r2, [r2, #8]
 8003fde:	60da      	str	r2, [r3, #12]
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	3204      	adds	r2, #4
 8003fea:	605a      	str	r2, [r3, #4]
 8003fec:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	1d1a      	adds	r2, r3, #4
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	609a      	str	r2, [r3, #8]
 8003ff6:	4b1c      	ldr	r3, [pc, #112]	; (8004068 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1d      	ldr	r2, [pc, #116]	; (8004070 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ffc:	615a      	str	r2, [r3, #20]
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3301      	adds	r3, #1
 8004004:	4a1a      	ldr	r2, [pc, #104]	; (8004070 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800400a:	e026      	b.n	800405a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004014:	4b14      	ldr	r3, [pc, #80]	; (8004068 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	429a      	cmp	r2, r3
 8004022:	d209      	bcs.n	8004038 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004024:	4b13      	ldr	r3, [pc, #76]	; (8004074 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <prvAddCurrentTaskToDelayedList+0xe8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3304      	adds	r3, #4
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f7fe fa88 	bl	8002546 <vListInsert>
}
 8004036:	e010      	b.n	800405a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004038:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <prvAddCurrentTaskToDelayedList+0xf8>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <prvAddCurrentTaskToDelayedList+0xe8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f7fe fa7e 	bl	8002546 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <prvAddCurrentTaskToDelayedList+0xfc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	429a      	cmp	r2, r3
 8004052:	d202      	bcs.n	800405a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004054:	4a09      	ldr	r2, [pc, #36]	; (800407c <prvAddCurrentTaskToDelayedList+0xfc>)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6013      	str	r3, [r2, #0]
}
 800405a:	bf00      	nop
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000218 	.word	0x20000218
 8004068:	2000013c 	.word	0x2000013c
 800406c:	2000021c 	.word	0x2000021c
 8004070:	20000200 	.word	0x20000200
 8004074:	200001d0 	.word	0x200001d0
 8004078:	200001cc 	.word	0x200001cc
 800407c:	20000234 	.word	0x20000234

08004080 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800408a:	f000 fa47 	bl	800451c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <xTimerCreateTimerTask+0x54>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00b      	beq.n	80040ae <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004096:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <xTimerCreateTimerTask+0x58>)
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	2302      	movs	r3, #2
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	2300      	movs	r3, #0
 80040a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040a4:	490d      	ldr	r1, [pc, #52]	; (80040dc <xTimerCreateTimerTask+0x5c>)
 80040a6:	480e      	ldr	r0, [pc, #56]	; (80040e0 <xTimerCreateTimerTask+0x60>)
 80040a8:	f7fe fdc8 	bl	8002c3c <xTaskCreate>
 80040ac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	603b      	str	r3, [r7, #0]
    }
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80040ca:	687b      	ldr	r3, [r7, #4]
    }
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000270 	.word	0x20000270
 80040d8:	20000274 	.word	0x20000274
 80040dc:	08008ca4 	.word	0x08008ca4
 80040e0:	08004189 	.word	0x08004189

080040e4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80040f0:	e008      	b.n	8004104 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	4413      	add	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	699a      	ldr	r2, [r3, #24]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	18d1      	adds	r1, r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f8dd 	bl	80042d0 <prvInsertTimerInActiveList>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1ea      	bne.n	80040f2 <prvReloadTimer+0xe>
        }
    }
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004132:	4b14      	ldr	r3, [pc, #80]	; (8004184 <prvProcessExpiredTimer+0x5c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3304      	adds	r3, #4
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe fa39 	bl	80025b8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff ffc3 	bl	80040e4 <prvReloadTimer>
 800415e:	e008      	b.n	8004172 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	b2da      	uxtb	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	4798      	blx	r3
    }
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000268 	.word	0x20000268

08004188 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004190:	f107 0308 	add.w	r3, r7, #8
 8004194:	4618      	mov	r0, r3
 8004196:	f000 f857 	bl	8004248 <prvGetNextExpireTime>
 800419a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4619      	mov	r1, r3
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f803 	bl	80041ac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80041a6:	f000 f8d5 	bl	8004354 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041aa:	e7f1      	b.n	8004190 <prvTimerTask+0x8>

080041ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80041b6:	f7fe ffcf 	bl	8003158 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041ba:	f107 0308 	add.w	r3, r7, #8
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f866 	bl	8004290 <prvSampleTimeNow>
 80041c4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d130      	bne.n	800422e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <prvProcessTimerOrBlockTask+0x3c>
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d806      	bhi.n	80041e8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80041da:	f7fe ffcb 	bl	8003174 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ffa1 	bl	8004128 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80041e6:	e024      	b.n	8004232 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041ee:	4b13      	ldr	r3, [pc, #76]	; (800423c <prvProcessTimerOrBlockTask+0x90>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <prvProcessTimerOrBlockTask+0x50>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <prvProcessTimerOrBlockTask+0x52>
 80041fc:	2300      	movs	r3, #0
 80041fe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <prvProcessTimerOrBlockTask+0x94>)
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	4619      	mov	r1, r3
 800420e:	f7fe fce1 	bl	8002bd4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004212:	f7fe ffaf 	bl	8003174 <xTaskResumeAll>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <prvProcessTimerOrBlockTask+0x98>)
 800421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	f3bf 8f6f 	isb	sy
    }
 800422c:	e001      	b.n	8004232 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800422e:	f7fe ffa1 	bl	8003174 <xTaskResumeAll>
    }
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	2000026c 	.word	0x2000026c
 8004240:	20000270 	.word	0x20000270
 8004244:	e000ed04 	.word	0xe000ed04

08004248 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004250:	4b0e      	ldr	r3, [pc, #56]	; (800428c <prvGetNextExpireTime+0x44>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <prvGetNextExpireTime+0x16>
 800425a:	2201      	movs	r2, #1
 800425c:	e000      	b.n	8004260 <prvGetNextExpireTime+0x18>
 800425e:	2200      	movs	r2, #0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d105      	bne.n	8004278 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800426c:	4b07      	ldr	r3, [pc, #28]	; (800428c <prvGetNextExpireTime+0x44>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e001      	b.n	800427c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800427c:	68fb      	ldr	r3, [r7, #12]
    }
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000268 	.word	0x20000268

08004290 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004298:	f7ff f85e 	bl	8003358 <xTaskGetTickCount>
 800429c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800429e:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <prvSampleTimeNow+0x3c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d205      	bcs.n	80042b4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80042a8:	f000 f912 	bl	80044d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e002      	b.n	80042ba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80042ba:	4a04      	ldr	r2, [pc, #16]	; (80042cc <prvSampleTimeNow+0x3c>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80042c0:	68fb      	ldr	r3, [r7, #12]
    }
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000278 	.word	0x20000278

080042d0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d812      	bhi.n	800431c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	1ad2      	subs	r2, r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	429a      	cmp	r2, r3
 8004302:	d302      	bcc.n	800430a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004304:	2301      	movs	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	e01b      	b.n	8004342 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800430a:	4b10      	ldr	r3, [pc, #64]	; (800434c <prvInsertTimerInActiveList+0x7c>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3304      	adds	r3, #4
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7fe f916 	bl	8002546 <vListInsert>
 800431a:	e012      	b.n	8004342 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d206      	bcs.n	8004332 <prvInsertTimerInActiveList+0x62>
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d302      	bcc.n	8004332 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800432c:	2301      	movs	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e007      	b.n	8004342 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004332:	4b07      	ldr	r3, [pc, #28]	; (8004350 <prvInsertTimerInActiveList+0x80>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3304      	adds	r3, #4
 800433a:	4619      	mov	r1, r3
 800433c:	4610      	mov	r0, r2
 800433e:	f7fe f902 	bl	8002546 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004342:	697b      	ldr	r3, [r7, #20]
    }
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	2000026c 	.word	0x2000026c
 8004350:	20000268 	.word	0x20000268

08004354 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800435a:	e0a6      	b.n	80044aa <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f2c0 80a2 	blt.w	80044a8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	3304      	adds	r3, #4
 8004374:	4618      	mov	r0, r3
 8004376:	f7fe f91f 	bl	80025b8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800437a:	1d3b      	adds	r3, r7, #4
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff ff87 	bl	8004290 <prvSampleTimeNow>
 8004382:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	3b01      	subs	r3, #1
 8004388:	2b08      	cmp	r3, #8
 800438a:	f200 808e 	bhi.w	80044aa <prvProcessReceivedCommands+0x156>
 800438e:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <prvProcessReceivedCommands+0x40>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	080043b9 	.word	0x080043b9
 8004398:	080043b9 	.word	0x080043b9
 800439c:	08004421 	.word	0x08004421
 80043a0:	08004435 	.word	0x08004435
 80043a4:	0800447f 	.word	0x0800447f
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043b9 	.word	0x080043b9
 80043b0:	08004421 	.word	0x08004421
 80043b4:	08004435 	.word	0x08004435
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	18d1      	adds	r1, r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	69f8      	ldr	r0, [r7, #28]
 80043d8:	f7ff ff7a 	bl	80042d0 <prvInsertTimerInActiveList>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d063      	beq.n	80044aa <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4619      	mov	r1, r3
 80043fc:	69f8      	ldr	r0, [r7, #28]
 80043fe:	f7ff fe71 	bl	80040e4 <prvReloadTimer>
 8004402:	e008      	b.n	8004416 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	b2da      	uxtb	r2, r3
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	69f8      	ldr	r0, [r7, #28]
 800441c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800441e:	e044      	b.n	80044aa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	b2da      	uxtb	r2, r3
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004432:	e03a      	b.n	80044aa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	b2da      	uxtb	r2, r3
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	617b      	str	r3, [r7, #20]
    }
 8004466:	bf00      	nop
 8004468:	e7fe      	b.n	8004468 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	18d1      	adds	r1, r2, r3
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	69f8      	ldr	r0, [r7, #28]
 8004478:	f7ff ff2a 	bl	80042d0 <prvInsertTimerInActiveList>
                        break;
 800447c:	e015      	b.n	80044aa <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800448c:	69f8      	ldr	r0, [r7, #28]
 800448e:	f000 fc0f 	bl	8004cb0 <vPortFree>
 8004492:	e00a      	b.n	80044aa <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80044a6:	e000      	b.n	80044aa <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80044a8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044aa:	4b08      	ldr	r3, [pc, #32]	; (80044cc <prvProcessReceivedCommands+0x178>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f107 0108 	add.w	r1, r7, #8
 80044b2:	2200      	movs	r2, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe f9a3 	bl	8002800 <xQueueReceive>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f47f af4d 	bne.w	800435c <prvProcessReceivedCommands+0x8>
        }
    }
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
 80044c6:	3720      	adds	r7, #32
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20000270 	.word	0x20000270

080044d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044d6:	e009      	b.n	80044ec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <prvSwitchTimerLists+0x44>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80044e2:	f04f 31ff 	mov.w	r1, #4294967295
 80044e6:	6838      	ldr	r0, [r7, #0]
 80044e8:	f7ff fe1e 	bl	8004128 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <prvSwitchTimerLists+0x44>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80044f6:	4b07      	ldr	r3, [pc, #28]	; (8004514 <prvSwitchTimerLists+0x44>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <prvSwitchTimerLists+0x48>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a04      	ldr	r2, [pc, #16]	; (8004514 <prvSwitchTimerLists+0x44>)
 8004502:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004504:	4a04      	ldr	r2, [pc, #16]	; (8004518 <prvSwitchTimerLists+0x48>)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6013      	str	r3, [r2, #0]
    }
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000268 	.word	0x20000268
 8004518:	2000026c 	.word	0x2000026c

0800451c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004520:	f000 f9e0 	bl	80048e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004524:	4b12      	ldr	r3, [pc, #72]	; (8004570 <prvCheckForValidListAndQueue+0x54>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d11d      	bne.n	8004568 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800452c:	4811      	ldr	r0, [pc, #68]	; (8004574 <prvCheckForValidListAndQueue+0x58>)
 800452e:	f7fd ffb9 	bl	80024a4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004532:	4811      	ldr	r0, [pc, #68]	; (8004578 <prvCheckForValidListAndQueue+0x5c>)
 8004534:	f7fd ffb6 	bl	80024a4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004538:	4b10      	ldr	r3, [pc, #64]	; (800457c <prvCheckForValidListAndQueue+0x60>)
 800453a:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <prvCheckForValidListAndQueue+0x58>)
 800453c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800453e:	4b10      	ldr	r3, [pc, #64]	; (8004580 <prvCheckForValidListAndQueue+0x64>)
 8004540:	4a0d      	ldr	r2, [pc, #52]	; (8004578 <prvCheckForValidListAndQueue+0x5c>)
 8004542:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004544:	2200      	movs	r2, #0
 8004546:	210c      	movs	r1, #12
 8004548:	200a      	movs	r0, #10
 800454a:	f7fe f8e1 	bl	8002710 <xQueueGenericCreate>
 800454e:	4603      	mov	r3, r0
 8004550:	4a07      	ldr	r2, [pc, #28]	; (8004570 <prvCheckForValidListAndQueue+0x54>)
 8004552:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <prvCheckForValidListAndQueue+0x54>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800455c:	4b04      	ldr	r3, [pc, #16]	; (8004570 <prvCheckForValidListAndQueue+0x54>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4908      	ldr	r1, [pc, #32]	; (8004584 <prvCheckForValidListAndQueue+0x68>)
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe fae0 	bl	8002b28 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004568:	f000 f9ec 	bl	8004944 <vPortExitCritical>
    }
 800456c:	bf00      	nop
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000270 	.word	0x20000270
 8004574:	20000240 	.word	0x20000240
 8004578:	20000254 	.word	0x20000254
 800457c:	20000268 	.word	0x20000268
 8004580:	2000026c 	.word	0x2000026c
 8004584:	08008cac 	.word	0x08008cac

08004588 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3b04      	subs	r3, #4
 8004598:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3b04      	subs	r3, #4
 80045a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f023 0201 	bic.w	r2, r3, #1
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3b04      	subs	r3, #4
 80045b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80045b8:	4a0c      	ldr	r2, [pc, #48]	; (80045ec <pxPortInitialiseStack+0x64>)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3b14      	subs	r3, #20
 80045c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3b04      	subs	r3, #4
 80045ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f06f 0202 	mvn.w	r2, #2
 80045d6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3b20      	subs	r3, #32
 80045dc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80045de:	68fb      	ldr	r3, [r7, #12]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	080045f1 	.word	0x080045f1

080045f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <prvTaskExitError+0x54>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004602:	d00a      	beq.n	800461a <prvTaskExitError+0x2a>
        __asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	60fb      	str	r3, [r7, #12]
    }
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <prvTaskExitError+0x28>
        __asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	60bb      	str	r3, [r7, #8]
    }
 800462c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800462e:	bf00      	nop
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0fc      	beq.n	8004630 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	20000010 	.word	0x20000010
	...

08004650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <pxCurrentTCBConst2>)
 8004652:	6819      	ldr	r1, [r3, #0]
 8004654:	6808      	ldr	r0, [r1, #0]
 8004656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465a:	f380 8809 	msr	PSP, r0
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8811 	msr	BASEPRI, r0
 800466a:	4770      	bx	lr
 800466c:	f3af 8000 	nop.w

08004670 <pxCurrentTCBConst2>:
 8004670:	2000013c 	.word	0x2000013c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop

08004678 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004678:	4808      	ldr	r0, [pc, #32]	; (800469c <prvPortStartFirstTask+0x24>)
 800467a:	6800      	ldr	r0, [r0, #0]
 800467c:	6800      	ldr	r0, [r0, #0]
 800467e:	f380 8808 	msr	MSP, r0
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f380 8814 	msr	CONTROL, r0
 800468a:	b662      	cpsie	i
 800468c:	b661      	cpsie	f
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	df00      	svc	0
 8004698:	bf00      	nop
 800469a:	0000      	.short	0x0000
 800469c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop

080046a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046aa:	4b46      	ldr	r3, [pc, #280]	; (80047c4 <xPortStartScheduler+0x120>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a46      	ldr	r2, [pc, #280]	; (80047c8 <xPortStartScheduler+0x124>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d10a      	bne.n	80046ca <xPortStartScheduler+0x26>
        __asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	613b      	str	r3, [r7, #16]
    }
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046ca:	4b3e      	ldr	r3, [pc, #248]	; (80047c4 <xPortStartScheduler+0x120>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a3f      	ldr	r2, [pc, #252]	; (80047cc <xPortStartScheduler+0x128>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d10a      	bne.n	80046ea <xPortStartScheduler+0x46>
        __asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	60fb      	str	r3, [r7, #12]
    }
 80046e6:	bf00      	nop
 80046e8:	e7fe      	b.n	80046e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046ea:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <xPortStartScheduler+0x12c>)
 80046ec:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	22ff      	movs	r2, #255	; 0xff
 80046fa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800470c:	b2da      	uxtb	r2, r3
 800470e:	4b31      	ldr	r3, [pc, #196]	; (80047d4 <xPortStartScheduler+0x130>)
 8004710:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004712:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <xPortStartScheduler+0x134>)
 8004714:	2207      	movs	r2, #7
 8004716:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004718:	e009      	b.n	800472e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800471a:	4b2f      	ldr	r3, [pc, #188]	; (80047d8 <xPortStartScheduler+0x134>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3b01      	subs	r3, #1
 8004720:	4a2d      	ldr	r2, [pc, #180]	; (80047d8 <xPortStartScheduler+0x134>)
 8004722:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	b2db      	uxtb	r3, r3
 800472c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b80      	cmp	r3, #128	; 0x80
 8004738:	d0ef      	beq.n	800471a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800473a:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <xPortStartScheduler+0x134>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f1c3 0307 	rsb	r3, r3, #7
 8004742:	2b04      	cmp	r3, #4
 8004744:	d00a      	beq.n	800475c <xPortStartScheduler+0xb8>
        __asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	60bb      	str	r3, [r7, #8]
    }
 8004758:	bf00      	nop
 800475a:	e7fe      	b.n	800475a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800475c:	4b1e      	ldr	r3, [pc, #120]	; (80047d8 <xPortStartScheduler+0x134>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	4a1d      	ldr	r2, [pc, #116]	; (80047d8 <xPortStartScheduler+0x134>)
 8004764:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004766:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <xPortStartScheduler+0x134>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800476e:	4a1a      	ldr	r2, [pc, #104]	; (80047d8 <xPortStartScheduler+0x134>)
 8004770:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	b2da      	uxtb	r2, r3
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800477a:	4b18      	ldr	r3, [pc, #96]	; (80047dc <xPortStartScheduler+0x138>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a17      	ldr	r2, [pc, #92]	; (80047dc <xPortStartScheduler+0x138>)
 8004780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004784:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004786:	4b15      	ldr	r3, [pc, #84]	; (80047dc <xPortStartScheduler+0x138>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a14      	ldr	r2, [pc, #80]	; (80047dc <xPortStartScheduler+0x138>)
 800478c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004790:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004792:	f000 f963 	bl	8004a5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004796:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <xPortStartScheduler+0x13c>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800479c:	f000 f982 	bl	8004aa4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047a0:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <xPortStartScheduler+0x140>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a0f      	ldr	r2, [pc, #60]	; (80047e4 <xPortStartScheduler+0x140>)
 80047a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80047ac:	f7ff ff64 	bl	8004678 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80047b0:	f7fe feec 	bl	800358c <vTaskSwitchContext>
    prvTaskExitError();
 80047b4:	f7ff ff1c 	bl	80045f0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	e000ed00 	.word	0xe000ed00
 80047c8:	410fc271 	.word	0x410fc271
 80047cc:	410fc270 	.word	0x410fc270
 80047d0:	e000e400 	.word	0xe000e400
 80047d4:	2000027c 	.word	0x2000027c
 80047d8:	20000280 	.word	0x20000280
 80047dc:	e000ed20 	.word	0xe000ed20
 80047e0:	20000010 	.word	0x20000010
 80047e4:	e000ef34 	.word	0xe000ef34

080047e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047ee:	4b37      	ldr	r3, [pc, #220]	; (80048cc <vInitPrioGroupValue+0xe4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a37      	ldr	r2, [pc, #220]	; (80048d0 <vInitPrioGroupValue+0xe8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10a      	bne.n	800480e <vInitPrioGroupValue+0x26>
        __asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	613b      	str	r3, [r7, #16]
    }
 800480a:	bf00      	nop
 800480c:	e7fe      	b.n	800480c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800480e:	4b2f      	ldr	r3, [pc, #188]	; (80048cc <vInitPrioGroupValue+0xe4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a30      	ldr	r2, [pc, #192]	; (80048d4 <vInitPrioGroupValue+0xec>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d10a      	bne.n	800482e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	60fb      	str	r3, [r7, #12]
    }
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800482e:	4b2a      	ldr	r3, [pc, #168]	; (80048d8 <vInitPrioGroupValue+0xf0>)
 8004830:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	22ff      	movs	r2, #255	; 0xff
 800483e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004850:	b2da      	uxtb	r2, r3
 8004852:	4b22      	ldr	r3, [pc, #136]	; (80048dc <vInitPrioGroupValue+0xf4>)
 8004854:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004856:	4b22      	ldr	r3, [pc, #136]	; (80048e0 <vInitPrioGroupValue+0xf8>)
 8004858:	2207      	movs	r2, #7
 800485a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800485c:	e009      	b.n	8004872 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800485e:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <vInitPrioGroupValue+0xf8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3b01      	subs	r3, #1
 8004864:	4a1e      	ldr	r2, [pc, #120]	; (80048e0 <vInitPrioGroupValue+0xf8>)
 8004866:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	b2db      	uxtb	r3, r3
 8004870:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487a:	2b80      	cmp	r3, #128	; 0x80
 800487c:	d0ef      	beq.n	800485e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800487e:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <vInitPrioGroupValue+0xf8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f1c3 0307 	rsb	r3, r3, #7
 8004886:	2b04      	cmp	r3, #4
 8004888:	d00a      	beq.n	80048a0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	60bb      	str	r3, [r7, #8]
    }
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <vInitPrioGroupValue+0xf8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	4a0e      	ldr	r2, [pc, #56]	; (80048e0 <vInitPrioGroupValue+0xf8>)
 80048a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048aa:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <vInitPrioGroupValue+0xf8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048b2:	4a0b      	ldr	r2, [pc, #44]	; (80048e0 <vInitPrioGroupValue+0xf8>)
 80048b4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	e000ed00 	.word	0xe000ed00
 80048d0:	410fc271 	.word	0x410fc271
 80048d4:	410fc270 	.word	0x410fc270
 80048d8:	e000e400 	.word	0xe000e400
 80048dc:	2000027c 	.word	0x2000027c
 80048e0:	20000280 	.word	0x20000280

080048e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
        __asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	607b      	str	r3, [r7, #4]
    }
 80048fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80048fe:	4b0f      	ldr	r3, [pc, #60]	; (800493c <vPortEnterCritical+0x58>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	4a0d      	ldr	r2, [pc, #52]	; (800493c <vPortEnterCritical+0x58>)
 8004906:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004908:	4b0c      	ldr	r3, [pc, #48]	; (800493c <vPortEnterCritical+0x58>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d10f      	bne.n	8004930 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <vPortEnterCritical+0x5c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <vPortEnterCritical+0x4c>
        __asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	603b      	str	r3, [r7, #0]
    }
 800492c:	bf00      	nop
 800492e:	e7fe      	b.n	800492e <vPortEnterCritical+0x4a>
    }
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	20000010 	.word	0x20000010
 8004940:	e000ed04 	.word	0xe000ed04

08004944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800494a:	4b12      	ldr	r3, [pc, #72]	; (8004994 <vPortExitCritical+0x50>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <vPortExitCritical+0x24>
        __asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	607b      	str	r3, [r7, #4]
    }
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004968:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <vPortExitCritical+0x50>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3b01      	subs	r3, #1
 800496e:	4a09      	ldr	r2, [pc, #36]	; (8004994 <vPortExitCritical+0x50>)
 8004970:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <vPortExitCritical+0x50>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d105      	bne.n	8004986 <vPortExitCritical+0x42>
 800497a:	2300      	movs	r3, #0
 800497c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	f383 8811 	msr	BASEPRI, r3
    }
 8004984:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000010 	.word	0x20000010
	...

080049a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80049a0:	f3ef 8009 	mrs	r0, PSP
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <pxCurrentTCBConst>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	f01e 0f10 	tst.w	lr, #16
 80049b0:	bf08      	it	eq
 80049b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ba:	6010      	str	r0, [r2, #0]
 80049bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049c4:	f380 8811 	msr	BASEPRI, r0
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f7fe fddc 	bl	800358c <vTaskSwitchContext>
 80049d4:	f04f 0000 	mov.w	r0, #0
 80049d8:	f380 8811 	msr	BASEPRI, r0
 80049dc:	bc09      	pop	{r0, r3}
 80049de:	6819      	ldr	r1, [r3, #0]
 80049e0:	6808      	ldr	r0, [r1, #0]
 80049e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e6:	f01e 0f10 	tst.w	lr, #16
 80049ea:	bf08      	it	eq
 80049ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049f0:	f380 8809 	msr	PSP, r0
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	f3af 8000 	nop.w

08004a00 <pxCurrentTCBConst>:
 8004a00:	2000013c 	.word	0x2000013c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop

08004a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
        __asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	607b      	str	r3, [r7, #4]
    }
 8004a20:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004a22:	f002 fdab 	bl	800757c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004a26:	f7fe fcb9 	bl	800339c <xTaskIncrementTick>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d006      	beq.n	8004a3e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004a30:	f002 fe02 	bl	8007638 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a34:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <SysTick_Handler+0x50>)
 8004a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e001      	b.n	8004a42 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004a3e:	f002 fddf 	bl	8007600 <SEGGER_SYSVIEW_RecordExitISR>
 8004a42:	2300      	movs	r3, #0
 8004a44:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	f383 8811 	msr	BASEPRI, r3
    }
 8004a4c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <vPortSetupTimerInterrupt+0x34>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a66:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <vPortSetupTimerInterrupt+0x38>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <vPortSetupTimerInterrupt+0x3c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <vPortSetupTimerInterrupt+0x40>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <vPortSetupTimerInterrupt+0x44>)
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a7e:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <vPortSetupTimerInterrupt+0x34>)
 8004a80:	2207      	movs	r2, #7
 8004a82:	601a      	str	r2, [r3, #0]
}
 8004a84:	bf00      	nop
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	e000e010 	.word	0xe000e010
 8004a94:	e000e018 	.word	0xe000e018
 8004a98:	20000000 	.word	0x20000000
 8004a9c:	10624dd3 	.word	0x10624dd3
 8004aa0:	e000e014 	.word	0xe000e014

08004aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ab4 <vPortEnableVFP+0x10>
 8004aa8:	6801      	ldr	r1, [r0, #0]
 8004aaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004aae:	6001      	str	r1, [r0, #0]
 8004ab0:	4770      	bx	lr
 8004ab2:	0000      	.short	0x0000
 8004ab4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop

08004abc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004ac2:	f3ef 8305 	mrs	r3, IPSR
 8004ac6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b0f      	cmp	r3, #15
 8004acc:	d914      	bls.n	8004af8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ace:	4a17      	ldr	r2, [pc, #92]	; (8004b2c <vPortValidateInterruptPriority+0x70>)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ad8:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <vPortValidateInterruptPriority+0x74>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	7afa      	ldrb	r2, [r7, #11]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d20a      	bcs.n	8004af8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	607b      	str	r3, [r7, #4]
    }
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004af8:	4b0e      	ldr	r3, [pc, #56]	; (8004b34 <vPortValidateInterruptPriority+0x78>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b00:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <vPortValidateInterruptPriority+0x7c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d90a      	bls.n	8004b1e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	603b      	str	r3, [r7, #0]
    }
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <vPortValidateInterruptPriority+0x60>
    }
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	e000e3f0 	.word	0xe000e3f0
 8004b30:	2000027c 	.word	0x2000027c
 8004b34:	e000ed0c 	.word	0xe000ed0c
 8004b38:	20000280 	.word	0x20000280

08004b3c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	; 0x28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004b48:	f7fe fb06 	bl	8003158 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004b4c:	4b53      	ldr	r3, [pc, #332]	; (8004c9c <pvPortMalloc+0x160>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004b54:	f000 f908 	bl	8004d68 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d012      	beq.n	8004b84 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004b5e:	2208      	movs	r2, #8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	3308      	adds	r3, #8
 8004b6a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d804      	bhi.n	8004b80 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	e001      	b.n	8004b84 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	db70      	blt.n	8004c6c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d06d      	beq.n	8004c6c <pvPortMalloc+0x130>
 8004b90:	4b43      	ldr	r3, [pc, #268]	; (8004ca0 <pvPortMalloc+0x164>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d868      	bhi.n	8004c6c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004b9a:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <pvPortMalloc+0x168>)
 8004b9c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004b9e:	4b41      	ldr	r3, [pc, #260]	; (8004ca4 <pvPortMalloc+0x168>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ba4:	e004      	b.n	8004bb0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d903      	bls.n	8004bc2 <pvPortMalloc+0x86>
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f1      	bne.n	8004ba6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004bc2:	4b36      	ldr	r3, [pc, #216]	; (8004c9c <pvPortMalloc+0x160>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d04f      	beq.n	8004c6c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	4413      	add	r3, r2
 8004bd4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	1ad2      	subs	r2, r2, r3
 8004be6:	2308      	movs	r3, #8
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d91f      	bls.n	8004c2e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <pvPortMalloc+0xda>
        __asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	613b      	str	r3, [r7, #16]
    }
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	1ad2      	subs	r2, r2, r3
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c28:	6978      	ldr	r0, [r7, #20]
 8004c2a:	f000 f8f9 	bl	8004e20 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ca0 <pvPortMalloc+0x164>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <pvPortMalloc+0x164>)
 8004c3a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c3c:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <pvPortMalloc+0x164>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <pvPortMalloc+0x16c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d203      	bcs.n	8004c50 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c48:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <pvPortMalloc+0x164>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <pvPortMalloc+0x16c>)
 8004c4e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004c62:	4b12      	ldr	r3, [pc, #72]	; (8004cac <pvPortMalloc+0x170>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3301      	adds	r3, #1
 8004c68:	4a10      	ldr	r2, [pc, #64]	; (8004cac <pvPortMalloc+0x170>)
 8004c6a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004c6c:	f7fe fa82 	bl	8003174 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <pvPortMalloc+0x154>
        __asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	60fb      	str	r3, [r7, #12]
    }
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <pvPortMalloc+0x152>
    return pvReturn;
 8004c90:	69fb      	ldr	r3, [r7, #28]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3728      	adds	r7, #40	; 0x28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20012e8c 	.word	0x20012e8c
 8004ca0:	20012e90 	.word	0x20012e90
 8004ca4:	20012e84 	.word	0x20012e84
 8004ca8:	20012e94 	.word	0x20012e94
 8004cac:	20012e98 	.word	0x20012e98

08004cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d049      	beq.n	8004d56 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004cc2:	2308      	movs	r3, #8
 8004cc4:	425b      	negs	r3, r3
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4413      	add	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	db0a      	blt.n	8004cee <vPortFree+0x3e>
        __asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	60fb      	str	r3, [r7, #12]
    }
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <vPortFree+0x5c>
        __asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	60bb      	str	r3, [r7, #8]
    }
 8004d08:	bf00      	nop
 8004d0a:	e7fe      	b.n	8004d0a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	0fdb      	lsrs	r3, r3, #31
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01c      	beq.n	8004d56 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d118      	bne.n	8004d56 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004d30:	f7fe fa12 	bl	8003158 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <vPortFree+0xb0>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	4a08      	ldr	r2, [pc, #32]	; (8004d60 <vPortFree+0xb0>)
 8004d40:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d42:	6938      	ldr	r0, [r7, #16]
 8004d44:	f000 f86c 	bl	8004e20 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004d48:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <vPortFree+0xb4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	4a05      	ldr	r2, [pc, #20]	; (8004d64 <vPortFree+0xb4>)
 8004d50:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004d52:	f7fe fa0f 	bl	8003174 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004d56:	bf00      	nop
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20012e90 	.word	0x20012e90
 8004d64:	20012e9c 	.word	0x20012e9c

08004d68 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d6e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004d72:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004d74:	4b25      	ldr	r3, [pc, #148]	; (8004e0c <prvHeapInit+0xa4>)
 8004d76:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00c      	beq.n	8004d9c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3307      	adds	r3, #7
 8004d86:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0307 	bic.w	r3, r3, #7
 8004d8e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <prvHeapInit+0xa4>)
 8004d98:	4413      	add	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004da0:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <prvHeapInit+0xa8>)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004da6:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <prvHeapInit+0xa8>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	4413      	add	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004db4:	2208      	movs	r2, #8
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0307 	bic.w	r3, r3, #7
 8004dc2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4a13      	ldr	r2, [pc, #76]	; (8004e14 <prvHeapInit+0xac>)
 8004dc8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004dca:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <prvHeapInit+0xac>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004dd2:	4b10      	ldr	r3, [pc, #64]	; (8004e14 <prvHeapInit+0xac>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <prvHeapInit+0xac>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4a08      	ldr	r2, [pc, #32]	; (8004e18 <prvHeapInit+0xb0>)
 8004df6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4a07      	ldr	r2, [pc, #28]	; (8004e1c <prvHeapInit+0xb4>)
 8004dfe:	6013      	str	r3, [r2, #0]
}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	20000284 	.word	0x20000284
 8004e10:	20012e84 	.word	0x20012e84
 8004e14:	20012e8c 	.word	0x20012e8c
 8004e18:	20012e94 	.word	0x20012e94
 8004e1c:	20012e90 	.word	0x20012e90

08004e20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e28:	4b28      	ldr	r3, [pc, #160]	; (8004ecc <prvInsertBlockIntoFreeList+0xac>)
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	e002      	b.n	8004e34 <prvInsertBlockIntoFreeList+0x14>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d8f7      	bhi.n	8004e2e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	4413      	add	r3, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d108      	bne.n	8004e62 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	441a      	add	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	441a      	add	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d118      	bne.n	8004ea8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <prvInsertBlockIntoFreeList+0xb0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d00d      	beq.n	8004e9e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	441a      	add	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	e008      	b.n	8004eb0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <prvInsertBlockIntoFreeList+0xb0>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e003      	b.n	8004eb0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d002      	beq.n	8004ebe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	20012e84 	.word	0x20012e84
 8004ed0:	20012e8c 	.word	0x20012e8c

08004ed4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004ed8:	4803      	ldr	r0, [pc, #12]	; (8004ee8 <_cbSendSystemDesc+0x14>)
 8004eda:	f002 faf9 	bl	80074d0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004ede:	4803      	ldr	r0, [pc, #12]	; (8004eec <_cbSendSystemDesc+0x18>)
 8004ee0:	f002 faf6 	bl	80074d0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004ee4:	bf00      	nop
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	08008cb4 	.word	0x08008cb4
 8004eec:	08008cf4 	.word	0x08008cf4

08004ef0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004ef4:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <SEGGER_SYSVIEW_Conf+0x20>)
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <SEGGER_SYSVIEW_Conf+0x20>)
 8004efa:	6819      	ldr	r1, [r3, #0]
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <SEGGER_SYSVIEW_Conf+0x24>)
 8004efe:	4a06      	ldr	r2, [pc, #24]	; (8004f18 <SEGGER_SYSVIEW_Conf+0x28>)
 8004f00:	f001 fdb4 	bl	8006a6c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004f04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004f08:	f001 fdf4 	bl	8006af4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004f0c:	bf00      	nop
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20000000 	.word	0x20000000
 8004f14:	08004ed5 	.word	0x08004ed5
 8004f18:	08008d90 	.word	0x08008d90

08004f1c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004f22:	2300      	movs	r3, #0
 8004f24:	607b      	str	r3, [r7, #4]
 8004f26:	e033      	b.n	8004f90 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004f28:	491e      	ldr	r1, [pc, #120]	; (8004fa4 <_cbSendTaskList+0x88>)
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	491a      	ldr	r1, [pc, #104]	; (8004fa4 <_cbSendTaskList+0x88>)
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	3304      	adds	r3, #4
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	4c16      	ldr	r4, [pc, #88]	; (8004fa4 <_cbSendTaskList+0x88>)
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4423      	add	r3, r4
 8004f58:	3308      	adds	r3, #8
 8004f5a:	681c      	ldr	r4, [r3, #0]
 8004f5c:	4d11      	ldr	r5, [pc, #68]	; (8004fa4 <_cbSendTaskList+0x88>)
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	442b      	add	r3, r5
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	681d      	ldr	r5, [r3, #0]
 8004f6e:	4e0d      	ldr	r6, [pc, #52]	; (8004fa4 <_cbSendTaskList+0x88>)
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4433      	add	r3, r6
 8004f7c:	3310      	adds	r3, #16
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	462b      	mov	r3, r5
 8004f84:	4622      	mov	r2, r4
 8004f86:	f000 f979 	bl	800527c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	607b      	str	r3, [r7, #4]
 8004f90:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <_cbSendTaskList+0x8c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3c6      	bcc.n	8004f28 <_cbSendTaskList+0xc>
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa4:	20012ea0 	.word	0x20012ea0
 8004fa8:	20012f40 	.word	0x20012f40

08004fac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004fb4:	f7fe f9e0 	bl	8003378 <xTaskGetTickCountFromISR>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2200      	movs	r2, #0
 8004fbc:	469a      	mov	sl, r3
 8004fbe:	4693      	mov	fp, r2
 8004fc0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	f04f 0a00 	mov.w	sl, #0
 8004fd0:	f04f 0b00 	mov.w	fp, #0
 8004fd4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004fd8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004fdc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004fe0:	4652      	mov	r2, sl
 8004fe2:	465b      	mov	r3, fp
 8004fe4:	1a14      	subs	r4, r2, r0
 8004fe6:	eb63 0501 	sbc.w	r5, r3, r1
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	00ab      	lsls	r3, r5, #2
 8004ff4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ff8:	00a2      	lsls	r2, r4, #2
 8004ffa:	4614      	mov	r4, r2
 8004ffc:	461d      	mov	r5, r3
 8004ffe:	eb14 0800 	adds.w	r8, r4, r0
 8005002:	eb45 0901 	adc.w	r9, r5, r1
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800501a:	4690      	mov	r8, r2
 800501c:	4699      	mov	r9, r3
 800501e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005022:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005026:	4610      	mov	r0, r2
 8005028:	4619      	mov	r1, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005034 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005042:	2205      	movs	r2, #5
 8005044:	492b      	ldr	r1, [pc, #172]	; (80050f4 <SYSVIEW_AddTask+0xc0>)
 8005046:	68b8      	ldr	r0, [r7, #8]
 8005048:	f002 fdc4 	bl	8007bd4 <memcmp>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d04b      	beq.n	80050ea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005052:	4b29      	ldr	r3, [pc, #164]	; (80050f8 <SYSVIEW_AddTask+0xc4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b07      	cmp	r3, #7
 8005058:	d903      	bls.n	8005062 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800505a:	4828      	ldr	r0, [pc, #160]	; (80050fc <SYSVIEW_AddTask+0xc8>)
 800505c:	f002 fcf4 	bl	8007a48 <SEGGER_SYSVIEW_Warn>
    return;
 8005060:	e044      	b.n	80050ec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005062:	4b25      	ldr	r3, [pc, #148]	; (80050f8 <SYSVIEW_AddTask+0xc4>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	4926      	ldr	r1, [pc, #152]	; (8005100 <SYSVIEW_AddTask+0xcc>)
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005076:	4b20      	ldr	r3, [pc, #128]	; (80050f8 <SYSVIEW_AddTask+0xc4>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4921      	ldr	r1, [pc, #132]	; (8005100 <SYSVIEW_AddTask+0xcc>)
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	3304      	adds	r3, #4
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800508c:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <SYSVIEW_AddTask+0xc4>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	491b      	ldr	r1, [pc, #108]	; (8005100 <SYSVIEW_AddTask+0xcc>)
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	3308      	adds	r3, #8
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <SYSVIEW_AddTask+0xc4>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4916      	ldr	r1, [pc, #88]	; (8005100 <SYSVIEW_AddTask+0xcc>)
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	330c      	adds	r3, #12
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <SYSVIEW_AddTask+0xc4>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	4910      	ldr	r1, [pc, #64]	; (8005100 <SYSVIEW_AddTask+0xcc>)
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	3310      	adds	r3, #16
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80050ce:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <SYSVIEW_AddTask+0xc4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3301      	adds	r3, #1
 80050d4:	4a08      	ldr	r2, [pc, #32]	; (80050f8 <SYSVIEW_AddTask+0xc4>)
 80050d6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f8ca 	bl	800527c <SYSVIEW_SendTaskInfo>
 80050e8:	e000      	b.n	80050ec <SYSVIEW_AddTask+0xb8>
    return;
 80050ea:	bf00      	nop

}
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	08008d04 	.word	0x08008d04
 80050f8:	20012f40 	.word	0x20012f40
 80050fc:	08008d0c 	.word	0x08008d0c
 8005100:	20012ea0 	.word	0x20012ea0

08005104 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800510c:	4b59      	ldr	r3, [pc, #356]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80ab 	beq.w	800526c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e00d      	b.n	8005138 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800511c:	4956      	ldr	r1, [pc, #344]	; (8005278 <SYSVIEW_DeleteTask+0x174>)
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d008      	beq.n	8005144 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3301      	adds	r3, #1
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	4b4e      	ldr	r3, [pc, #312]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	429a      	cmp	r2, r3
 8005140:	d3ec      	bcc.n	800511c <SYSVIEW_DeleteTask+0x18>
 8005142:	e000      	b.n	8005146 <SYSVIEW_DeleteTask+0x42>
      break;
 8005144:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8005146:	4b4b      	ldr	r3, [pc, #300]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3b01      	subs	r3, #1
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	429a      	cmp	r2, r3
 8005150:	d111      	bne.n	8005176 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4a46      	ldr	r2, [pc, #280]	; (8005278 <SYSVIEW_DeleteTask+0x174>)
 800515e:	4413      	add	r3, r2
 8005160:	2214      	movs	r2, #20
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f002 fd53 	bl	8007c10 <memset>
    _NumTasks--;
 800516a:	4b42      	ldr	r3, [pc, #264]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3b01      	subs	r3, #1
 8005170:	4a40      	ldr	r2, [pc, #256]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e07b      	b.n	800526e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005176:	4b3f      	ldr	r3, [pc, #252]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	429a      	cmp	r2, r3
 800517e:	d276      	bcs.n	800526e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005180:	4b3c      	ldr	r3, [pc, #240]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	1e5a      	subs	r2, r3, #1
 8005186:	493c      	ldr	r1, [pc, #240]	; (8005278 <SYSVIEW_DeleteTask+0x174>)
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	4838      	ldr	r0, [pc, #224]	; (8005278 <SYSVIEW_DeleteTask+0x174>)
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4403      	add	r3, r0
 80051a2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80051a4:	4b33      	ldr	r3, [pc, #204]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	1e5a      	subs	r2, r3, #1
 80051aa:	4933      	ldr	r1, [pc, #204]	; (8005278 <SYSVIEW_DeleteTask+0x174>)
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	3304      	adds	r3, #4
 80051b8:	6819      	ldr	r1, [r3, #0]
 80051ba:	482f      	ldr	r0, [pc, #188]	; (8005278 <SYSVIEW_DeleteTask+0x174>)
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4403      	add	r3, r0
 80051c8:	3304      	adds	r3, #4
 80051ca:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80051cc:	4b29      	ldr	r3, [pc, #164]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	1e5a      	subs	r2, r3, #1
 80051d2:	4929      	ldr	r1, [pc, #164]	; (8005278 <SYSVIEW_DeleteTask+0x174>)
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	3308      	adds	r3, #8
 80051e0:	6819      	ldr	r1, [r3, #0]
 80051e2:	4825      	ldr	r0, [pc, #148]	; (8005278 <SYSVIEW_DeleteTask+0x174>)
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4613      	mov	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4403      	add	r3, r0
 80051f0:	3308      	adds	r3, #8
 80051f2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80051f4:	4b1f      	ldr	r3, [pc, #124]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	1e5a      	subs	r2, r3, #1
 80051fa:	491f      	ldr	r1, [pc, #124]	; (8005278 <SYSVIEW_DeleteTask+0x174>)
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	330c      	adds	r3, #12
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	481b      	ldr	r0, [pc, #108]	; (8005278 <SYSVIEW_DeleteTask+0x174>)
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4403      	add	r3, r0
 8005218:	330c      	adds	r3, #12
 800521a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800521c:	4b15      	ldr	r3, [pc, #84]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	1e5a      	subs	r2, r3, #1
 8005222:	4915      	ldr	r1, [pc, #84]	; (8005278 <SYSVIEW_DeleteTask+0x174>)
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	3310      	adds	r3, #16
 8005230:	6819      	ldr	r1, [r3, #0]
 8005232:	4811      	ldr	r0, [pc, #68]	; (8005278 <SYSVIEW_DeleteTask+0x174>)
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4403      	add	r3, r0
 8005240:	3310      	adds	r3, #16
 8005242:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005244:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	1e5a      	subs	r2, r3, #1
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4a09      	ldr	r2, [pc, #36]	; (8005278 <SYSVIEW_DeleteTask+0x174>)
 8005254:	4413      	add	r3, r2
 8005256:	2214      	movs	r2, #20
 8005258:	2100      	movs	r1, #0
 800525a:	4618      	mov	r0, r3
 800525c:	f002 fcd8 	bl	8007c10 <memset>
    _NumTasks--;
 8005260:	4b04      	ldr	r3, [pc, #16]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3b01      	subs	r3, #1
 8005266:	4a03      	ldr	r2, [pc, #12]	; (8005274 <SYSVIEW_DeleteTask+0x170>)
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e000      	b.n	800526e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800526c:	bf00      	nop
  }
}
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20012f40 	.word	0x20012f40
 8005278:	20012ea0 	.word	0x20012ea0

0800527c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	; 0x28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800528a:	f107 0310 	add.w	r3, r7, #16
 800528e:	2218      	movs	r2, #24
 8005290:	2100      	movs	r1, #0
 8005292:	4618      	mov	r0, r3
 8005294:	f002 fcbc 	bl	8007c10 <memset>
  TaskInfo.TaskID     = TaskID;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80052ac:	f107 0310 	add.w	r3, r7, #16
 80052b0:	4618      	mov	r0, r3
 80052b2:	f002 f815 	bl	80072e0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80052b6:	bf00      	nop
 80052b8:	3728      	adds	r7, #40	; 0x28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <__NVIC_EnableIRQ>:
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	db0b      	blt.n	80052ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	f003 021f 	and.w	r2, r3, #31
 80052d8:	4907      	ldr	r1, [pc, #28]	; (80052f8 <__NVIC_EnableIRQ+0x38>)
 80052da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	2001      	movs	r0, #1
 80052e2:	fa00 f202 	lsl.w	r2, r0, r2
 80052e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	e000e100 	.word	0xe000e100

080052fc <__NVIC_SetPriority>:
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	6039      	str	r1, [r7, #0]
 8005306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530c:	2b00      	cmp	r3, #0
 800530e:	db0a      	blt.n	8005326 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	b2da      	uxtb	r2, r3
 8005314:	490c      	ldr	r1, [pc, #48]	; (8005348 <__NVIC_SetPriority+0x4c>)
 8005316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800531a:	0112      	lsls	r2, r2, #4
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	440b      	add	r3, r1
 8005320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005324:	e00a      	b.n	800533c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	b2da      	uxtb	r2, r3
 800532a:	4908      	ldr	r1, [pc, #32]	; (800534c <__NVIC_SetPriority+0x50>)
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	3b04      	subs	r3, #4
 8005334:	0112      	lsls	r2, r2, #4
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	440b      	add	r3, r1
 800533a:	761a      	strb	r2, [r3, #24]
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	e000e100 	.word	0xe000e100
 800534c:	e000ed00 	.word	0xe000ed00

08005350 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005356:	f002 fbd3 	bl	8007b00 <SEGGER_SYSVIEW_IsStarted>
 800535a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005362:	f001 fe41 	bl	8006fe8 <SEGGER_SYSVIEW_Start>
  }
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800537a:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <_cbOnUARTRx+0x3c>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b03      	cmp	r3, #3
 8005380:	d806      	bhi.n	8005390 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <_cbOnUARTRx+0x3c>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	3301      	adds	r3, #1
 8005388:	b2da      	uxtb	r2, r3
 800538a:	4b08      	ldr	r3, [pc, #32]	; (80053ac <_cbOnUARTRx+0x3c>)
 800538c:	701a      	strb	r2, [r3, #0]
    goto Done;
 800538e:	e009      	b.n	80053a4 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005390:	f7ff ffde 	bl	8005350 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <_cbOnUARTRx+0x3c>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4618      	mov	r0, r3
 800539a:	1dfb      	adds	r3, r7, #7
 800539c:	2201      	movs	r2, #1
 800539e:	4619      	mov	r1, r3
 80053a0:	f000 fbec 	bl	8005b7c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80053a4:	bf00      	nop
}
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20000014 	.word	0x20000014

080053b0 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80053b8:	4b14      	ldr	r3, [pc, #80]	; (800540c <_cbOnUARTTx+0x5c>)
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d80f      	bhi.n	80053e0 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80053c0:	4b12      	ldr	r3, [pc, #72]	; (800540c <_cbOnUARTTx+0x5c>)
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	461a      	mov	r2, r3
 80053c6:	4b12      	ldr	r3, [pc, #72]	; (8005410 <_cbOnUARTTx+0x60>)
 80053c8:	5c9a      	ldrb	r2, [r3, r2]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80053ce:	4b0f      	ldr	r3, [pc, #60]	; (800540c <_cbOnUARTTx+0x5c>)
 80053d0:	785b      	ldrb	r3, [r3, #1]
 80053d2:	3301      	adds	r3, #1
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	4b0d      	ldr	r3, [pc, #52]	; (800540c <_cbOnUARTTx+0x5c>)
 80053d8:	705a      	strb	r2, [r3, #1]
    r = 1;
 80053da:	2301      	movs	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
    goto Done;
 80053de:	e00f      	b.n	8005400 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80053e0:	4b0a      	ldr	r3, [pc, #40]	; (800540c <_cbOnUARTTx+0x5c>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fa1b 	bl	8005824 <SEGGER_RTT_ReadUpBufferNoLock>
 80053ee:	4603      	mov	r3, r0
 80053f0:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	da02      	bge.n	80053fe <_cbOnUARTTx+0x4e>
    r = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e000      	b.n	8005400 <_cbOnUARTTx+0x50>
  }
Done:
 80053fe:	bf00      	nop
  return r;
 8005400:	68fb      	ldr	r3, [r7, #12]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000014 	.word	0x20000014
 8005410:	08008d98 	.word	0x08008d98

08005414 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800541c:	4a04      	ldr	r2, [pc, #16]	; (8005430 <SEGGER_UART_init+0x1c>)
 800541e:	4905      	ldr	r1, [pc, #20]	; (8005434 <SEGGER_UART_init+0x20>)
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f863 	bl	80054ec <HIF_UART_Init>
}
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	08005371 	.word	0x08005371
 8005434:	080053b1 	.word	0x080053b1

08005438 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800543e:	4b1e      	ldr	r3, [pc, #120]	; (80054b8 <USART2_IRQHandler+0x80>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b00      	cmp	r3, #0
 800544c:	d011      	beq.n	8005472 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800544e:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <USART2_IRQHandler+0x84>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 030b 	and.w	r3, r3, #11
 800545c:	2b00      	cmp	r3, #0
 800545e:	d108      	bne.n	8005472 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005460:	4b17      	ldr	r3, [pc, #92]	; (80054c0 <USART2_IRQHandler+0x88>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005468:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <USART2_IRQHandler+0x88>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	79fa      	ldrb	r2, [r7, #7]
 800546e:	4610      	mov	r0, r2
 8005470:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01a      	beq.n	80054b2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800547c:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <USART2_IRQHandler+0x8c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d015      	beq.n	80054b0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005484:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <USART2_IRQHandler+0x8c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	1dfa      	adds	r2, r7, #7
 800548a:	4610      	mov	r0, r2
 800548c:	4798      	blx	r3
 800548e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005496:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <USART2_IRQHandler+0x90>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a0b      	ldr	r2, [pc, #44]	; (80054c8 <USART2_IRQHandler+0x90>)
 800549c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	e006      	b.n	80054b2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80054a4:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <USART2_IRQHandler+0x80>)
 80054a6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80054a8:	79fa      	ldrb	r2, [r7, #7]
 80054aa:	4b04      	ldr	r3, [pc, #16]	; (80054bc <USART2_IRQHandler+0x84>)
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e000      	b.n	80054b2 <USART2_IRQHandler+0x7a>
      return;
 80054b0:	bf00      	nop
    }
  }
}
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40004400 	.word	0x40004400
 80054bc:	40004404 	.word	0x40004404
 80054c0:	20012f44 	.word	0x20012f44
 80054c4:	20012f48 	.word	0x20012f48
 80054c8:	4000440c 	.word	0x4000440c

080054cc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80054d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054da:	6013      	str	r3, [r2, #0]
}
 80054dc:	bf00      	nop
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	4000440c 	.word	0x4000440c

080054ec <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80054f8:	4b2e      	ldr	r3, [pc, #184]	; (80055b4 <HIF_UART_Init+0xc8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a2d      	ldr	r2, [pc, #180]	; (80055b4 <HIF_UART_Init+0xc8>)
 80054fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005502:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005504:	4b2c      	ldr	r3, [pc, #176]	; (80055b8 <HIF_UART_Init+0xcc>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a2b      	ldr	r2, [pc, #172]	; (80055b8 <HIF_UART_Init+0xcc>)
 800550a:	f043 0301 	orr.w	r3, r3, #1
 800550e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005510:	4b2a      	ldr	r3, [pc, #168]	; (80055bc <HIF_UART_Init+0xd0>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800551c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005524:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005526:	4a25      	ldr	r2, [pc, #148]	; (80055bc <HIF_UART_Init+0xd0>)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800552c:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <HIF_UART_Init+0xd4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005538:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005540:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005542:	4a1f      	ldr	r2, [pc, #124]	; (80055c0 <HIF_UART_Init+0xd4>)
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005548:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <HIF_UART_Init+0xd8>)
 800554a:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800554e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005550:	4b1d      	ldr	r3, [pc, #116]	; (80055c8 <HIF_UART_Init+0xdc>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005556:	4b1d      	ldr	r3, [pc, #116]	; (80055cc <HIF_UART_Init+0xe0>)
 8005558:	2280      	movs	r2, #128	; 0x80
 800555a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005562:	4a1b      	ldr	r2, [pc, #108]	; (80055d0 <HIF_UART_Init+0xe4>)
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	fbb2 f3f3 	udiv	r3, r2, r3
 800556a:	3301      	adds	r3, #1
 800556c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	085b      	lsrs	r3, r3, #1
 8005572:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557a:	d302      	bcc.n	8005582 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 800557c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005580:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d004      	beq.n	8005592 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	4a11      	ldr	r2, [pc, #68]	; (80055d4 <HIF_UART_Init+0xe8>)
 800558e:	b29b      	uxth	r3, r3
 8005590:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005592:	4a11      	ldr	r2, [pc, #68]	; (80055d8 <HIF_UART_Init+0xec>)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005598:	4a10      	ldr	r2, [pc, #64]	; (80055dc <HIF_UART_Init+0xf0>)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800559e:	2106      	movs	r1, #6
 80055a0:	2026      	movs	r0, #38	; 0x26
 80055a2:	f7ff feab 	bl	80052fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80055a6:	2026      	movs	r0, #38	; 0x26
 80055a8:	f7ff fe8a 	bl	80052c0 <__NVIC_EnableIRQ>
}
 80055ac:	bf00      	nop
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40023840 	.word	0x40023840
 80055b8:	40023830 	.word	0x40023830
 80055bc:	40020020 	.word	0x40020020
 80055c0:	40020000 	.word	0x40020000
 80055c4:	4000440c 	.word	0x4000440c
 80055c8:	40004410 	.word	0x40004410
 80055cc:	40004414 	.word	0x40004414
 80055d0:	0501bd00 	.word	0x0501bd00
 80055d4:	40004408 	.word	0x40004408
 80055d8:	20012f44 	.word	0x20012f44
 80055dc:	20012f48 	.word	0x20012f48

080055e0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80055e6:	4b26      	ldr	r3, [pc, #152]	; (8005680 <_DoInit+0xa0>)
 80055e8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80055ea:	22a8      	movs	r2, #168	; 0xa8
 80055ec:	2100      	movs	r1, #0
 80055ee:	6838      	ldr	r0, [r7, #0]
 80055f0:	f002 fb0e 	bl	8007c10 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2203      	movs	r2, #3
 80055f8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2203      	movs	r2, #3
 80055fe:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4a20      	ldr	r2, [pc, #128]	; (8005684 <_DoInit+0xa4>)
 8005604:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <_DoInit+0xa8>)
 800560a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005612:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2200      	movs	r2, #0
 8005618:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2200      	movs	r2, #0
 800561e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	4a16      	ldr	r2, [pc, #88]	; (8005684 <_DoInit+0xa4>)
 800562a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	4a17      	ldr	r2, [pc, #92]	; (800568c <_DoInit+0xac>)
 8005630:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2210      	movs	r2, #16
 8005636:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2200      	movs	r2, #0
 8005642:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2200      	movs	r2, #0
 8005648:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800564a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800564e:	2300      	movs	r3, #0
 8005650:	607b      	str	r3, [r7, #4]
 8005652:	e00c      	b.n	800566e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f1c3 030f 	rsb	r3, r3, #15
 800565a:	4a0d      	ldr	r2, [pc, #52]	; (8005690 <_DoInit+0xb0>)
 800565c:	5cd1      	ldrb	r1, [r2, r3]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	460a      	mov	r2, r1
 8005666:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3301      	adds	r3, #1
 800566c:	607b      	str	r3, [r7, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b0f      	cmp	r3, #15
 8005672:	d9ef      	bls.n	8005654 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005674:	f3bf 8f5f 	dmb	sy
}
 8005678:	bf00      	nop
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20012f4c 	.word	0x20012f4c
 8005684:	08008d5c 	.word	0x08008d5c
 8005688:	20012ff4 	.word	0x20012ff4
 800568c:	200133f4 	.word	0x200133f4
 8005690:	08008d9c 	.word	0x08008d9c

08005694 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b08a      	sub	sp, #40	; 0x28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80056a0:	2300      	movs	r3, #0
 80056a2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d905      	bls.n	80056c4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
 80056c2:	e007      	b.n	80056d4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	69b9      	ldr	r1, [r7, #24]
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	1acb      	subs	r3, r1, r3
 80056ce:	4413      	add	r3, r2
 80056d0:	3b01      	subs	r3, #1
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056de:	4293      	cmp	r3, r2
 80056e0:	bf28      	it	cs
 80056e2:	4613      	movcs	r3, r2
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80056e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4293      	cmp	r3, r2
 80056ec:	bf28      	it	cs
 80056ee:	4613      	movcs	r3, r2
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	4413      	add	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80056fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	6978      	ldr	r0, [r7, #20]
 8005702:	f002 fa77 	bl	8007bf4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005706:	6a3a      	ldr	r2, [r7, #32]
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	4413      	add	r3, r2
 800570c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	4413      	add	r3, r2
 8005714:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	4413      	add	r3, r2
 8005724:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	429a      	cmp	r2, r3
 800572e:	d101      	bne.n	8005734 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005730:	2300      	movs	r3, #0
 8005732:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005734:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1b2      	bne.n	80056aa <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005744:	6a3b      	ldr	r3, [r7, #32]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3728      	adds	r7, #40	; 0x28
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800574e:	b580      	push	{r7, lr}
 8005750:	b088      	sub	sp, #32
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	429a      	cmp	r2, r3
 8005770:	d911      	bls.n	8005796 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	4413      	add	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	6938      	ldr	r0, [r7, #16]
 8005782:	f002 fa37 	bl	8007bf4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005786:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	441a      	add	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005794:	e01f      	b.n	80057d6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	6938      	ldr	r0, [r7, #16]
 80057aa:	f002 fa23 	bl	8007bf4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	4413      	add	r3, r2
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	4619      	mov	r1, r3
 80057c6:	6938      	ldr	r0, [r7, #16]
 80057c8:	f002 fa14 	bl	8007bf4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80057cc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	60da      	str	r2, [r3, #12]
}
 80057d6:	bf00      	nop
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80057de:	b480      	push	{r7}
 80057e0:	b087      	sub	sp, #28
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d808      	bhi.n	800580c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	1ad2      	subs	r2, r2, r3
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	3b01      	subs	r3, #1
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	e004      	b.n	8005816 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005816:	697b      	ldr	r3, [r7, #20]
}
 8005818:	4618      	mov	r0, r3
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005824:	b580      	push	{r7, lr}
 8005826:	b08c      	sub	sp, #48	; 0x30
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005830:	4b3e      	ldr	r3, [pc, #248]	; (800592c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005832:	623b      	str	r3, [r7, #32]
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b53      	cmp	r3, #83	; 0x53
 800583c:	d001      	beq.n	8005842 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800583e:	f7ff fecf 	bl	80055e0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	4613      	mov	r3, r2
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	4413      	add	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4a37      	ldr	r2, [pc, #220]	; (800592c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005850:	4413      	add	r3, r2
 8005852:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005864:	2300      	movs	r3, #0
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	429a      	cmp	r2, r3
 800586e:	d92b      	bls.n	80058c8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4293      	cmp	r3, r2
 8005880:	bf28      	it	cs
 8005882:	4613      	movcs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	4413      	add	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	6939      	ldr	r1, [r7, #16]
 8005894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005896:	f002 f9ad 	bl	8007bf4 <memcpy>
    NumBytesRead += NumBytesRem;
 800589a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80058a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	4413      	add	r3, r2
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	4413      	add	r3, r2
 80058b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d101      	bne.n	80058c8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80058c4:	2300      	movs	r3, #0
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4293      	cmp	r3, r2
 80058d6:	bf28      	it	cs
 80058d8:	4613      	movcs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d019      	beq.n	8005916 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	4413      	add	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	6939      	ldr	r1, [r7, #16]
 80058f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058f2:	f002 f97f 	bl	8007bf4 <memcpy>
    NumBytesRead += NumBytesRem;
 80058f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	4413      	add	r3, r2
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80058fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	4413      	add	r3, r2
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800590e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	4413      	add	r3, r2
 8005914:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005920:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005924:	4618      	mov	r0, r3
 8005926:	3730      	adds	r7, #48	; 0x30
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20012f4c 	.word	0x20012f4c

08005930 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b08c      	sub	sp, #48	; 0x30
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800593c:	4b3e      	ldr	r3, [pc, #248]	; (8005a38 <SEGGER_RTT_ReadNoLock+0x108>)
 800593e:	623b      	str	r3, [r7, #32]
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b53      	cmp	r3, #83	; 0x53
 8005948:	d001      	beq.n	800594e <SEGGER_RTT_ReadNoLock+0x1e>
 800594a:	f7ff fe49 	bl	80055e0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4613      	mov	r3, r2
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	4413      	add	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	3360      	adds	r3, #96	; 0x60
 800595a:	4a37      	ldr	r2, [pc, #220]	; (8005a38 <SEGGER_RTT_ReadNoLock+0x108>)
 800595c:	4413      	add	r3, r2
 800595e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005970:	2300      	movs	r3, #0
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	429a      	cmp	r2, r3
 800597a:	d92b      	bls.n	80059d4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4293      	cmp	r3, r2
 800598c:	bf28      	it	cs
 800598e:	4613      	movcs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	4413      	add	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	6939      	ldr	r1, [r7, #16]
 80059a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059a2:	f002 f927 	bl	8007bf4 <memcpy>
    NumBytesRead += NumBytesRem;
 80059a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	4413      	add	r3, r2
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80059ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	4413      	add	r3, r2
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80059be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	4413      	add	r3, r2
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d101      	bne.n	80059d4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80059d0:	2300      	movs	r3, #0
 80059d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4293      	cmp	r3, r2
 80059e2:	bf28      	it	cs
 80059e4:	4613      	movcs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d019      	beq.n	8005a22 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	4413      	add	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	6939      	ldr	r1, [r7, #16]
 80059fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059fe:	f002 f8f9 	bl	8007bf4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	4413      	add	r3, r2
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	4413      	add	r3, r2
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4413      	add	r3, r2
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a2c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3730      	adds	r7, #48	; 0x30
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20012f4c 	.word	0x20012f4c

08005a3c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b088      	sub	sp, #32
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4413      	add	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	3360      	adds	r3, #96	; 0x60
 8005a58:	4a1f      	ldr	r2, [pc, #124]	; (8005ad8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005a5a:	4413      	add	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d029      	beq.n	8005aba <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d82e      	bhi.n	8005ac8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d013      	beq.n	8005a9a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005a72:	e029      	b.n	8005ac8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005a74:	6978      	ldr	r0, [r7, #20]
 8005a76:	f7ff feb2 	bl	80057de <_GetAvailWriteSpace>
 8005a7a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d202      	bcs.n	8005a8a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005a88:	e021      	b.n	8005ace <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	69b9      	ldr	r1, [r7, #24]
 8005a92:	6978      	ldr	r0, [r7, #20]
 8005a94:	f7ff fe5b 	bl	800574e <_WriteNoCheck>
    break;
 8005a98:	e019      	b.n	8005ace <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005a9a:	6978      	ldr	r0, [r7, #20]
 8005a9c:	f7ff fe9f 	bl	80057de <_GetAvailWriteSpace>
 8005aa0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	bf28      	it	cs
 8005aaa:	4613      	movcs	r3, r2
 8005aac:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	69b9      	ldr	r1, [r7, #24]
 8005ab2:	6978      	ldr	r0, [r7, #20]
 8005ab4:	f7ff fe4b 	bl	800574e <_WriteNoCheck>
    break;
 8005ab8:	e009      	b.n	8005ace <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	69b9      	ldr	r1, [r7, #24]
 8005abe:	6978      	ldr	r0, [r7, #20]
 8005ac0:	f7ff fde8 	bl	8005694 <_WriteBlocking>
 8005ac4:	61f8      	str	r0, [r7, #28]
    break;
 8005ac6:	e002      	b.n	8005ace <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	61fb      	str	r3, [r7, #28]
    break;
 8005acc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005ace:	69fb      	ldr	r3, [r7, #28]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3720      	adds	r7, #32
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20012f4c 	.word	0x20012f4c

08005adc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	4613      	mov	r3, r2
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	4413      	add	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	4a1f      	ldr	r2, [pc, #124]	; (8005b78 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005afa:	4413      	add	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d029      	beq.n	8005b5a <SEGGER_RTT_WriteNoLock+0x7e>
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d82e      	bhi.n	8005b68 <SEGGER_RTT_WriteNoLock+0x8c>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <SEGGER_RTT_WriteNoLock+0x38>
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d013      	beq.n	8005b3a <SEGGER_RTT_WriteNoLock+0x5e>
 8005b12:	e029      	b.n	8005b68 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005b14:	6978      	ldr	r0, [r7, #20]
 8005b16:	f7ff fe62 	bl	80057de <_GetAvailWriteSpace>
 8005b1a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d202      	bcs.n	8005b2a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005b24:	2300      	movs	r3, #0
 8005b26:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005b28:	e021      	b.n	8005b6e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	69b9      	ldr	r1, [r7, #24]
 8005b32:	6978      	ldr	r0, [r7, #20]
 8005b34:	f7ff fe0b 	bl	800574e <_WriteNoCheck>
    break;
 8005b38:	e019      	b.n	8005b6e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005b3a:	6978      	ldr	r0, [r7, #20]
 8005b3c:	f7ff fe4f 	bl	80057de <_GetAvailWriteSpace>
 8005b40:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	4293      	cmp	r3, r2
 8005b48:	bf28      	it	cs
 8005b4a:	4613      	movcs	r3, r2
 8005b4c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	69b9      	ldr	r1, [r7, #24]
 8005b52:	6978      	ldr	r0, [r7, #20]
 8005b54:	f7ff fdfb 	bl	800574e <_WriteNoCheck>
    break;
 8005b58:	e009      	b.n	8005b6e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	69b9      	ldr	r1, [r7, #24]
 8005b5e:	6978      	ldr	r0, [r7, #20]
 8005b60:	f7ff fd98 	bl	8005694 <_WriteBlocking>
 8005b64:	61f8      	str	r0, [r7, #28]
    break;
 8005b66:	e002      	b.n	8005b6e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61fb      	str	r3, [r7, #28]
    break;
 8005b6c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20012f4c 	.word	0x20012f4c

08005b7c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005b88:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b53      	cmp	r3, #83	; 0x53
 8005b94:	d001      	beq.n	8005b9a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005b96:	f7ff fd23 	bl	80055e0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005b9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b9e:	f04f 0120 	mov.w	r1, #32
 8005ba2:	f381 8811 	msr	BASEPRI, r1
 8005ba6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff ff45 	bl	8005a3c <SEGGER_RTT_WriteDownBufferNoLock>
 8005bb2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005bba:	697b      	ldr	r3, [r7, #20]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20012f4c 	.word	0x20012f4c

08005bc8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005bd4:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <SEGGER_RTT_Write+0x48>)
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b53      	cmp	r3, #83	; 0x53
 8005be0:	d001      	beq.n	8005be6 <SEGGER_RTT_Write+0x1e>
 8005be2:	f7ff fcfd 	bl	80055e0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005be6:	f3ef 8311 	mrs	r3, BASEPRI
 8005bea:	f04f 0120 	mov.w	r1, #32
 8005bee:	f381 8811 	msr	BASEPRI, r1
 8005bf2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff ff6f 	bl	8005adc <SEGGER_RTT_WriteNoLock>
 8005bfe:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005c06:	697b      	ldr	r3, [r7, #20]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20012f4c 	.word	0x20012f4c

08005c14 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b088      	sub	sp, #32
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005c22:	4b3d      	ldr	r3, [pc, #244]	; (8005d18 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b53      	cmp	r3, #83	; 0x53
 8005c2e:	d001      	beq.n	8005c34 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005c30:	f7ff fcd6 	bl	80055e0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005c34:	f3ef 8311 	mrs	r3, BASEPRI
 8005c38:	f04f 0120 	mov.w	r1, #32
 8005c3c:	f381 8811 	msr	BASEPRI, r1
 8005c40:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c42:	4b35      	ldr	r3, [pc, #212]	; (8005d18 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005c44:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005c4a:	6939      	ldr	r1, [r7, #16]
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	4613      	mov	r3, r2
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	4413      	add	r3, r2
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	440b      	add	r3, r1
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d008      	beq.n	8005c74 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	3301      	adds	r3, #1
 8005c66:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	dbeb      	blt.n	8005c4a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005c72:	e000      	b.n	8005c76 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005c74:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	da3f      	bge.n	8005d00 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005c80:	6939      	ldr	r1, [r7, #16]
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	4613      	mov	r3, r2
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	4413      	add	r3, r2
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	440b      	add	r3, r1
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005c94:	6939      	ldr	r1, [r7, #16]
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	4413      	add	r3, r2
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005caa:	6939      	ldr	r1, [r7, #16]
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	4413      	add	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	440b      	add	r3, r1
 8005cb8:	3320      	adds	r3, #32
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005cbe:	6939      	ldr	r1, [r7, #16]
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	4413      	add	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	440b      	add	r3, r1
 8005ccc:	3328      	adds	r3, #40	; 0x28
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005cd2:	6939      	ldr	r1, [r7, #16]
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	4413      	add	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	440b      	add	r3, r1
 8005ce0:	3324      	adds	r3, #36	; 0x24
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005ce6:	6939      	ldr	r1, [r7, #16]
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	4613      	mov	r3, r2
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	4413      	add	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	440b      	add	r3, r1
 8005cf4:	332c      	adds	r3, #44	; 0x2c
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005cfa:	f3bf 8f5f 	dmb	sy
 8005cfe:	e002      	b.n	8005d06 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005d00:	f04f 33ff 	mov.w	r3, #4294967295
 8005d04:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20012f4c 	.word	0x20012f4c

08005d1c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08a      	sub	sp, #40	; 0x28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005d2a:	4b21      	ldr	r3, [pc, #132]	; (8005db0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005d2c:	623b      	str	r3, [r7, #32]
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b53      	cmp	r3, #83	; 0x53
 8005d36:	d001      	beq.n	8005d3c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005d38:	f7ff fc52 	bl	80055e0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d3c:	4b1c      	ldr	r3, [pc, #112]	; (8005db0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005d3e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d82c      	bhi.n	8005da0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005d46:	f3ef 8311 	mrs	r3, BASEPRI
 8005d4a:	f04f 0120 	mov.w	r1, #32
 8005d4e:	f381 8811 	msr	BASEPRI, r1
 8005d52:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4613      	mov	r3, r2
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	3360      	adds	r3, #96	; 0x60
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00e      	beq.n	8005d8a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2200      	movs	r2, #0
 8005d82:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2200      	movs	r2, #0
 8005d88:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d8e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d90:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9e:	e002      	b.n	8005da6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005da0:	f04f 33ff 	mov.w	r3, #4294967295
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3728      	adds	r7, #40	; 0x28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20012f4c 	.word	0x20012f4c

08005db4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d105      	bne.n	8005dd2 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	60fa      	str	r2, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	e022      	b.n	8005e18 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	60fa      	str	r2, [r7, #12]
 8005ddc:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b80      	cmp	r3, #128	; 0x80
 8005de2:	d90a      	bls.n	8005dfa <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005de8:	e007      	b.n	8005dfa <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	1c53      	adds	r3, r2, #1
 8005dee:	60bb      	str	r3, [r7, #8]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	1c59      	adds	r1, r3, #1
 8005df4:	60f9      	str	r1, [r7, #12]
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	1e5a      	subs	r2, r3, #1
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <_EncodeStr+0x58>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1ee      	bne.n	8005dea <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005e18:	68fb      	ldr	r3, [r7, #12]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3307      	adds	r3, #7
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005e46:	4b35      	ldr	r3, [pc, #212]	; (8005f1c <_HandleIncomingPacket+0xdc>)
 8005e48:	7e1b      	ldrb	r3, [r3, #24]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	1cfb      	adds	r3, r7, #3
 8005e4e:	2201      	movs	r2, #1
 8005e50:	4619      	mov	r1, r3
 8005e52:	f7ff fd6d 	bl	8005930 <SEGGER_RTT_ReadNoLock>
 8005e56:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d052      	beq.n	8005f04 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	2b80      	cmp	r3, #128	; 0x80
 8005e62:	d031      	beq.n	8005ec8 <_HandleIncomingPacket+0x88>
 8005e64:	2b80      	cmp	r3, #128	; 0x80
 8005e66:	dc40      	bgt.n	8005eea <_HandleIncomingPacket+0xaa>
 8005e68:	2b07      	cmp	r3, #7
 8005e6a:	dc15      	bgt.n	8005e98 <_HandleIncomingPacket+0x58>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	dd3c      	ble.n	8005eea <_HandleIncomingPacket+0xaa>
 8005e70:	3b01      	subs	r3, #1
 8005e72:	2b06      	cmp	r3, #6
 8005e74:	d839      	bhi.n	8005eea <_HandleIncomingPacket+0xaa>
 8005e76:	a201      	add	r2, pc, #4	; (adr r2, 8005e7c <_HandleIncomingPacket+0x3c>)
 8005e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7c:	08005e9f 	.word	0x08005e9f
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005eab 	.word	0x08005eab
 8005e88:	08005eb1 	.word	0x08005eb1
 8005e8c:	08005eb7 	.word	0x08005eb7
 8005e90:	08005ebd 	.word	0x08005ebd
 8005e94:	08005ec3 	.word	0x08005ec3
 8005e98:	2b7f      	cmp	r3, #127	; 0x7f
 8005e9a:	d035      	beq.n	8005f08 <_HandleIncomingPacket+0xc8>
 8005e9c:	e025      	b.n	8005eea <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005e9e:	f001 f8a3 	bl	8006fe8 <SEGGER_SYSVIEW_Start>
      break;
 8005ea2:	e036      	b.n	8005f12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005ea4:	f001 f95c 	bl	8007160 <SEGGER_SYSVIEW_Stop>
      break;
 8005ea8:	e033      	b.n	8005f12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005eaa:	f001 fb35 	bl	8007518 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005eae:	e030      	b.n	8005f12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005eb0:	f001 fafa 	bl	80074a8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005eb4:	e02d      	b.n	8005f12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005eb6:	f001 f979 	bl	80071ac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005eba:	e02a      	b.n	8005f12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005ebc:	f001 fd72 	bl	80079a4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005ec0:	e027      	b.n	8005f12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005ec2:	f001 fd51 	bl	8007968 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005ec6:	e024      	b.n	8005f12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ec8:	4b14      	ldr	r3, [pc, #80]	; (8005f1c <_HandleIncomingPacket+0xdc>)
 8005eca:	7e1b      	ldrb	r3, [r3, #24]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	1cfb      	adds	r3, r7, #3
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f7ff fd2c 	bl	8005930 <SEGGER_RTT_ReadNoLock>
 8005ed8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d015      	beq.n	8005f0c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 fcb6 	bl	8007854 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005ee8:	e010      	b.n	8005f0c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	b25b      	sxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	da0e      	bge.n	8005f10 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <_HandleIncomingPacket+0xdc>)
 8005ef4:	7e1b      	ldrb	r3, [r3, #24]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	1cfb      	adds	r3, r7, #3
 8005efa:	2201      	movs	r2, #1
 8005efc:	4619      	mov	r1, r3
 8005efe:	f7ff fd17 	bl	8005930 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005f02:	e005      	b.n	8005f10 <_HandleIncomingPacket+0xd0>
    }
  }
 8005f04:	bf00      	nop
 8005f06:	e004      	b.n	8005f12 <_HandleIncomingPacket+0xd2>
      break;
 8005f08:	bf00      	nop
 8005f0a:	e002      	b.n	8005f12 <_HandleIncomingPacket+0xd2>
      break;
 8005f0c:	bf00      	nop
 8005f0e:	e000      	b.n	8005f12 <_HandleIncomingPacket+0xd2>
      break;
 8005f10:	bf00      	nop
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	2001380c 	.word	0x2001380c

08005f20 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08c      	sub	sp, #48	; 0x30
 8005f24:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005f26:	2301      	movs	r3, #1
 8005f28:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005f2a:	1d3b      	adds	r3, r7, #4
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f34:	4b32      	ldr	r3, [pc, #200]	; (8006000 <_TrySendOverflowPacket+0xe0>)
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f3a:	e00b      	b.n	8005f54 <_TrySendOverflowPacket+0x34>
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f42:	1c59      	adds	r1, r3, #1
 8005f44:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	09db      	lsrs	r3, r3, #7
 8005f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	2b7f      	cmp	r3, #127	; 0x7f
 8005f58:	d8f0      	bhi.n	8005f3c <_TrySendOverflowPacket+0x1c>
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f6a:	4b26      	ldr	r3, [pc, #152]	; (8006004 <_TrySendOverflowPacket+0xe4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005f70:	4b23      	ldr	r3, [pc, #140]	; (8006000 <_TrySendOverflowPacket+0xe0>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	623b      	str	r3, [r7, #32]
 8005f82:	e00b      	b.n	8005f9c <_TrySendOverflowPacket+0x7c>
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	1c59      	adds	r1, r3, #1
 8005f8c:	6279      	str	r1, [r7, #36]	; 0x24
 8005f8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	09db      	lsrs	r3, r3, #7
 8005f9a:	623b      	str	r3, [r7, #32]
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005fa0:	d8f0      	bhi.n	8005f84 <_TrySendOverflowPacket+0x64>
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	627a      	str	r2, [r7, #36]	; 0x24
 8005fa8:	6a3a      	ldr	r2, [r7, #32]
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005fb2:	4b13      	ldr	r3, [pc, #76]	; (8006000 <_TrySendOverflowPacket+0xe0>)
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	1d3b      	adds	r3, r7, #4
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	f7fa f904 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005fcc:	f7ff fa7e 	bl	80054cc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005fd6:	4a0a      	ldr	r2, [pc, #40]	; (8006000 <_TrySendOverflowPacket+0xe0>)
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005fdc:	4b08      	ldr	r3, [pc, #32]	; (8006000 <_TrySendOverflowPacket+0xe0>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <_TrySendOverflowPacket+0xe0>)
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	e004      	b.n	8005ff4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005fea:	4b05      	ldr	r3, [pc, #20]	; (8006000 <_TrySendOverflowPacket+0xe0>)
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	4a03      	ldr	r2, [pc, #12]	; (8006000 <_TrySendOverflowPacket+0xe0>)
 8005ff2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005ff4:	693b      	ldr	r3, [r7, #16]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3730      	adds	r7, #48	; 0x30
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	2001380c 	.word	0x2001380c
 8006004:	e0001004 	.word	0xe0001004

08006008 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006014:	4b96      	ldr	r3, [pc, #600]	; (8006270 <_SendPacket+0x268>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d010      	beq.n	800603e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800601c:	4b94      	ldr	r3, [pc, #592]	; (8006270 <_SendPacket+0x268>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8130 	beq.w	8006286 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006026:	4b92      	ldr	r3, [pc, #584]	; (8006270 <_SendPacket+0x268>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d109      	bne.n	8006042 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800602e:	f7ff ff77 	bl	8005f20 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006032:	4b8f      	ldr	r3, [pc, #572]	; (8006270 <_SendPacket+0x268>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b01      	cmp	r3, #1
 8006038:	f040 8127 	bne.w	800628a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 800603c:	e001      	b.n	8006042 <_SendPacket+0x3a>
    goto Send;
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <_SendPacket+0x3c>
Send:
 8006042:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b1f      	cmp	r3, #31
 8006048:	d809      	bhi.n	800605e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800604a:	4b89      	ldr	r3, [pc, #548]	; (8006270 <_SendPacket+0x268>)
 800604c:	69da      	ldr	r2, [r3, #28]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	f040 8118 	bne.w	800628e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b17      	cmp	r3, #23
 8006062:	d807      	bhi.n	8006074 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	3b01      	subs	r3, #1
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	b2da      	uxtb	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	e0c4      	b.n	80061fe <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b7f      	cmp	r3, #127	; 0x7f
 8006080:	d912      	bls.n	80060a8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	09da      	lsrs	r2, r3, #7
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3b01      	subs	r3, #1
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	b2db      	uxtb	r3, r3
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	3a01      	subs	r2, #1
 800609a:	60fa      	str	r2, [r7, #12]
 800609c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	e006      	b.n	80060b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b7e      	cmp	r3, #126	; 0x7e
 80060ba:	d807      	bhi.n	80060cc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3b01      	subs	r3, #1
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	e098      	b.n	80061fe <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060d2:	d212      	bcs.n	80060fa <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	09da      	lsrs	r2, r3, #7
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3b01      	subs	r3, #1
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	3a01      	subs	r2, #1
 80060ec:	60fa      	str	r2, [r7, #12]
 80060ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e081      	b.n	80061fe <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006100:	d21d      	bcs.n	800613e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	0b9a      	lsrs	r2, r3, #14
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3b01      	subs	r3, #1
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	09db      	lsrs	r3, r3, #7
 8006116:	b2db      	uxtb	r3, r3
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	3a01      	subs	r2, #1
 800611c:	60fa      	str	r2, [r7, #12]
 800611e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006122:	b2da      	uxtb	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	b2db      	uxtb	r3, r3
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	3a01      	subs	r2, #1
 8006130:	60fa      	str	r2, [r7, #12]
 8006132:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006136:	b2da      	uxtb	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	e05f      	b.n	80061fe <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006144:	d228      	bcs.n	8006198 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	0d5a      	lsrs	r2, r3, #21
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3b01      	subs	r3, #1
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	0b9b      	lsrs	r3, r3, #14
 800615a:	b2db      	uxtb	r3, r3
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	3a01      	subs	r2, #1
 8006160:	60fa      	str	r2, [r7, #12]
 8006162:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006166:	b2da      	uxtb	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	09db      	lsrs	r3, r3, #7
 8006170:	b2db      	uxtb	r3, r3
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	3a01      	subs	r2, #1
 8006176:	60fa      	str	r2, [r7, #12]
 8006178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800617c:	b2da      	uxtb	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	3a01      	subs	r2, #1
 800618a:	60fa      	str	r2, [r7, #12]
 800618c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006190:	b2da      	uxtb	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	e032      	b.n	80061fe <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	0f1a      	lsrs	r2, r3, #28
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3b01      	subs	r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	0d5b      	lsrs	r3, r3, #21
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	3a01      	subs	r2, #1
 80061b2:	60fa      	str	r2, [r7, #12]
 80061b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	0b9b      	lsrs	r3, r3, #14
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	3a01      	subs	r2, #1
 80061c8:	60fa      	str	r2, [r7, #12]
 80061ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	09db      	lsrs	r3, r3, #7
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	3a01      	subs	r2, #1
 80061de:	60fa      	str	r2, [r7, #12]
 80061e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	3a01      	subs	r2, #1
 80061f2:	60fa      	str	r2, [r7, #12]
 80061f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80061fe:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <_SendPacket+0x26c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006204:	4b1a      	ldr	r3, [pc, #104]	; (8006270 <_SendPacket+0x268>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	623b      	str	r3, [r7, #32]
 8006216:	e00b      	b.n	8006230 <_SendPacket+0x228>
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	b2da      	uxtb	r2, r3
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	1c59      	adds	r1, r3, #1
 8006220:	6279      	str	r1, [r7, #36]	; 0x24
 8006222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	09db      	lsrs	r3, r3, #7
 800622e:	623b      	str	r3, [r7, #32]
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	2b7f      	cmp	r3, #127	; 0x7f
 8006234:	d8f0      	bhi.n	8006218 <_SendPacket+0x210>
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	627a      	str	r2, [r7, #36]	; 0x24
 800623c:	6a3a      	ldr	r2, [r7, #32]
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8006246:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <_SendPacket+0x268>)
 8006248:	785b      	ldrb	r3, [r3, #1]
 800624a:	4618      	mov	r0, r3
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	461a      	mov	r2, r3
 8006254:	68f9      	ldr	r1, [r7, #12]
 8006256:	f7f9 ffbb 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800625a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800625c:	f7ff f936 	bl	80054cc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d008      	beq.n	8006278 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006266:	4a02      	ldr	r2, [pc, #8]	; (8006270 <_SendPacket+0x268>)
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	60d3      	str	r3, [r2, #12]
 800626c:	e010      	b.n	8006290 <_SendPacket+0x288>
 800626e:	bf00      	nop
 8006270:	2001380c 	.word	0x2001380c
 8006274:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006278:	4b19      	ldr	r3, [pc, #100]	; (80062e0 <_SendPacket+0x2d8>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	3301      	adds	r3, #1
 800627e:	b2da      	uxtb	r2, r3
 8006280:	4b17      	ldr	r3, [pc, #92]	; (80062e0 <_SendPacket+0x2d8>)
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	e004      	b.n	8006290 <_SendPacket+0x288>
    goto SendDone;
 8006286:	bf00      	nop
 8006288:	e002      	b.n	8006290 <_SendPacket+0x288>
      goto SendDone;
 800628a:	bf00      	nop
 800628c:	e000      	b.n	8006290 <_SendPacket+0x288>
      goto SendDone;
 800628e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006290:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <_SendPacket+0x2d8>)
 8006292:	7e1b      	ldrb	r3, [r3, #24]
 8006294:	4619      	mov	r1, r3
 8006296:	4a13      	ldr	r2, [pc, #76]	; (80062e4 <_SendPacket+0x2dc>)
 8006298:	460b      	mov	r3, r1
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	440b      	add	r3, r1
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	4413      	add	r3, r2
 80062a2:	336c      	adds	r3, #108	; 0x6c
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <_SendPacket+0x2d8>)
 80062a8:	7e1b      	ldrb	r3, [r3, #24]
 80062aa:	4618      	mov	r0, r3
 80062ac:	490d      	ldr	r1, [pc, #52]	; (80062e4 <_SendPacket+0x2dc>)
 80062ae:	4603      	mov	r3, r0
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	4403      	add	r3, r0
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	440b      	add	r3, r1
 80062b8:	3370      	adds	r3, #112	; 0x70
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d00b      	beq.n	80062d8 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <_SendPacket+0x2d8>)
 80062c2:	789b      	ldrb	r3, [r3, #2]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d107      	bne.n	80062d8 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <_SendPacket+0x2d8>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80062ce:	f7ff fdb7 	bl	8005e40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80062d2:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <_SendPacket+0x2d8>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80062d8:	bf00      	nop
 80062da:	3728      	adds	r7, #40	; 0x28
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	2001380c 	.word	0x2001380c
 80062e4:	20012f4c 	.word	0x20012f4c

080062e8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	; 0x28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	3301      	adds	r3, #1
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d80a      	bhi.n	8006318 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	1c59      	adds	r1, r3, #1
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6051      	str	r1, [r2, #4]
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b80      	cmp	r3, #128	; 0x80
 800631e:	d15a      	bne.n	80063d6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	623b      	str	r3, [r7, #32]
 8006340:	e00b      	b.n	800635a <_StoreChar+0x72>
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	6279      	str	r1, [r7, #36]	; 0x24
 800634c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	09db      	lsrs	r3, r3, #7
 8006358:	623b      	str	r3, [r7, #32]
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	2b7f      	cmp	r3, #127	; 0x7f
 800635e:	d8f0      	bhi.n	8006342 <_StoreChar+0x5a>
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	627a      	str	r2, [r7, #36]	; 0x24
 8006366:	6a3a      	ldr	r2, [r7, #32]
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	61fb      	str	r3, [r7, #28]
 8006374:	2300      	movs	r3, #0
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	e00b      	b.n	8006392 <_StoreChar+0xaa>
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	b2da      	uxtb	r2, r3
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	1c59      	adds	r1, r3, #1
 8006382:	61f9      	str	r1, [r7, #28]
 8006384:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	09db      	lsrs	r3, r3, #7
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b7f      	cmp	r3, #127	; 0x7f
 8006396:	d8f0      	bhi.n	800637a <_StoreChar+0x92>
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	61fa      	str	r2, [r7, #28]
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	221a      	movs	r2, #26
 80063ae:	6939      	ldr	r1, [r7, #16]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fe29 	bl	8006008 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff fd33 	bl	8005e26 <_PreparePacket>
 80063c0:	4602      	mov	r2, r0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	611a      	str	r2, [r3, #16]
  }
}
 80063d6:	bf00      	nop
 80063d8:	3728      	adds	r7, #40	; 0x28
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	; 0x28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80063f2:	2301      	movs	r3, #1
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80063f6:	2301      	movs	r3, #1
 80063f8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80063fa:	e007      	b.n	800640c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80063fc:	6a3a      	ldr	r2, [r7, #32]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	fbb2 f3f3 	udiv	r3, r2, r3
 8006404:	623b      	str	r3, [r7, #32]
    Width++;
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	3301      	adds	r3, #1
 800640a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800640c:	6a3a      	ldr	r2, [r7, #32]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d2f3      	bcs.n	80063fc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	429a      	cmp	r2, r3
 800641a:	d901      	bls.n	8006420 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d11f      	bne.n	800646a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01c      	beq.n	800646a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <_PrintUnsigned+0x66>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <_PrintUnsigned+0x66>
        c = '0';
 8006440:	2330      	movs	r3, #48	; 0x30
 8006442:	76fb      	strb	r3, [r7, #27]
 8006444:	e001      	b.n	800644a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8006446:	2320      	movs	r3, #32
 8006448:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800644a:	e007      	b.n	800645c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	3b01      	subs	r3, #1
 8006450:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8006452:	7efb      	ldrb	r3, [r7, #27]
 8006454:	4619      	mov	r1, r3
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f7ff ff46 	bl	80062e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <_PrintUnsigned+0x8a>
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	429a      	cmp	r2, r3
 8006468:	d3f0      	bcc.n	800644c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d903      	bls.n	8006478 <_PrintUnsigned+0x98>
      NumDigits--;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	3b01      	subs	r3, #1
 8006474:	603b      	str	r3, [r7, #0]
 8006476:	e009      	b.n	800648c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	429a      	cmp	r2, r3
 8006488:	d200      	bcs.n	800648c <_PrintUnsigned+0xac>
        break;
 800648a:	e005      	b.n	8006498 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	fb02 f303 	mul.w	r3, r2, r3
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006496:	e7e8      	b.n	800646a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a6:	fb02 f303 	mul.w	r3, r2, r3
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80064b0:	4a15      	ldr	r2, [pc, #84]	; (8006508 <_PrintUnsigned+0x128>)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	4413      	add	r3, r2
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	4619      	mov	r1, r3
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f7ff ff14 	bl	80062e8 <_StoreChar>
    Digit /= Base;
 80064c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e3      	bne.n	8006498 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80064d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d011      	beq.n	80064fe <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00e      	beq.n	80064fe <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80064e0:	e006      	b.n	80064f0 <_PrintUnsigned+0x110>
        FieldWidth--;
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	3b01      	subs	r3, #1
 80064e6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80064e8:	2120      	movs	r1, #32
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f7ff fefc 	bl	80062e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <_PrintUnsigned+0x11e>
 80064f6:	69fa      	ldr	r2, [r7, #28]
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d3f1      	bcc.n	80064e2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80064fe:	bf00      	nop
 8006500:	3728      	adds	r7, #40	; 0x28
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	08008dbc 	.word	0x08008dbc

0800650c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	bfb8      	it	lt
 8006520:	425b      	neglt	r3, r3
 8006522:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006524:	2301      	movs	r3, #1
 8006526:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006528:	e007      	b.n	800653a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006532:	613b      	str	r3, [r7, #16]
    Width++;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	3301      	adds	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	429a      	cmp	r2, r3
 8006540:	daf3      	bge.n	800652a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	429a      	cmp	r2, r3
 8006548:	d901      	bls.n	800654e <_PrintInt+0x42>
    Width = NumDigits;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <_PrintInt+0x5e>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	db04      	blt.n	8006564 <_PrintInt+0x58>
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <_PrintInt+0x5e>
    FieldWidth--;
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	3b01      	subs	r3, #1
 8006568:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <_PrintInt+0x6e>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d016      	beq.n	80065a8 <_PrintInt+0x9c>
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d111      	bne.n	80065a8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00e      	beq.n	80065a8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800658a:	e006      	b.n	800659a <_PrintInt+0x8e>
        FieldWidth--;
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	3b01      	subs	r3, #1
 8006590:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006592:	2120      	movs	r1, #32
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f7ff fea7 	bl	80062e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <_PrintInt+0x9c>
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d3f1      	bcc.n	800658c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	da07      	bge.n	80065be <_PrintInt+0xb2>
    v = -v;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	425b      	negs	r3, r3
 80065b2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80065b4:	212d      	movs	r1, #45	; 0x2d
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff fe96 	bl	80062e8 <_StoreChar>
 80065bc:	e008      	b.n	80065d0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80065c8:	212b      	movs	r1, #43	; 0x2b
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f7ff fe8c 	bl	80062e8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d019      	beq.n	800660e <_PrintInt+0x102>
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d114      	bne.n	800660e <_PrintInt+0x102>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d111      	bne.n	800660e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00e      	beq.n	800660e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065f0:	e006      	b.n	8006600 <_PrintInt+0xf4>
        FieldWidth--;
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80065f8:	2130      	movs	r1, #48	; 0x30
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f7ff fe74 	bl	80062e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <_PrintInt+0x102>
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	429a      	cmp	r2, r3
 800660c:	d3f1      	bcc.n	80065f2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	9301      	str	r3, [sp, #4]
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f7ff fedf 	bl	80063e0 <_PrintUnsigned>
}
 8006622:	bf00      	nop
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800662c:	b580      	push	{r7, lr}
 800662e:	b098      	sub	sp, #96	; 0x60
 8006630:	af02      	add	r7, sp, #8
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006638:	f3ef 8311 	mrs	r3, BASEPRI
 800663c:	f04f 0120 	mov.w	r1, #32
 8006640:	f381 8811 	msr	BASEPRI, r1
 8006644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006646:	48b7      	ldr	r0, [pc, #732]	; (8006924 <_VPrintTarget+0x2f8>)
 8006648:	f7ff fbed 	bl	8005e26 <_PreparePacket>
 800664c:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800664e:	4bb5      	ldr	r3, [pc, #724]	; (8006924 <_VPrintTarget+0x2f8>)
 8006650:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8006652:	2300      	movs	r3, #0
 8006654:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	3301      	adds	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3301      	adds	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006672:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 81a8 	beq.w	80069cc <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 800667c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006680:	2b25      	cmp	r3, #37	; 0x25
 8006682:	f040 8195 	bne.w	80069b0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006686:	2300      	movs	r3, #0
 8006688:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800668a:	2301      	movs	r3, #1
 800668c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006696:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800669a:	3b23      	subs	r3, #35	; 0x23
 800669c:	2b0d      	cmp	r3, #13
 800669e:	d83f      	bhi.n	8006720 <_VPrintTarget+0xf4>
 80066a0:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <_VPrintTarget+0x7c>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	08006711 	.word	0x08006711
 80066ac:	08006721 	.word	0x08006721
 80066b0:	08006721 	.word	0x08006721
 80066b4:	08006721 	.word	0x08006721
 80066b8:	08006721 	.word	0x08006721
 80066bc:	08006721 	.word	0x08006721
 80066c0:	08006721 	.word	0x08006721
 80066c4:	08006721 	.word	0x08006721
 80066c8:	08006701 	.word	0x08006701
 80066cc:	08006721 	.word	0x08006721
 80066d0:	080066e1 	.word	0x080066e1
 80066d4:	08006721 	.word	0x08006721
 80066d8:	08006721 	.word	0x08006721
 80066dc:	080066f1 	.word	0x080066f1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80066e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e2:	f043 0301 	orr.w	r3, r3, #1
 80066e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	e01a      	b.n	8006726 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80066f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f2:	f043 0302 	orr.w	r3, r3, #2
 80066f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3301      	adds	r3, #1
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	e012      	b.n	8006726 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006702:	f043 0304 	orr.w	r3, r3, #4
 8006706:	64bb      	str	r3, [r7, #72]	; 0x48
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3301      	adds	r3, #1
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	e00a      	b.n	8006726 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006712:	f043 0308 	orr.w	r3, r3, #8
 8006716:	64bb      	str	r3, [r7, #72]	; 0x48
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	3301      	adds	r3, #1
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	e002      	b.n	8006726 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006720:	2300      	movs	r3, #0
 8006722:	653b      	str	r3, [r7, #80]	; 0x50
 8006724:	bf00      	nop
        }
      } while (v);
 8006726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1b0      	bne.n	800668e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800672c:	2300      	movs	r3, #0
 800672e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006738:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800673c:	2b2f      	cmp	r3, #47	; 0x2f
 800673e:	d912      	bls.n	8006766 <_VPrintTarget+0x13a>
 8006740:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006744:	2b39      	cmp	r3, #57	; 0x39
 8006746:	d80e      	bhi.n	8006766 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3301      	adds	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800674e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006750:	4613      	mov	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	461a      	mov	r2, r3
 800675a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800675e:	4413      	add	r3, r2
 8006760:	3b30      	subs	r3, #48	; 0x30
 8006762:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006764:	e7e4      	b.n	8006730 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006766:	2300      	movs	r3, #0
 8006768:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006772:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006776:	2b2e      	cmp	r3, #46	; 0x2e
 8006778:	d11d      	bne.n	80067b6 <_VPrintTarget+0x18a>
        sFormat++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3301      	adds	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800678c:	2b2f      	cmp	r3, #47	; 0x2f
 800678e:	d912      	bls.n	80067b6 <_VPrintTarget+0x18a>
 8006790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006794:	2b39      	cmp	r3, #57	; 0x39
 8006796:	d80e      	bhi.n	80067b6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3301      	adds	r3, #1
 800679c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800679e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	461a      	mov	r2, r3
 80067aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067ae:	4413      	add	r3, r2
 80067b0:	3b30      	subs	r3, #48	; 0x30
 80067b2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80067b4:	e7e4      	b.n	8006780 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80067be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067c2:	2b6c      	cmp	r3, #108	; 0x6c
 80067c4:	d003      	beq.n	80067ce <_VPrintTarget+0x1a2>
 80067c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067ca:	2b68      	cmp	r3, #104	; 0x68
 80067cc:	d107      	bne.n	80067de <_VPrintTarget+0x1b2>
          c = *sFormat;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80067dc:	e7ef      	b.n	80067be <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80067de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067e2:	2b25      	cmp	r3, #37	; 0x25
 80067e4:	f000 80d8 	beq.w	8006998 <_VPrintTarget+0x36c>
 80067e8:	2b25      	cmp	r3, #37	; 0x25
 80067ea:	f2c0 80dc 	blt.w	80069a6 <_VPrintTarget+0x37a>
 80067ee:	2b78      	cmp	r3, #120	; 0x78
 80067f0:	f300 80d9 	bgt.w	80069a6 <_VPrintTarget+0x37a>
 80067f4:	2b58      	cmp	r3, #88	; 0x58
 80067f6:	f2c0 80d6 	blt.w	80069a6 <_VPrintTarget+0x37a>
 80067fa:	3b58      	subs	r3, #88	; 0x58
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	f200 80d2 	bhi.w	80069a6 <_VPrintTarget+0x37a>
 8006802:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <_VPrintTarget+0x1dc>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	080068ff 	.word	0x080068ff
 800680c:	080069a7 	.word	0x080069a7
 8006810:	080069a7 	.word	0x080069a7
 8006814:	080069a7 	.word	0x080069a7
 8006818:	080069a7 	.word	0x080069a7
 800681c:	080069a7 	.word	0x080069a7
 8006820:	080069a7 	.word	0x080069a7
 8006824:	080069a7 	.word	0x080069a7
 8006828:	080069a7 	.word	0x080069a7
 800682c:	080069a7 	.word	0x080069a7
 8006830:	080069a7 	.word	0x080069a7
 8006834:	0800688d 	.word	0x0800688d
 8006838:	080068b3 	.word	0x080068b3
 800683c:	080069a7 	.word	0x080069a7
 8006840:	080069a7 	.word	0x080069a7
 8006844:	080069a7 	.word	0x080069a7
 8006848:	080069a7 	.word	0x080069a7
 800684c:	080069a7 	.word	0x080069a7
 8006850:	080069a7 	.word	0x080069a7
 8006854:	080069a7 	.word	0x080069a7
 8006858:	080069a7 	.word	0x080069a7
 800685c:	080069a7 	.word	0x080069a7
 8006860:	080069a7 	.word	0x080069a7
 8006864:	080069a7 	.word	0x080069a7
 8006868:	08006973 	.word	0x08006973
 800686c:	080069a7 	.word	0x080069a7
 8006870:	080069a7 	.word	0x080069a7
 8006874:	08006929 	.word	0x08006929
 8006878:	080069a7 	.word	0x080069a7
 800687c:	080068d9 	.word	0x080068d9
 8006880:	080069a7 	.word	0x080069a7
 8006884:	080069a7 	.word	0x080069a7
 8006888:	080068ff 	.word	0x080068ff
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	1d19      	adds	r1, r3, #4
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6011      	str	r1, [r2, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800689a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800689c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 80068a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80068a4:	f107 0310 	add.w	r3, r7, #16
 80068a8:	4611      	mov	r1, r2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff fd1c 	bl	80062e8 <_StoreChar>
        break;
 80068b0:	e07a      	b.n	80069a8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	1d19      	adds	r1, r3, #4
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6011      	str	r1, [r2, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80068c0:	f107 0010 	add.w	r0, r7, #16
 80068c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c6:	9301      	str	r3, [sp, #4]
 80068c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ce:	220a      	movs	r2, #10
 80068d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068d2:	f7ff fe1b 	bl	800650c <_PrintInt>
        break;
 80068d6:	e067      	b.n	80069a8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	1d19      	adds	r1, r3, #4
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6011      	str	r1, [r2, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80068e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068e8:	f107 0010 	add.w	r0, r7, #16
 80068ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f6:	220a      	movs	r2, #10
 80068f8:	f7ff fd72 	bl	80063e0 <_PrintUnsigned>
        break;
 80068fc:	e054      	b.n	80069a8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	1d19      	adds	r1, r3, #4
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6011      	str	r1, [r2, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800690c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800690e:	f107 0010 	add.w	r0, r7, #16
 8006912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691c:	2210      	movs	r2, #16
 800691e:	f7ff fd5f 	bl	80063e0 <_PrintUnsigned>
        break;
 8006922:	e041      	b.n	80069a8 <_VPrintTarget+0x37c>
 8006924:	2001383c 	.word	0x2001383c
      case 's':
        s = va_arg(*pParamList, const char*);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	1d19      	adds	r1, r3, #4
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6011      	str	r1, [r2, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8006936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <_VPrintTarget+0x314>
          s = "(null)";
 800693c:	4b4a      	ldr	r3, [pc, #296]	; (8006a68 <_VPrintTarget+0x43c>)
 800693e:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8006940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8006948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800694a:	3301      	adds	r3, #1
 800694c:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 800694e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006956:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800695a:	f107 0310 	add.w	r3, r7, #16
 800695e:	4611      	mov	r1, r2
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff fcc1 	bl	80062e8 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	2b7f      	cmp	r3, #127	; 0x7f
 800696a:	d9e9      	bls.n	8006940 <_VPrintTarget+0x314>
        break;
 800696c:	e01c      	b.n	80069a8 <_VPrintTarget+0x37c>
            break;
 800696e:	bf00      	nop
        break;
 8006970:	e01a      	b.n	80069a8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	1d19      	adds	r1, r3, #4
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6011      	str	r1, [r2, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006980:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006982:	f107 0010 	add.w	r0, r7, #16
 8006986:	2300      	movs	r3, #0
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	2308      	movs	r3, #8
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	2308      	movs	r3, #8
 8006990:	2210      	movs	r2, #16
 8006992:	f7ff fd25 	bl	80063e0 <_PrintUnsigned>
        break;
 8006996:	e007      	b.n	80069a8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006998:	f107 0310 	add.w	r3, r7, #16
 800699c:	2125      	movs	r1, #37	; 0x25
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fca2 	bl	80062e8 <_StoreChar>
        break;
 80069a4:	e000      	b.n	80069a8 <_VPrintTarget+0x37c>
      default:
        break;
 80069a6:	bf00      	nop
      }
      sFormat++;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3301      	adds	r3, #1
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	e007      	b.n	80069c0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80069b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80069b4:	f107 0310 	add.w	r3, r7, #16
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff fc94 	bl	80062e8 <_StoreChar>
    }
  } while (*sFormat);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f47f ae4d 	bne.w	8006664 <_VPrintTarget+0x38>
 80069ca:	e000      	b.n	80069ce <_VPrintTarget+0x3a2>
      break;
 80069cc:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d041      	beq.n	8006a58 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80069d4:	6a3a      	ldr	r2, [r7, #32]
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80069e4:	e00b      	b.n	80069fe <_VPrintTarget+0x3d2>
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ec:	1c59      	adds	r1, r3, #1
 80069ee:	63f9      	str	r1, [r7, #60]	; 0x3c
 80069f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	09db      	lsrs	r3, r3, #7
 80069fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	2b7f      	cmp	r3, #127	; 0x7f
 8006a02:	d8f0      	bhi.n	80069e6 <_VPrintTarget+0x3ba>
 8006a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a12:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
 8006a18:	2300      	movs	r3, #0
 8006a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a1c:	e00b      	b.n	8006a36 <_VPrintTarget+0x40a>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a24:	1c59      	adds	r1, r3, #1
 8006a26:	6379      	str	r1, [r7, #52]	; 0x34
 8006a28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	701a      	strb	r2, [r3, #0]
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	09db      	lsrs	r3, r3, #7
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	2b7f      	cmp	r3, #127	; 0x7f
 8006a3a:	d8f0      	bhi.n	8006a1e <_VPrintTarget+0x3f2>
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	637a      	str	r2, [r7, #52]	; 0x34
 8006a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	6979      	ldr	r1, [r7, #20]
 8006a50:	221a      	movs	r2, #26
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff fad8 	bl	8006008 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006a5e:	bf00      	nop
 8006a60:	3758      	adds	r7, #88	; 0x58
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	08008d68 	.word	0x08008d68

08006a6c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a80:	4917      	ldr	r1, [pc, #92]	; (8006ae0 <SEGGER_SYSVIEW_Init+0x74>)
 8006a82:	4818      	ldr	r0, [pc, #96]	; (8006ae4 <SEGGER_SYSVIEW_Init+0x78>)
 8006a84:	f7ff f8c6 	bl	8005c14 <SEGGER_RTT_AllocUpBuffer>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	4b16      	ldr	r3, [pc, #88]	; (8006ae8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a8e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006a90:	4b15      	ldr	r3, [pc, #84]	; (8006ae8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a92:	785a      	ldrb	r2, [r3, #1]
 8006a94:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a96:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a98:	4b13      	ldr	r3, [pc, #76]	; (8006ae8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a9a:	7e1b      	ldrb	r3, [r3, #24]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	4a11      	ldr	r2, [pc, #68]	; (8006aec <SEGGER_SYSVIEW_Init+0x80>)
 8006aa6:	490f      	ldr	r1, [pc, #60]	; (8006ae4 <SEGGER_SYSVIEW_Init+0x78>)
 8006aa8:	f7ff f938 	bl	8005d1c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006aac:	4b0e      	ldr	r3, [pc, #56]	; (8006ae8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006ab2:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <SEGGER_SYSVIEW_Init+0x84>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a0c      	ldr	r2, [pc, #48]	; (8006ae8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ab8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006aba:	4a0b      	ldr	r2, [pc, #44]	; (8006ae8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006ac0:	4a09      	ldr	r2, [pc, #36]	; (8006ae8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006ac6:	4a08      	ldr	r2, [pc, #32]	; (8006ae8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006acc:	4a06      	ldr	r2, [pc, #24]	; (8006ae8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006ad2:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20013404 	.word	0x20013404
 8006ae4:	08008d70 	.word	0x08008d70
 8006ae8:	2001380c 	.word	0x2001380c
 8006aec:	20013804 	.word	0x20013804
 8006af0:	e0001004 	.word	0xe0001004

08006af4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006afc:	4a04      	ldr	r2, [pc, #16]	; (8006b10 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6113      	str	r3, [r2, #16]
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	2001380c 	.word	0x2001380c

08006b14 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b20:	f04f 0120 	mov.w	r1, #32
 8006b24:	f381 8811 	msr	BASEPRI, r1
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	4808      	ldr	r0, [pc, #32]	; (8006b4c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006b2c:	f7ff f97b 	bl	8005e26 <_PreparePacket>
 8006b30:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	68b8      	ldr	r0, [r7, #8]
 8006b38:	f7ff fa66 	bl	8006008 <_SendPacket>
  RECORD_END();
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f383 8811 	msr	BASEPRI, r3
}
 8006b42:	bf00      	nop
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	2001383c 	.word	0x2001383c

08006b50 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b5e:	f04f 0120 	mov.w	r1, #32
 8006b62:	f381 8811 	msr	BASEPRI, r1
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	4816      	ldr	r0, [pc, #88]	; (8006bc4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006b6a:	f7ff f95c 	bl	8005e26 <_PreparePacket>
 8006b6e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	61fb      	str	r3, [r7, #28]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	e00b      	b.n	8006b96 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	1c59      	adds	r1, r3, #1
 8006b86:	61f9      	str	r1, [r7, #28]
 8006b88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	09db      	lsrs	r3, r3, #7
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b7f      	cmp	r3, #127	; 0x7f
 8006b9a:	d8f0      	bhi.n	8006b7e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	61fa      	str	r2, [r7, #28]
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	68f9      	ldr	r1, [r7, #12]
 8006bb0:	6938      	ldr	r0, [r7, #16]
 8006bb2:	f7ff fa29 	bl	8006008 <_SendPacket>
  RECORD_END();
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f383 8811 	msr	BASEPRI, r3
}
 8006bbc:	bf00      	nop
 8006bbe:	3720      	adds	r7, #32
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	2001383c 	.word	0x2001383c

08006bc8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08c      	sub	sp, #48	; 0x30
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bd4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd8:	f04f 0120 	mov.w	r1, #32
 8006bdc:	f381 8811 	msr	BASEPRI, r1
 8006be0:	61fb      	str	r3, [r7, #28]
 8006be2:	4825      	ldr	r0, [pc, #148]	; (8006c78 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006be4:	f7ff f91f 	bl	8005e26 <_PreparePacket>
 8006be8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bf6:	e00b      	b.n	8006c10 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	1c59      	adds	r1, r3, #1
 8006c00:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	09db      	lsrs	r3, r3, #7
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	2b7f      	cmp	r3, #127	; 0x7f
 8006c14:	d8f0      	bhi.n	8006bf8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	623b      	str	r3, [r7, #32]
 8006c2e:	e00b      	b.n	8006c48 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	1c59      	adds	r1, r3, #1
 8006c38:	6279      	str	r1, [r7, #36]	; 0x24
 8006c3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	09db      	lsrs	r3, r3, #7
 8006c46:	623b      	str	r3, [r7, #32]
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c4c:	d8f0      	bhi.n	8006c30 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	627a      	str	r2, [r7, #36]	; 0x24
 8006c54:	6a3a      	ldr	r2, [r7, #32]
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	6979      	ldr	r1, [r7, #20]
 8006c62:	69b8      	ldr	r0, [r7, #24]
 8006c64:	f7ff f9d0 	bl	8006008 <_SendPacket>
  RECORD_END();
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	f383 8811 	msr	BASEPRI, r3
}
 8006c6e:	bf00      	nop
 8006c70:	3730      	adds	r7, #48	; 0x30
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	2001383c 	.word	0x2001383c

08006c7c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08e      	sub	sp, #56	; 0x38
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c8e:	f04f 0120 	mov.w	r1, #32
 8006c92:	f381 8811 	msr	BASEPRI, r1
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	4832      	ldr	r0, [pc, #200]	; (8006d64 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006c9a:	f7ff f8c4 	bl	8005e26 <_PreparePacket>
 8006c9e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	633b      	str	r3, [r7, #48]	; 0x30
 8006cac:	e00b      	b.n	8006cc6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb4:	1c59      	adds	r1, r3, #1
 8006cb6:	6379      	str	r1, [r7, #52]	; 0x34
 8006cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cbc:	b2d2      	uxtb	r2, r2
 8006cbe:	701a      	strb	r2, [r3, #0]
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	09db      	lsrs	r3, r3, #7
 8006cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cca:	d8f0      	bhi.n	8006cae <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	637a      	str	r2, [r7, #52]	; 0x34
 8006cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ce4:	e00b      	b.n	8006cfe <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	1c59      	adds	r1, r3, #1
 8006cee:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006cf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	701a      	strb	r2, [r3, #0]
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	09db      	lsrs	r3, r3, #7
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	2b7f      	cmp	r3, #127	; 0x7f
 8006d02:	d8f0      	bhi.n	8006ce6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]
 8006d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	627b      	str	r3, [r7, #36]	; 0x24
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	623b      	str	r3, [r7, #32]
 8006d1c:	e00b      	b.n	8006d36 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	1c59      	adds	r1, r3, #1
 8006d26:	6279      	str	r1, [r7, #36]	; 0x24
 8006d28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	09db      	lsrs	r3, r3, #7
 8006d34:	623b      	str	r3, [r7, #32]
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	2b7f      	cmp	r3, #127	; 0x7f
 8006d3a:	d8f0      	bhi.n	8006d1e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	627a      	str	r2, [r7, #36]	; 0x24
 8006d42:	6a3a      	ldr	r2, [r7, #32]
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	6979      	ldr	r1, [r7, #20]
 8006d50:	69b8      	ldr	r0, [r7, #24]
 8006d52:	f7ff f959 	bl	8006008 <_SendPacket>
  RECORD_END();
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	f383 8811 	msr	BASEPRI, r3
}
 8006d5c:	bf00      	nop
 8006d5e:	3738      	adds	r7, #56	; 0x38
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	2001383c 	.word	0x2001383c

08006d68 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b090      	sub	sp, #64	; 0x40
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d76:	f3ef 8311 	mrs	r3, BASEPRI
 8006d7a:	f04f 0120 	mov.w	r1, #32
 8006d7e:	f381 8811 	msr	BASEPRI, r1
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	4840      	ldr	r0, [pc, #256]	; (8006e88 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006d86:	f7ff f84e 	bl	8005e26 <_PreparePacket>
 8006d8a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d98:	e00b      	b.n	8006db2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da0:	1c59      	adds	r1, r3, #1
 8006da2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006da4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	701a      	strb	r2, [r3, #0]
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	09db      	lsrs	r3, r3, #7
 8006db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	2b7f      	cmp	r3, #127	; 0x7f
 8006db6:	d8f0      	bhi.n	8006d9a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	637b      	str	r3, [r7, #52]	; 0x34
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd0:	e00b      	b.n	8006dea <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd8:	1c59      	adds	r1, r3, #1
 8006dda:	6379      	str	r1, [r7, #52]	; 0x34
 8006ddc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	701a      	strb	r2, [r3, #0]
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	09db      	lsrs	r3, r3, #7
 8006de8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	2b7f      	cmp	r3, #127	; 0x7f
 8006dee:	d8f0      	bhi.n	8006dd2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	637a      	str	r2, [r7, #52]	; 0x34
 8006df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e08:	e00b      	b.n	8006e22 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	1c59      	adds	r1, r3, #1
 8006e12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	09db      	lsrs	r3, r3, #7
 8006e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	2b7f      	cmp	r3, #127	; 0x7f
 8006e26:	d8f0      	bhi.n	8006e0a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e3e:	623b      	str	r3, [r7, #32]
 8006e40:	e00b      	b.n	8006e5a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	1c59      	adds	r1, r3, #1
 8006e4a:	6279      	str	r1, [r7, #36]	; 0x24
 8006e4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	09db      	lsrs	r3, r3, #7
 8006e58:	623b      	str	r3, [r7, #32]
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e5e:	d8f0      	bhi.n	8006e42 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	627a      	str	r2, [r7, #36]	; 0x24
 8006e66:	6a3a      	ldr	r2, [r7, #32]
 8006e68:	b2d2      	uxtb	r2, r2
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	6979      	ldr	r1, [r7, #20]
 8006e74:	69b8      	ldr	r0, [r7, #24]
 8006e76:	f7ff f8c7 	bl	8006008 <_SendPacket>
  RECORD_END();
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	f383 8811 	msr	BASEPRI, r3
}
 8006e80:	bf00      	nop
 8006e82:	3740      	adds	r7, #64	; 0x40
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	2001383c 	.word	0x2001383c

08006e8c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b092      	sub	sp, #72	; 0x48
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e9e:	f04f 0120 	mov.w	r1, #32
 8006ea2:	f381 8811 	msr	BASEPRI, r1
 8006ea6:	61fb      	str	r3, [r7, #28]
 8006ea8:	484e      	ldr	r0, [pc, #312]	; (8006fe4 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8006eaa:	f7fe ffbc 	bl	8005e26 <_PreparePacket>
 8006eae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	643b      	str	r3, [r7, #64]	; 0x40
 8006ebc:	e00b      	b.n	8006ed6 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8006ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec4:	1c59      	adds	r1, r3, #1
 8006ec6:	6479      	str	r1, [r7, #68]	; 0x44
 8006ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed2:	09db      	lsrs	r3, r3, #7
 8006ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8006eda:	d8f0      	bhi.n	8006ebe <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	647a      	str	r2, [r7, #68]	; 0x44
 8006ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ef4:	e00b      	b.n	8006f0e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efc:	1c59      	adds	r1, r3, #1
 8006efe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	09db      	lsrs	r3, r3, #7
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	2b7f      	cmp	r3, #127	; 0x7f
 8006f12:	d8f0      	bhi.n	8006ef6 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8006f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	637b      	str	r3, [r7, #52]	; 0x34
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f2c:	e00b      	b.n	8006f46 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f34:	1c59      	adds	r1, r3, #1
 8006f36:	6379      	str	r1, [r7, #52]	; 0x34
 8006f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	09db      	lsrs	r3, r3, #7
 8006f44:	633b      	str	r3, [r7, #48]	; 0x30
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	2b7f      	cmp	r3, #127	; 0x7f
 8006f4a:	d8f0      	bhi.n	8006f2e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	637a      	str	r2, [r7, #52]	; 0x34
 8006f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f54:	b2d2      	uxtb	r2, r2
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f64:	e00b      	b.n	8006f7e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	1c59      	adds	r1, r3, #1
 8006f6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	09db      	lsrs	r3, r3, #7
 8006f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	2b7f      	cmp	r3, #127	; 0x7f
 8006f82:	d8f0      	bhi.n	8006f66 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
 8006f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f9a:	623b      	str	r3, [r7, #32]
 8006f9c:	e00b      	b.n	8006fb6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	1c59      	adds	r1, r3, #1
 8006fa6:	6279      	str	r1, [r7, #36]	; 0x24
 8006fa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	09db      	lsrs	r3, r3, #7
 8006fb4:	623b      	str	r3, [r7, #32]
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8006fba:	d8f0      	bhi.n	8006f9e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	627a      	str	r2, [r7, #36]	; 0x24
 8006fc2:	6a3a      	ldr	r2, [r7, #32]
 8006fc4:	b2d2      	uxtb	r2, r2
 8006fc6:	701a      	strb	r2, [r3, #0]
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	6979      	ldr	r1, [r7, #20]
 8006fd0:	69b8      	ldr	r0, [r7, #24]
 8006fd2:	f7ff f819 	bl	8006008 <_SendPacket>
  RECORD_END();
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	f383 8811 	msr	BASEPRI, r3
}
 8006fdc:	bf00      	nop
 8006fde:	3748      	adds	r7, #72	; 0x48
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	2001383c 	.word	0x2001383c

08006fe8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08c      	sub	sp, #48	; 0x30
 8006fec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006fee:	4b59      	ldr	r3, [pc, #356]	; (8007154 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ff8:	f04f 0120 	mov.w	r1, #32
 8006ffc:	f381 8811 	msr	BASEPRI, r1
 8007000:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007002:	4b54      	ldr	r3, [pc, #336]	; (8007154 <SEGGER_SYSVIEW_Start+0x16c>)
 8007004:	785b      	ldrb	r3, [r3, #1]
 8007006:	220a      	movs	r2, #10
 8007008:	4953      	ldr	r1, [pc, #332]	; (8007158 <SEGGER_SYSVIEW_Start+0x170>)
 800700a:	4618      	mov	r0, r3
 800700c:	f7f9 f8e0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8007016:	f7fe fa59 	bl	80054cc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800701a:	200a      	movs	r0, #10
 800701c:	f7ff fd7a 	bl	8006b14 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007020:	f3ef 8311 	mrs	r3, BASEPRI
 8007024:	f04f 0120 	mov.w	r1, #32
 8007028:	f381 8811 	msr	BASEPRI, r1
 800702c:	60bb      	str	r3, [r7, #8]
 800702e:	484b      	ldr	r0, [pc, #300]	; (800715c <SEGGER_SYSVIEW_Start+0x174>)
 8007030:	f7fe fef9 	bl	8005e26 <_PreparePacket>
 8007034:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800703e:	4b45      	ldr	r3, [pc, #276]	; (8007154 <SEGGER_SYSVIEW_Start+0x16c>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	62bb      	str	r3, [r7, #40]	; 0x28
 8007044:	e00b      	b.n	800705e <SEGGER_SYSVIEW_Start+0x76>
 8007046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007048:	b2da      	uxtb	r2, r3
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	1c59      	adds	r1, r3, #1
 800704e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007050:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	09db      	lsrs	r3, r3, #7
 800705c:	62bb      	str	r3, [r7, #40]	; 0x28
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	2b7f      	cmp	r3, #127	; 0x7f
 8007062:	d8f0      	bhi.n	8007046 <SEGGER_SYSVIEW_Start+0x5e>
 8007064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	62fa      	str	r2, [r7, #44]	; 0x2c
 800706a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	701a      	strb	r2, [r3, #0]
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
 8007078:	4b36      	ldr	r3, [pc, #216]	; (8007154 <SEGGER_SYSVIEW_Start+0x16c>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	623b      	str	r3, [r7, #32]
 800707e:	e00b      	b.n	8007098 <SEGGER_SYSVIEW_Start+0xb0>
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	b2da      	uxtb	r2, r3
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	1c59      	adds	r1, r3, #1
 8007088:	6279      	str	r1, [r7, #36]	; 0x24
 800708a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	09db      	lsrs	r3, r3, #7
 8007096:	623b      	str	r3, [r7, #32]
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	2b7f      	cmp	r3, #127	; 0x7f
 800709c:	d8f0      	bhi.n	8007080 <SEGGER_SYSVIEW_Start+0x98>
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	627a      	str	r2, [r7, #36]	; 0x24
 80070a4:	6a3a      	ldr	r2, [r7, #32]
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	61fb      	str	r3, [r7, #28]
 80070b2:	4b28      	ldr	r3, [pc, #160]	; (8007154 <SEGGER_SYSVIEW_Start+0x16c>)
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	61bb      	str	r3, [r7, #24]
 80070b8:	e00b      	b.n	80070d2 <SEGGER_SYSVIEW_Start+0xea>
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	1c59      	adds	r1, r3, #1
 80070c2:	61f9      	str	r1, [r7, #28]
 80070c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070c8:	b2d2      	uxtb	r2, r2
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	09db      	lsrs	r3, r3, #7
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	2b7f      	cmp	r3, #127	; 0x7f
 80070d6:	d8f0      	bhi.n	80070ba <SEGGER_SYSVIEW_Start+0xd2>
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	61fa      	str	r2, [r7, #28]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	2300      	movs	r3, #0
 80070ee:	613b      	str	r3, [r7, #16]
 80070f0:	e00b      	b.n	800710a <SEGGER_SYSVIEW_Start+0x122>
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	1c59      	adds	r1, r3, #1
 80070fa:	6179      	str	r1, [r7, #20]
 80070fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	701a      	strb	r2, [r3, #0]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	09db      	lsrs	r3, r3, #7
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b7f      	cmp	r3, #127	; 0x7f
 800710e:	d8f0      	bhi.n	80070f2 <SEGGER_SYSVIEW_Start+0x10a>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	617a      	str	r2, [r7, #20]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	b2d2      	uxtb	r2, r2
 800711a:	701a      	strb	r2, [r3, #0]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007120:	2218      	movs	r2, #24
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7fe ff6f 	bl	8006008 <_SendPacket>
      RECORD_END();
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007130:	4b08      	ldr	r3, [pc, #32]	; (8007154 <SEGGER_SYSVIEW_Start+0x16c>)
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <SEGGER_SYSVIEW_Start+0x16c>)
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800713e:	f000 f9eb 	bl	8007518 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007142:	f000 f9b1 	bl	80074a8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007146:	f000 fc2d 	bl	80079a4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800714a:	bf00      	nop
 800714c:	3730      	adds	r7, #48	; 0x30
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	2001380c 	.word	0x2001380c
 8007158:	08008db0 	.word	0x08008db0
 800715c:	2001383c 	.word	0x2001383c

08007160 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007166:	f3ef 8311 	mrs	r3, BASEPRI
 800716a:	f04f 0120 	mov.w	r1, #32
 800716e:	f381 8811 	msr	BASEPRI, r1
 8007172:	607b      	str	r3, [r7, #4]
 8007174:	480b      	ldr	r0, [pc, #44]	; (80071a4 <SEGGER_SYSVIEW_Stop+0x44>)
 8007176:	f7fe fe56 	bl	8005e26 <_PreparePacket>
 800717a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800717c:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <SEGGER_SYSVIEW_Stop+0x48>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007184:	220b      	movs	r2, #11
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6838      	ldr	r0, [r7, #0]
 800718a:	f7fe ff3d 	bl	8006008 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800718e:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <SEGGER_SYSVIEW_Stop+0x48>)
 8007190:	2200      	movs	r2, #0
 8007192:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f383 8811 	msr	BASEPRI, r3
}
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	2001383c 	.word	0x2001383c
 80071a8:	2001380c 	.word	0x2001380c

080071ac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08c      	sub	sp, #48	; 0x30
 80071b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80071b2:	f3ef 8311 	mrs	r3, BASEPRI
 80071b6:	f04f 0120 	mov.w	r1, #32
 80071ba:	f381 8811 	msr	BASEPRI, r1
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	4845      	ldr	r0, [pc, #276]	; (80072d8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80071c2:	f7fe fe30 	bl	8005e26 <_PreparePacket>
 80071c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071d0:	4b42      	ldr	r3, [pc, #264]	; (80072dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80071d6:	e00b      	b.n	80071f0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80071d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	1c59      	adds	r1, r3, #1
 80071e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80071e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	09db      	lsrs	r3, r3, #7
 80071ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	2b7f      	cmp	r3, #127	; 0x7f
 80071f4:	d8f0      	bhi.n	80071d8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007204:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
 800720a:	4b34      	ldr	r3, [pc, #208]	; (80072dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	623b      	str	r3, [r7, #32]
 8007210:	e00b      	b.n	800722a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	b2da      	uxtb	r2, r3
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	1c59      	adds	r1, r3, #1
 800721a:	6279      	str	r1, [r7, #36]	; 0x24
 800721c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007220:	b2d2      	uxtb	r2, r2
 8007222:	701a      	strb	r2, [r3, #0]
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	09db      	lsrs	r3, r3, #7
 8007228:	623b      	str	r3, [r7, #32]
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	2b7f      	cmp	r3, #127	; 0x7f
 800722e:	d8f0      	bhi.n	8007212 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	627a      	str	r2, [r7, #36]	; 0x24
 8007236:	6a3a      	ldr	r2, [r7, #32]
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	701a      	strb	r2, [r3, #0]
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	61fb      	str	r3, [r7, #28]
 8007244:	4b25      	ldr	r3, [pc, #148]	; (80072dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	e00b      	b.n	8007264 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	b2da      	uxtb	r2, r3
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	1c59      	adds	r1, r3, #1
 8007254:	61f9      	str	r1, [r7, #28]
 8007256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	09db      	lsrs	r3, r3, #7
 8007262:	61bb      	str	r3, [r7, #24]
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	2b7f      	cmp	r3, #127	; 0x7f
 8007268:	d8f0      	bhi.n	800724c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	61fa      	str	r2, [r7, #28]
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	2300      	movs	r3, #0
 8007280:	613b      	str	r3, [r7, #16]
 8007282:	e00b      	b.n	800729c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	b2da      	uxtb	r2, r3
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	1c59      	adds	r1, r3, #1
 800728c:	6179      	str	r1, [r7, #20]
 800728e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	09db      	lsrs	r3, r3, #7
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	2b7f      	cmp	r3, #127	; 0x7f
 80072a0:	d8f0      	bhi.n	8007284 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	617a      	str	r2, [r7, #20]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80072b2:	2218      	movs	r2, #24
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	68b8      	ldr	r0, [r7, #8]
 80072b8:	f7fe fea6 	bl	8006008 <_SendPacket>
  RECORD_END();
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80072c2:	4b06      	ldr	r3, [pc, #24]	; (80072dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80072ca:	4b04      	ldr	r3, [pc, #16]	; (80072dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	4798      	blx	r3
  }
}
 80072d0:	bf00      	nop
 80072d2:	3730      	adds	r7, #48	; 0x30
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	2001383c 	.word	0x2001383c
 80072dc:	2001380c 	.word	0x2001380c

080072e0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b092      	sub	sp, #72	; 0x48
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80072e8:	f3ef 8311 	mrs	r3, BASEPRI
 80072ec:	f04f 0120 	mov.w	r1, #32
 80072f0:	f381 8811 	msr	BASEPRI, r1
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	486a      	ldr	r0, [pc, #424]	; (80074a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80072f8:	f7fe fd95 	bl	8005e26 <_PreparePacket>
 80072fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	647b      	str	r3, [r7, #68]	; 0x44
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b66      	ldr	r3, [pc, #408]	; (80074a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	643b      	str	r3, [r7, #64]	; 0x40
 8007312:	e00b      	b.n	800732c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007316:	b2da      	uxtb	r2, r3
 8007318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800731a:	1c59      	adds	r1, r3, #1
 800731c:	6479      	str	r1, [r7, #68]	; 0x44
 800731e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007328:	09db      	lsrs	r3, r3, #7
 800732a:	643b      	str	r3, [r7, #64]	; 0x40
 800732c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800732e:	2b7f      	cmp	r3, #127	; 0x7f
 8007330:	d8f0      	bhi.n	8007314 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	647a      	str	r2, [r7, #68]	; 0x44
 8007338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007340:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	63bb      	str	r3, [r7, #56]	; 0x38
 800734c:	e00b      	b.n	8007366 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	b2da      	uxtb	r2, r3
 8007352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007354:	1c59      	adds	r1, r3, #1
 8007356:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007358:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	09db      	lsrs	r3, r3, #7
 8007364:	63bb      	str	r3, [r7, #56]	; 0x38
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	2b7f      	cmp	r3, #127	; 0x7f
 800736a:	d8f0      	bhi.n	800734e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800736c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	701a      	strb	r2, [r3, #0]
 8007378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	4619      	mov	r1, r3
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f7fe fd15 	bl	8005db4 <_EncodeStr>
 800738a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800738c:	2209      	movs	r2, #9
 800738e:	68f9      	ldr	r1, [r7, #12]
 8007390:	6938      	ldr	r0, [r7, #16]
 8007392:	f7fe fe39 	bl	8006008 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4b40      	ldr	r3, [pc, #256]	; (80074a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	633b      	str	r3, [r7, #48]	; 0x30
 80073aa:	e00b      	b.n	80073c4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b2:	1c59      	adds	r1, r3, #1
 80073b4:	6379      	str	r1, [r7, #52]	; 0x34
 80073b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	09db      	lsrs	r3, r3, #7
 80073c2:	633b      	str	r3, [r7, #48]	; 0x30
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	2b7f      	cmp	r3, #127	; 0x7f
 80073c8:	d8f0      	bhi.n	80073ac <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80073ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	637a      	str	r2, [r7, #52]	; 0x34
 80073d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80073e4:	e00b      	b.n	80073fe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	1c59      	adds	r1, r3, #1
 80073ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80073f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fa:	09db      	lsrs	r3, r3, #7
 80073fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	2b7f      	cmp	r3, #127	; 0x7f
 8007402:	d8f0      	bhi.n	80073e6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	62fa      	str	r2, [r7, #44]	; 0x2c
 800740a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800740c:	b2d2      	uxtb	r2, r2
 800740e:	701a      	strb	r2, [r3, #0]
 8007410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007412:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	623b      	str	r3, [r7, #32]
 800741e:	e00b      	b.n	8007438 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	b2da      	uxtb	r2, r3
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	1c59      	adds	r1, r3, #1
 8007428:	6279      	str	r1, [r7, #36]	; 0x24
 800742a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	701a      	strb	r2, [r3, #0]
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	09db      	lsrs	r3, r3, #7
 8007436:	623b      	str	r3, [r7, #32]
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	2b7f      	cmp	r3, #127	; 0x7f
 800743c:	d8f0      	bhi.n	8007420 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	627a      	str	r2, [r7, #36]	; 0x24
 8007444:	6a3a      	ldr	r2, [r7, #32]
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	61fb      	str	r3, [r7, #28]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	61bb      	str	r3, [r7, #24]
 8007458:	e00b      	b.n	8007472 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	b2da      	uxtb	r2, r3
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	1c59      	adds	r1, r3, #1
 8007462:	61f9      	str	r1, [r7, #28]
 8007464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007468:	b2d2      	uxtb	r2, r2
 800746a:	701a      	strb	r2, [r3, #0]
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	09db      	lsrs	r3, r3, #7
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	2b7f      	cmp	r3, #127	; 0x7f
 8007476:	d8f0      	bhi.n	800745a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	61fa      	str	r2, [r7, #28]
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007488:	2215      	movs	r2, #21
 800748a:	68f9      	ldr	r1, [r7, #12]
 800748c:	6938      	ldr	r0, [r7, #16]
 800748e:	f7fe fdbb 	bl	8006008 <_SendPacket>
  RECORD_END();
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f383 8811 	msr	BASEPRI, r3
}
 8007498:	bf00      	nop
 800749a:	3748      	adds	r7, #72	; 0x48
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	2001383c 	.word	0x2001383c
 80074a4:	2001380c 	.word	0x2001380c

080074a8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80074ac:	4b07      	ldr	r3, [pc, #28]	; (80074cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d008      	beq.n	80074c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80074b4:	4b05      	ldr	r3, [pc, #20]	; (80074cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80074be:	4b03      	ldr	r3, [pc, #12]	; (80074cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	4798      	blx	r3
  }
}
 80074c6:	bf00      	nop
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	2001380c 	.word	0x2001380c

080074d0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074d8:	f3ef 8311 	mrs	r3, BASEPRI
 80074dc:	f04f 0120 	mov.w	r1, #32
 80074e0:	f381 8811 	msr	BASEPRI, r1
 80074e4:	617b      	str	r3, [r7, #20]
 80074e6:	480b      	ldr	r0, [pc, #44]	; (8007514 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80074e8:	f7fe fc9d 	bl	8005e26 <_PreparePacket>
 80074ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074ee:	2280      	movs	r2, #128	; 0x80
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	6938      	ldr	r0, [r7, #16]
 80074f4:	f7fe fc5e 	bl	8005db4 <_EncodeStr>
 80074f8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80074fa:	220e      	movs	r2, #14
 80074fc:	68f9      	ldr	r1, [r7, #12]
 80074fe:	6938      	ldr	r0, [r7, #16]
 8007500:	f7fe fd82 	bl	8006008 <_SendPacket>
  RECORD_END();
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f383 8811 	msr	BASEPRI, r3
}
 800750a:	bf00      	nop
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	2001383c 	.word	0x2001383c

08007518 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007518:	b590      	push	{r4, r7, lr}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800751e:	4b15      	ldr	r3, [pc, #84]	; (8007574 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d01a      	beq.n	800755c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007526:	4b13      	ldr	r3, [pc, #76]	; (8007574 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d015      	beq.n	800755c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007530:	4b10      	ldr	r3, [pc, #64]	; (8007574 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4798      	blx	r3
 8007538:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800753c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800753e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007542:	f04f 0200 	mov.w	r2, #0
 8007546:	f04f 0300 	mov.w	r3, #0
 800754a:	000a      	movs	r2, r1
 800754c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800754e:	4613      	mov	r3, r2
 8007550:	461a      	mov	r2, r3
 8007552:	4621      	mov	r1, r4
 8007554:	200d      	movs	r0, #13
 8007556:	f7ff fb37 	bl	8006bc8 <SEGGER_SYSVIEW_RecordU32x2>
 800755a:	e006      	b.n	800756a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4619      	mov	r1, r3
 8007562:	200c      	movs	r0, #12
 8007564:	f7ff faf4 	bl	8006b50 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	bd90      	pop	{r4, r7, pc}
 8007572:	bf00      	nop
 8007574:	2001380c 	.word	0x2001380c
 8007578:	e0001004 	.word	0xe0001004

0800757c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007582:	f3ef 8311 	mrs	r3, BASEPRI
 8007586:	f04f 0120 	mov.w	r1, #32
 800758a:	f381 8811 	msr	BASEPRI, r1
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	4819      	ldr	r0, [pc, #100]	; (80075f8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007592:	f7fe fc48 	bl	8005e26 <_PreparePacket>
 8007596:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800759c:	4b17      	ldr	r3, [pc, #92]	; (80075fc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	617b      	str	r3, [r7, #20]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	613b      	str	r3, [r7, #16]
 80075ae:	e00b      	b.n	80075c8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	1c59      	adds	r1, r3, #1
 80075b8:	6179      	str	r1, [r7, #20]
 80075ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	09db      	lsrs	r3, r3, #7
 80075c6:	613b      	str	r3, [r7, #16]
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	2b7f      	cmp	r3, #127	; 0x7f
 80075cc:	d8f0      	bhi.n	80075b0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	1c5a      	adds	r2, r3, #1
 80075d2:	617a      	str	r2, [r7, #20]
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80075de:	2202      	movs	r2, #2
 80075e0:	6879      	ldr	r1, [r7, #4]
 80075e2:	68b8      	ldr	r0, [r7, #8]
 80075e4:	f7fe fd10 	bl	8006008 <_SendPacket>
  RECORD_END();
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f383 8811 	msr	BASEPRI, r3
}
 80075ee:	bf00      	nop
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	2001383c 	.word	0x2001383c
 80075fc:	e000ed04 	.word	0xe000ed04

08007600 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007606:	f3ef 8311 	mrs	r3, BASEPRI
 800760a:	f04f 0120 	mov.w	r1, #32
 800760e:	f381 8811 	msr	BASEPRI, r1
 8007612:	607b      	str	r3, [r7, #4]
 8007614:	4807      	ldr	r0, [pc, #28]	; (8007634 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007616:	f7fe fc06 	bl	8005e26 <_PreparePacket>
 800761a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800761c:	2203      	movs	r2, #3
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6838      	ldr	r0, [r7, #0]
 8007622:	f7fe fcf1 	bl	8006008 <_SendPacket>
  RECORD_END();
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f383 8811 	msr	BASEPRI, r3
}
 800762c:	bf00      	nop
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	2001383c 	.word	0x2001383c

08007638 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800763e:	f3ef 8311 	mrs	r3, BASEPRI
 8007642:	f04f 0120 	mov.w	r1, #32
 8007646:	f381 8811 	msr	BASEPRI, r1
 800764a:	607b      	str	r3, [r7, #4]
 800764c:	4807      	ldr	r0, [pc, #28]	; (800766c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800764e:	f7fe fbea 	bl	8005e26 <_PreparePacket>
 8007652:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007654:	2212      	movs	r2, #18
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6838      	ldr	r0, [r7, #0]
 800765a:	f7fe fcd5 	bl	8006008 <_SendPacket>
  RECORD_END();
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f383 8811 	msr	BASEPRI, r3
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	2001383c 	.word	0x2001383c

08007670 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007676:	f3ef 8311 	mrs	r3, BASEPRI
 800767a:	f04f 0120 	mov.w	r1, #32
 800767e:	f381 8811 	msr	BASEPRI, r1
 8007682:	607b      	str	r3, [r7, #4]
 8007684:	4807      	ldr	r0, [pc, #28]	; (80076a4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007686:	f7fe fbce 	bl	8005e26 <_PreparePacket>
 800768a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800768c:	2211      	movs	r2, #17
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6838      	ldr	r0, [r7, #0]
 8007692:	f7fe fcb9 	bl	8006008 <_SendPacket>
  RECORD_END();
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f383 8811 	msr	BASEPRI, r3
}
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	2001383c 	.word	0x2001383c

080076a8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80076b0:	f3ef 8311 	mrs	r3, BASEPRI
 80076b4:	f04f 0120 	mov.w	r1, #32
 80076b8:	f381 8811 	msr	BASEPRI, r1
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	4819      	ldr	r0, [pc, #100]	; (8007724 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80076c0:	f7fe fbb1 	bl	8005e26 <_PreparePacket>
 80076c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80076ca:	4b17      	ldr	r3, [pc, #92]	; (8007728 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	61fb      	str	r3, [r7, #28]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	61bb      	str	r3, [r7, #24]
 80076dc:	e00b      	b.n	80076f6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	1c59      	adds	r1, r3, #1
 80076e6:	61f9      	str	r1, [r7, #28]
 80076e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	701a      	strb	r2, [r3, #0]
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	09db      	lsrs	r3, r3, #7
 80076f4:	61bb      	str	r3, [r7, #24]
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	2b7f      	cmp	r3, #127	; 0x7f
 80076fa:	d8f0      	bhi.n	80076de <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	61fa      	str	r2, [r7, #28]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	b2d2      	uxtb	r2, r2
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800770c:	2208      	movs	r2, #8
 800770e:	68f9      	ldr	r1, [r7, #12]
 8007710:	6938      	ldr	r0, [r7, #16]
 8007712:	f7fe fc79 	bl	8006008 <_SendPacket>
  RECORD_END();
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f383 8811 	msr	BASEPRI, r3
}
 800771c:	bf00      	nop
 800771e:	3720      	adds	r7, #32
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	2001383c 	.word	0x2001383c
 8007728:	2001380c 	.word	0x2001380c

0800772c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007734:	f3ef 8311 	mrs	r3, BASEPRI
 8007738:	f04f 0120 	mov.w	r1, #32
 800773c:	f381 8811 	msr	BASEPRI, r1
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	4819      	ldr	r0, [pc, #100]	; (80077a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007744:	f7fe fb6f 	bl	8005e26 <_PreparePacket>
 8007748:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800774e:	4b17      	ldr	r3, [pc, #92]	; (80077ac <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	61fb      	str	r3, [r7, #28]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	61bb      	str	r3, [r7, #24]
 8007760:	e00b      	b.n	800777a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	b2da      	uxtb	r2, r3
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	1c59      	adds	r1, r3, #1
 800776a:	61f9      	str	r1, [r7, #28]
 800776c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007770:	b2d2      	uxtb	r2, r2
 8007772:	701a      	strb	r2, [r3, #0]
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	09db      	lsrs	r3, r3, #7
 8007778:	61bb      	str	r3, [r7, #24]
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b7f      	cmp	r3, #127	; 0x7f
 800777e:	d8f0      	bhi.n	8007762 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	61fa      	str	r2, [r7, #28]
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	b2d2      	uxtb	r2, r2
 800778a:	701a      	strb	r2, [r3, #0]
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007790:	2204      	movs	r2, #4
 8007792:	68f9      	ldr	r1, [r7, #12]
 8007794:	6938      	ldr	r0, [r7, #16]
 8007796:	f7fe fc37 	bl	8006008 <_SendPacket>
  RECORD_END();
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f383 8811 	msr	BASEPRI, r3
}
 80077a0:	bf00      	nop
 80077a2:	3720      	adds	r7, #32
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	2001383c 	.word	0x2001383c
 80077ac:	2001380c 	.word	0x2001380c

080077b0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80077b8:	f3ef 8311 	mrs	r3, BASEPRI
 80077bc:	f04f 0120 	mov.w	r1, #32
 80077c0:	f381 8811 	msr	BASEPRI, r1
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	4819      	ldr	r0, [pc, #100]	; (800782c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80077c8:	f7fe fb2d 	bl	8005e26 <_PreparePacket>
 80077cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80077d2:	4b17      	ldr	r3, [pc, #92]	; (8007830 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	61fb      	str	r3, [r7, #28]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	61bb      	str	r3, [r7, #24]
 80077e4:	e00b      	b.n	80077fe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	1c59      	adds	r1, r3, #1
 80077ee:	61f9      	str	r1, [r7, #28]
 80077f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077f4:	b2d2      	uxtb	r2, r2
 80077f6:	701a      	strb	r2, [r3, #0]
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	09db      	lsrs	r3, r3, #7
 80077fc:	61bb      	str	r3, [r7, #24]
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b7f      	cmp	r3, #127	; 0x7f
 8007802:	d8f0      	bhi.n	80077e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	61fa      	str	r2, [r7, #28]
 800780a:	69ba      	ldr	r2, [r7, #24]
 800780c:	b2d2      	uxtb	r2, r2
 800780e:	701a      	strb	r2, [r3, #0]
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007814:	2206      	movs	r2, #6
 8007816:	68f9      	ldr	r1, [r7, #12]
 8007818:	6938      	ldr	r0, [r7, #16]
 800781a:	f7fe fbf5 	bl	8006008 <_SendPacket>
  RECORD_END();
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f383 8811 	msr	BASEPRI, r3
}
 8007824:	bf00      	nop
 8007826:	3720      	adds	r7, #32
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	2001383c 	.word	0x2001383c
 8007830:	2001380c 	.word	0x2001380c

08007834 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800783c:	4b04      	ldr	r3, [pc, #16]	; (8007850 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	1ad3      	subs	r3, r2, r3
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	2001380c 	.word	0x2001380c

08007854 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007854:	b580      	push	{r7, lr}
 8007856:	b08c      	sub	sp, #48	; 0x30
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800785e:	4b40      	ldr	r3, [pc, #256]	; (8007960 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d077      	beq.n	8007956 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007866:	4b3e      	ldr	r3, [pc, #248]	; (8007960 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800786c:	2300      	movs	r3, #0
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007870:	e008      	b.n	8007884 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d007      	beq.n	800788e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	3301      	adds	r3, #1
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007888:	429a      	cmp	r2, r3
 800788a:	d3f2      	bcc.n	8007872 <SEGGER_SYSVIEW_SendModule+0x1e>
 800788c:	e000      	b.n	8007890 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800788e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d055      	beq.n	8007942 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007896:	f3ef 8311 	mrs	r3, BASEPRI
 800789a:	f04f 0120 	mov.w	r1, #32
 800789e:	f381 8811 	msr	BASEPRI, r1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	482f      	ldr	r0, [pc, #188]	; (8007964 <SEGGER_SYSVIEW_SendModule+0x110>)
 80078a6:	f7fe fabe 	bl	8005e26 <_PreparePacket>
 80078aa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	623b      	str	r3, [r7, #32]
 80078b8:	e00b      	b.n	80078d2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	1c59      	adds	r1, r3, #1
 80078c2:	6279      	str	r1, [r7, #36]	; 0x24
 80078c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078c8:	b2d2      	uxtb	r2, r2
 80078ca:	701a      	strb	r2, [r3, #0]
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	09db      	lsrs	r3, r3, #7
 80078d0:	623b      	str	r3, [r7, #32]
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	2b7f      	cmp	r3, #127	; 0x7f
 80078d6:	d8f0      	bhi.n	80078ba <SEGGER_SYSVIEW_SendModule+0x66>
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	627a      	str	r2, [r7, #36]	; 0x24
 80078de:	6a3a      	ldr	r2, [r7, #32]
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	701a      	strb	r2, [r3, #0]
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	61fb      	str	r3, [r7, #28]
 80078ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	61bb      	str	r3, [r7, #24]
 80078f2:	e00b      	b.n	800790c <SEGGER_SYSVIEW_SendModule+0xb8>
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	1c59      	adds	r1, r3, #1
 80078fc:	61f9      	str	r1, [r7, #28]
 80078fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	09db      	lsrs	r3, r3, #7
 800790a:	61bb      	str	r3, [r7, #24]
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	2b7f      	cmp	r3, #127	; 0x7f
 8007910:	d8f0      	bhi.n	80078f4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	61fa      	str	r2, [r7, #28]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2280      	movs	r2, #128	; 0x80
 8007928:	4619      	mov	r1, r3
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f7fe fa42 	bl	8005db4 <_EncodeStr>
 8007930:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007932:	2216      	movs	r2, #22
 8007934:	68f9      	ldr	r1, [r7, #12]
 8007936:	6938      	ldr	r0, [r7, #16]
 8007938:	f7fe fb66 	bl	8006008 <_SendPacket>
      RECORD_END();
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d006      	beq.n	8007956 <SEGGER_SYSVIEW_SendModule+0x102>
 8007948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	4798      	blx	r3
    }
  }
}
 8007956:	bf00      	nop
 8007958:	3730      	adds	r7, #48	; 0x30
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20013834 	.word	0x20013834
 8007964:	2001383c 	.word	0x2001383c

08007968 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800796e:	4b0c      	ldr	r3, [pc, #48]	; (80079a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00f      	beq.n	8007996 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007976:	4b0a      	ldr	r3, [pc, #40]	; (80079a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1f2      	bne.n	800797c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007996:	bf00      	nop
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20013834 	.word	0x20013834

080079a4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80079aa:	f3ef 8311 	mrs	r3, BASEPRI
 80079ae:	f04f 0120 	mov.w	r1, #32
 80079b2:	f381 8811 	msr	BASEPRI, r1
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	4817      	ldr	r0, [pc, #92]	; (8007a18 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80079ba:	f7fe fa34 	bl	8005e26 <_PreparePacket>
 80079be:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	4b14      	ldr	r3, [pc, #80]	; (8007a1c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	613b      	str	r3, [r7, #16]
 80079ce:	e00b      	b.n	80079e8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	1c59      	adds	r1, r3, #1
 80079d8:	6179      	str	r1, [r7, #20]
 80079da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079de:	b2d2      	uxtb	r2, r2
 80079e0:	701a      	strb	r2, [r3, #0]
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	09db      	lsrs	r3, r3, #7
 80079e6:	613b      	str	r3, [r7, #16]
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	2b7f      	cmp	r3, #127	; 0x7f
 80079ec:	d8f0      	bhi.n	80079d0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	617a      	str	r2, [r7, #20]
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	b2d2      	uxtb	r2, r2
 80079f8:	701a      	strb	r2, [r3, #0]
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80079fe:	221b      	movs	r2, #27
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	68b8      	ldr	r0, [r7, #8]
 8007a04:	f7fe fb00 	bl	8006008 <_SendPacket>
  RECORD_END();
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f383 8811 	msr	BASEPRI, r3
}
 8007a0e:	bf00      	nop
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	2001383c 	.word	0x2001383c
 8007a1c:	20013838 	.word	0x20013838

08007a20 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007a20:	b40f      	push	{r0, r1, r2, r3}
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007a28:	f107 0314 	add.w	r3, r7, #20
 8007a2c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007a2e:	1d3b      	adds	r3, r7, #4
 8007a30:	461a      	mov	r2, r3
 8007a32:	2100      	movs	r1, #0
 8007a34:	6938      	ldr	r0, [r7, #16]
 8007a36:	f7fe fdf9 	bl	800662c <_VPrintTarget>
  va_end(ParamList);
}
 8007a3a:	bf00      	nop
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a44:	b004      	add	sp, #16
 8007a46:	4770      	bx	lr

08007a48 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08a      	sub	sp, #40	; 0x28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a50:	f3ef 8311 	mrs	r3, BASEPRI
 8007a54:	f04f 0120 	mov.w	r1, #32
 8007a58:	f381 8811 	msr	BASEPRI, r1
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	4827      	ldr	r0, [pc, #156]	; (8007afc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007a60:	f7fe f9e1 	bl	8005e26 <_PreparePacket>
 8007a64:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a66:	2280      	movs	r2, #128	; 0x80
 8007a68:	6879      	ldr	r1, [r7, #4]
 8007a6a:	6938      	ldr	r0, [r7, #16]
 8007a6c:	f7fe f9a2 	bl	8005db4 <_EncodeStr>
 8007a70:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
 8007a76:	2301      	movs	r3, #1
 8007a78:	623b      	str	r3, [r7, #32]
 8007a7a:	e00b      	b.n	8007a94 <SEGGER_SYSVIEW_Warn+0x4c>
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	1c59      	adds	r1, r3, #1
 8007a84:	6279      	str	r1, [r7, #36]	; 0x24
 8007a86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	09db      	lsrs	r3, r3, #7
 8007a92:	623b      	str	r3, [r7, #32]
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	2b7f      	cmp	r3, #127	; 0x7f
 8007a98:	d8f0      	bhi.n	8007a7c <SEGGER_SYSVIEW_Warn+0x34>
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	627a      	str	r2, [r7, #36]	; 0x24
 8007aa0:	6a3a      	ldr	r2, [r7, #32]
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	61fb      	str	r3, [r7, #28]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	61bb      	str	r3, [r7, #24]
 8007ab2:	e00b      	b.n	8007acc <SEGGER_SYSVIEW_Warn+0x84>
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	1c59      	adds	r1, r3, #1
 8007abc:	61f9      	str	r1, [r7, #28]
 8007abe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	701a      	strb	r2, [r3, #0]
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	09db      	lsrs	r3, r3, #7
 8007aca:	61bb      	str	r3, [r7, #24]
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	2b7f      	cmp	r3, #127	; 0x7f
 8007ad0:	d8f0      	bhi.n	8007ab4 <SEGGER_SYSVIEW_Warn+0x6c>
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	61fa      	str	r2, [r7, #28]
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	b2d2      	uxtb	r2, r2
 8007adc:	701a      	strb	r2, [r3, #0]
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007ae2:	221a      	movs	r2, #26
 8007ae4:	68f9      	ldr	r1, [r7, #12]
 8007ae6:	6938      	ldr	r0, [r7, #16]
 8007ae8:	f7fe fa8e 	bl	8006008 <_SendPacket>
  RECORD_END();
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f383 8811 	msr	BASEPRI, r3
}
 8007af2:	bf00      	nop
 8007af4:	3728      	adds	r7, #40	; 0x28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	2001383c 	.word	0x2001383c

08007b00 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007b04:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b06:	7e1b      	ldrb	r3, [r3, #24]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4a13      	ldr	r2, [pc, #76]	; (8007b58 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	440b      	add	r3, r1
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	4413      	add	r3, r2
 8007b16:	336c      	adds	r3, #108	; 0x6c
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	4b0e      	ldr	r3, [pc, #56]	; (8007b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b1c:	7e1b      	ldrb	r3, [r3, #24]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	490d      	ldr	r1, [pc, #52]	; (8007b58 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007b22:	4603      	mov	r3, r0
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	4403      	add	r3, r0
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	440b      	add	r3, r1
 8007b2c:	3370      	adds	r3, #112	; 0x70
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d00b      	beq.n	8007b4c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007b34:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b36:	789b      	ldrb	r3, [r3, #2]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d107      	bne.n	8007b4c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b3e:	2201      	movs	r2, #1
 8007b40:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007b42:	f7fe f97d 	bl	8005e40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007b46:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007b4c:	4b01      	ldr	r3, [pc, #4]	; (8007b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	2001380c 	.word	0x2001380c
 8007b58:	20012f4c 	.word	0x20012f4c

08007b5c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	6879      	ldr	r1, [r7, #4]
 8007b6e:	2000      	movs	r0, #0
 8007b70:	f7fe f82a 	bl	8005bc8 <SEGGER_RTT_Write>
  return len;
 8007b74:	683b      	ldr	r3, [r7, #0]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <__errno>:
 8007b80:	4b01      	ldr	r3, [pc, #4]	; (8007b88 <__errno+0x8>)
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	2000001c 	.word	0x2000001c

08007b8c <__libc_init_array>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	4d0d      	ldr	r5, [pc, #52]	; (8007bc4 <__libc_init_array+0x38>)
 8007b90:	4c0d      	ldr	r4, [pc, #52]	; (8007bc8 <__libc_init_array+0x3c>)
 8007b92:	1b64      	subs	r4, r4, r5
 8007b94:	10a4      	asrs	r4, r4, #2
 8007b96:	2600      	movs	r6, #0
 8007b98:	42a6      	cmp	r6, r4
 8007b9a:	d109      	bne.n	8007bb0 <__libc_init_array+0x24>
 8007b9c:	4d0b      	ldr	r5, [pc, #44]	; (8007bcc <__libc_init_array+0x40>)
 8007b9e:	4c0c      	ldr	r4, [pc, #48]	; (8007bd0 <__libc_init_array+0x44>)
 8007ba0:	f001 f830 	bl	8008c04 <_init>
 8007ba4:	1b64      	subs	r4, r4, r5
 8007ba6:	10a4      	asrs	r4, r4, #2
 8007ba8:	2600      	movs	r6, #0
 8007baa:	42a6      	cmp	r6, r4
 8007bac:	d105      	bne.n	8007bba <__libc_init_array+0x2e>
 8007bae:	bd70      	pop	{r4, r5, r6, pc}
 8007bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb4:	4798      	blx	r3
 8007bb6:	3601      	adds	r6, #1
 8007bb8:	e7ee      	b.n	8007b98 <__libc_init_array+0xc>
 8007bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bbe:	4798      	blx	r3
 8007bc0:	3601      	adds	r6, #1
 8007bc2:	e7f2      	b.n	8007baa <__libc_init_array+0x1e>
 8007bc4:	08008e6c 	.word	0x08008e6c
 8007bc8:	08008e6c 	.word	0x08008e6c
 8007bcc:	08008e6c 	.word	0x08008e6c
 8007bd0:	08008e70 	.word	0x08008e70

08007bd4 <memcmp>:
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	3901      	subs	r1, #1
 8007bd8:	4402      	add	r2, r0
 8007bda:	4290      	cmp	r0, r2
 8007bdc:	d101      	bne.n	8007be2 <memcmp+0xe>
 8007bde:	2000      	movs	r0, #0
 8007be0:	e005      	b.n	8007bee <memcmp+0x1a>
 8007be2:	7803      	ldrb	r3, [r0, #0]
 8007be4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	d001      	beq.n	8007bf0 <memcmp+0x1c>
 8007bec:	1b18      	subs	r0, r3, r4
 8007bee:	bd10      	pop	{r4, pc}
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	e7f2      	b.n	8007bda <memcmp+0x6>

08007bf4 <memcpy>:
 8007bf4:	440a      	add	r2, r1
 8007bf6:	4291      	cmp	r1, r2
 8007bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bfc:	d100      	bne.n	8007c00 <memcpy+0xc>
 8007bfe:	4770      	bx	lr
 8007c00:	b510      	push	{r4, lr}
 8007c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c0a:	4291      	cmp	r1, r2
 8007c0c:	d1f9      	bne.n	8007c02 <memcpy+0xe>
 8007c0e:	bd10      	pop	{r4, pc}

08007c10 <memset>:
 8007c10:	4402      	add	r2, r0
 8007c12:	4603      	mov	r3, r0
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d100      	bne.n	8007c1a <memset+0xa>
 8007c18:	4770      	bx	lr
 8007c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c1e:	e7f9      	b.n	8007c14 <memset+0x4>

08007c20 <iprintf>:
 8007c20:	b40f      	push	{r0, r1, r2, r3}
 8007c22:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <iprintf+0x2c>)
 8007c24:	b513      	push	{r0, r1, r4, lr}
 8007c26:	681c      	ldr	r4, [r3, #0]
 8007c28:	b124      	cbz	r4, 8007c34 <iprintf+0x14>
 8007c2a:	69a3      	ldr	r3, [r4, #24]
 8007c2c:	b913      	cbnz	r3, 8007c34 <iprintf+0x14>
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 fa5e 	bl	80080f0 <__sinit>
 8007c34:	ab05      	add	r3, sp, #20
 8007c36:	9a04      	ldr	r2, [sp, #16]
 8007c38:	68a1      	ldr	r1, [r4, #8]
 8007c3a:	9301      	str	r3, [sp, #4]
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f000 fc67 	bl	8008510 <_vfiprintf_r>
 8007c42:	b002      	add	sp, #8
 8007c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c48:	b004      	add	sp, #16
 8007c4a:	4770      	bx	lr
 8007c4c:	2000001c 	.word	0x2000001c

08007c50 <_puts_r>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	460e      	mov	r6, r1
 8007c54:	4605      	mov	r5, r0
 8007c56:	b118      	cbz	r0, 8007c60 <_puts_r+0x10>
 8007c58:	6983      	ldr	r3, [r0, #24]
 8007c5a:	b90b      	cbnz	r3, 8007c60 <_puts_r+0x10>
 8007c5c:	f000 fa48 	bl	80080f0 <__sinit>
 8007c60:	69ab      	ldr	r3, [r5, #24]
 8007c62:	68ac      	ldr	r4, [r5, #8]
 8007c64:	b913      	cbnz	r3, 8007c6c <_puts_r+0x1c>
 8007c66:	4628      	mov	r0, r5
 8007c68:	f000 fa42 	bl	80080f0 <__sinit>
 8007c6c:	4b2c      	ldr	r3, [pc, #176]	; (8007d20 <_puts_r+0xd0>)
 8007c6e:	429c      	cmp	r4, r3
 8007c70:	d120      	bne.n	8007cb4 <_puts_r+0x64>
 8007c72:	686c      	ldr	r4, [r5, #4]
 8007c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c76:	07db      	lsls	r3, r3, #31
 8007c78:	d405      	bmi.n	8007c86 <_puts_r+0x36>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	0598      	lsls	r0, r3, #22
 8007c7e:	d402      	bmi.n	8007c86 <_puts_r+0x36>
 8007c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c82:	f000 fad3 	bl	800822c <__retarget_lock_acquire_recursive>
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	0719      	lsls	r1, r3, #28
 8007c8a:	d51d      	bpl.n	8007cc8 <_puts_r+0x78>
 8007c8c:	6923      	ldr	r3, [r4, #16]
 8007c8e:	b1db      	cbz	r3, 8007cc8 <_puts_r+0x78>
 8007c90:	3e01      	subs	r6, #1
 8007c92:	68a3      	ldr	r3, [r4, #8]
 8007c94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	60a3      	str	r3, [r4, #8]
 8007c9c:	bb39      	cbnz	r1, 8007cee <_puts_r+0x9e>
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	da38      	bge.n	8007d14 <_puts_r+0xc4>
 8007ca2:	4622      	mov	r2, r4
 8007ca4:	210a      	movs	r1, #10
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 f848 	bl	8007d3c <__swbuf_r>
 8007cac:	3001      	adds	r0, #1
 8007cae:	d011      	beq.n	8007cd4 <_puts_r+0x84>
 8007cb0:	250a      	movs	r5, #10
 8007cb2:	e011      	b.n	8007cd8 <_puts_r+0x88>
 8007cb4:	4b1b      	ldr	r3, [pc, #108]	; (8007d24 <_puts_r+0xd4>)
 8007cb6:	429c      	cmp	r4, r3
 8007cb8:	d101      	bne.n	8007cbe <_puts_r+0x6e>
 8007cba:	68ac      	ldr	r4, [r5, #8]
 8007cbc:	e7da      	b.n	8007c74 <_puts_r+0x24>
 8007cbe:	4b1a      	ldr	r3, [pc, #104]	; (8007d28 <_puts_r+0xd8>)
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	bf08      	it	eq
 8007cc4:	68ec      	ldreq	r4, [r5, #12]
 8007cc6:	e7d5      	b.n	8007c74 <_puts_r+0x24>
 8007cc8:	4621      	mov	r1, r4
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f000 f888 	bl	8007de0 <__swsetup_r>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d0dd      	beq.n	8007c90 <_puts_r+0x40>
 8007cd4:	f04f 35ff 	mov.w	r5, #4294967295
 8007cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cda:	07da      	lsls	r2, r3, #31
 8007cdc:	d405      	bmi.n	8007cea <_puts_r+0x9a>
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	059b      	lsls	r3, r3, #22
 8007ce2:	d402      	bmi.n	8007cea <_puts_r+0x9a>
 8007ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ce6:	f000 faa2 	bl	800822e <__retarget_lock_release_recursive>
 8007cea:	4628      	mov	r0, r5
 8007cec:	bd70      	pop	{r4, r5, r6, pc}
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	da04      	bge.n	8007cfc <_puts_r+0xac>
 8007cf2:	69a2      	ldr	r2, [r4, #24]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	dc06      	bgt.n	8007d06 <_puts_r+0xb6>
 8007cf8:	290a      	cmp	r1, #10
 8007cfa:	d004      	beq.n	8007d06 <_puts_r+0xb6>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	6022      	str	r2, [r4, #0]
 8007d02:	7019      	strb	r1, [r3, #0]
 8007d04:	e7c5      	b.n	8007c92 <_puts_r+0x42>
 8007d06:	4622      	mov	r2, r4
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 f817 	bl	8007d3c <__swbuf_r>
 8007d0e:	3001      	adds	r0, #1
 8007d10:	d1bf      	bne.n	8007c92 <_puts_r+0x42>
 8007d12:	e7df      	b.n	8007cd4 <_puts_r+0x84>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	250a      	movs	r5, #10
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	6022      	str	r2, [r4, #0]
 8007d1c:	701d      	strb	r5, [r3, #0]
 8007d1e:	e7db      	b.n	8007cd8 <_puts_r+0x88>
 8007d20:	08008df0 	.word	0x08008df0
 8007d24:	08008e10 	.word	0x08008e10
 8007d28:	08008dd0 	.word	0x08008dd0

08007d2c <puts>:
 8007d2c:	4b02      	ldr	r3, [pc, #8]	; (8007d38 <puts+0xc>)
 8007d2e:	4601      	mov	r1, r0
 8007d30:	6818      	ldr	r0, [r3, #0]
 8007d32:	f7ff bf8d 	b.w	8007c50 <_puts_r>
 8007d36:	bf00      	nop
 8007d38:	2000001c 	.word	0x2000001c

08007d3c <__swbuf_r>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	460e      	mov	r6, r1
 8007d40:	4614      	mov	r4, r2
 8007d42:	4605      	mov	r5, r0
 8007d44:	b118      	cbz	r0, 8007d4e <__swbuf_r+0x12>
 8007d46:	6983      	ldr	r3, [r0, #24]
 8007d48:	b90b      	cbnz	r3, 8007d4e <__swbuf_r+0x12>
 8007d4a:	f000 f9d1 	bl	80080f0 <__sinit>
 8007d4e:	4b21      	ldr	r3, [pc, #132]	; (8007dd4 <__swbuf_r+0x98>)
 8007d50:	429c      	cmp	r4, r3
 8007d52:	d12b      	bne.n	8007dac <__swbuf_r+0x70>
 8007d54:	686c      	ldr	r4, [r5, #4]
 8007d56:	69a3      	ldr	r3, [r4, #24]
 8007d58:	60a3      	str	r3, [r4, #8]
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	071a      	lsls	r2, r3, #28
 8007d5e:	d52f      	bpl.n	8007dc0 <__swbuf_r+0x84>
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	b36b      	cbz	r3, 8007dc0 <__swbuf_r+0x84>
 8007d64:	6923      	ldr	r3, [r4, #16]
 8007d66:	6820      	ldr	r0, [r4, #0]
 8007d68:	1ac0      	subs	r0, r0, r3
 8007d6a:	6963      	ldr	r3, [r4, #20]
 8007d6c:	b2f6      	uxtb	r6, r6
 8007d6e:	4283      	cmp	r3, r0
 8007d70:	4637      	mov	r7, r6
 8007d72:	dc04      	bgt.n	8007d7e <__swbuf_r+0x42>
 8007d74:	4621      	mov	r1, r4
 8007d76:	4628      	mov	r0, r5
 8007d78:	f000 f926 	bl	8007fc8 <_fflush_r>
 8007d7c:	bb30      	cbnz	r0, 8007dcc <__swbuf_r+0x90>
 8007d7e:	68a3      	ldr	r3, [r4, #8]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	60a3      	str	r3, [r4, #8]
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	6022      	str	r2, [r4, #0]
 8007d8a:	701e      	strb	r6, [r3, #0]
 8007d8c:	6963      	ldr	r3, [r4, #20]
 8007d8e:	3001      	adds	r0, #1
 8007d90:	4283      	cmp	r3, r0
 8007d92:	d004      	beq.n	8007d9e <__swbuf_r+0x62>
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	07db      	lsls	r3, r3, #31
 8007d98:	d506      	bpl.n	8007da8 <__swbuf_r+0x6c>
 8007d9a:	2e0a      	cmp	r6, #10
 8007d9c:	d104      	bne.n	8007da8 <__swbuf_r+0x6c>
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4628      	mov	r0, r5
 8007da2:	f000 f911 	bl	8007fc8 <_fflush_r>
 8007da6:	b988      	cbnz	r0, 8007dcc <__swbuf_r+0x90>
 8007da8:	4638      	mov	r0, r7
 8007daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dac:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <__swbuf_r+0x9c>)
 8007dae:	429c      	cmp	r4, r3
 8007db0:	d101      	bne.n	8007db6 <__swbuf_r+0x7a>
 8007db2:	68ac      	ldr	r4, [r5, #8]
 8007db4:	e7cf      	b.n	8007d56 <__swbuf_r+0x1a>
 8007db6:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <__swbuf_r+0xa0>)
 8007db8:	429c      	cmp	r4, r3
 8007dba:	bf08      	it	eq
 8007dbc:	68ec      	ldreq	r4, [r5, #12]
 8007dbe:	e7ca      	b.n	8007d56 <__swbuf_r+0x1a>
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f000 f80c 	bl	8007de0 <__swsetup_r>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d0cb      	beq.n	8007d64 <__swbuf_r+0x28>
 8007dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8007dd0:	e7ea      	b.n	8007da8 <__swbuf_r+0x6c>
 8007dd2:	bf00      	nop
 8007dd4:	08008df0 	.word	0x08008df0
 8007dd8:	08008e10 	.word	0x08008e10
 8007ddc:	08008dd0 	.word	0x08008dd0

08007de0 <__swsetup_r>:
 8007de0:	4b32      	ldr	r3, [pc, #200]	; (8007eac <__swsetup_r+0xcc>)
 8007de2:	b570      	push	{r4, r5, r6, lr}
 8007de4:	681d      	ldr	r5, [r3, #0]
 8007de6:	4606      	mov	r6, r0
 8007de8:	460c      	mov	r4, r1
 8007dea:	b125      	cbz	r5, 8007df6 <__swsetup_r+0x16>
 8007dec:	69ab      	ldr	r3, [r5, #24]
 8007dee:	b913      	cbnz	r3, 8007df6 <__swsetup_r+0x16>
 8007df0:	4628      	mov	r0, r5
 8007df2:	f000 f97d 	bl	80080f0 <__sinit>
 8007df6:	4b2e      	ldr	r3, [pc, #184]	; (8007eb0 <__swsetup_r+0xd0>)
 8007df8:	429c      	cmp	r4, r3
 8007dfa:	d10f      	bne.n	8007e1c <__swsetup_r+0x3c>
 8007dfc:	686c      	ldr	r4, [r5, #4]
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e04:	0719      	lsls	r1, r3, #28
 8007e06:	d42c      	bmi.n	8007e62 <__swsetup_r+0x82>
 8007e08:	06dd      	lsls	r5, r3, #27
 8007e0a:	d411      	bmi.n	8007e30 <__swsetup_r+0x50>
 8007e0c:	2309      	movs	r3, #9
 8007e0e:	6033      	str	r3, [r6, #0]
 8007e10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e14:	81a3      	strh	r3, [r4, #12]
 8007e16:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1a:	e03e      	b.n	8007e9a <__swsetup_r+0xba>
 8007e1c:	4b25      	ldr	r3, [pc, #148]	; (8007eb4 <__swsetup_r+0xd4>)
 8007e1e:	429c      	cmp	r4, r3
 8007e20:	d101      	bne.n	8007e26 <__swsetup_r+0x46>
 8007e22:	68ac      	ldr	r4, [r5, #8]
 8007e24:	e7eb      	b.n	8007dfe <__swsetup_r+0x1e>
 8007e26:	4b24      	ldr	r3, [pc, #144]	; (8007eb8 <__swsetup_r+0xd8>)
 8007e28:	429c      	cmp	r4, r3
 8007e2a:	bf08      	it	eq
 8007e2c:	68ec      	ldreq	r4, [r5, #12]
 8007e2e:	e7e6      	b.n	8007dfe <__swsetup_r+0x1e>
 8007e30:	0758      	lsls	r0, r3, #29
 8007e32:	d512      	bpl.n	8007e5a <__swsetup_r+0x7a>
 8007e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e36:	b141      	cbz	r1, 8007e4a <__swsetup_r+0x6a>
 8007e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e3c:	4299      	cmp	r1, r3
 8007e3e:	d002      	beq.n	8007e46 <__swsetup_r+0x66>
 8007e40:	4630      	mov	r0, r6
 8007e42:	f000 fa5b 	bl	80082fc <_free_r>
 8007e46:	2300      	movs	r3, #0
 8007e48:	6363      	str	r3, [r4, #52]	; 0x34
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e50:	81a3      	strh	r3, [r4, #12]
 8007e52:	2300      	movs	r3, #0
 8007e54:	6063      	str	r3, [r4, #4]
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	89a3      	ldrh	r3, [r4, #12]
 8007e5c:	f043 0308 	orr.w	r3, r3, #8
 8007e60:	81a3      	strh	r3, [r4, #12]
 8007e62:	6923      	ldr	r3, [r4, #16]
 8007e64:	b94b      	cbnz	r3, 8007e7a <__swsetup_r+0x9a>
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e70:	d003      	beq.n	8007e7a <__swsetup_r+0x9a>
 8007e72:	4621      	mov	r1, r4
 8007e74:	4630      	mov	r0, r6
 8007e76:	f000 fa01 	bl	800827c <__smakebuf_r>
 8007e7a:	89a0      	ldrh	r0, [r4, #12]
 8007e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e80:	f010 0301 	ands.w	r3, r0, #1
 8007e84:	d00a      	beq.n	8007e9c <__swsetup_r+0xbc>
 8007e86:	2300      	movs	r3, #0
 8007e88:	60a3      	str	r3, [r4, #8]
 8007e8a:	6963      	ldr	r3, [r4, #20]
 8007e8c:	425b      	negs	r3, r3
 8007e8e:	61a3      	str	r3, [r4, #24]
 8007e90:	6923      	ldr	r3, [r4, #16]
 8007e92:	b943      	cbnz	r3, 8007ea6 <__swsetup_r+0xc6>
 8007e94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e98:	d1ba      	bne.n	8007e10 <__swsetup_r+0x30>
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	0781      	lsls	r1, r0, #30
 8007e9e:	bf58      	it	pl
 8007ea0:	6963      	ldrpl	r3, [r4, #20]
 8007ea2:	60a3      	str	r3, [r4, #8]
 8007ea4:	e7f4      	b.n	8007e90 <__swsetup_r+0xb0>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	e7f7      	b.n	8007e9a <__swsetup_r+0xba>
 8007eaa:	bf00      	nop
 8007eac:	2000001c 	.word	0x2000001c
 8007eb0:	08008df0 	.word	0x08008df0
 8007eb4:	08008e10 	.word	0x08008e10
 8007eb8:	08008dd0 	.word	0x08008dd0

08007ebc <__sflush_r>:
 8007ebc:	898a      	ldrh	r2, [r1, #12]
 8007ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	0710      	lsls	r0, r2, #28
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	d458      	bmi.n	8007f7c <__sflush_r+0xc0>
 8007eca:	684b      	ldr	r3, [r1, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	dc05      	bgt.n	8007edc <__sflush_r+0x20>
 8007ed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	dc02      	bgt.n	8007edc <__sflush_r+0x20>
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ede:	2e00      	cmp	r6, #0
 8007ee0:	d0f9      	beq.n	8007ed6 <__sflush_r+0x1a>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ee8:	682f      	ldr	r7, [r5, #0]
 8007eea:	602b      	str	r3, [r5, #0]
 8007eec:	d032      	beq.n	8007f54 <__sflush_r+0x98>
 8007eee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ef0:	89a3      	ldrh	r3, [r4, #12]
 8007ef2:	075a      	lsls	r2, r3, #29
 8007ef4:	d505      	bpl.n	8007f02 <__sflush_r+0x46>
 8007ef6:	6863      	ldr	r3, [r4, #4]
 8007ef8:	1ac0      	subs	r0, r0, r3
 8007efa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007efc:	b10b      	cbz	r3, 8007f02 <__sflush_r+0x46>
 8007efe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f00:	1ac0      	subs	r0, r0, r3
 8007f02:	2300      	movs	r3, #0
 8007f04:	4602      	mov	r2, r0
 8007f06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f08:	6a21      	ldr	r1, [r4, #32]
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	47b0      	blx	r6
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	d106      	bne.n	8007f22 <__sflush_r+0x66>
 8007f14:	6829      	ldr	r1, [r5, #0]
 8007f16:	291d      	cmp	r1, #29
 8007f18:	d82c      	bhi.n	8007f74 <__sflush_r+0xb8>
 8007f1a:	4a2a      	ldr	r2, [pc, #168]	; (8007fc4 <__sflush_r+0x108>)
 8007f1c:	40ca      	lsrs	r2, r1
 8007f1e:	07d6      	lsls	r6, r2, #31
 8007f20:	d528      	bpl.n	8007f74 <__sflush_r+0xb8>
 8007f22:	2200      	movs	r2, #0
 8007f24:	6062      	str	r2, [r4, #4]
 8007f26:	04d9      	lsls	r1, r3, #19
 8007f28:	6922      	ldr	r2, [r4, #16]
 8007f2a:	6022      	str	r2, [r4, #0]
 8007f2c:	d504      	bpl.n	8007f38 <__sflush_r+0x7c>
 8007f2e:	1c42      	adds	r2, r0, #1
 8007f30:	d101      	bne.n	8007f36 <__sflush_r+0x7a>
 8007f32:	682b      	ldr	r3, [r5, #0]
 8007f34:	b903      	cbnz	r3, 8007f38 <__sflush_r+0x7c>
 8007f36:	6560      	str	r0, [r4, #84]	; 0x54
 8007f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f3a:	602f      	str	r7, [r5, #0]
 8007f3c:	2900      	cmp	r1, #0
 8007f3e:	d0ca      	beq.n	8007ed6 <__sflush_r+0x1a>
 8007f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f44:	4299      	cmp	r1, r3
 8007f46:	d002      	beq.n	8007f4e <__sflush_r+0x92>
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f000 f9d7 	bl	80082fc <_free_r>
 8007f4e:	2000      	movs	r0, #0
 8007f50:	6360      	str	r0, [r4, #52]	; 0x34
 8007f52:	e7c1      	b.n	8007ed8 <__sflush_r+0x1c>
 8007f54:	6a21      	ldr	r1, [r4, #32]
 8007f56:	2301      	movs	r3, #1
 8007f58:	4628      	mov	r0, r5
 8007f5a:	47b0      	blx	r6
 8007f5c:	1c41      	adds	r1, r0, #1
 8007f5e:	d1c7      	bne.n	8007ef0 <__sflush_r+0x34>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d0c4      	beq.n	8007ef0 <__sflush_r+0x34>
 8007f66:	2b1d      	cmp	r3, #29
 8007f68:	d001      	beq.n	8007f6e <__sflush_r+0xb2>
 8007f6a:	2b16      	cmp	r3, #22
 8007f6c:	d101      	bne.n	8007f72 <__sflush_r+0xb6>
 8007f6e:	602f      	str	r7, [r5, #0]
 8007f70:	e7b1      	b.n	8007ed6 <__sflush_r+0x1a>
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f78:	81a3      	strh	r3, [r4, #12]
 8007f7a:	e7ad      	b.n	8007ed8 <__sflush_r+0x1c>
 8007f7c:	690f      	ldr	r7, [r1, #16]
 8007f7e:	2f00      	cmp	r7, #0
 8007f80:	d0a9      	beq.n	8007ed6 <__sflush_r+0x1a>
 8007f82:	0793      	lsls	r3, r2, #30
 8007f84:	680e      	ldr	r6, [r1, #0]
 8007f86:	bf08      	it	eq
 8007f88:	694b      	ldreq	r3, [r1, #20]
 8007f8a:	600f      	str	r7, [r1, #0]
 8007f8c:	bf18      	it	ne
 8007f8e:	2300      	movne	r3, #0
 8007f90:	eba6 0807 	sub.w	r8, r6, r7
 8007f94:	608b      	str	r3, [r1, #8]
 8007f96:	f1b8 0f00 	cmp.w	r8, #0
 8007f9a:	dd9c      	ble.n	8007ed6 <__sflush_r+0x1a>
 8007f9c:	6a21      	ldr	r1, [r4, #32]
 8007f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fa0:	4643      	mov	r3, r8
 8007fa2:	463a      	mov	r2, r7
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	47b0      	blx	r6
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	dc06      	bgt.n	8007fba <__sflush_r+0xfe>
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fb2:	81a3      	strh	r3, [r4, #12]
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb8:	e78e      	b.n	8007ed8 <__sflush_r+0x1c>
 8007fba:	4407      	add	r7, r0
 8007fbc:	eba8 0800 	sub.w	r8, r8, r0
 8007fc0:	e7e9      	b.n	8007f96 <__sflush_r+0xda>
 8007fc2:	bf00      	nop
 8007fc4:	20400001 	.word	0x20400001

08007fc8 <_fflush_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	690b      	ldr	r3, [r1, #16]
 8007fcc:	4605      	mov	r5, r0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	b913      	cbnz	r3, 8007fd8 <_fflush_r+0x10>
 8007fd2:	2500      	movs	r5, #0
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	b118      	cbz	r0, 8007fe2 <_fflush_r+0x1a>
 8007fda:	6983      	ldr	r3, [r0, #24]
 8007fdc:	b90b      	cbnz	r3, 8007fe2 <_fflush_r+0x1a>
 8007fde:	f000 f887 	bl	80080f0 <__sinit>
 8007fe2:	4b14      	ldr	r3, [pc, #80]	; (8008034 <_fflush_r+0x6c>)
 8007fe4:	429c      	cmp	r4, r3
 8007fe6:	d11b      	bne.n	8008020 <_fflush_r+0x58>
 8007fe8:	686c      	ldr	r4, [r5, #4]
 8007fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0ef      	beq.n	8007fd2 <_fflush_r+0xa>
 8007ff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ff4:	07d0      	lsls	r0, r2, #31
 8007ff6:	d404      	bmi.n	8008002 <_fflush_r+0x3a>
 8007ff8:	0599      	lsls	r1, r3, #22
 8007ffa:	d402      	bmi.n	8008002 <_fflush_r+0x3a>
 8007ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ffe:	f000 f915 	bl	800822c <__retarget_lock_acquire_recursive>
 8008002:	4628      	mov	r0, r5
 8008004:	4621      	mov	r1, r4
 8008006:	f7ff ff59 	bl	8007ebc <__sflush_r>
 800800a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800800c:	07da      	lsls	r2, r3, #31
 800800e:	4605      	mov	r5, r0
 8008010:	d4e0      	bmi.n	8007fd4 <_fflush_r+0xc>
 8008012:	89a3      	ldrh	r3, [r4, #12]
 8008014:	059b      	lsls	r3, r3, #22
 8008016:	d4dd      	bmi.n	8007fd4 <_fflush_r+0xc>
 8008018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800801a:	f000 f908 	bl	800822e <__retarget_lock_release_recursive>
 800801e:	e7d9      	b.n	8007fd4 <_fflush_r+0xc>
 8008020:	4b05      	ldr	r3, [pc, #20]	; (8008038 <_fflush_r+0x70>)
 8008022:	429c      	cmp	r4, r3
 8008024:	d101      	bne.n	800802a <_fflush_r+0x62>
 8008026:	68ac      	ldr	r4, [r5, #8]
 8008028:	e7df      	b.n	8007fea <_fflush_r+0x22>
 800802a:	4b04      	ldr	r3, [pc, #16]	; (800803c <_fflush_r+0x74>)
 800802c:	429c      	cmp	r4, r3
 800802e:	bf08      	it	eq
 8008030:	68ec      	ldreq	r4, [r5, #12]
 8008032:	e7da      	b.n	8007fea <_fflush_r+0x22>
 8008034:	08008df0 	.word	0x08008df0
 8008038:	08008e10 	.word	0x08008e10
 800803c:	08008dd0 	.word	0x08008dd0

08008040 <std>:
 8008040:	2300      	movs	r3, #0
 8008042:	b510      	push	{r4, lr}
 8008044:	4604      	mov	r4, r0
 8008046:	e9c0 3300 	strd	r3, r3, [r0]
 800804a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800804e:	6083      	str	r3, [r0, #8]
 8008050:	8181      	strh	r1, [r0, #12]
 8008052:	6643      	str	r3, [r0, #100]	; 0x64
 8008054:	81c2      	strh	r2, [r0, #14]
 8008056:	6183      	str	r3, [r0, #24]
 8008058:	4619      	mov	r1, r3
 800805a:	2208      	movs	r2, #8
 800805c:	305c      	adds	r0, #92	; 0x5c
 800805e:	f7ff fdd7 	bl	8007c10 <memset>
 8008062:	4b05      	ldr	r3, [pc, #20]	; (8008078 <std+0x38>)
 8008064:	6263      	str	r3, [r4, #36]	; 0x24
 8008066:	4b05      	ldr	r3, [pc, #20]	; (800807c <std+0x3c>)
 8008068:	62a3      	str	r3, [r4, #40]	; 0x28
 800806a:	4b05      	ldr	r3, [pc, #20]	; (8008080 <std+0x40>)
 800806c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800806e:	4b05      	ldr	r3, [pc, #20]	; (8008084 <std+0x44>)
 8008070:	6224      	str	r4, [r4, #32]
 8008072:	6323      	str	r3, [r4, #48]	; 0x30
 8008074:	bd10      	pop	{r4, pc}
 8008076:	bf00      	nop
 8008078:	08008ab9 	.word	0x08008ab9
 800807c:	08008adb 	.word	0x08008adb
 8008080:	08008b13 	.word	0x08008b13
 8008084:	08008b37 	.word	0x08008b37

08008088 <_cleanup_r>:
 8008088:	4901      	ldr	r1, [pc, #4]	; (8008090 <_cleanup_r+0x8>)
 800808a:	f000 b8af 	b.w	80081ec <_fwalk_reent>
 800808e:	bf00      	nop
 8008090:	08007fc9 	.word	0x08007fc9

08008094 <__sfmoreglue>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	2268      	movs	r2, #104	; 0x68
 8008098:	1e4d      	subs	r5, r1, #1
 800809a:	4355      	muls	r5, r2
 800809c:	460e      	mov	r6, r1
 800809e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080a2:	f000 f997 	bl	80083d4 <_malloc_r>
 80080a6:	4604      	mov	r4, r0
 80080a8:	b140      	cbz	r0, 80080bc <__sfmoreglue+0x28>
 80080aa:	2100      	movs	r1, #0
 80080ac:	e9c0 1600 	strd	r1, r6, [r0]
 80080b0:	300c      	adds	r0, #12
 80080b2:	60a0      	str	r0, [r4, #8]
 80080b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080b8:	f7ff fdaa 	bl	8007c10 <memset>
 80080bc:	4620      	mov	r0, r4
 80080be:	bd70      	pop	{r4, r5, r6, pc}

080080c0 <__sfp_lock_acquire>:
 80080c0:	4801      	ldr	r0, [pc, #4]	; (80080c8 <__sfp_lock_acquire+0x8>)
 80080c2:	f000 b8b3 	b.w	800822c <__retarget_lock_acquire_recursive>
 80080c6:	bf00      	nop
 80080c8:	20013920 	.word	0x20013920

080080cc <__sfp_lock_release>:
 80080cc:	4801      	ldr	r0, [pc, #4]	; (80080d4 <__sfp_lock_release+0x8>)
 80080ce:	f000 b8ae 	b.w	800822e <__retarget_lock_release_recursive>
 80080d2:	bf00      	nop
 80080d4:	20013920 	.word	0x20013920

080080d8 <__sinit_lock_acquire>:
 80080d8:	4801      	ldr	r0, [pc, #4]	; (80080e0 <__sinit_lock_acquire+0x8>)
 80080da:	f000 b8a7 	b.w	800822c <__retarget_lock_acquire_recursive>
 80080de:	bf00      	nop
 80080e0:	20013921 	.word	0x20013921

080080e4 <__sinit_lock_release>:
 80080e4:	4801      	ldr	r0, [pc, #4]	; (80080ec <__sinit_lock_release+0x8>)
 80080e6:	f000 b8a2 	b.w	800822e <__retarget_lock_release_recursive>
 80080ea:	bf00      	nop
 80080ec:	20013921 	.word	0x20013921

080080f0 <__sinit>:
 80080f0:	b510      	push	{r4, lr}
 80080f2:	4604      	mov	r4, r0
 80080f4:	f7ff fff0 	bl	80080d8 <__sinit_lock_acquire>
 80080f8:	69a3      	ldr	r3, [r4, #24]
 80080fa:	b11b      	cbz	r3, 8008104 <__sinit+0x14>
 80080fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008100:	f7ff bff0 	b.w	80080e4 <__sinit_lock_release>
 8008104:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008108:	6523      	str	r3, [r4, #80]	; 0x50
 800810a:	4b13      	ldr	r3, [pc, #76]	; (8008158 <__sinit+0x68>)
 800810c:	4a13      	ldr	r2, [pc, #76]	; (800815c <__sinit+0x6c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	62a2      	str	r2, [r4, #40]	; 0x28
 8008112:	42a3      	cmp	r3, r4
 8008114:	bf04      	itt	eq
 8008116:	2301      	moveq	r3, #1
 8008118:	61a3      	streq	r3, [r4, #24]
 800811a:	4620      	mov	r0, r4
 800811c:	f000 f820 	bl	8008160 <__sfp>
 8008120:	6060      	str	r0, [r4, #4]
 8008122:	4620      	mov	r0, r4
 8008124:	f000 f81c 	bl	8008160 <__sfp>
 8008128:	60a0      	str	r0, [r4, #8]
 800812a:	4620      	mov	r0, r4
 800812c:	f000 f818 	bl	8008160 <__sfp>
 8008130:	2200      	movs	r2, #0
 8008132:	60e0      	str	r0, [r4, #12]
 8008134:	2104      	movs	r1, #4
 8008136:	6860      	ldr	r0, [r4, #4]
 8008138:	f7ff ff82 	bl	8008040 <std>
 800813c:	68a0      	ldr	r0, [r4, #8]
 800813e:	2201      	movs	r2, #1
 8008140:	2109      	movs	r1, #9
 8008142:	f7ff ff7d 	bl	8008040 <std>
 8008146:	68e0      	ldr	r0, [r4, #12]
 8008148:	2202      	movs	r2, #2
 800814a:	2112      	movs	r1, #18
 800814c:	f7ff ff78 	bl	8008040 <std>
 8008150:	2301      	movs	r3, #1
 8008152:	61a3      	str	r3, [r4, #24]
 8008154:	e7d2      	b.n	80080fc <__sinit+0xc>
 8008156:	bf00      	nop
 8008158:	08008dcc 	.word	0x08008dcc
 800815c:	08008089 	.word	0x08008089

08008160 <__sfp>:
 8008160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008162:	4607      	mov	r7, r0
 8008164:	f7ff ffac 	bl	80080c0 <__sfp_lock_acquire>
 8008168:	4b1e      	ldr	r3, [pc, #120]	; (80081e4 <__sfp+0x84>)
 800816a:	681e      	ldr	r6, [r3, #0]
 800816c:	69b3      	ldr	r3, [r6, #24]
 800816e:	b913      	cbnz	r3, 8008176 <__sfp+0x16>
 8008170:	4630      	mov	r0, r6
 8008172:	f7ff ffbd 	bl	80080f0 <__sinit>
 8008176:	3648      	adds	r6, #72	; 0x48
 8008178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800817c:	3b01      	subs	r3, #1
 800817e:	d503      	bpl.n	8008188 <__sfp+0x28>
 8008180:	6833      	ldr	r3, [r6, #0]
 8008182:	b30b      	cbz	r3, 80081c8 <__sfp+0x68>
 8008184:	6836      	ldr	r6, [r6, #0]
 8008186:	e7f7      	b.n	8008178 <__sfp+0x18>
 8008188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800818c:	b9d5      	cbnz	r5, 80081c4 <__sfp+0x64>
 800818e:	4b16      	ldr	r3, [pc, #88]	; (80081e8 <__sfp+0x88>)
 8008190:	60e3      	str	r3, [r4, #12]
 8008192:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008196:	6665      	str	r5, [r4, #100]	; 0x64
 8008198:	f000 f847 	bl	800822a <__retarget_lock_init_recursive>
 800819c:	f7ff ff96 	bl	80080cc <__sfp_lock_release>
 80081a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80081a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80081a8:	6025      	str	r5, [r4, #0]
 80081aa:	61a5      	str	r5, [r4, #24]
 80081ac:	2208      	movs	r2, #8
 80081ae:	4629      	mov	r1, r5
 80081b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081b4:	f7ff fd2c 	bl	8007c10 <memset>
 80081b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081c0:	4620      	mov	r0, r4
 80081c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081c4:	3468      	adds	r4, #104	; 0x68
 80081c6:	e7d9      	b.n	800817c <__sfp+0x1c>
 80081c8:	2104      	movs	r1, #4
 80081ca:	4638      	mov	r0, r7
 80081cc:	f7ff ff62 	bl	8008094 <__sfmoreglue>
 80081d0:	4604      	mov	r4, r0
 80081d2:	6030      	str	r0, [r6, #0]
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d1d5      	bne.n	8008184 <__sfp+0x24>
 80081d8:	f7ff ff78 	bl	80080cc <__sfp_lock_release>
 80081dc:	230c      	movs	r3, #12
 80081de:	603b      	str	r3, [r7, #0]
 80081e0:	e7ee      	b.n	80081c0 <__sfp+0x60>
 80081e2:	bf00      	nop
 80081e4:	08008dcc 	.word	0x08008dcc
 80081e8:	ffff0001 	.word	0xffff0001

080081ec <_fwalk_reent>:
 80081ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f0:	4606      	mov	r6, r0
 80081f2:	4688      	mov	r8, r1
 80081f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081f8:	2700      	movs	r7, #0
 80081fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081fe:	f1b9 0901 	subs.w	r9, r9, #1
 8008202:	d505      	bpl.n	8008210 <_fwalk_reent+0x24>
 8008204:	6824      	ldr	r4, [r4, #0]
 8008206:	2c00      	cmp	r4, #0
 8008208:	d1f7      	bne.n	80081fa <_fwalk_reent+0xe>
 800820a:	4638      	mov	r0, r7
 800820c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008210:	89ab      	ldrh	r3, [r5, #12]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d907      	bls.n	8008226 <_fwalk_reent+0x3a>
 8008216:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800821a:	3301      	adds	r3, #1
 800821c:	d003      	beq.n	8008226 <_fwalk_reent+0x3a>
 800821e:	4629      	mov	r1, r5
 8008220:	4630      	mov	r0, r6
 8008222:	47c0      	blx	r8
 8008224:	4307      	orrs	r7, r0
 8008226:	3568      	adds	r5, #104	; 0x68
 8008228:	e7e9      	b.n	80081fe <_fwalk_reent+0x12>

0800822a <__retarget_lock_init_recursive>:
 800822a:	4770      	bx	lr

0800822c <__retarget_lock_acquire_recursive>:
 800822c:	4770      	bx	lr

0800822e <__retarget_lock_release_recursive>:
 800822e:	4770      	bx	lr

08008230 <__swhatbuf_r>:
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	460e      	mov	r6, r1
 8008234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008238:	2900      	cmp	r1, #0
 800823a:	b096      	sub	sp, #88	; 0x58
 800823c:	4614      	mov	r4, r2
 800823e:	461d      	mov	r5, r3
 8008240:	da08      	bge.n	8008254 <__swhatbuf_r+0x24>
 8008242:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	602a      	str	r2, [r5, #0]
 800824a:	061a      	lsls	r2, r3, #24
 800824c:	d410      	bmi.n	8008270 <__swhatbuf_r+0x40>
 800824e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008252:	e00e      	b.n	8008272 <__swhatbuf_r+0x42>
 8008254:	466a      	mov	r2, sp
 8008256:	f000 fc83 	bl	8008b60 <_fstat_r>
 800825a:	2800      	cmp	r0, #0
 800825c:	dbf1      	blt.n	8008242 <__swhatbuf_r+0x12>
 800825e:	9a01      	ldr	r2, [sp, #4]
 8008260:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008264:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008268:	425a      	negs	r2, r3
 800826a:	415a      	adcs	r2, r3
 800826c:	602a      	str	r2, [r5, #0]
 800826e:	e7ee      	b.n	800824e <__swhatbuf_r+0x1e>
 8008270:	2340      	movs	r3, #64	; 0x40
 8008272:	2000      	movs	r0, #0
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	b016      	add	sp, #88	; 0x58
 8008278:	bd70      	pop	{r4, r5, r6, pc}
	...

0800827c <__smakebuf_r>:
 800827c:	898b      	ldrh	r3, [r1, #12]
 800827e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008280:	079d      	lsls	r5, r3, #30
 8008282:	4606      	mov	r6, r0
 8008284:	460c      	mov	r4, r1
 8008286:	d507      	bpl.n	8008298 <__smakebuf_r+0x1c>
 8008288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	6123      	str	r3, [r4, #16]
 8008290:	2301      	movs	r3, #1
 8008292:	6163      	str	r3, [r4, #20]
 8008294:	b002      	add	sp, #8
 8008296:	bd70      	pop	{r4, r5, r6, pc}
 8008298:	ab01      	add	r3, sp, #4
 800829a:	466a      	mov	r2, sp
 800829c:	f7ff ffc8 	bl	8008230 <__swhatbuf_r>
 80082a0:	9900      	ldr	r1, [sp, #0]
 80082a2:	4605      	mov	r5, r0
 80082a4:	4630      	mov	r0, r6
 80082a6:	f000 f895 	bl	80083d4 <_malloc_r>
 80082aa:	b948      	cbnz	r0, 80082c0 <__smakebuf_r+0x44>
 80082ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082b0:	059a      	lsls	r2, r3, #22
 80082b2:	d4ef      	bmi.n	8008294 <__smakebuf_r+0x18>
 80082b4:	f023 0303 	bic.w	r3, r3, #3
 80082b8:	f043 0302 	orr.w	r3, r3, #2
 80082bc:	81a3      	strh	r3, [r4, #12]
 80082be:	e7e3      	b.n	8008288 <__smakebuf_r+0xc>
 80082c0:	4b0d      	ldr	r3, [pc, #52]	; (80082f8 <__smakebuf_r+0x7c>)
 80082c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	6020      	str	r0, [r4, #0]
 80082c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082cc:	81a3      	strh	r3, [r4, #12]
 80082ce:	9b00      	ldr	r3, [sp, #0]
 80082d0:	6163      	str	r3, [r4, #20]
 80082d2:	9b01      	ldr	r3, [sp, #4]
 80082d4:	6120      	str	r0, [r4, #16]
 80082d6:	b15b      	cbz	r3, 80082f0 <__smakebuf_r+0x74>
 80082d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082dc:	4630      	mov	r0, r6
 80082de:	f000 fc51 	bl	8008b84 <_isatty_r>
 80082e2:	b128      	cbz	r0, 80082f0 <__smakebuf_r+0x74>
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	f023 0303 	bic.w	r3, r3, #3
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	81a3      	strh	r3, [r4, #12]
 80082f0:	89a0      	ldrh	r0, [r4, #12]
 80082f2:	4305      	orrs	r5, r0
 80082f4:	81a5      	strh	r5, [r4, #12]
 80082f6:	e7cd      	b.n	8008294 <__smakebuf_r+0x18>
 80082f8:	08008089 	.word	0x08008089

080082fc <_free_r>:
 80082fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082fe:	2900      	cmp	r1, #0
 8008300:	d044      	beq.n	800838c <_free_r+0x90>
 8008302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008306:	9001      	str	r0, [sp, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	f1a1 0404 	sub.w	r4, r1, #4
 800830e:	bfb8      	it	lt
 8008310:	18e4      	addlt	r4, r4, r3
 8008312:	f000 fc59 	bl	8008bc8 <__malloc_lock>
 8008316:	4a1e      	ldr	r2, [pc, #120]	; (8008390 <_free_r+0x94>)
 8008318:	9801      	ldr	r0, [sp, #4]
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	b933      	cbnz	r3, 800832c <_free_r+0x30>
 800831e:	6063      	str	r3, [r4, #4]
 8008320:	6014      	str	r4, [r2, #0]
 8008322:	b003      	add	sp, #12
 8008324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008328:	f000 bc54 	b.w	8008bd4 <__malloc_unlock>
 800832c:	42a3      	cmp	r3, r4
 800832e:	d908      	bls.n	8008342 <_free_r+0x46>
 8008330:	6825      	ldr	r5, [r4, #0]
 8008332:	1961      	adds	r1, r4, r5
 8008334:	428b      	cmp	r3, r1
 8008336:	bf01      	itttt	eq
 8008338:	6819      	ldreq	r1, [r3, #0]
 800833a:	685b      	ldreq	r3, [r3, #4]
 800833c:	1949      	addeq	r1, r1, r5
 800833e:	6021      	streq	r1, [r4, #0]
 8008340:	e7ed      	b.n	800831e <_free_r+0x22>
 8008342:	461a      	mov	r2, r3
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	b10b      	cbz	r3, 800834c <_free_r+0x50>
 8008348:	42a3      	cmp	r3, r4
 800834a:	d9fa      	bls.n	8008342 <_free_r+0x46>
 800834c:	6811      	ldr	r1, [r2, #0]
 800834e:	1855      	adds	r5, r2, r1
 8008350:	42a5      	cmp	r5, r4
 8008352:	d10b      	bne.n	800836c <_free_r+0x70>
 8008354:	6824      	ldr	r4, [r4, #0]
 8008356:	4421      	add	r1, r4
 8008358:	1854      	adds	r4, r2, r1
 800835a:	42a3      	cmp	r3, r4
 800835c:	6011      	str	r1, [r2, #0]
 800835e:	d1e0      	bne.n	8008322 <_free_r+0x26>
 8008360:	681c      	ldr	r4, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	6053      	str	r3, [r2, #4]
 8008366:	4421      	add	r1, r4
 8008368:	6011      	str	r1, [r2, #0]
 800836a:	e7da      	b.n	8008322 <_free_r+0x26>
 800836c:	d902      	bls.n	8008374 <_free_r+0x78>
 800836e:	230c      	movs	r3, #12
 8008370:	6003      	str	r3, [r0, #0]
 8008372:	e7d6      	b.n	8008322 <_free_r+0x26>
 8008374:	6825      	ldr	r5, [r4, #0]
 8008376:	1961      	adds	r1, r4, r5
 8008378:	428b      	cmp	r3, r1
 800837a:	bf04      	itt	eq
 800837c:	6819      	ldreq	r1, [r3, #0]
 800837e:	685b      	ldreq	r3, [r3, #4]
 8008380:	6063      	str	r3, [r4, #4]
 8008382:	bf04      	itt	eq
 8008384:	1949      	addeq	r1, r1, r5
 8008386:	6021      	streq	r1, [r4, #0]
 8008388:	6054      	str	r4, [r2, #4]
 800838a:	e7ca      	b.n	8008322 <_free_r+0x26>
 800838c:	b003      	add	sp, #12
 800838e:	bd30      	pop	{r4, r5, pc}
 8008390:	20013924 	.word	0x20013924

08008394 <sbrk_aligned>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	4e0e      	ldr	r6, [pc, #56]	; (80083d0 <sbrk_aligned+0x3c>)
 8008398:	460c      	mov	r4, r1
 800839a:	6831      	ldr	r1, [r6, #0]
 800839c:	4605      	mov	r5, r0
 800839e:	b911      	cbnz	r1, 80083a6 <sbrk_aligned+0x12>
 80083a0:	f000 fb7a 	bl	8008a98 <_sbrk_r>
 80083a4:	6030      	str	r0, [r6, #0]
 80083a6:	4621      	mov	r1, r4
 80083a8:	4628      	mov	r0, r5
 80083aa:	f000 fb75 	bl	8008a98 <_sbrk_r>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	d00a      	beq.n	80083c8 <sbrk_aligned+0x34>
 80083b2:	1cc4      	adds	r4, r0, #3
 80083b4:	f024 0403 	bic.w	r4, r4, #3
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d007      	beq.n	80083cc <sbrk_aligned+0x38>
 80083bc:	1a21      	subs	r1, r4, r0
 80083be:	4628      	mov	r0, r5
 80083c0:	f000 fb6a 	bl	8008a98 <_sbrk_r>
 80083c4:	3001      	adds	r0, #1
 80083c6:	d101      	bne.n	80083cc <sbrk_aligned+0x38>
 80083c8:	f04f 34ff 	mov.w	r4, #4294967295
 80083cc:	4620      	mov	r0, r4
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	20013928 	.word	0x20013928

080083d4 <_malloc_r>:
 80083d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d8:	1ccd      	adds	r5, r1, #3
 80083da:	f025 0503 	bic.w	r5, r5, #3
 80083de:	3508      	adds	r5, #8
 80083e0:	2d0c      	cmp	r5, #12
 80083e2:	bf38      	it	cc
 80083e4:	250c      	movcc	r5, #12
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	4607      	mov	r7, r0
 80083ea:	db01      	blt.n	80083f0 <_malloc_r+0x1c>
 80083ec:	42a9      	cmp	r1, r5
 80083ee:	d905      	bls.n	80083fc <_malloc_r+0x28>
 80083f0:	230c      	movs	r3, #12
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	2600      	movs	r6, #0
 80083f6:	4630      	mov	r0, r6
 80083f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083fc:	4e2e      	ldr	r6, [pc, #184]	; (80084b8 <_malloc_r+0xe4>)
 80083fe:	f000 fbe3 	bl	8008bc8 <__malloc_lock>
 8008402:	6833      	ldr	r3, [r6, #0]
 8008404:	461c      	mov	r4, r3
 8008406:	bb34      	cbnz	r4, 8008456 <_malloc_r+0x82>
 8008408:	4629      	mov	r1, r5
 800840a:	4638      	mov	r0, r7
 800840c:	f7ff ffc2 	bl	8008394 <sbrk_aligned>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	4604      	mov	r4, r0
 8008414:	d14d      	bne.n	80084b2 <_malloc_r+0xde>
 8008416:	6834      	ldr	r4, [r6, #0]
 8008418:	4626      	mov	r6, r4
 800841a:	2e00      	cmp	r6, #0
 800841c:	d140      	bne.n	80084a0 <_malloc_r+0xcc>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	4631      	mov	r1, r6
 8008422:	4638      	mov	r0, r7
 8008424:	eb04 0803 	add.w	r8, r4, r3
 8008428:	f000 fb36 	bl	8008a98 <_sbrk_r>
 800842c:	4580      	cmp	r8, r0
 800842e:	d13a      	bne.n	80084a6 <_malloc_r+0xd2>
 8008430:	6821      	ldr	r1, [r4, #0]
 8008432:	3503      	adds	r5, #3
 8008434:	1a6d      	subs	r5, r5, r1
 8008436:	f025 0503 	bic.w	r5, r5, #3
 800843a:	3508      	adds	r5, #8
 800843c:	2d0c      	cmp	r5, #12
 800843e:	bf38      	it	cc
 8008440:	250c      	movcc	r5, #12
 8008442:	4629      	mov	r1, r5
 8008444:	4638      	mov	r0, r7
 8008446:	f7ff ffa5 	bl	8008394 <sbrk_aligned>
 800844a:	3001      	adds	r0, #1
 800844c:	d02b      	beq.n	80084a6 <_malloc_r+0xd2>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	442b      	add	r3, r5
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	e00e      	b.n	8008474 <_malloc_r+0xa0>
 8008456:	6822      	ldr	r2, [r4, #0]
 8008458:	1b52      	subs	r2, r2, r5
 800845a:	d41e      	bmi.n	800849a <_malloc_r+0xc6>
 800845c:	2a0b      	cmp	r2, #11
 800845e:	d916      	bls.n	800848e <_malloc_r+0xba>
 8008460:	1961      	adds	r1, r4, r5
 8008462:	42a3      	cmp	r3, r4
 8008464:	6025      	str	r5, [r4, #0]
 8008466:	bf18      	it	ne
 8008468:	6059      	strne	r1, [r3, #4]
 800846a:	6863      	ldr	r3, [r4, #4]
 800846c:	bf08      	it	eq
 800846e:	6031      	streq	r1, [r6, #0]
 8008470:	5162      	str	r2, [r4, r5]
 8008472:	604b      	str	r3, [r1, #4]
 8008474:	4638      	mov	r0, r7
 8008476:	f104 060b 	add.w	r6, r4, #11
 800847a:	f000 fbab 	bl	8008bd4 <__malloc_unlock>
 800847e:	f026 0607 	bic.w	r6, r6, #7
 8008482:	1d23      	adds	r3, r4, #4
 8008484:	1af2      	subs	r2, r6, r3
 8008486:	d0b6      	beq.n	80083f6 <_malloc_r+0x22>
 8008488:	1b9b      	subs	r3, r3, r6
 800848a:	50a3      	str	r3, [r4, r2]
 800848c:	e7b3      	b.n	80083f6 <_malloc_r+0x22>
 800848e:	6862      	ldr	r2, [r4, #4]
 8008490:	42a3      	cmp	r3, r4
 8008492:	bf0c      	ite	eq
 8008494:	6032      	streq	r2, [r6, #0]
 8008496:	605a      	strne	r2, [r3, #4]
 8008498:	e7ec      	b.n	8008474 <_malloc_r+0xa0>
 800849a:	4623      	mov	r3, r4
 800849c:	6864      	ldr	r4, [r4, #4]
 800849e:	e7b2      	b.n	8008406 <_malloc_r+0x32>
 80084a0:	4634      	mov	r4, r6
 80084a2:	6876      	ldr	r6, [r6, #4]
 80084a4:	e7b9      	b.n	800841a <_malloc_r+0x46>
 80084a6:	230c      	movs	r3, #12
 80084a8:	603b      	str	r3, [r7, #0]
 80084aa:	4638      	mov	r0, r7
 80084ac:	f000 fb92 	bl	8008bd4 <__malloc_unlock>
 80084b0:	e7a1      	b.n	80083f6 <_malloc_r+0x22>
 80084b2:	6025      	str	r5, [r4, #0]
 80084b4:	e7de      	b.n	8008474 <_malloc_r+0xa0>
 80084b6:	bf00      	nop
 80084b8:	20013924 	.word	0x20013924

080084bc <__sfputc_r>:
 80084bc:	6893      	ldr	r3, [r2, #8]
 80084be:	3b01      	subs	r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	b410      	push	{r4}
 80084c4:	6093      	str	r3, [r2, #8]
 80084c6:	da08      	bge.n	80084da <__sfputc_r+0x1e>
 80084c8:	6994      	ldr	r4, [r2, #24]
 80084ca:	42a3      	cmp	r3, r4
 80084cc:	db01      	blt.n	80084d2 <__sfputc_r+0x16>
 80084ce:	290a      	cmp	r1, #10
 80084d0:	d103      	bne.n	80084da <__sfputc_r+0x1e>
 80084d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084d6:	f7ff bc31 	b.w	8007d3c <__swbuf_r>
 80084da:	6813      	ldr	r3, [r2, #0]
 80084dc:	1c58      	adds	r0, r3, #1
 80084de:	6010      	str	r0, [r2, #0]
 80084e0:	7019      	strb	r1, [r3, #0]
 80084e2:	4608      	mov	r0, r1
 80084e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <__sfputs_r>:
 80084ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ec:	4606      	mov	r6, r0
 80084ee:	460f      	mov	r7, r1
 80084f0:	4614      	mov	r4, r2
 80084f2:	18d5      	adds	r5, r2, r3
 80084f4:	42ac      	cmp	r4, r5
 80084f6:	d101      	bne.n	80084fc <__sfputs_r+0x12>
 80084f8:	2000      	movs	r0, #0
 80084fa:	e007      	b.n	800850c <__sfputs_r+0x22>
 80084fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008500:	463a      	mov	r2, r7
 8008502:	4630      	mov	r0, r6
 8008504:	f7ff ffda 	bl	80084bc <__sfputc_r>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d1f3      	bne.n	80084f4 <__sfputs_r+0xa>
 800850c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008510 <_vfiprintf_r>:
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	460d      	mov	r5, r1
 8008516:	b09d      	sub	sp, #116	; 0x74
 8008518:	4614      	mov	r4, r2
 800851a:	4698      	mov	r8, r3
 800851c:	4606      	mov	r6, r0
 800851e:	b118      	cbz	r0, 8008528 <_vfiprintf_r+0x18>
 8008520:	6983      	ldr	r3, [r0, #24]
 8008522:	b90b      	cbnz	r3, 8008528 <_vfiprintf_r+0x18>
 8008524:	f7ff fde4 	bl	80080f0 <__sinit>
 8008528:	4b89      	ldr	r3, [pc, #548]	; (8008750 <_vfiprintf_r+0x240>)
 800852a:	429d      	cmp	r5, r3
 800852c:	d11b      	bne.n	8008566 <_vfiprintf_r+0x56>
 800852e:	6875      	ldr	r5, [r6, #4]
 8008530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008532:	07d9      	lsls	r1, r3, #31
 8008534:	d405      	bmi.n	8008542 <_vfiprintf_r+0x32>
 8008536:	89ab      	ldrh	r3, [r5, #12]
 8008538:	059a      	lsls	r2, r3, #22
 800853a:	d402      	bmi.n	8008542 <_vfiprintf_r+0x32>
 800853c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800853e:	f7ff fe75 	bl	800822c <__retarget_lock_acquire_recursive>
 8008542:	89ab      	ldrh	r3, [r5, #12]
 8008544:	071b      	lsls	r3, r3, #28
 8008546:	d501      	bpl.n	800854c <_vfiprintf_r+0x3c>
 8008548:	692b      	ldr	r3, [r5, #16]
 800854a:	b9eb      	cbnz	r3, 8008588 <_vfiprintf_r+0x78>
 800854c:	4629      	mov	r1, r5
 800854e:	4630      	mov	r0, r6
 8008550:	f7ff fc46 	bl	8007de0 <__swsetup_r>
 8008554:	b1c0      	cbz	r0, 8008588 <_vfiprintf_r+0x78>
 8008556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008558:	07dc      	lsls	r4, r3, #31
 800855a:	d50e      	bpl.n	800857a <_vfiprintf_r+0x6a>
 800855c:	f04f 30ff 	mov.w	r0, #4294967295
 8008560:	b01d      	add	sp, #116	; 0x74
 8008562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008566:	4b7b      	ldr	r3, [pc, #492]	; (8008754 <_vfiprintf_r+0x244>)
 8008568:	429d      	cmp	r5, r3
 800856a:	d101      	bne.n	8008570 <_vfiprintf_r+0x60>
 800856c:	68b5      	ldr	r5, [r6, #8]
 800856e:	e7df      	b.n	8008530 <_vfiprintf_r+0x20>
 8008570:	4b79      	ldr	r3, [pc, #484]	; (8008758 <_vfiprintf_r+0x248>)
 8008572:	429d      	cmp	r5, r3
 8008574:	bf08      	it	eq
 8008576:	68f5      	ldreq	r5, [r6, #12]
 8008578:	e7da      	b.n	8008530 <_vfiprintf_r+0x20>
 800857a:	89ab      	ldrh	r3, [r5, #12]
 800857c:	0598      	lsls	r0, r3, #22
 800857e:	d4ed      	bmi.n	800855c <_vfiprintf_r+0x4c>
 8008580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008582:	f7ff fe54 	bl	800822e <__retarget_lock_release_recursive>
 8008586:	e7e9      	b.n	800855c <_vfiprintf_r+0x4c>
 8008588:	2300      	movs	r3, #0
 800858a:	9309      	str	r3, [sp, #36]	; 0x24
 800858c:	2320      	movs	r3, #32
 800858e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008592:	f8cd 800c 	str.w	r8, [sp, #12]
 8008596:	2330      	movs	r3, #48	; 0x30
 8008598:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800875c <_vfiprintf_r+0x24c>
 800859c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085a0:	f04f 0901 	mov.w	r9, #1
 80085a4:	4623      	mov	r3, r4
 80085a6:	469a      	mov	sl, r3
 80085a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ac:	b10a      	cbz	r2, 80085b2 <_vfiprintf_r+0xa2>
 80085ae:	2a25      	cmp	r2, #37	; 0x25
 80085b0:	d1f9      	bne.n	80085a6 <_vfiprintf_r+0x96>
 80085b2:	ebba 0b04 	subs.w	fp, sl, r4
 80085b6:	d00b      	beq.n	80085d0 <_vfiprintf_r+0xc0>
 80085b8:	465b      	mov	r3, fp
 80085ba:	4622      	mov	r2, r4
 80085bc:	4629      	mov	r1, r5
 80085be:	4630      	mov	r0, r6
 80085c0:	f7ff ff93 	bl	80084ea <__sfputs_r>
 80085c4:	3001      	adds	r0, #1
 80085c6:	f000 80aa 	beq.w	800871e <_vfiprintf_r+0x20e>
 80085ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085cc:	445a      	add	r2, fp
 80085ce:	9209      	str	r2, [sp, #36]	; 0x24
 80085d0:	f89a 3000 	ldrb.w	r3, [sl]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 80a2 	beq.w	800871e <_vfiprintf_r+0x20e>
 80085da:	2300      	movs	r3, #0
 80085dc:	f04f 32ff 	mov.w	r2, #4294967295
 80085e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085e4:	f10a 0a01 	add.w	sl, sl, #1
 80085e8:	9304      	str	r3, [sp, #16]
 80085ea:	9307      	str	r3, [sp, #28]
 80085ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085f0:	931a      	str	r3, [sp, #104]	; 0x68
 80085f2:	4654      	mov	r4, sl
 80085f4:	2205      	movs	r2, #5
 80085f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085fa:	4858      	ldr	r0, [pc, #352]	; (800875c <_vfiprintf_r+0x24c>)
 80085fc:	f7f7 fe38 	bl	8000270 <memchr>
 8008600:	9a04      	ldr	r2, [sp, #16]
 8008602:	b9d8      	cbnz	r0, 800863c <_vfiprintf_r+0x12c>
 8008604:	06d1      	lsls	r1, r2, #27
 8008606:	bf44      	itt	mi
 8008608:	2320      	movmi	r3, #32
 800860a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800860e:	0713      	lsls	r3, r2, #28
 8008610:	bf44      	itt	mi
 8008612:	232b      	movmi	r3, #43	; 0x2b
 8008614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008618:	f89a 3000 	ldrb.w	r3, [sl]
 800861c:	2b2a      	cmp	r3, #42	; 0x2a
 800861e:	d015      	beq.n	800864c <_vfiprintf_r+0x13c>
 8008620:	9a07      	ldr	r2, [sp, #28]
 8008622:	4654      	mov	r4, sl
 8008624:	2000      	movs	r0, #0
 8008626:	f04f 0c0a 	mov.w	ip, #10
 800862a:	4621      	mov	r1, r4
 800862c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008630:	3b30      	subs	r3, #48	; 0x30
 8008632:	2b09      	cmp	r3, #9
 8008634:	d94e      	bls.n	80086d4 <_vfiprintf_r+0x1c4>
 8008636:	b1b0      	cbz	r0, 8008666 <_vfiprintf_r+0x156>
 8008638:	9207      	str	r2, [sp, #28]
 800863a:	e014      	b.n	8008666 <_vfiprintf_r+0x156>
 800863c:	eba0 0308 	sub.w	r3, r0, r8
 8008640:	fa09 f303 	lsl.w	r3, r9, r3
 8008644:	4313      	orrs	r3, r2
 8008646:	9304      	str	r3, [sp, #16]
 8008648:	46a2      	mov	sl, r4
 800864a:	e7d2      	b.n	80085f2 <_vfiprintf_r+0xe2>
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	1d19      	adds	r1, r3, #4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	9103      	str	r1, [sp, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	bfbb      	ittet	lt
 8008658:	425b      	neglt	r3, r3
 800865a:	f042 0202 	orrlt.w	r2, r2, #2
 800865e:	9307      	strge	r3, [sp, #28]
 8008660:	9307      	strlt	r3, [sp, #28]
 8008662:	bfb8      	it	lt
 8008664:	9204      	strlt	r2, [sp, #16]
 8008666:	7823      	ldrb	r3, [r4, #0]
 8008668:	2b2e      	cmp	r3, #46	; 0x2e
 800866a:	d10c      	bne.n	8008686 <_vfiprintf_r+0x176>
 800866c:	7863      	ldrb	r3, [r4, #1]
 800866e:	2b2a      	cmp	r3, #42	; 0x2a
 8008670:	d135      	bne.n	80086de <_vfiprintf_r+0x1ce>
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	1d1a      	adds	r2, r3, #4
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	9203      	str	r2, [sp, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	bfb8      	it	lt
 800867e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008682:	3402      	adds	r4, #2
 8008684:	9305      	str	r3, [sp, #20]
 8008686:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800876c <_vfiprintf_r+0x25c>
 800868a:	7821      	ldrb	r1, [r4, #0]
 800868c:	2203      	movs	r2, #3
 800868e:	4650      	mov	r0, sl
 8008690:	f7f7 fdee 	bl	8000270 <memchr>
 8008694:	b140      	cbz	r0, 80086a8 <_vfiprintf_r+0x198>
 8008696:	2340      	movs	r3, #64	; 0x40
 8008698:	eba0 000a 	sub.w	r0, r0, sl
 800869c:	fa03 f000 	lsl.w	r0, r3, r0
 80086a0:	9b04      	ldr	r3, [sp, #16]
 80086a2:	4303      	orrs	r3, r0
 80086a4:	3401      	adds	r4, #1
 80086a6:	9304      	str	r3, [sp, #16]
 80086a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ac:	482c      	ldr	r0, [pc, #176]	; (8008760 <_vfiprintf_r+0x250>)
 80086ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086b2:	2206      	movs	r2, #6
 80086b4:	f7f7 fddc 	bl	8000270 <memchr>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d03f      	beq.n	800873c <_vfiprintf_r+0x22c>
 80086bc:	4b29      	ldr	r3, [pc, #164]	; (8008764 <_vfiprintf_r+0x254>)
 80086be:	bb1b      	cbnz	r3, 8008708 <_vfiprintf_r+0x1f8>
 80086c0:	9b03      	ldr	r3, [sp, #12]
 80086c2:	3307      	adds	r3, #7
 80086c4:	f023 0307 	bic.w	r3, r3, #7
 80086c8:	3308      	adds	r3, #8
 80086ca:	9303      	str	r3, [sp, #12]
 80086cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ce:	443b      	add	r3, r7
 80086d0:	9309      	str	r3, [sp, #36]	; 0x24
 80086d2:	e767      	b.n	80085a4 <_vfiprintf_r+0x94>
 80086d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80086d8:	460c      	mov	r4, r1
 80086da:	2001      	movs	r0, #1
 80086dc:	e7a5      	b.n	800862a <_vfiprintf_r+0x11a>
 80086de:	2300      	movs	r3, #0
 80086e0:	3401      	adds	r4, #1
 80086e2:	9305      	str	r3, [sp, #20]
 80086e4:	4619      	mov	r1, r3
 80086e6:	f04f 0c0a 	mov.w	ip, #10
 80086ea:	4620      	mov	r0, r4
 80086ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086f0:	3a30      	subs	r2, #48	; 0x30
 80086f2:	2a09      	cmp	r2, #9
 80086f4:	d903      	bls.n	80086fe <_vfiprintf_r+0x1ee>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0c5      	beq.n	8008686 <_vfiprintf_r+0x176>
 80086fa:	9105      	str	r1, [sp, #20]
 80086fc:	e7c3      	b.n	8008686 <_vfiprintf_r+0x176>
 80086fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008702:	4604      	mov	r4, r0
 8008704:	2301      	movs	r3, #1
 8008706:	e7f0      	b.n	80086ea <_vfiprintf_r+0x1da>
 8008708:	ab03      	add	r3, sp, #12
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	462a      	mov	r2, r5
 800870e:	4b16      	ldr	r3, [pc, #88]	; (8008768 <_vfiprintf_r+0x258>)
 8008710:	a904      	add	r1, sp, #16
 8008712:	4630      	mov	r0, r6
 8008714:	f3af 8000 	nop.w
 8008718:	4607      	mov	r7, r0
 800871a:	1c78      	adds	r0, r7, #1
 800871c:	d1d6      	bne.n	80086cc <_vfiprintf_r+0x1bc>
 800871e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008720:	07d9      	lsls	r1, r3, #31
 8008722:	d405      	bmi.n	8008730 <_vfiprintf_r+0x220>
 8008724:	89ab      	ldrh	r3, [r5, #12]
 8008726:	059a      	lsls	r2, r3, #22
 8008728:	d402      	bmi.n	8008730 <_vfiprintf_r+0x220>
 800872a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800872c:	f7ff fd7f 	bl	800822e <__retarget_lock_release_recursive>
 8008730:	89ab      	ldrh	r3, [r5, #12]
 8008732:	065b      	lsls	r3, r3, #25
 8008734:	f53f af12 	bmi.w	800855c <_vfiprintf_r+0x4c>
 8008738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800873a:	e711      	b.n	8008560 <_vfiprintf_r+0x50>
 800873c:	ab03      	add	r3, sp, #12
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	462a      	mov	r2, r5
 8008742:	4b09      	ldr	r3, [pc, #36]	; (8008768 <_vfiprintf_r+0x258>)
 8008744:	a904      	add	r1, sp, #16
 8008746:	4630      	mov	r0, r6
 8008748:	f000 f880 	bl	800884c <_printf_i>
 800874c:	e7e4      	b.n	8008718 <_vfiprintf_r+0x208>
 800874e:	bf00      	nop
 8008750:	08008df0 	.word	0x08008df0
 8008754:	08008e10 	.word	0x08008e10
 8008758:	08008dd0 	.word	0x08008dd0
 800875c:	08008e30 	.word	0x08008e30
 8008760:	08008e3a 	.word	0x08008e3a
 8008764:	00000000 	.word	0x00000000
 8008768:	080084eb 	.word	0x080084eb
 800876c:	08008e36 	.word	0x08008e36

08008770 <_printf_common>:
 8008770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008774:	4616      	mov	r6, r2
 8008776:	4699      	mov	r9, r3
 8008778:	688a      	ldr	r2, [r1, #8]
 800877a:	690b      	ldr	r3, [r1, #16]
 800877c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008780:	4293      	cmp	r3, r2
 8008782:	bfb8      	it	lt
 8008784:	4613      	movlt	r3, r2
 8008786:	6033      	str	r3, [r6, #0]
 8008788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800878c:	4607      	mov	r7, r0
 800878e:	460c      	mov	r4, r1
 8008790:	b10a      	cbz	r2, 8008796 <_printf_common+0x26>
 8008792:	3301      	adds	r3, #1
 8008794:	6033      	str	r3, [r6, #0]
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	0699      	lsls	r1, r3, #26
 800879a:	bf42      	ittt	mi
 800879c:	6833      	ldrmi	r3, [r6, #0]
 800879e:	3302      	addmi	r3, #2
 80087a0:	6033      	strmi	r3, [r6, #0]
 80087a2:	6825      	ldr	r5, [r4, #0]
 80087a4:	f015 0506 	ands.w	r5, r5, #6
 80087a8:	d106      	bne.n	80087b8 <_printf_common+0x48>
 80087aa:	f104 0a19 	add.w	sl, r4, #25
 80087ae:	68e3      	ldr	r3, [r4, #12]
 80087b0:	6832      	ldr	r2, [r6, #0]
 80087b2:	1a9b      	subs	r3, r3, r2
 80087b4:	42ab      	cmp	r3, r5
 80087b6:	dc26      	bgt.n	8008806 <_printf_common+0x96>
 80087b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087bc:	1e13      	subs	r3, r2, #0
 80087be:	6822      	ldr	r2, [r4, #0]
 80087c0:	bf18      	it	ne
 80087c2:	2301      	movne	r3, #1
 80087c4:	0692      	lsls	r2, r2, #26
 80087c6:	d42b      	bmi.n	8008820 <_printf_common+0xb0>
 80087c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087cc:	4649      	mov	r1, r9
 80087ce:	4638      	mov	r0, r7
 80087d0:	47c0      	blx	r8
 80087d2:	3001      	adds	r0, #1
 80087d4:	d01e      	beq.n	8008814 <_printf_common+0xa4>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	68e5      	ldr	r5, [r4, #12]
 80087da:	6832      	ldr	r2, [r6, #0]
 80087dc:	f003 0306 	and.w	r3, r3, #6
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	bf08      	it	eq
 80087e4:	1aad      	subeq	r5, r5, r2
 80087e6:	68a3      	ldr	r3, [r4, #8]
 80087e8:	6922      	ldr	r2, [r4, #16]
 80087ea:	bf0c      	ite	eq
 80087ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087f0:	2500      	movne	r5, #0
 80087f2:	4293      	cmp	r3, r2
 80087f4:	bfc4      	itt	gt
 80087f6:	1a9b      	subgt	r3, r3, r2
 80087f8:	18ed      	addgt	r5, r5, r3
 80087fa:	2600      	movs	r6, #0
 80087fc:	341a      	adds	r4, #26
 80087fe:	42b5      	cmp	r5, r6
 8008800:	d11a      	bne.n	8008838 <_printf_common+0xc8>
 8008802:	2000      	movs	r0, #0
 8008804:	e008      	b.n	8008818 <_printf_common+0xa8>
 8008806:	2301      	movs	r3, #1
 8008808:	4652      	mov	r2, sl
 800880a:	4649      	mov	r1, r9
 800880c:	4638      	mov	r0, r7
 800880e:	47c0      	blx	r8
 8008810:	3001      	adds	r0, #1
 8008812:	d103      	bne.n	800881c <_printf_common+0xac>
 8008814:	f04f 30ff 	mov.w	r0, #4294967295
 8008818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881c:	3501      	adds	r5, #1
 800881e:	e7c6      	b.n	80087ae <_printf_common+0x3e>
 8008820:	18e1      	adds	r1, r4, r3
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	2030      	movs	r0, #48	; 0x30
 8008826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800882a:	4422      	add	r2, r4
 800882c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008834:	3302      	adds	r3, #2
 8008836:	e7c7      	b.n	80087c8 <_printf_common+0x58>
 8008838:	2301      	movs	r3, #1
 800883a:	4622      	mov	r2, r4
 800883c:	4649      	mov	r1, r9
 800883e:	4638      	mov	r0, r7
 8008840:	47c0      	blx	r8
 8008842:	3001      	adds	r0, #1
 8008844:	d0e6      	beq.n	8008814 <_printf_common+0xa4>
 8008846:	3601      	adds	r6, #1
 8008848:	e7d9      	b.n	80087fe <_printf_common+0x8e>
	...

0800884c <_printf_i>:
 800884c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008850:	7e0f      	ldrb	r7, [r1, #24]
 8008852:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008854:	2f78      	cmp	r7, #120	; 0x78
 8008856:	4691      	mov	r9, r2
 8008858:	4680      	mov	r8, r0
 800885a:	460c      	mov	r4, r1
 800885c:	469a      	mov	sl, r3
 800885e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008862:	d807      	bhi.n	8008874 <_printf_i+0x28>
 8008864:	2f62      	cmp	r7, #98	; 0x62
 8008866:	d80a      	bhi.n	800887e <_printf_i+0x32>
 8008868:	2f00      	cmp	r7, #0
 800886a:	f000 80d8 	beq.w	8008a1e <_printf_i+0x1d2>
 800886e:	2f58      	cmp	r7, #88	; 0x58
 8008870:	f000 80a3 	beq.w	80089ba <_printf_i+0x16e>
 8008874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800887c:	e03a      	b.n	80088f4 <_printf_i+0xa8>
 800887e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008882:	2b15      	cmp	r3, #21
 8008884:	d8f6      	bhi.n	8008874 <_printf_i+0x28>
 8008886:	a101      	add	r1, pc, #4	; (adr r1, 800888c <_printf_i+0x40>)
 8008888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800888c:	080088e5 	.word	0x080088e5
 8008890:	080088f9 	.word	0x080088f9
 8008894:	08008875 	.word	0x08008875
 8008898:	08008875 	.word	0x08008875
 800889c:	08008875 	.word	0x08008875
 80088a0:	08008875 	.word	0x08008875
 80088a4:	080088f9 	.word	0x080088f9
 80088a8:	08008875 	.word	0x08008875
 80088ac:	08008875 	.word	0x08008875
 80088b0:	08008875 	.word	0x08008875
 80088b4:	08008875 	.word	0x08008875
 80088b8:	08008a05 	.word	0x08008a05
 80088bc:	08008929 	.word	0x08008929
 80088c0:	080089e7 	.word	0x080089e7
 80088c4:	08008875 	.word	0x08008875
 80088c8:	08008875 	.word	0x08008875
 80088cc:	08008a27 	.word	0x08008a27
 80088d0:	08008875 	.word	0x08008875
 80088d4:	08008929 	.word	0x08008929
 80088d8:	08008875 	.word	0x08008875
 80088dc:	08008875 	.word	0x08008875
 80088e0:	080089ef 	.word	0x080089ef
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	1d1a      	adds	r2, r3, #4
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	602a      	str	r2, [r5, #0]
 80088ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088f4:	2301      	movs	r3, #1
 80088f6:	e0a3      	b.n	8008a40 <_printf_i+0x1f4>
 80088f8:	6820      	ldr	r0, [r4, #0]
 80088fa:	6829      	ldr	r1, [r5, #0]
 80088fc:	0606      	lsls	r6, r0, #24
 80088fe:	f101 0304 	add.w	r3, r1, #4
 8008902:	d50a      	bpl.n	800891a <_printf_i+0xce>
 8008904:	680e      	ldr	r6, [r1, #0]
 8008906:	602b      	str	r3, [r5, #0]
 8008908:	2e00      	cmp	r6, #0
 800890a:	da03      	bge.n	8008914 <_printf_i+0xc8>
 800890c:	232d      	movs	r3, #45	; 0x2d
 800890e:	4276      	negs	r6, r6
 8008910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008914:	485e      	ldr	r0, [pc, #376]	; (8008a90 <_printf_i+0x244>)
 8008916:	230a      	movs	r3, #10
 8008918:	e019      	b.n	800894e <_printf_i+0x102>
 800891a:	680e      	ldr	r6, [r1, #0]
 800891c:	602b      	str	r3, [r5, #0]
 800891e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008922:	bf18      	it	ne
 8008924:	b236      	sxthne	r6, r6
 8008926:	e7ef      	b.n	8008908 <_printf_i+0xbc>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	6820      	ldr	r0, [r4, #0]
 800892c:	1d19      	adds	r1, r3, #4
 800892e:	6029      	str	r1, [r5, #0]
 8008930:	0601      	lsls	r1, r0, #24
 8008932:	d501      	bpl.n	8008938 <_printf_i+0xec>
 8008934:	681e      	ldr	r6, [r3, #0]
 8008936:	e002      	b.n	800893e <_printf_i+0xf2>
 8008938:	0646      	lsls	r6, r0, #25
 800893a:	d5fb      	bpl.n	8008934 <_printf_i+0xe8>
 800893c:	881e      	ldrh	r6, [r3, #0]
 800893e:	4854      	ldr	r0, [pc, #336]	; (8008a90 <_printf_i+0x244>)
 8008940:	2f6f      	cmp	r7, #111	; 0x6f
 8008942:	bf0c      	ite	eq
 8008944:	2308      	moveq	r3, #8
 8008946:	230a      	movne	r3, #10
 8008948:	2100      	movs	r1, #0
 800894a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800894e:	6865      	ldr	r5, [r4, #4]
 8008950:	60a5      	str	r5, [r4, #8]
 8008952:	2d00      	cmp	r5, #0
 8008954:	bfa2      	ittt	ge
 8008956:	6821      	ldrge	r1, [r4, #0]
 8008958:	f021 0104 	bicge.w	r1, r1, #4
 800895c:	6021      	strge	r1, [r4, #0]
 800895e:	b90e      	cbnz	r6, 8008964 <_printf_i+0x118>
 8008960:	2d00      	cmp	r5, #0
 8008962:	d04d      	beq.n	8008a00 <_printf_i+0x1b4>
 8008964:	4615      	mov	r5, r2
 8008966:	fbb6 f1f3 	udiv	r1, r6, r3
 800896a:	fb03 6711 	mls	r7, r3, r1, r6
 800896e:	5dc7      	ldrb	r7, [r0, r7]
 8008970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008974:	4637      	mov	r7, r6
 8008976:	42bb      	cmp	r3, r7
 8008978:	460e      	mov	r6, r1
 800897a:	d9f4      	bls.n	8008966 <_printf_i+0x11a>
 800897c:	2b08      	cmp	r3, #8
 800897e:	d10b      	bne.n	8008998 <_printf_i+0x14c>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	07de      	lsls	r6, r3, #31
 8008984:	d508      	bpl.n	8008998 <_printf_i+0x14c>
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	6861      	ldr	r1, [r4, #4]
 800898a:	4299      	cmp	r1, r3
 800898c:	bfde      	ittt	le
 800898e:	2330      	movle	r3, #48	; 0x30
 8008990:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008994:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008998:	1b52      	subs	r2, r2, r5
 800899a:	6122      	str	r2, [r4, #16]
 800899c:	f8cd a000 	str.w	sl, [sp]
 80089a0:	464b      	mov	r3, r9
 80089a2:	aa03      	add	r2, sp, #12
 80089a4:	4621      	mov	r1, r4
 80089a6:	4640      	mov	r0, r8
 80089a8:	f7ff fee2 	bl	8008770 <_printf_common>
 80089ac:	3001      	adds	r0, #1
 80089ae:	d14c      	bne.n	8008a4a <_printf_i+0x1fe>
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	b004      	add	sp, #16
 80089b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ba:	4835      	ldr	r0, [pc, #212]	; (8008a90 <_printf_i+0x244>)
 80089bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089c0:	6829      	ldr	r1, [r5, #0]
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80089c8:	6029      	str	r1, [r5, #0]
 80089ca:	061d      	lsls	r5, r3, #24
 80089cc:	d514      	bpl.n	80089f8 <_printf_i+0x1ac>
 80089ce:	07df      	lsls	r7, r3, #31
 80089d0:	bf44      	itt	mi
 80089d2:	f043 0320 	orrmi.w	r3, r3, #32
 80089d6:	6023      	strmi	r3, [r4, #0]
 80089d8:	b91e      	cbnz	r6, 80089e2 <_printf_i+0x196>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	f023 0320 	bic.w	r3, r3, #32
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	2310      	movs	r3, #16
 80089e4:	e7b0      	b.n	8008948 <_printf_i+0xfc>
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	f043 0320 	orr.w	r3, r3, #32
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	2378      	movs	r3, #120	; 0x78
 80089f0:	4828      	ldr	r0, [pc, #160]	; (8008a94 <_printf_i+0x248>)
 80089f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089f6:	e7e3      	b.n	80089c0 <_printf_i+0x174>
 80089f8:	0659      	lsls	r1, r3, #25
 80089fa:	bf48      	it	mi
 80089fc:	b2b6      	uxthmi	r6, r6
 80089fe:	e7e6      	b.n	80089ce <_printf_i+0x182>
 8008a00:	4615      	mov	r5, r2
 8008a02:	e7bb      	b.n	800897c <_printf_i+0x130>
 8008a04:	682b      	ldr	r3, [r5, #0]
 8008a06:	6826      	ldr	r6, [r4, #0]
 8008a08:	6961      	ldr	r1, [r4, #20]
 8008a0a:	1d18      	adds	r0, r3, #4
 8008a0c:	6028      	str	r0, [r5, #0]
 8008a0e:	0635      	lsls	r5, r6, #24
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	d501      	bpl.n	8008a18 <_printf_i+0x1cc>
 8008a14:	6019      	str	r1, [r3, #0]
 8008a16:	e002      	b.n	8008a1e <_printf_i+0x1d2>
 8008a18:	0670      	lsls	r0, r6, #25
 8008a1a:	d5fb      	bpl.n	8008a14 <_printf_i+0x1c8>
 8008a1c:	8019      	strh	r1, [r3, #0]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	6123      	str	r3, [r4, #16]
 8008a22:	4615      	mov	r5, r2
 8008a24:	e7ba      	b.n	800899c <_printf_i+0x150>
 8008a26:	682b      	ldr	r3, [r5, #0]
 8008a28:	1d1a      	adds	r2, r3, #4
 8008a2a:	602a      	str	r2, [r5, #0]
 8008a2c:	681d      	ldr	r5, [r3, #0]
 8008a2e:	6862      	ldr	r2, [r4, #4]
 8008a30:	2100      	movs	r1, #0
 8008a32:	4628      	mov	r0, r5
 8008a34:	f7f7 fc1c 	bl	8000270 <memchr>
 8008a38:	b108      	cbz	r0, 8008a3e <_printf_i+0x1f2>
 8008a3a:	1b40      	subs	r0, r0, r5
 8008a3c:	6060      	str	r0, [r4, #4]
 8008a3e:	6863      	ldr	r3, [r4, #4]
 8008a40:	6123      	str	r3, [r4, #16]
 8008a42:	2300      	movs	r3, #0
 8008a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a48:	e7a8      	b.n	800899c <_printf_i+0x150>
 8008a4a:	6923      	ldr	r3, [r4, #16]
 8008a4c:	462a      	mov	r2, r5
 8008a4e:	4649      	mov	r1, r9
 8008a50:	4640      	mov	r0, r8
 8008a52:	47d0      	blx	sl
 8008a54:	3001      	adds	r0, #1
 8008a56:	d0ab      	beq.n	80089b0 <_printf_i+0x164>
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	079b      	lsls	r3, r3, #30
 8008a5c:	d413      	bmi.n	8008a86 <_printf_i+0x23a>
 8008a5e:	68e0      	ldr	r0, [r4, #12]
 8008a60:	9b03      	ldr	r3, [sp, #12]
 8008a62:	4298      	cmp	r0, r3
 8008a64:	bfb8      	it	lt
 8008a66:	4618      	movlt	r0, r3
 8008a68:	e7a4      	b.n	80089b4 <_printf_i+0x168>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4632      	mov	r2, r6
 8008a6e:	4649      	mov	r1, r9
 8008a70:	4640      	mov	r0, r8
 8008a72:	47d0      	blx	sl
 8008a74:	3001      	adds	r0, #1
 8008a76:	d09b      	beq.n	80089b0 <_printf_i+0x164>
 8008a78:	3501      	adds	r5, #1
 8008a7a:	68e3      	ldr	r3, [r4, #12]
 8008a7c:	9903      	ldr	r1, [sp, #12]
 8008a7e:	1a5b      	subs	r3, r3, r1
 8008a80:	42ab      	cmp	r3, r5
 8008a82:	dcf2      	bgt.n	8008a6a <_printf_i+0x21e>
 8008a84:	e7eb      	b.n	8008a5e <_printf_i+0x212>
 8008a86:	2500      	movs	r5, #0
 8008a88:	f104 0619 	add.w	r6, r4, #25
 8008a8c:	e7f5      	b.n	8008a7a <_printf_i+0x22e>
 8008a8e:	bf00      	nop
 8008a90:	08008e41 	.word	0x08008e41
 8008a94:	08008e52 	.word	0x08008e52

08008a98 <_sbrk_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d06      	ldr	r5, [pc, #24]	; (8008ab4 <_sbrk_r+0x1c>)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	602b      	str	r3, [r5, #0]
 8008aa4:	f7f8 fa10 	bl	8000ec8 <_sbrk>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d102      	bne.n	8008ab2 <_sbrk_r+0x1a>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	b103      	cbz	r3, 8008ab2 <_sbrk_r+0x1a>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	2001392c 	.word	0x2001392c

08008ab8 <__sread>:
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	460c      	mov	r4, r1
 8008abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ac0:	f000 f88e 	bl	8008be0 <_read_r>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	bfab      	itete	ge
 8008ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008aca:	89a3      	ldrhlt	r3, [r4, #12]
 8008acc:	181b      	addge	r3, r3, r0
 8008ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ad2:	bfac      	ite	ge
 8008ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ad6:	81a3      	strhlt	r3, [r4, #12]
 8008ad8:	bd10      	pop	{r4, pc}

08008ada <__swrite>:
 8008ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ade:	461f      	mov	r7, r3
 8008ae0:	898b      	ldrh	r3, [r1, #12]
 8008ae2:	05db      	lsls	r3, r3, #23
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	4616      	mov	r6, r2
 8008aea:	d505      	bpl.n	8008af8 <__swrite+0x1e>
 8008aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af0:	2302      	movs	r3, #2
 8008af2:	2200      	movs	r2, #0
 8008af4:	f000 f856 	bl	8008ba4 <_lseek_r>
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b02:	81a3      	strh	r3, [r4, #12]
 8008b04:	4632      	mov	r2, r6
 8008b06:	463b      	mov	r3, r7
 8008b08:	4628      	mov	r0, r5
 8008b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0e:	f7ff b825 	b.w	8007b5c <_write_r>

08008b12 <__sseek>:
 8008b12:	b510      	push	{r4, lr}
 8008b14:	460c      	mov	r4, r1
 8008b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b1a:	f000 f843 	bl	8008ba4 <_lseek_r>
 8008b1e:	1c43      	adds	r3, r0, #1
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	bf15      	itete	ne
 8008b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b2e:	81a3      	strheq	r3, [r4, #12]
 8008b30:	bf18      	it	ne
 8008b32:	81a3      	strhne	r3, [r4, #12]
 8008b34:	bd10      	pop	{r4, pc}

08008b36 <__sclose>:
 8008b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b3a:	f000 b801 	b.w	8008b40 <_close_r>
	...

08008b40 <_close_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4d06      	ldr	r5, [pc, #24]	; (8008b5c <_close_r+0x1c>)
 8008b44:	2300      	movs	r3, #0
 8008b46:	4604      	mov	r4, r0
 8008b48:	4608      	mov	r0, r1
 8008b4a:	602b      	str	r3, [r5, #0]
 8008b4c:	f7f8 f987 	bl	8000e5e <_close>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d102      	bne.n	8008b5a <_close_r+0x1a>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	b103      	cbz	r3, 8008b5a <_close_r+0x1a>
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	2001392c 	.word	0x2001392c

08008b60 <_fstat_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d07      	ldr	r5, [pc, #28]	; (8008b80 <_fstat_r+0x20>)
 8008b64:	2300      	movs	r3, #0
 8008b66:	4604      	mov	r4, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	602b      	str	r3, [r5, #0]
 8008b6e:	f7f8 f982 	bl	8000e76 <_fstat>
 8008b72:	1c43      	adds	r3, r0, #1
 8008b74:	d102      	bne.n	8008b7c <_fstat_r+0x1c>
 8008b76:	682b      	ldr	r3, [r5, #0]
 8008b78:	b103      	cbz	r3, 8008b7c <_fstat_r+0x1c>
 8008b7a:	6023      	str	r3, [r4, #0]
 8008b7c:	bd38      	pop	{r3, r4, r5, pc}
 8008b7e:	bf00      	nop
 8008b80:	2001392c 	.word	0x2001392c

08008b84 <_isatty_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d06      	ldr	r5, [pc, #24]	; (8008ba0 <_isatty_r+0x1c>)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	f7f8 f981 	bl	8000e96 <_isatty>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_isatty_r+0x1a>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_isatty_r+0x1a>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	2001392c 	.word	0x2001392c

08008ba4 <_lseek_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d07      	ldr	r5, [pc, #28]	; (8008bc4 <_lseek_r+0x20>)
 8008ba8:	4604      	mov	r4, r0
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	602a      	str	r2, [r5, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f7f8 f97a 	bl	8000eac <_lseek>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_lseek_r+0x1e>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_lseek_r+0x1e>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	2001392c 	.word	0x2001392c

08008bc8 <__malloc_lock>:
 8008bc8:	4801      	ldr	r0, [pc, #4]	; (8008bd0 <__malloc_lock+0x8>)
 8008bca:	f7ff bb2f 	b.w	800822c <__retarget_lock_acquire_recursive>
 8008bce:	bf00      	nop
 8008bd0:	2001391f 	.word	0x2001391f

08008bd4 <__malloc_unlock>:
 8008bd4:	4801      	ldr	r0, [pc, #4]	; (8008bdc <__malloc_unlock+0x8>)
 8008bd6:	f7ff bb2a 	b.w	800822e <__retarget_lock_release_recursive>
 8008bda:	bf00      	nop
 8008bdc:	2001391f 	.word	0x2001391f

08008be0 <_read_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4d07      	ldr	r5, [pc, #28]	; (8008c00 <_read_r+0x20>)
 8008be4:	4604      	mov	r4, r0
 8008be6:	4608      	mov	r0, r1
 8008be8:	4611      	mov	r1, r2
 8008bea:	2200      	movs	r2, #0
 8008bec:	602a      	str	r2, [r5, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f7f8 f918 	bl	8000e24 <_read>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_read_r+0x1e>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_read_r+0x1e>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	2001392c 	.word	0x2001392c

08008c04 <_init>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	bf00      	nop
 8008c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0a:	bc08      	pop	{r3}
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	4770      	bx	lr

08008c10 <_fini>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	bf00      	nop
 8008c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c16:	bc08      	pop	{r3}
 8008c18:	469e      	mov	lr, r3
 8008c1a:	4770      	bx	lr

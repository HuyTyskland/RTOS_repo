
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007db0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08007f40  08007f40  00017f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008114  08008114  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008114  08008114  00018114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800811c  0800811c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800811c  0800811c  0001811c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008120  08008120  00018120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000138ac  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001392c  2001392c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017512  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003510  00000000  00000000  000375c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  0003aad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001338  00000000  00000000  0003bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ce1  00000000  00000000  0003d300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001739d  00000000  00000000  00061fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da874  00000000  00000000  0007937e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00153bf2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e9c  00000000  00000000  00153c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f28 	.word	0x08007f28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08007f28 	.word	0x08007f28

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f48 	.word	0x20012f48

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fc4d 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f857 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f8bf 	bl	80007b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // enable CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <main+0x98>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a20      	ldr	r2, [pc, #128]	; (80006bc <main+0x98>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000642:	481f      	ldr	r0, [pc, #124]	; (80006c0 <main+0x9c>)
 8000644:	f004 fd72 	bl	800512c <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000648:	f004 fb2a 	bl	8004ca0 <SEGGER_SYSVIEW_Conf>
  printf(" start here");
 800064c:	481d      	ldr	r0, [pc, #116]	; (80006c4 <main+0xa0>)
 800064e:	f006 fcef 	bl	8007030 <iprintf>

  status = xTaskCreate(task1_handler, "TASK_1", 200, NULL, 2, &task_1);
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <main+0xa4>)
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2302      	movs	r3, #2
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	22c8      	movs	r2, #200	; 0xc8
 800065e:	491b      	ldr	r1, [pc, #108]	; (80006cc <main+0xa8>)
 8000660:	481b      	ldr	r0, [pc, #108]	; (80006d0 <main+0xac>)
 8000662:	f002 fa55 	bl	8002b10 <xTaskCreate>
 8000666:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d00a      	beq.n	8000684 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800066e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000672:	f383 8811 	msr	BASEPRI, r3
 8000676:	f3bf 8f6f 	isb	sy
 800067a:	f3bf 8f4f 	dsb	sy
 800067e:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000680:	bf00      	nop
 8000682:	e7fe      	b.n	8000682 <main+0x5e>

  status = xTaskCreate(task2_handler, "TASK_2", 200, NULL, 3, &task_2);
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <main+0xb0>)
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	2303      	movs	r3, #3
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	22c8      	movs	r2, #200	; 0xc8
 8000690:	4911      	ldr	r1, [pc, #68]	; (80006d8 <main+0xb4>)
 8000692:	4812      	ldr	r0, [pc, #72]	; (80006dc <main+0xb8>)
 8000694:	f002 fa3c 	bl	8002b10 <xTaskCreate>
 8000698:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d00a      	beq.n	80006b6 <main+0x92>
        __asm volatile
 80006a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a4:	f383 8811 	msr	BASEPRI, r3
 80006a8:	f3bf 8f6f 	isb	sy
 80006ac:	f3bf 8f4f 	dsb	sy
 80006b0:	607b      	str	r3, [r7, #4]
    }
 80006b2:	bf00      	nop
 80006b4:	e7fe      	b.n	80006b4 <main+0x90>

  // start task scheduler
  vTaskStartScheduler();
 80006b6:	f002 fcd7 	bl	8003068 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <main+0x96>
 80006bc:	e0001000 	.word	0xe0001000
 80006c0:	0007a120 	.word	0x0007a120
 80006c4:	08007f40 	.word	0x08007f40
 80006c8:	200000a0 	.word	0x200000a0
 80006cc:	08007f4c 	.word	0x08007f4c
 80006d0:	08000b29 	.word	0x08000b29
 80006d4:	200000a4 	.word	0x200000a4
 80006d8:	08007f54 	.word	0x08007f54
 80006dc:	08000b4d 	.word	0x08000b4d

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	; 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	2230      	movs	r2, #48	; 0x30
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f006 fc96 	bl	8007020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	4b28      	ldr	r3, [pc, #160]	; (80007ac <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	4a27      	ldr	r2, [pc, #156]	; (80007ac <SystemClock_Config+0xcc>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <SystemClock_Config+0xcc>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemClock_Config+0xd0>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemClock_Config+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000754:	2332      	movs	r3, #50	; 0x32
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800075c:	2307      	movs	r3, #7
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fec7 	bl	80014f8 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000770:	f000 fa10 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000780:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f928 	bl	80019e8 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800079e:	f000 f9f9 	bl	8000b94 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	; 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
 80007ce:	4ba6      	ldr	r3, [pc, #664]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4aa5      	ldr	r2, [pc, #660]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 80007d4:	f043 0310 	orr.w	r3, r3, #16
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4ba3      	ldr	r3, [pc, #652]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0310 	and.w	r3, r3, #16
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	4b9f      	ldr	r3, [pc, #636]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a9e      	ldr	r2, [pc, #632]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b9c      	ldr	r3, [pc, #624]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b98      	ldr	r3, [pc, #608]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a97      	ldr	r2, [pc, #604]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b95      	ldr	r3, [pc, #596]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b91      	ldr	r3, [pc, #580]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a90      	ldr	r2, [pc, #576]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b8e      	ldr	r3, [pc, #568]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b8a      	ldr	r3, [pc, #552]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a89      	ldr	r2, [pc, #548]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b87      	ldr	r3, [pc, #540]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b83      	ldr	r3, [pc, #524]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a82      	ldr	r2, [pc, #520]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b80      	ldr	r3, [pc, #512]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2108      	movs	r1, #8
 8000876:	487d      	ldr	r0, [pc, #500]	; (8000a6c <MX_GPIO_Init+0x2b8>)
 8000878:	f000 fde6 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2101      	movs	r1, #1
 8000880:	487b      	ldr	r0, [pc, #492]	; (8000a70 <MX_GPIO_Init+0x2bc>)
 8000882:	f000 fde1 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000886:	2200      	movs	r2, #0
 8000888:	f24f 0110 	movw	r1, #61456	; 0xf010
 800088c:	4879      	ldr	r0, [pc, #484]	; (8000a74 <MX_GPIO_Init+0x2c0>)
 800088e:	f000 fddb 	bl	8001448 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000892:	2308      	movs	r3, #8
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4870      	ldr	r0, [pc, #448]	; (8000a6c <MX_GPIO_Init+0x2b8>)
 80008aa:	f000 fc31 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	486a      	ldr	r0, [pc, #424]	; (8000a70 <MX_GPIO_Init+0x2bc>)
 80008c6:	f000 fc23 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ca:	2308      	movs	r3, #8
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008da:	2305      	movs	r3, #5
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4862      	ldr	r0, [pc, #392]	; (8000a70 <MX_GPIO_Init+0x2bc>)
 80008e6:	f000 fc13 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	485e      	ldr	r0, [pc, #376]	; (8000a78 <MX_GPIO_Init+0x2c4>)
 8000900:	f000 fc06 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000904:	2310      	movs	r3, #16
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000914:	2306      	movs	r3, #6
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4856      	ldr	r0, [pc, #344]	; (8000a78 <MX_GPIO_Init+0x2c4>)
 8000920:	f000 fbf6 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000924:	23e0      	movs	r3, #224	; 0xe0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000934:	2305      	movs	r3, #5
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	484e      	ldr	r0, [pc, #312]	; (8000a78 <MX_GPIO_Init+0x2c4>)
 8000940:	f000 fbe6 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000944:	2304      	movs	r3, #4
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4849      	ldr	r0, [pc, #292]	; (8000a7c <MX_GPIO_Init+0x2c8>)
 8000958:	f000 fbda 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800095c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096e:	2305      	movs	r3, #5
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4840      	ldr	r0, [pc, #256]	; (8000a7c <MX_GPIO_Init+0x2c8>)
 800097a:	f000 fbc9 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800097e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000982:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4837      	ldr	r0, [pc, #220]	; (8000a74 <MX_GPIO_Init+0x2c0>)
 8000998:	f000 fbba 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800099c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ae:	2306      	movs	r3, #6
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	482d      	ldr	r0, [pc, #180]	; (8000a70 <MX_GPIO_Init+0x2bc>)
 80009ba:	f000 fba9 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4829      	ldr	r0, [pc, #164]	; (8000a78 <MX_GPIO_Init+0x2c4>)
 80009d4:	f000 fb9c 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ea:	230a      	movs	r3, #10
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4820      	ldr	r0, [pc, #128]	; (8000a78 <MX_GPIO_Init+0x2c4>)
 80009f6:	f000 fb8b 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009fa:	2320      	movs	r3, #32
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4819      	ldr	r0, [pc, #100]	; (8000a74 <MX_GPIO_Init+0x2c0>)
 8000a0e:	f000 fb7f 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a18:	2312      	movs	r3, #18
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a24:	2304      	movs	r3, #4
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4813      	ldr	r0, [pc, #76]	; (8000a7c <MX_GPIO_Init+0x2c8>)
 8000a30:	f000 fb6e 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a38:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <MX_GPIO_Init+0x2b8>)
 8000a4a:	f000 fb61 	bl	8001110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2106      	movs	r1, #6
 8000a52:	2006      	movs	r0, #6
 8000a54:	f000 fb32 	bl	80010bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a58:	2006      	movs	r0, #6
 8000a5a:	f000 fb4b 	bl	80010f4 <HAL_NVIC_EnableIRQ>

}
 8000a5e:	bf00      	nop
 8000a60:	3730      	adds	r7, #48	; 0x30
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020400 	.word	0x40020400

08000a80 <switch_priority>:

/* USER CODE BEGIN 4 */
static void switch_priority(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
	BaseType_t is_time_to_switch_priority = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
	UBaseType_t p1, p2;
	TaskHandle_t current_task_handle, t1, t2;
	portENTER_CRITICAL();
 8000a8a:	f003 fe03 	bl	8004694 <vPortEnterCritical>
	if(is_button_pressed)
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <switch_priority+0x84>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d004      	beq.n	8000aa0 <switch_priority+0x20>
	{
		is_button_pressed = 0;
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <switch_priority+0x84>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
		is_time_to_switch_priority = 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8000aa0:	f003 fe28 	bl	80046f4 <vPortExitCritical>

	if(is_time_to_switch_priority)
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d027      	beq.n	8000afa <switch_priority+0x7a>
	{
		t1 = xTaskGetHandle("TASK_1");
 8000aaa:	4817      	ldr	r0, [pc, #92]	; (8000b08 <switch_priority+0x88>)
 8000aac:	f002 fcd2 	bl	8003454 <xTaskGetHandle>
 8000ab0:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("TASK_2");
 8000ab2:	4816      	ldr	r0, [pc, #88]	; (8000b0c <switch_priority+0x8c>)
 8000ab4:	f002 fcce 	bl	8003454 <xTaskGetHandle>
 8000ab8:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 8000aba:	6938      	ldr	r0, [r7, #16]
 8000abc:	f002 f9da 	bl	8002e74 <uxTaskPriorityGet>
 8000ac0:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f002 f9d6 	bl	8002e74 <uxTaskPriorityGet>
 8000ac8:	6078      	str	r0, [r7, #4]

		current_task_handle = xTaskGetCurrentTaskHandle();
 8000aca:	f003 f907 	bl	8003cdc <xTaskGetCurrentTaskHandle>
 8000ace:	6038      	str	r0, [r7, #0]

		if(current_task_handle == t1)
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d108      	bne.n	8000aea <switch_priority+0x6a>
		{
			vTaskPrioritySet(t1, p2);
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	6938      	ldr	r0, [r7, #16]
 8000adc:	f002 f9e4 	bl	8002ea8 <vTaskPrioritySet>
			vTaskPrioritySet(t2, p1);
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f002 f9e0 	bl	8002ea8 <vTaskPrioritySet>
		{
			vTaskPrioritySet(t2, p1);
			vTaskPrioritySet(t1, p2);
		}
	}
}
 8000ae8:	e007      	b.n	8000afa <switch_priority+0x7a>
			vTaskPrioritySet(t2, p1);
 8000aea:	68b9      	ldr	r1, [r7, #8]
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f002 f9db 	bl	8002ea8 <vTaskPrioritySet>
			vTaskPrioritySet(t1, p2);
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	6938      	ldr	r0, [r7, #16]
 8000af6:	f002 f9d7 	bl	8002ea8 <vTaskPrioritySet>
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000009c 	.word	0x2000009c
 8000b08:	08007f4c 	.word	0x08007f4c
 8000b0c:	08007f54 	.word	0x08007f54

08000b10 <button_interrupt_handler>:

void button_interrupt_handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	is_button_pressed = 1;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <button_interrupt_handler+0x14>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	2000009c 	.word	0x2000009c

08000b28 <task1_handler>:

static void task1_handler(void* parameters)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <task1_handler+0x20>)
 8000b36:	f000 fca0 	bl	800147a <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000b3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b3e:	f002 f961 	bl	8002e04 <vTaskDelay>
		switch_priority();
 8000b42:	f7ff ff9d 	bl	8000a80 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b46:	e7f3      	b.n	8000b30 <task1_handler+0x8>
 8000b48:	40020c00 	.word	0x40020c00

08000b4c <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000b54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <task2_handler+0x20>)
 8000b5a:	f000 fc8e 	bl	800147a <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(100));
 8000b5e:	2064      	movs	r0, #100	; 0x64
 8000b60:	f002 f950 	bl	8002e04 <vTaskDelay>
		switch_priority();
 8000b64:	f7ff ff8c 	bl	8000a80 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000b68:	e7f4      	b.n	8000b54 <task2_handler+0x8>
 8000b6a:	bf00      	nop
 8000b6c:	40020c00 	.word	0x40020c00

08000b70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b82:	f000 f9c3 	bl	8000f0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40001000 	.word	0x40001000

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x4c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000bde:	f003 fcdb 	bl	8004598 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	; 0x38
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <HAL_InitTick+0xe4>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	4a32      	ldr	r2, [pc, #200]	; (8000cd4 <HAL_InitTick+0xe4>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c10:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <HAL_InitTick+0xe4>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1c:	f107 0210 	add.w	r2, r7, #16
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 f8ea 	bl	8001e00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d103      	bne.n	8000c3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c36:	f001 f8cf 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8000c3a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c3c:	e004      	b.n	8000c48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c3e:	f001 f8cb 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8000c42:	4603      	mov	r3, r0
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <HAL_InitTick+0xe8>)
 8000c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c50:	0c9b      	lsrs	r3, r3, #18
 8000c52:	3b01      	subs	r3, #1
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <HAL_InitTick+0xec>)
 8000c58:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <HAL_InitTick+0xf0>)
 8000c5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <HAL_InitTick+0xec>)
 8000c5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c64:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <HAL_InitTick+0xec>)
 8000c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_InitTick+0xec>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_InitTick+0xec>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_InitTick+0xec>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c7c:	4817      	ldr	r0, [pc, #92]	; (8000cdc <HAL_InitTick+0xec>)
 8000c7e:	f001 f8f1 	bl	8001e64 <HAL_TIM_Base_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d11b      	bne.n	8000cc8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c90:	4812      	ldr	r0, [pc, #72]	; (8000cdc <HAL_InitTick+0xec>)
 8000c92:	f001 f941 	bl	8001f18 <HAL_TIM_Base_Start_IT>
 8000c96:	4603      	mov	r3, r0
 8000c98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d111      	bne.n	8000cc8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ca4:	2036      	movs	r0, #54	; 0x36
 8000ca6:	f000 fa25 	bl	80010f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d808      	bhi.n	8000cc2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	2036      	movs	r0, #54	; 0x36
 8000cb6:	f000 fa01 	bl	80010bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_InitTick+0xf4>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	e002      	b.n	8000cc8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3738      	adds	r7, #56	; 0x38
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	431bde83 	.word	0x431bde83
 8000cdc:	200000a8 	.word	0x200000a8
 8000ce0:	40001000 	.word	0x40001000
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000d18:	f7ff fefa 	bl	8000b10 <button_interrupt_handler>

	// clear EXTI 0 pending bit in the EXTI pending register
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f000 fbc7 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f000 fbc4 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <TIM6_DAC_IRQHandler+0x10>)
 8000d32:	f001 f961 	bl	8001ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000a8 	.word	0x200000a8

08000d40 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e00a      	b.n	8000d68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d52:	f3af 8000 	nop.w
 8000d56:	4601      	mov	r1, r0
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	60ba      	str	r2, [r7, #8]
 8000d5e:	b2ca      	uxtb	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dbf0      	blt.n	8000d52 <_read+0x12>
	}

return len;
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
	return -1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000da2:	605a      	str	r2, [r3, #4]
	return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <_isatty>:

int _isatty(int file)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
	return 1;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
	return 0;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dec:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <_sbrk+0x5c>)
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <_sbrk+0x60>)
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <_sbrk+0x64>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <_sbrk+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d207      	bcs.n	8000e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e14:	f006 f8bc 	bl	8006f90 <__errno>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	e009      	b.n	8000e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <_sbrk+0x64>)
 8000e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20020000 	.word	0x20020000
 8000e44:	00000400 	.word	0x00000400
 8000e48:	200000f0 	.word	0x200000f0
 8000e4c:	20013930 	.word	0x20013930

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ffd7 	bl	8000e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f006 f87b 	bl	8006f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fbbd 	bl	8000624 <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000eb8:	08008124 	.word	0x08008124
  ldr r2, =_sbss
 8000ebc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000ec0:	2001392c 	.word	0x2001392c

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f8d8 	bl	80010a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff fe7a 	bl	8000bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fe50 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	200000f4 	.word	0x200000f4

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200000f4 	.word	0x200000f4

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff4c 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ce:	f7ff ff61 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 80010d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	6978      	ldr	r0, [r7, #20]
 80010da:	f7ff ffb1 	bl	8001040 <NVIC_EncodePriority>
 80010de:	4602      	mov	r2, r0
 80010e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff80 	bl	8000fec <__NVIC_SetPriority>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff54 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e16b      	b.n	8001404 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	429a      	cmp	r2, r3
 8001146:	f040 815a 	bne.w	80013fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d005      	beq.n	8001162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	2b02      	cmp	r3, #2
 8001160:	d130      	bne.n	80011c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	f003 0201 	and.w	r2, r3, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d017      	beq.n	8001200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d123      	bne.n	8001254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	69b9      	ldr	r1, [r7, #24]
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80b4 	beq.w	80013fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b60      	ldr	r3, [pc, #384]	; (800141c <HAL_GPIO_Init+0x30c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a5f      	ldr	r2, [pc, #380]	; (800141c <HAL_GPIO_Init+0x30c>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b5d      	ldr	r3, [pc, #372]	; (800141c <HAL_GPIO_Init+0x30c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b2:	4a5b      	ldr	r2, [pc, #364]	; (8001420 <HAL_GPIO_Init+0x310>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a52      	ldr	r2, [pc, #328]	; (8001424 <HAL_GPIO_Init+0x314>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d02b      	beq.n	8001336 <HAL_GPIO_Init+0x226>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a51      	ldr	r2, [pc, #324]	; (8001428 <HAL_GPIO_Init+0x318>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d025      	beq.n	8001332 <HAL_GPIO_Init+0x222>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a50      	ldr	r2, [pc, #320]	; (800142c <HAL_GPIO_Init+0x31c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01f      	beq.n	800132e <HAL_GPIO_Init+0x21e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4f      	ldr	r2, [pc, #316]	; (8001430 <HAL_GPIO_Init+0x320>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x21a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4e      	ldr	r2, [pc, #312]	; (8001434 <HAL_GPIO_Init+0x324>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x216>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4d      	ldr	r2, [pc, #308]	; (8001438 <HAL_GPIO_Init+0x328>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x212>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4c      	ldr	r2, [pc, #304]	; (800143c <HAL_GPIO_Init+0x32c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x20e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4b      	ldr	r2, [pc, #300]	; (8001440 <HAL_GPIO_Init+0x330>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x20a>
 8001316:	2307      	movs	r3, #7
 8001318:	e00e      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800131a:	2308      	movs	r3, #8
 800131c:	e00c      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800131e:	2306      	movs	r3, #6
 8001320:	e00a      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001322:	2305      	movs	r3, #5
 8001324:	e008      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001326:	2304      	movs	r3, #4
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800132a:	2303      	movs	r3, #3
 800132c:	e004      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800132e:	2302      	movs	r3, #2
 8001330:	e002      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001336:	2300      	movs	r3, #0
 8001338:	69fa      	ldr	r2, [r7, #28]
 800133a:	f002 0203 	and.w	r2, r2, #3
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	4093      	lsls	r3, r2
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001348:	4935      	ldr	r1, [pc, #212]	; (8001420 <HAL_GPIO_Init+0x310>)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001356:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <HAL_GPIO_Init+0x334>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137a:	4a32      	ldr	r2, [pc, #200]	; (8001444 <HAL_GPIO_Init+0x334>)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001380:	4b30      	ldr	r3, [pc, #192]	; (8001444 <HAL_GPIO_Init+0x334>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a4:	4a27      	ldr	r2, [pc, #156]	; (8001444 <HAL_GPIO_Init+0x334>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <HAL_GPIO_Init+0x334>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ce:	4a1d      	ldr	r2, [pc, #116]	; (8001444 <HAL_GPIO_Init+0x334>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_GPIO_Init+0x334>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f8:	4a12      	ldr	r2, [pc, #72]	; (8001444 <HAL_GPIO_Init+0x334>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	f67f ae90 	bls.w	800112c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40013800 	.word	0x40013800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400
 800142c:	40020800 	.word	0x40020800
 8001430:	40020c00 	.word	0x40020c00
 8001434:	40021000 	.word	0x40021000
 8001438:	40021400 	.word	0x40021400
 800143c:	40021800 	.word	0x40021800
 8001440:	40021c00 	.word	0x40021c00
 8001444:	40013c00 	.word	0x40013c00

08001448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001464:	e003      	b.n	800146e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	041a      	lsls	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147a:	b480      	push	{r7}
 800147c:	b085      	sub	sp, #20
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800148c:	887a      	ldrh	r2, [r7, #2]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	041a      	lsls	r2, r3, #16
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43d9      	mvns	r1, r3
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	400b      	ands	r3, r1
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014c6:	4a05      	ldr	r2, [pc, #20]	; (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f806 	bl	80014e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40013c00 	.word	0x40013c00

080014e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e267      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d075      	beq.n	8001602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001516:	4b88      	ldr	r3, [pc, #544]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b04      	cmp	r3, #4
 8001520:	d00c      	beq.n	800153c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001522:	4b85      	ldr	r3, [pc, #532]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800152a:	2b08      	cmp	r3, #8
 800152c:	d112      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152e:	4b82      	ldr	r3, [pc, #520]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800153a:	d10b      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	4b7e      	ldr	r3, [pc, #504]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d05b      	beq.n	8001600 <HAL_RCC_OscConfig+0x108>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d157      	bne.n	8001600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e242      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d106      	bne.n	800156c <HAL_RCC_OscConfig+0x74>
 800155e:	4b76      	ldr	r3, [pc, #472]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a75      	ldr	r2, [pc, #468]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e01d      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x98>
 8001576:	4b70      	ldr	r3, [pc, #448]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a6f      	ldr	r2, [pc, #444]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b6d      	ldr	r3, [pc, #436]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a6c      	ldr	r2, [pc, #432]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 8001590:	4b69      	ldr	r3, [pc, #420]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a68      	ldr	r2, [pc, #416]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b66      	ldr	r3, [pc, #408]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a65      	ldr	r2, [pc, #404]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fcc0 	bl	8000f34 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fcbc 	bl	8000f34 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e207      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0xc0>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fcac 	bl	8000f34 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fca8 	bl	8000f34 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1f3      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	4b51      	ldr	r3, [pc, #324]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0xe8>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d063      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800160e:	4b4a      	ldr	r3, [pc, #296]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800161a:	4b47      	ldr	r3, [pc, #284]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001622:	2b08      	cmp	r3, #8
 8001624:	d11c      	bne.n	8001660 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001626:	4b44      	ldr	r3, [pc, #272]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d116      	bne.n	8001660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	4b41      	ldr	r3, [pc, #260]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_RCC_OscConfig+0x152>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e1c7      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164a:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4937      	ldr	r1, [pc, #220]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	e03a      	b.n	80016d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001668:	4b34      	ldr	r3, [pc, #208]	; (800173c <HAL_RCC_OscConfig+0x244>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7ff fc61 	bl	8000f34 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff fc5d 	bl	8000f34 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e1a8      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4925      	ldr	r1, [pc, #148]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_RCC_OscConfig+0x244>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fc40 	bl	8000f34 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff fc3c 	bl	8000f34 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e187      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d036      	beq.n	8001750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d016      	beq.n	8001718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_RCC_OscConfig+0x248>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f0:	f7ff fc20 	bl	8000f34 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff fc1c 	bl	8000f34 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e167      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800170c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x200>
 8001716:	e01b      	b.n	8001750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_RCC_OscConfig+0x248>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7ff fc09 	bl	8000f34 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	e00e      	b.n	8001744 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001726:	f7ff fc05 	bl	8000f34 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d907      	bls.n	8001744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e150      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
 8001738:	40023800 	.word	0x40023800
 800173c:	42470000 	.word	0x42470000
 8001740:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001744:	4b88      	ldr	r3, [pc, #544]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1ea      	bne.n	8001726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 8097 	beq.w	800188c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001762:	4b81      	ldr	r3, [pc, #516]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10f      	bne.n	800178e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	4b7d      	ldr	r3, [pc, #500]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a7c      	ldr	r2, [pc, #496]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b7a      	ldr	r3, [pc, #488]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178a:	2301      	movs	r3, #1
 800178c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178e:	4b77      	ldr	r3, [pc, #476]	; (800196c <HAL_RCC_OscConfig+0x474>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001796:	2b00      	cmp	r3, #0
 8001798:	d118      	bne.n	80017cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179a:	4b74      	ldr	r3, [pc, #464]	; (800196c <HAL_RCC_OscConfig+0x474>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a73      	ldr	r2, [pc, #460]	; (800196c <HAL_RCC_OscConfig+0x474>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a6:	f7ff fbc5 	bl	8000f34 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ae:	f7ff fbc1 	bl	8000f34 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e10c      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	4b6a      	ldr	r3, [pc, #424]	; (800196c <HAL_RCC_OscConfig+0x474>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x2ea>
 80017d4:	4b64      	ldr	r3, [pc, #400]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d8:	4a63      	ldr	r2, [pc, #396]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6713      	str	r3, [r2, #112]	; 0x70
 80017e0:	e01c      	b.n	800181c <HAL_RCC_OscConfig+0x324>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b05      	cmp	r3, #5
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0x30c>
 80017ea:	4b5f      	ldr	r3, [pc, #380]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	4a5e      	ldr	r2, [pc, #376]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6713      	str	r3, [r2, #112]	; 0x70
 80017f6:	4b5c      	ldr	r3, [pc, #368]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fa:	4a5b      	ldr	r2, [pc, #364]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6713      	str	r3, [r2, #112]	; 0x70
 8001802:	e00b      	b.n	800181c <HAL_RCC_OscConfig+0x324>
 8001804:	4b58      	ldr	r3, [pc, #352]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001808:	4a57      	ldr	r2, [pc, #348]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 800180a:	f023 0301 	bic.w	r3, r3, #1
 800180e:	6713      	str	r3, [r2, #112]	; 0x70
 8001810:	4b55      	ldr	r3, [pc, #340]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	4a54      	ldr	r2, [pc, #336]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001816:	f023 0304 	bic.w	r3, r3, #4
 800181a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d015      	beq.n	8001850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fb86 	bl	8000f34 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff fb82 	bl	8000f34 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e0cb      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0ee      	beq.n	800182c <HAL_RCC_OscConfig+0x334>
 800184e:	e014      	b.n	800187a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7ff fb70 	bl	8000f34 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001856:	e00a      	b.n	800186e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff fb6c 	bl	8000f34 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e0b5      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186e:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ee      	bne.n	8001858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	4a38      	ldr	r2, [pc, #224]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80a1 	beq.w	80019d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001896:	4b34      	ldr	r3, [pc, #208]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d05c      	beq.n	800195c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d141      	bne.n	800192e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b31      	ldr	r3, [pc, #196]	; (8001970 <HAL_RCC_OscConfig+0x478>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb40 	bl	8000f34 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff fb3c 	bl	8000f34 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e087      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	4b27      	ldr	r3, [pc, #156]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69da      	ldr	r2, [r3, #28]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	019b      	lsls	r3, r3, #6
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	085b      	lsrs	r3, r3, #1
 80018ee:	3b01      	subs	r3, #1
 80018f0:	041b      	lsls	r3, r3, #16
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	491b      	ldr	r1, [pc, #108]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_RCC_OscConfig+0x478>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fb15 	bl	8000f34 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff fb11 	bl	8000f34 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e05c      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x416>
 800192c:	e054      	b.n	80019d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_RCC_OscConfig+0x478>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fafe 	bl	8000f34 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff fafa 	bl	8000f34 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e045      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x444>
 800195a:	e03d      	b.n	80019d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d107      	bne.n	8001974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e038      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000
 8001970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_RCC_OscConfig+0x4ec>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d028      	beq.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d121      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d11a      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d111      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	3b01      	subs	r3, #1
 80019be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0cc      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d90c      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b65      	ldr	r3, [pc, #404]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0b8      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d020      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a3c:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4a58      	ldr	r2, [pc, #352]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4a52      	ldr	r2, [pc, #328]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	494d      	ldr	r1, [pc, #308]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d044      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d119      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e07f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e06f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e067      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 0203 	bic.w	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4934      	ldr	r1, [pc, #208]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad8:	f7ff fa2c 	bl	8000f34 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7ff fa28 	bl	8000f34 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e04f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 020c 	and.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1eb      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d20c      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e032      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4916      	ldr	r1, [pc, #88]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b6e:	f000 f821 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001b72:	4602      	mov	r2, r0
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	490a      	ldr	r1, [pc, #40]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	5ccb      	ldrb	r3, [r1, r3]
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f82e 	bl	8000bf0 <HAL_InitTick>

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023c00 	.word	0x40023c00
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	08008038 	.word	0x08008038
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000004 	.word	0x20000004

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb8:	b094      	sub	sp, #80	; 0x50
 8001bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bcc:	4b79      	ldr	r3, [pc, #484]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	f200 80e1 	bhi.w	8001da0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x34>
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d003      	beq.n	8001bee <HAL_RCC_GetSysClockFreq+0x3a>
 8001be6:	e0db      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4b73      	ldr	r3, [pc, #460]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bec:	e0db      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bee:	4b73      	ldr	r3, [pc, #460]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x208>)
 8001bf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bf2:	e0d8      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bf4:	4b6f      	ldr	r3, [pc, #444]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bfe:	4b6d      	ldr	r3, [pc, #436]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d063      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0a:	4b6a      	ldr	r3, [pc, #424]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	099b      	lsrs	r3, r3, #6
 8001c10:	2200      	movs	r2, #0
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
 8001c22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c26:	4622      	mov	r2, r4
 8001c28:	462b      	mov	r3, r5
 8001c2a:	f04f 0000 	mov.w	r0, #0
 8001c2e:	f04f 0100 	mov.w	r1, #0
 8001c32:	0159      	lsls	r1, r3, #5
 8001c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c38:	0150      	lsls	r0, r2, #5
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4621      	mov	r1, r4
 8001c40:	1a51      	subs	r1, r2, r1
 8001c42:	6139      	str	r1, [r7, #16]
 8001c44:	4629      	mov	r1, r5
 8001c46:	eb63 0301 	sbc.w	r3, r3, r1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c58:	4659      	mov	r1, fp
 8001c5a:	018b      	lsls	r3, r1, #6
 8001c5c:	4651      	mov	r1, sl
 8001c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c62:	4651      	mov	r1, sl
 8001c64:	018a      	lsls	r2, r1, #6
 8001c66:	4651      	mov	r1, sl
 8001c68:	ebb2 0801 	subs.w	r8, r2, r1
 8001c6c:	4659      	mov	r1, fp
 8001c6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c86:	4690      	mov	r8, r2
 8001c88:	4699      	mov	r9, r3
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	eb18 0303 	adds.w	r3, r8, r3
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	462b      	mov	r3, r5
 8001c94:	eb49 0303 	adc.w	r3, r9, r3
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	024b      	lsls	r3, r1, #9
 8001caa:	4621      	mov	r1, r4
 8001cac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cb0:	4621      	mov	r1, r4
 8001cb2:	024a      	lsls	r2, r1, #9
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cba:	2200      	movs	r2, #0
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cc4:	f7fe fb2c 	bl	8000320 <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4613      	mov	r3, r2
 8001cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cd0:	e058      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	099b      	lsrs	r3, r3, #6
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	4611      	mov	r1, r2
 8001cde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cec:	4642      	mov	r2, r8
 8001cee:	464b      	mov	r3, r9
 8001cf0:	f04f 0000 	mov.w	r0, #0
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	0159      	lsls	r1, r3, #5
 8001cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cfe:	0150      	lsls	r0, r2, #5
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4641      	mov	r1, r8
 8001d06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d0a:	4649      	mov	r1, r9
 8001d0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d24:	ebb2 040a 	subs.w	r4, r2, sl
 8001d28:	eb63 050b 	sbc.w	r5, r3, fp
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	00eb      	lsls	r3, r5, #3
 8001d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d3a:	00e2      	lsls	r2, r4, #3
 8001d3c:	4614      	mov	r4, r2
 8001d3e:	461d      	mov	r5, r3
 8001d40:	4643      	mov	r3, r8
 8001d42:	18e3      	adds	r3, r4, r3
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	464b      	mov	r3, r9
 8001d48:	eb45 0303 	adc.w	r3, r5, r3
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	028b      	lsls	r3, r1, #10
 8001d5e:	4621      	mov	r1, r4
 8001d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d64:	4621      	mov	r1, r4
 8001d66:	028a      	lsls	r2, r1, #10
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	61fa      	str	r2, [r7, #28]
 8001d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d78:	f7fe fad2 	bl	8000320 <__aeabi_uldivmod>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4613      	mov	r3, r2
 8001d82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	0c1b      	lsrs	r3, r3, #16
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d9e:	e002      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001da2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3750      	adds	r7, #80	; 0x50
 8001dac:	46bd      	mov	sp, r7
 8001dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	00f42400 	.word	0x00f42400
 8001dbc:	007a1200 	.word	0x007a1200

08001dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000000 	.word	0x20000000

08001dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ddc:	f7ff fff0 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	0a9b      	lsrs	r3, r3, #10
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	4903      	ldr	r1, [pc, #12]	; (8001dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	08008048 	.word	0x08008048

08001e00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_RCC_GetClockConfig+0x5c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_RCC_GetClockConfig+0x5c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_RCC_GetClockConfig+0x5c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_RCC_GetClockConfig+0x5c>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_RCC_GetClockConfig+0x60>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0207 	and.w	r2, r3, #7
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	601a      	str	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40023c00 	.word	0x40023c00

08001e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e041      	b.n	8001efa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f839 	bl	8001f02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f000 f9d8 	bl	8002258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d001      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e04e      	b.n	8001fce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a23      	ldr	r2, [pc, #140]	; (8001fdc <HAL_TIM_Base_Start_IT+0xc4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d022      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5a:	d01d      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d018      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00e      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1b      	ldr	r2, [pc, #108]	; (8001fec <HAL_TIM_Base_Start_IT+0xd4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d111      	bne.n	8001fbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d010      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fba:	e007      	b.n	8001fcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	40000c00 	.word	0x40000c00
 8001fec:	40010400 	.word	0x40010400
 8001ff0:	40014000 	.word	0x40014000
 8001ff4:	40001800 	.word	0x40001800

08001ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	d122      	bne.n	8002054 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b02      	cmp	r3, #2
 800201a:	d11b      	bne.n	8002054 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0202 	mvn.w	r2, #2
 8002024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8ee 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8e0 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f8f1 	bl	8002230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b04      	cmp	r3, #4
 8002060:	d122      	bne.n	80020a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b04      	cmp	r3, #4
 800206e:	d11b      	bne.n	80020a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0204 	mvn.w	r2, #4
 8002078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2202      	movs	r2, #2
 800207e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8c4 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f8b6 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f8c7 	bl	8002230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d122      	bne.n	80020fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d11b      	bne.n	80020fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0208 	mvn.w	r2, #8
 80020cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2204      	movs	r2, #4
 80020d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f89a 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f88c 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f89d 	bl	8002230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b10      	cmp	r3, #16
 8002108:	d122      	bne.n	8002150 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b10      	cmp	r3, #16
 8002116:	d11b      	bne.n	8002150 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0210 	mvn.w	r2, #16
 8002120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2208      	movs	r2, #8
 8002126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f870 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 800213c:	e005      	b.n	800214a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f862 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f873 	bl	8002230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10e      	bne.n	800217c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d107      	bne.n	800217c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0201 	mvn.w	r2, #1
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe fcfa 	bl	8000b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b80      	cmp	r3, #128	; 0x80
 8002188:	d10e      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002194:	2b80      	cmp	r3, #128	; 0x80
 8002196:	d107      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f902 	bl	80023ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b2:	2b40      	cmp	r3, #64	; 0x40
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c0:	2b40      	cmp	r3, #64	; 0x40
 80021c2:	d107      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f838 	bl	8002244 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d10e      	bne.n	8002200 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	d107      	bne.n	8002200 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0220 	mvn.w	r2, #32
 80021f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f8cc 	bl	8002398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a40      	ldr	r2, [pc, #256]	; (800236c <TIM_Base_SetConfig+0x114>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d013      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002276:	d00f      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a3d      	ldr	r2, [pc, #244]	; (8002370 <TIM_Base_SetConfig+0x118>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00b      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a3c      	ldr	r2, [pc, #240]	; (8002374 <TIM_Base_SetConfig+0x11c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d007      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a3b      	ldr	r2, [pc, #236]	; (8002378 <TIM_Base_SetConfig+0x120>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d003      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a3a      	ldr	r2, [pc, #232]	; (800237c <TIM_Base_SetConfig+0x124>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d108      	bne.n	80022aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a2f      	ldr	r2, [pc, #188]	; (800236c <TIM_Base_SetConfig+0x114>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d02b      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b8:	d027      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a2c      	ldr	r2, [pc, #176]	; (8002370 <TIM_Base_SetConfig+0x118>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d023      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a2b      	ldr	r2, [pc, #172]	; (8002374 <TIM_Base_SetConfig+0x11c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01f      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a2a      	ldr	r2, [pc, #168]	; (8002378 <TIM_Base_SetConfig+0x120>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01b      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a29      	ldr	r2, [pc, #164]	; (800237c <TIM_Base_SetConfig+0x124>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d017      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a28      	ldr	r2, [pc, #160]	; (8002380 <TIM_Base_SetConfig+0x128>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a27      	ldr	r2, [pc, #156]	; (8002384 <TIM_Base_SetConfig+0x12c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00f      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a26      	ldr	r2, [pc, #152]	; (8002388 <TIM_Base_SetConfig+0x130>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00b      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a25      	ldr	r2, [pc, #148]	; (800238c <TIM_Base_SetConfig+0x134>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a24      	ldr	r2, [pc, #144]	; (8002390 <TIM_Base_SetConfig+0x138>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d003      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a23      	ldr	r2, [pc, #140]	; (8002394 <TIM_Base_SetConfig+0x13c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d108      	bne.n	800231c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <TIM_Base_SetConfig+0x114>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d003      	beq.n	8002350 <TIM_Base_SetConfig+0xf8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a0c      	ldr	r2, [pc, #48]	; (800237c <TIM_Base_SetConfig+0x124>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d103      	bne.n	8002358 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	615a      	str	r2, [r3, #20]
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40010000 	.word	0x40010000
 8002370:	40000400 	.word	0x40000400
 8002374:	40000800 	.word	0x40000800
 8002378:	40000c00 	.word	0x40000c00
 800237c:	40010400 	.word	0x40010400
 8002380:	40014000 	.word	0x40014000
 8002384:	40014400 	.word	0x40014400
 8002388:	40014800 	.word	0x40014800
 800238c:	40001800 	.word	0x40001800
 8002390:	40001c00 	.word	0x40001c00
 8002394:	40002000 	.word	0x40002000

08002398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f103 0208 	add.w	r2, r3, #8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f103 0208 	add.w	r2, r3, #8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f103 0208 	add.w	r2, r3, #8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800241a:	b480      	push	{r7}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d103      	bne.n	800243a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	e00c      	b.n	8002454 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3308      	adds	r3, #8
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e002      	b.n	8002448 <vListInsert+0x2e>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	429a      	cmp	r2, r3
 8002452:	d2f6      	bcs.n	8002442 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	601a      	str	r2, [r3, #0]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6892      	ldr	r2, [r2, #8]
 80024a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6852      	ldr	r2, [r2, #4]
 80024ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d103      	bne.n	80024c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	1e5a      	subs	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80024ea:	2301      	movs	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <xQueueGenericReset+0x2e>
        __asm volatile
 80024f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	60fb      	str	r3, [r7, #12]
    }
 800250a:	bf00      	nop
 800250c:	e7fe      	b.n	800250c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d052      	beq.n	80025ba <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002518:	2b00      	cmp	r3, #0
 800251a:	d04e      	beq.n	80025ba <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002524:	2100      	movs	r1, #0
 8002526:	fba3 2302 	umull	r2, r3, r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d000      	beq.n	8002530 <xQueueGenericReset+0x50>
 800252e:	2101      	movs	r1, #1
 8002530:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002532:	2b00      	cmp	r3, #0
 8002534:	d141      	bne.n	80025ba <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8002536:	f002 f8ad 	bl	8004694 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	6939      	ldr	r1, [r7, #16]
 8002544:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	441a      	add	r2, r3
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2200      	movs	r2, #0
 8002554:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	3b01      	subs	r3, #1
 8002568:	6939      	ldr	r1, [r7, #16]
 800256a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	441a      	add	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	22ff      	movs	r2, #255	; 0xff
 800257a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	22ff      	movs	r2, #255	; 0xff
 8002582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00f      	beq.n	80025b4 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	3310      	adds	r3, #16
 8002598:	4618      	mov	r0, r3
 800259a:	f001 f993 	bl	80038c4 <xTaskRemoveFromEventList>
 800259e:	e009      	b.n	80025b4 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	3310      	adds	r3, #16
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff0b 	bl	80023c0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	3324      	adds	r3, #36	; 0x24
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff06 	bl	80023c0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80025b4:	f002 f89e 	bl	80046f4 <vPortExitCritical>
 80025b8:	e001      	b.n	80025be <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <xQueueGenericReset+0xfa>
        __asm volatile
 80025c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	60bb      	str	r3, [r7, #8]
    }
 80025d6:	bf00      	nop
 80025d8:	e7fe      	b.n	80025d8 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80025da:	697b      	ldr	r3, [r7, #20]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	4613      	mov	r3, r2
 80025f0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d02e      	beq.n	800265a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025fc:	2100      	movs	r1, #0
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	fba3 2302 	umull	r2, r3, r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d000      	beq.n	800260c <xQueueGenericCreate+0x28>
 800260a:	2101      	movs	r1, #1
 800260c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800260e:	2b00      	cmp	r3, #0
 8002610:	d123      	bne.n	800265a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800261a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800261e:	d81c      	bhi.n	800265a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	fb02 f303 	mul.w	r3, r2, r3
 8002628:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	3350      	adds	r3, #80	; 0x50
 800262e:	4618      	mov	r0, r3
 8002630:	f002 f95c 	bl	80048ec <pvPortMalloc>
 8002634:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01c      	beq.n	8002676 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3350      	adds	r3, #80	; 0x50
 8002644:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002646:	79fa      	ldrb	r2, [r7, #7]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f814 	bl	8002680 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002658:	e00d      	b.n	8002676 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10a      	bne.n	8002676 <xQueueGenericCreate+0x92>
        __asm volatile
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	613b      	str	r3, [r7, #16]
    }
 8002672:	bf00      	nop
 8002674:	e7fe      	b.n	8002674 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002676:	69fb      	ldr	r3, [r7, #28]
    }
 8002678:	4618      	mov	r0, r3
 800267a:	3720      	adds	r7, #32
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d103      	bne.n	800269c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e002      	b.n	80026a2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026ae:	2101      	movs	r1, #1
 80026b0:	69b8      	ldr	r0, [r7, #24]
 80026b2:	f7ff ff15 	bl	80024e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	68f9      	ldr	r1, [r7, #12]
 80026c4:	2073      	movs	r0, #115	; 0x73
 80026c6:	f003 fda3 	bl	8006210 <SEGGER_SYSVIEW_RecordU32x3>
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b08f      	sub	sp, #60	; 0x3c
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10a      	bne.n	8002704 <xQueueReceive+0x30>
        __asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	623b      	str	r3, [r7, #32]
    }
 8002700:	bf00      	nop
 8002702:	e7fe      	b.n	8002702 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <xQueueReceive+0x3e>
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <xQueueReceive+0x42>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <xQueueReceive+0x44>
 8002716:	2300      	movs	r3, #0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <xQueueReceive+0x5e>
        __asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	61fb      	str	r3, [r7, #28]
    }
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002732:	f001 fae3 	bl	8003cfc <xTaskGetSchedulerState>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <xQueueReceive+0x6e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <xQueueReceive+0x72>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <xQueueReceive+0x74>
 8002746:	2300      	movs	r3, #0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <xQueueReceive+0x8e>
        __asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	61bb      	str	r3, [r7, #24]
    }
 800275e:	bf00      	nop
 8002760:	e7fe      	b.n	8002760 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002762:	f001 ff97 	bl	8004694 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	2b00      	cmp	r3, #0
 8002770:	d024      	beq.n	80027bc <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002776:	f000 f8b3 	bl	80028e0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	4618      	mov	r0, r3
 800277e:	f004 fa75 	bl	8006c6c <SEGGER_SYSVIEW_ShrinkId>
 8002782:	4604      	mov	r4, r0
 8002784:	2000      	movs	r0, #0
 8002786:	f004 fa71 	bl	8006c6c <SEGGER_SYSVIEW_ShrinkId>
 800278a:	4602      	mov	r2, r0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2101      	movs	r1, #1
 8002790:	9100      	str	r1, [sp, #0]
 8002792:	4621      	mov	r1, r4
 8002794:	205c      	movs	r0, #92	; 0x5c
 8002796:	f003 fdb1 	bl	80062fc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	1e5a      	subs	r2, r3, #1
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d004      	beq.n	80027b4 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	3310      	adds	r3, #16
 80027ae:	4618      	mov	r0, r3
 80027b0:	f001 f888 	bl	80038c4 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80027b4:	f001 ff9e 	bl	80046f4 <vPortExitCritical>
                return pdPASS;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e08a      	b.n	80028d2 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d113      	bne.n	80027ea <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80027c2:	f001 ff97 	bl	80046f4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 fa4f 	bl	8006c6c <SEGGER_SYSVIEW_ShrinkId>
 80027ce:	4604      	mov	r4, r0
 80027d0:	2000      	movs	r0, #0
 80027d2:	f004 fa4b 	bl	8006c6c <SEGGER_SYSVIEW_ShrinkId>
 80027d6:	4602      	mov	r2, r0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2101      	movs	r1, #1
 80027dc:	9100      	str	r1, [sp, #0]
 80027de:	4621      	mov	r1, r4
 80027e0:	205c      	movs	r0, #92	; 0x5c
 80027e2:	f003 fd8b 	bl	80062fc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e073      	b.n	80028d2 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d106      	bne.n	80027fe <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 f93d 	bl	8003a74 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027fa:	2301      	movs	r3, #1
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027fe:	f001 ff79 	bl	80046f4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002802:	f000 fc97 	bl	8003134 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002806:	f001 ff45 	bl	8004694 <vPortEnterCritical>
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002810:	b25b      	sxtb	r3, r3
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002816:	d103      	bne.n	8002820 <xQueueReceive+0x14c>
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002826:	b25b      	sxtb	r3, r3
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d103      	bne.n	8002836 <xQueueReceive+0x162>
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002836:	f001 ff5d 	bl	80046f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800283a:	1d3a      	adds	r2, r7, #4
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f001 f92c 	bl	8003aa0 <xTaskCheckForTimeOut>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d124      	bne.n	8002898 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800284e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002850:	f000 f8be 	bl	80029d0 <prvIsQueueEmpty>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d018      	beq.n	800288c <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	3324      	adds	r3, #36	; 0x24
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f000 ffc2 	bl	80037ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800286a:	f000 f85f 	bl	800292c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800286e:	f000 fc6f 	bl	8003150 <xTaskResumeAll>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f47f af74 	bne.w	8002762 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <xQueueReceive+0x208>)
 800287c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	e76a      	b.n	8002762 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800288c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800288e:	f000 f84d 	bl	800292c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002892:	f000 fc5d 	bl	8003150 <xTaskResumeAll>
 8002896:	e764      	b.n	8002762 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800289a:	f000 f847 	bl	800292c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800289e:	f000 fc57 	bl	8003150 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a4:	f000 f894 	bl	80029d0 <prvIsQueueEmpty>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f43f af59 	beq.w	8002762 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 f9da 	bl	8006c6c <SEGGER_SYSVIEW_ShrinkId>
 80028b8:	4604      	mov	r4, r0
 80028ba:	2000      	movs	r0, #0
 80028bc:	f004 f9d6 	bl	8006c6c <SEGGER_SYSVIEW_ShrinkId>
 80028c0:	4602      	mov	r2, r0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2101      	movs	r1, #1
 80028c6:	9100      	str	r1, [sp, #0]
 80028c8:	4621      	mov	r1, r4
 80028ca:	205c      	movs	r0, #92	; 0x5c
 80028cc:	f003 fd16 	bl	80062fc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80028d0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3734      	adds	r7, #52	; 0x34
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd90      	pop	{r4, r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000ed04 	.word	0xe000ed04

080028e0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d018      	beq.n	8002924 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	441a      	add	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	429a      	cmp	r2, r3
 800290a:	d303      	bcc.n	8002914 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68d9      	ldr	r1, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	461a      	mov	r2, r3
 800291e:	6838      	ldr	r0, [r7, #0]
 8002920:	f004 fb70 	bl	8007004 <memcpy>
    }
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002934:	f001 feae 	bl	8004694 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800293e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002940:	e011      	b.n	8002966 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2b00      	cmp	r3, #0
 8002948:	d012      	beq.n	8002970 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3324      	adds	r3, #36	; 0x24
 800294e:	4618      	mov	r0, r3
 8002950:	f000 ffb8 	bl	80038c4 <xTaskRemoveFromEventList>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800295a:	f001 f907 	bl	8003b6c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	3b01      	subs	r3, #1
 8002962:	b2db      	uxtb	r3, r3
 8002964:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296a:	2b00      	cmp	r3, #0
 800296c:	dce9      	bgt.n	8002942 <prvUnlockQueue+0x16>
 800296e:	e000      	b.n	8002972 <prvUnlockQueue+0x46>
                    break;
 8002970:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	22ff      	movs	r2, #255	; 0xff
 8002976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800297a:	f001 febb 	bl	80046f4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800297e:	f001 fe89 	bl	8004694 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002988:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800298a:	e011      	b.n	80029b0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d012      	beq.n	80029ba <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3310      	adds	r3, #16
 8002998:	4618      	mov	r0, r3
 800299a:	f000 ff93 	bl	80038c4 <xTaskRemoveFromEventList>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80029a4:	f001 f8e2 	bl	8003b6c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80029a8:	7bbb      	ldrb	r3, [r7, #14]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	dce9      	bgt.n	800298c <prvUnlockQueue+0x60>
 80029b8:	e000      	b.n	80029bc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80029ba:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	22ff      	movs	r2, #255	; 0xff
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80029c4:	f001 fe96 	bl	80046f4 <vPortExitCritical>
}
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80029d8:	f001 fe5c 	bl	8004694 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	e001      	b.n	80029ee <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80029ee:	f001 fe81 	bl	80046f4 <vPortExitCritical>

    return xReturn;
 80029f2:	68fb      	ldr	r3, [r7, #12]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	60fb      	str	r3, [r7, #12]
    }
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d024      	beq.n	8002a76 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e01e      	b.n	8002a70 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002a32:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <vQueueAddToRegistry+0xa8>)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d105      	bne.n	8002a4e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <vQueueAddToRegistry+0xa8>)
 8002a48:	4413      	add	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
                    break;
 8002a4c:	e013      	b.n	8002a76 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <vQueueAddToRegistry+0x6e>
 8002a54:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <vQueueAddToRegistry+0xa8>)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d104      	bne.n	8002a6a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <vQueueAddToRegistry+0xa8>)
 8002a66:	4413      	add	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b07      	cmp	r3, #7
 8002a74:	d9dd      	bls.n	8002a32 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00f      	beq.n	8002a9c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 f8ee 	bl	8006c6c <SEGGER_SYSVIEW_ShrinkId>
 8002a90:	4601      	mov	r1, r0
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	2071      	movs	r0, #113	; 0x71
 8002a98:	f003 fb60 	bl	800615c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002a9c:	bf00      	nop
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200000f8 	.word	0x200000f8

08002aa8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002ab8:	f001 fdec 	bl	8004694 <vPortEnterCritical>
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ac2:	b25b      	sxtb	r3, r3
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d103      	bne.n	8002ad2 <vQueueWaitForMessageRestricted+0x2a>
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ad8:	b25b      	sxtb	r3, r3
 8002ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ade:	d103      	bne.n	8002ae8 <vQueueWaitForMessageRestricted+0x40>
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ae8:	f001 fe04 	bl	80046f4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	3324      	adds	r3, #36	; 0x24
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fe99 	bl	8003834 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002b02:	6978      	ldr	r0, [r7, #20]
 8002b04:	f7ff ff12 	bl	800292c <prvUnlockQueue>
    }
 8002b08:	bf00      	nop
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08c      	sub	sp, #48	; 0x30
 8002b14:	af04      	add	r7, sp, #16
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 fee1 	bl	80048ec <pvPortMalloc>
 8002b2a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d013      	beq.n	8002b5a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b32:	2058      	movs	r0, #88	; 0x58
 8002b34:	f001 feda 	bl	80048ec <pvPortMalloc>
 8002b38:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002b40:	2258      	movs	r2, #88	; 0x58
 8002b42:	2100      	movs	r1, #0
 8002b44:	69f8      	ldr	r0, [r7, #28]
 8002b46:	f004 fa6b 	bl	8007020 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b50:	e005      	b.n	8002b5e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f001 ff84 	bl	8004a60 <vPortFree>
 8002b58:	e001      	b.n	8002b5e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b64:	88fa      	ldrh	r2, [r7, #6]
 8002b66:	2300      	movs	r3, #0
 8002b68:	9303      	str	r3, [sp, #12]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	9302      	str	r3, [sp, #8]
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f80e 	bl	8002b9c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b80:	69f8      	ldr	r0, [r7, #28]
 8002b82:	f000 f899 	bl	8002cb8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b86:	2301      	movs	r3, #1
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	e002      	b.n	8002b92 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b90:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b92:	69bb      	ldr	r3, [r7, #24]
    }
 8002b94:	4618      	mov	r0, r3
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	21a5      	movs	r1, #165	; 0xa5
 8002bb6:	f004 fa33 	bl	8007020 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f023 0307 	bic.w	r3, r3, #7
 8002bd2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	617b      	str	r3, [r7, #20]
    }
 8002bf0:	bf00      	nop
 8002bf2:	e7fe      	b.n	8002bf2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d01e      	beq.n	8002c38 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	e012      	b.n	8002c26 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	7819      	ldrb	r1, [r3, #0]
 8002c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3334      	adds	r3, #52	; 0x34
 8002c10:	460a      	mov	r2, r1
 8002c12:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	4413      	add	r3, r2
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d006      	beq.n	8002c2e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	3301      	adds	r3, #1
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	2b09      	cmp	r3, #9
 8002c2a:	d9e9      	bls.n	8002c00 <prvInitialiseNewTask+0x64>
 8002c2c:	e000      	b.n	8002c30 <prvInitialiseNewTask+0x94>
            {
                break;
 8002c2e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d90a      	bls.n	8002c54 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	613b      	str	r3, [r7, #16]
    }
 8002c50:	bf00      	nop
 8002c52:	e7fe      	b.n	8002c52 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d901      	bls.n	8002c5e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c62:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c68:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fbc6 	bl	8002400 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	3318      	adds	r3, #24
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fbc1 	bl	8002400 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c82:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	f1c3 0205 	rsb	r2, r3, #5
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	68f9      	ldr	r1, [r7, #12]
 8002c98:	69b8      	ldr	r0, [r7, #24]
 8002c9a:	f001 fb51 	bl	8004340 <pxPortInitialiseStack>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cae:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cb0:	bf00      	nop
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002cb8:	b5b0      	push	{r4, r5, r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002cc0:	f001 fce8 	bl	8004694 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002cc4:	4b49      	ldr	r3, [pc, #292]	; (8002dec <prvAddNewTaskToReadyList+0x134>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	4a48      	ldr	r2, [pc, #288]	; (8002dec <prvAddNewTaskToReadyList+0x134>)
 8002ccc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002cce:	4b48      	ldr	r3, [pc, #288]	; (8002df0 <prvAddNewTaskToReadyList+0x138>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002cd6:	4a46      	ldr	r2, [pc, #280]	; (8002df0 <prvAddNewTaskToReadyList+0x138>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cdc:	4b43      	ldr	r3, [pc, #268]	; (8002dec <prvAddNewTaskToReadyList+0x134>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d110      	bne.n	8002d06 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ce4:	f000 ff60 	bl	8003ba8 <prvInitialiseTaskLists>
 8002ce8:	e00d      	b.n	8002d06 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002cea:	4b42      	ldr	r3, [pc, #264]	; (8002df4 <prvAddNewTaskToReadyList+0x13c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cf2:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <prvAddNewTaskToReadyList+0x138>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d802      	bhi.n	8002d06 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002d00:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <prvAddNewTaskToReadyList+0x138>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002d06:	4b3c      	ldr	r3, [pc, #240]	; (8002df8 <prvAddNewTaskToReadyList+0x140>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	4a3a      	ldr	r2, [pc, #232]	; (8002df8 <prvAddNewTaskToReadyList+0x140>)
 8002d0e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d10:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <prvAddNewTaskToReadyList+0x140>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d016      	beq.n	8002d4c <prvAddNewTaskToReadyList+0x94>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 fedd 	bl	8006ae0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	461d      	mov	r5, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	461c      	mov	r4, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	1ae3      	subs	r3, r4, r3
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	462b      	mov	r3, r5
 8002d48:	f002 f84c 	bl	8004de4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 ff4a 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	2201      	movs	r2, #1
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <prvAddNewTaskToReadyList+0x144>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <prvAddNewTaskToReadyList+0x144>)
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6a:	4925      	ldr	r1, [pc, #148]	; (8002e00 <prvAddNewTaskToReadyList+0x148>)
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3304      	adds	r3, #4
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	3204      	adds	r2, #4
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	1d1a      	adds	r2, r3, #4
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <prvAddNewTaskToReadyList+0x148>)
 8002daa:	441a      	add	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	615a      	str	r2, [r3, #20]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db4:	4912      	ldr	r1, [pc, #72]	; (8002e00 <prvAddNewTaskToReadyList+0x148>)
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	1c59      	adds	r1, r3, #1
 8002dc4:	480e      	ldr	r0, [pc, #56]	; (8002e00 <prvAddNewTaskToReadyList+0x148>)
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4403      	add	r3, r0
 8002dd0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002dd2:	f001 fc8f 	bl	80046f4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <prvAddNewTaskToReadyList+0x13c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dde:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <prvAddNewTaskToReadyList+0x138>)
 8002de0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000210 	.word	0x20000210
 8002df0:	20000138 	.word	0x20000138
 8002df4:	2000021c 	.word	0x2000021c
 8002df8:	2000022c 	.word	0x2000022c
 8002dfc:	20000218 	.word	0x20000218
 8002e00:	2000013c 	.word	0x2000013c

08002e04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01b      	beq.n	8002e4e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <vTaskDelay+0x68>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <vTaskDelay+0x30>
        __asm volatile
 8002e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	60bb      	str	r3, [r7, #8]
    }
 8002e30:	bf00      	nop
 8002e32:	e7fe      	b.n	8002e32 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002e34:	f000 f97e 	bl	8003134 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	2023      	movs	r0, #35	; 0x23
 8002e3c:	f003 f952 	bl	80060e4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e40:	2100      	movs	r1, #0
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 ff78 	bl	8003d38 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002e48:	f000 f982 	bl	8003150 <xTaskResumeAll>
 8002e4c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <vTaskDelay+0x6c>)
 8002e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000238 	.word	0x20000238
 8002e70:	e000ed04 	.word	0xe000ed04

08002e74 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002e7c:	f001 fc0a 	bl	8004694 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <uxTaskPriorityGet+0x18>
 8002e86:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <uxTaskPriorityGet+0x30>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	e000      	b.n	8002e8e <uxTaskPriorityGet+0x1a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002e96:	f001 fc2d 	bl	80046f4 <vPortExitCritical>

        return uxReturn;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
    }
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000138 	.word	0x20000138

08002ea8 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d90a      	bls.n	8002ed2 <vTaskPrioritySet+0x2a>
        __asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	60bb      	str	r3, [r7, #8]
    }
 8002ece:	bf00      	nop
 8002ed0:	e7fe      	b.n	8002ed0 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d901      	bls.n	8002edc <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ed8:	2304      	movs	r3, #4
 8002eda:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002edc:	f001 fbda 	bl	8004694 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d102      	bne.n	8002eec <vTaskPrioritySet+0x44>
 8002ee6:	4b5d      	ldr	r3, [pc, #372]	; (800305c <vTaskPrioritySet+0x1b4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	e000      	b.n	8002eee <vTaskPrioritySet+0x46>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 feba 	bl	8006c6c <SEGGER_SYSVIEW_ShrinkId>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4619      	mov	r1, r3
 8002efe:	2028      	movs	r0, #40	; 0x28
 8002f00:	f003 f92c 	bl	800615c <SEGGER_SYSVIEW_RecordU32x2>
 8002f04:	69b8      	ldr	r0, [r7, #24]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	461a      	mov	r2, r3
 8002f12:	2300      	movs	r3, #0
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	4613      	mov	r3, r2
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	f001 ffcb 	bl	8004eb4 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f22:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f000 8091 	beq.w	8003050 <vTaskPrioritySet+0x1a8>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d90d      	bls.n	8002f52 <vTaskPrioritySet+0xaa>
                {
                    if( pxTCB != pxCurrentTCB )
 8002f36:	4b49      	ldr	r3, [pc, #292]	; (800305c <vTaskPrioritySet+0x1b4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d00f      	beq.n	8002f60 <vTaskPrioritySet+0xb8>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002f40:	4b46      	ldr	r3, [pc, #280]	; (800305c <vTaskPrioritySet+0x1b4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d309      	bcc.n	8002f60 <vTaskPrioritySet+0xb8>
                        {
                            xYieldRequired = pdTRUE;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	e006      	b.n	8002f60 <vTaskPrioritySet+0xb8>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002f52:	4b42      	ldr	r3, [pc, #264]	; (800305c <vTaskPrioritySet+0x1b4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d101      	bne.n	8002f60 <vTaskPrioritySet+0xb8>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d102      	bne.n	8002f78 <vTaskPrioritySet+0xd0>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	649a      	str	r2, [r3, #72]	; 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	db04      	blt.n	8002f90 <vTaskPrioritySet+0xe8>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	f1c3 0205 	rsb	r2, r3, #5
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6959      	ldr	r1, [r3, #20]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4a30      	ldr	r2, [pc, #192]	; (8003060 <vTaskPrioritySet+0x1b8>)
 8002fa0:	4413      	add	r3, r2
 8002fa2:	4299      	cmp	r1, r3
 8002fa4:	d154      	bne.n	8003050 <vTaskPrioritySet+0x1a8>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fa6e 	bl	800248c <uxListRemove>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <vTaskPrioritySet+0x122>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	4b28      	ldr	r3, [pc, #160]	; (8003064 <vTaskPrioritySet+0x1bc>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	4a27      	ldr	r2, [pc, #156]	; (8003064 <vTaskPrioritySet+0x1bc>)
 8002fc8:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fe0b 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	4b22      	ldr	r3, [pc, #136]	; (8003064 <vTaskPrioritySet+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	4a20      	ldr	r2, [pc, #128]	; (8003064 <vTaskPrioritySet+0x1bc>)
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	491d      	ldr	r1, [pc, #116]	; (8003060 <vTaskPrioritySet+0x1b8>)
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	60da      	str	r2, [r3, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	3204      	adds	r2, #4
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	1d1a      	adds	r2, r3, #4
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <vTaskPrioritySet+0x1b8>)
 8003028:	441a      	add	r2, r3
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	615a      	str	r2, [r3, #20]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003032:	490b      	ldr	r1, [pc, #44]	; (8003060 <vTaskPrioritySet+0x1b8>)
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1c59      	adds	r1, r3, #1
 8003042:	4807      	ldr	r0, [pc, #28]	; (8003060 <vTaskPrioritySet+0x1b8>)
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4403      	add	r3, r0
 800304e:	6019      	str	r1, [r3, #0]
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8003050:	f001 fb50 	bl	80046f4 <vPortExitCritical>
    }
 8003054:	bf00      	nop
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000138 	.word	0x20000138
 8003060:	2000013c 	.word	0x2000013c
 8003064:	20000218 	.word	0x20000218

08003068 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800306e:	4b29      	ldr	r3, [pc, #164]	; (8003114 <vTaskStartScheduler+0xac>)
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	2300      	movs	r3, #0
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	2300      	movs	r3, #0
 8003078:	2282      	movs	r2, #130	; 0x82
 800307a:	4927      	ldr	r1, [pc, #156]	; (8003118 <vTaskStartScheduler+0xb0>)
 800307c:	4827      	ldr	r0, [pc, #156]	; (800311c <vTaskStartScheduler+0xb4>)
 800307e:	f7ff fd47 	bl	8002b10 <xTaskCreate>
 8003082:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d102      	bne.n	8003090 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800308a:	f000 fed5 	bl	8003e38 <xTimerCreateTimerTask>
 800308e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d129      	bne.n	80030ea <vTaskStartScheduler+0x82>
        __asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	60bb      	str	r3, [r7, #8]
    }
 80030a8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <vTaskStartScheduler+0xb8>)
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <vTaskStartScheduler+0xbc>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030b8:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <vTaskStartScheduler+0xc0>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80030be:	4b1b      	ldr	r3, [pc, #108]	; (800312c <vTaskStartScheduler+0xc4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3334      	adds	r3, #52	; 0x34
 80030c4:	2205      	movs	r2, #5
 80030c6:	4914      	ldr	r1, [pc, #80]	; (8003118 <vTaskStartScheduler+0xb0>)
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 ff8b 	bl	8006fe4 <memcmp>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <vTaskStartScheduler+0x78>
 80030d4:	4b15      	ldr	r3, [pc, #84]	; (800312c <vTaskStartScheduler+0xc4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f003 fd43 	bl	8006b64 <SEGGER_SYSVIEW_OnTaskStartExec>
 80030de:	e001      	b.n	80030e4 <vTaskStartScheduler+0x7c>
 80030e0:	f003 fce2 	bl	8006aa8 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80030e4:	f001 f9b6 	bl	8004454 <xPortStartScheduler>
 80030e8:	e00e      	b.n	8003108 <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d10a      	bne.n	8003108 <vTaskStartScheduler+0xa0>
        __asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	607b      	str	r3, [r7, #4]
    }
 8003104:	bf00      	nop
 8003106:	e7fe      	b.n	8003106 <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <vTaskStartScheduler+0xc8>)
 800310a:	681b      	ldr	r3, [r3, #0]
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000234 	.word	0x20000234
 8003118:	08007f5c 	.word	0x08007f5c
 800311c:	08003b85 	.word	0x08003b85
 8003120:	20000230 	.word	0x20000230
 8003124:	2000021c 	.word	0x2000021c
 8003128:	20000214 	.word	0x20000214
 800312c:	20000138 	.word	0x20000138
 8003130:	2000000c 	.word	0x2000000c

08003134 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <vTaskSuspendAll+0x18>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	4a03      	ldr	r2, [pc, #12]	; (800314c <vTaskSuspendAll+0x18>)
 8003140:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003142:	bf00      	nop
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	20000238 	.word	0x20000238

08003150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800315e:	4b6d      	ldr	r3, [pc, #436]	; (8003314 <xTaskResumeAll+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <xTaskResumeAll+0x2c>
        __asm volatile
 8003166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316a:	f383 8811 	msr	BASEPRI, r3
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	f3bf 8f4f 	dsb	sy
 8003176:	607b      	str	r3, [r7, #4]
    }
 8003178:	bf00      	nop
 800317a:	e7fe      	b.n	800317a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800317c:	f001 fa8a 	bl	8004694 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003180:	4b64      	ldr	r3, [pc, #400]	; (8003314 <xTaskResumeAll+0x1c4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3b01      	subs	r3, #1
 8003186:	4a63      	ldr	r2, [pc, #396]	; (8003314 <xTaskResumeAll+0x1c4>)
 8003188:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800318a:	4b62      	ldr	r3, [pc, #392]	; (8003314 <xTaskResumeAll+0x1c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f040 80b8 	bne.w	8003304 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003194:	4b60      	ldr	r3, [pc, #384]	; (8003318 <xTaskResumeAll+0x1c8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80b3 	beq.w	8003304 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800319e:	e08e      	b.n	80032be <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a0:	4b5e      	ldr	r3, [pc, #376]	; (800331c <xTaskResumeAll+0x1cc>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	6a12      	ldr	r2, [r2, #32]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	69d2      	ldr	r2, [r2, #28]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3318      	adds	r3, #24
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d103      	bne.n	80031d6 <xTaskResumeAll+0x86>
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	6a1a      	ldr	r2, [r3, #32]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	2200      	movs	r2, #0
 80031da:	629a      	str	r2, [r3, #40]	; 0x28
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	1e5a      	subs	r2, r3, #1
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	68d2      	ldr	r2, [r2, #12]
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	6892      	ldr	r2, [r2, #8]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	3304      	adds	r3, #4
 8003208:	429a      	cmp	r2, r3
 800320a:	d103      	bne.n	8003214 <xTaskResumeAll+0xc4>
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	2200      	movs	r2, #0
 8003218:	615a      	str	r2, [r3, #20]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	1e5a      	subs	r2, r3, #1
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	4618      	mov	r0, r3
 8003228:	f003 fcde 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	2201      	movs	r2, #1
 8003232:	409a      	lsls	r2, r3
 8003234:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <xTaskResumeAll+0x1d0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4313      	orrs	r3, r2
 800323a:	4a39      	ldr	r2, [pc, #228]	; (8003320 <xTaskResumeAll+0x1d0>)
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003242:	4938      	ldr	r1, [pc, #224]	; (8003324 <xTaskResumeAll+0x1d4>)
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	3304      	adds	r3, #4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	3204      	adds	r2, #4
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	1d1a      	adds	r2, r3, #4
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4a28      	ldr	r2, [pc, #160]	; (8003324 <xTaskResumeAll+0x1d4>)
 8003282:	441a      	add	r2, r3
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	615a      	str	r2, [r3, #20]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328c:	4925      	ldr	r1, [pc, #148]	; (8003324 <xTaskResumeAll+0x1d4>)
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	1c59      	adds	r1, r3, #1
 800329c:	4821      	ldr	r0, [pc, #132]	; (8003324 <xTaskResumeAll+0x1d4>)
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4403      	add	r3, r0
 80032a8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <xTaskResumeAll+0x1d8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d302      	bcc.n	80032be <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80032b8:	4b1c      	ldr	r3, [pc, #112]	; (800332c <xTaskResumeAll+0x1dc>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032be:	4b17      	ldr	r3, [pc, #92]	; (800331c <xTaskResumeAll+0x1cc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f47f af6c 	bne.w	80031a0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80032ce:	f000 fce9 	bl	8003ca4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <xTaskResumeAll+0x1e0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d010      	beq.n	8003300 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80032de:	f000 f91f 	bl	8003520 <xTaskIncrementTick>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80032e8:	4b10      	ldr	r3, [pc, #64]	; (800332c <xTaskResumeAll+0x1dc>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f1      	bne.n	80032de <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <xTaskResumeAll+0x1e0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <xTaskResumeAll+0x1dc>)
 8003302:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003304:	f001 f9f6 	bl	80046f4 <vPortExitCritical>

    return xAlreadyYielded;
 8003308:	697b      	ldr	r3, [r7, #20]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000238 	.word	0x20000238
 8003318:	20000210 	.word	0x20000210
 800331c:	200001d0 	.word	0x200001d0
 8003320:	20000218 	.word	0x20000218
 8003324:	2000013c 	.word	0x2000013c
 8003328:	20000138 	.word	0x20000138
 800332c:	20000224 	.word	0x20000224
 8003330:	20000220 	.word	0x20000220

08003334 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <xTaskGetTickCount+0x1c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003340:	687b      	ldr	r3, [r7, #4]
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000214 	.word	0x20000214

08003354 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800335a:	f001 fa87 	bl	800486c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003362:	4b04      	ldr	r3, [pc, #16]	; (8003374 <xTaskGetTickCountFromISR+0x20>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003368:	683b      	ldr	r3, [r7, #0]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000214 	.word	0x20000214

08003378 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8003378:	b480      	push	{r7}
 800337a:	b08b      	sub	sp, #44	; 0x2c
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB;
        TCB_t * pxFirstTCB;
        TCB_t * pxReturn = NULL;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d05b      	beq.n	8003446 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	3308      	adds	r3, #8
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d104      	bne.n	80033b2 <prvSearchForNameWithinSingleList+0x3a>
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	605a      	str	r2, [r3, #4]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	3308      	adds	r3, #8
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d104      	bne.n	80033de <prvSearchForNameWithinSingleList+0x66>
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033ea:	2300      	movs	r3, #0
 80033ec:	623b      	str	r3, [r7, #32]
 80033ee:	e01c      	b.n	800342a <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	4413      	add	r3, r2
 80033f6:	3334      	adds	r3, #52	; 0x34
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	4413      	add	r3, r2
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	7afa      	ldrb	r2, [r7, #11]
 8003406:	429a      	cmp	r2, r3
 8003408:	d002      	beq.n	8003410 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 800340a:	2301      	movs	r3, #1
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e006      	b.n	800341e <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8003410:	7afb      	ldrb	r3, [r7, #11]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d103      	bne.n	800341e <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 800341a:	2301      	movs	r3, #1
 800341c:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d106      	bne.n	8003432 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	3301      	adds	r3, #1
 8003428:	623b      	str	r3, [r7, #32]
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	2b09      	cmp	r3, #9
 800342e:	d9df      	bls.n	80033f0 <prvSearchForNameWithinSingleList+0x78>
 8003430:	e000      	b.n	8003434 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8003432:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	2b00      	cmp	r3, #0
 8003438:	d104      	bne.n	8003444 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	429a      	cmp	r2, r3
 8003440:	d1bb      	bne.n	80033ba <prvSearchForNameWithinSingleList+0x42>
 8003442:	e000      	b.n	8003446 <prvSearchForNameWithinSingleList+0xce>
                    break;
 8003444:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003448:	4618      	mov	r0, r3
 800344a:	372c      	adds	r7, #44	; 0x2c
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 800345c:	2305      	movs	r3, #5
 800345e:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fc feff 	bl	8000264 <strlen>
 8003466:	4603      	mov	r3, r0
 8003468:	2b09      	cmp	r3, #9
 800346a:	d90a      	bls.n	8003482 <xTaskGetHandle+0x2e>
        __asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	60fb      	str	r3, [r7, #12]
    }
 800347e:	bf00      	nop
 8003480:	e7fe      	b.n	8003480 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 8003482:	f7ff fe57 	bl	8003134 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3b01      	subs	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4a1d      	ldr	r2, [pc, #116]	; (800350c <xTaskGetHandle+0xb8>)
 8003498:	4413      	add	r3, r2
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff6b 	bl	8003378 <prvSearchForNameWithinSingleList>
 80034a2:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ea      	bne.n	8003486 <xTaskGetHandle+0x32>
 80034b0:	e000      	b.n	80034b4 <xTaskGetHandle+0x60>
                    break;
 80034b2:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <xTaskGetHandle+0xbc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff59 	bl	8003378 <prvSearchForNameWithinSingleList>
 80034c6:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <xTaskGetHandle+0xc0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff4f 	bl	8003378 <prvSearchForNameWithinSingleList>
 80034da:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
            {
                if( pxTCB == NULL )
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <xTaskGetHandle+0x98>
                {
                    /* Search the suspended list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	480c      	ldr	r0, [pc, #48]	; (8003518 <xTaskGetHandle+0xc4>)
 80034e6:	f7ff ff47 	bl	8003378 <prvSearchForNameWithinSingleList>
 80034ea:	6138      	str	r0, [r7, #16]
            }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
            {
                if( pxTCB == NULL )
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d104      	bne.n	80034fc <xTaskGetHandle+0xa8>
                {
                    /* Search the deleted list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4809      	ldr	r0, [pc, #36]	; (800351c <xTaskGetHandle+0xc8>)
 80034f6:	f7ff ff3f 	bl	8003378 <prvSearchForNameWithinSingleList>
 80034fa:	6138      	str	r0, [r7, #16]
                }
            }
            #endif
        }
        ( void ) xTaskResumeAll();
 80034fc:	f7ff fe28 	bl	8003150 <xTaskResumeAll>

        return pxTCB;
 8003500:	693b      	ldr	r3, [r7, #16]
    }
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	2000013c 	.word	0x2000013c
 8003510:	200001c8 	.word	0x200001c8
 8003514:	200001cc 	.word	0x200001cc
 8003518:	200001fc 	.word	0x200001fc
 800351c:	200001e4 	.word	0x200001e4

08003520 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800352a:	4b70      	ldr	r3, [pc, #448]	; (80036ec <xTaskIncrementTick+0x1cc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 80d1 	bne.w	80036d6 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003534:	4b6e      	ldr	r3, [pc, #440]	; (80036f0 <xTaskIncrementTick+0x1d0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800353c:	4a6c      	ldr	r2, [pc, #432]	; (80036f0 <xTaskIncrementTick+0x1d0>)
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d120      	bne.n	800358a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003548:	4b6a      	ldr	r3, [pc, #424]	; (80036f4 <xTaskIncrementTick+0x1d4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <xTaskIncrementTick+0x48>
        __asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	607b      	str	r3, [r7, #4]
    }
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <xTaskIncrementTick+0x46>
 8003568:	4b62      	ldr	r3, [pc, #392]	; (80036f4 <xTaskIncrementTick+0x1d4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	61fb      	str	r3, [r7, #28]
 800356e:	4b62      	ldr	r3, [pc, #392]	; (80036f8 <xTaskIncrementTick+0x1d8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a60      	ldr	r2, [pc, #384]	; (80036f4 <xTaskIncrementTick+0x1d4>)
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4a60      	ldr	r2, [pc, #384]	; (80036f8 <xTaskIncrementTick+0x1d8>)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b5f      	ldr	r3, [pc, #380]	; (80036fc <xTaskIncrementTick+0x1dc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	4a5e      	ldr	r2, [pc, #376]	; (80036fc <xTaskIncrementTick+0x1dc>)
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	f000 fb8d 	bl	8003ca4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800358a:	4b5d      	ldr	r3, [pc, #372]	; (8003700 <xTaskIncrementTick+0x1e0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a3a      	ldr	r2, [r7, #32]
 8003590:	429a      	cmp	r2, r3
 8003592:	f0c0 80a5 	bcc.w	80036e0 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003596:	4b57      	ldr	r3, [pc, #348]	; (80036f4 <xTaskIncrementTick+0x1d4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a0:	4b57      	ldr	r3, [pc, #348]	; (8003700 <xTaskIncrementTick+0x1e0>)
 80035a2:	f04f 32ff 	mov.w	r2, #4294967295
 80035a6:	601a      	str	r2, [r3, #0]
                    break;
 80035a8:	e09a      	b.n	80036e0 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035aa:	4b52      	ldr	r3, [pc, #328]	; (80036f4 <xTaskIncrementTick+0x1d4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80035ba:	6a3a      	ldr	r2, [r7, #32]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d203      	bcs.n	80035ca <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80035c2:	4a4f      	ldr	r2, [pc, #316]	; (8003700 <xTaskIncrementTick+0x1e0>)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80035c8:	e08a      	b.n	80036e0 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	68d2      	ldr	r2, [r2, #12]
 80035d8:	609a      	str	r2, [r3, #8]
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	6892      	ldr	r2, [r2, #8]
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	3304      	adds	r3, #4
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d103      	bne.n	80035f8 <xTaskIncrementTick+0xd8>
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2200      	movs	r2, #0
 80035fc:	615a      	str	r2, [r3, #20]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1e5a      	subs	r2, r3, #1
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01e      	beq.n	800364e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	6a12      	ldr	r2, [r2, #32]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	69d2      	ldr	r2, [r2, #28]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	3318      	adds	r3, #24
 8003632:	429a      	cmp	r2, r3
 8003634:	d103      	bne.n	800363e <xTaskIncrementTick+0x11e>
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	6a1a      	ldr	r2, [r3, #32]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2200      	movs	r2, #0
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	1e5a      	subs	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	4618      	mov	r0, r3
 8003652:	f003 fac9 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	2201      	movs	r2, #1
 800365c:	409a      	lsls	r2, r3
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <xTaskIncrementTick+0x1e4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	4a27      	ldr	r2, [pc, #156]	; (8003704 <xTaskIncrementTick+0x1e4>)
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366c:	4926      	ldr	r1, [pc, #152]	; (8003708 <xTaskIncrementTick+0x1e8>)
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	3304      	adds	r3, #4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	60da      	str	r2, [r3, #12]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	3204      	adds	r2, #4
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	1d1a      	adds	r2, r3, #4
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	609a      	str	r2, [r3, #8]
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4a17      	ldr	r2, [pc, #92]	; (8003708 <xTaskIncrementTick+0x1e8>)
 80036ac:	441a      	add	r2, r3
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	615a      	str	r2, [r3, #20]
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	4914      	ldr	r1, [pc, #80]	; (8003708 <xTaskIncrementTick+0x1e8>)
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	1c59      	adds	r1, r3, #1
 80036c6:	4810      	ldr	r0, [pc, #64]	; (8003708 <xTaskIncrementTick+0x1e8>)
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4403      	add	r3, r0
 80036d2:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036d4:	e75f      	b.n	8003596 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <xTaskIncrementTick+0x1ec>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	4a0b      	ldr	r2, [pc, #44]	; (800370c <xTaskIncrementTick+0x1ec>)
 80036de:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3728      	adds	r7, #40	; 0x28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000238 	.word	0x20000238
 80036f0:	20000214 	.word	0x20000214
 80036f4:	200001c8 	.word	0x200001c8
 80036f8:	200001cc 	.word	0x200001cc
 80036fc:	20000228 	.word	0x20000228
 8003700:	20000230 	.word	0x20000230
 8003704:	20000218 	.word	0x20000218
 8003708:	2000013c 	.word	0x2000013c
 800370c:	20000220 	.word	0x20000220

08003710 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003716:	4b2f      	ldr	r3, [pc, #188]	; (80037d4 <vTaskSwitchContext+0xc4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800371e:	4b2e      	ldr	r3, [pc, #184]	; (80037d8 <vTaskSwitchContext+0xc8>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003724:	e052      	b.n	80037cc <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8003726:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <vTaskSwitchContext+0xc8>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372c:	4b2b      	ldr	r3, [pc, #172]	; (80037dc <vTaskSwitchContext+0xcc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	fab3 f383 	clz	r3, r3
 8003738:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800373a:	7afb      	ldrb	r3, [r7, #11]
 800373c:	f1c3 031f 	rsb	r3, r3, #31
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	4927      	ldr	r1, [pc, #156]	; (80037e0 <vTaskSwitchContext+0xd0>)
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10a      	bne.n	800376c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	607b      	str	r3, [r7, #4]
    }
 8003768:	bf00      	nop
 800376a:	e7fe      	b.n	800376a <vTaskSwitchContext+0x5a>
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4a1a      	ldr	r2, [pc, #104]	; (80037e0 <vTaskSwitchContext+0xd0>)
 8003778:	4413      	add	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	3308      	adds	r3, #8
 800378e:	429a      	cmp	r2, r3
 8003790:	d104      	bne.n	800379c <vTaskSwitchContext+0x8c>
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	605a      	str	r2, [r3, #4]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	4a10      	ldr	r2, [pc, #64]	; (80037e4 <vTaskSwitchContext+0xd4>)
 80037a4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80037a6:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <vTaskSwitchContext+0xd4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3334      	adds	r3, #52	; 0x34
 80037ac:	2205      	movs	r2, #5
 80037ae:	490e      	ldr	r1, [pc, #56]	; (80037e8 <vTaskSwitchContext+0xd8>)
 80037b0:	4618      	mov	r0, r3
 80037b2:	f003 fc17 	bl	8006fe4 <memcmp>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <vTaskSwitchContext+0xb8>
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <vTaskSwitchContext+0xd4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f003 f9cf 	bl	8006b64 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80037c6:	e001      	b.n	80037cc <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 80037c8:	f003 f96e 	bl	8006aa8 <SEGGER_SYSVIEW_OnIdle>
}
 80037cc:	bf00      	nop
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000238 	.word	0x20000238
 80037d8:	20000224 	.word	0x20000224
 80037dc:	20000218 	.word	0x20000218
 80037e0:	2000013c 	.word	0x2000013c
 80037e4:	20000138 	.word	0x20000138
 80037e8:	08007f5c 	.word	0x08007f5c

080037ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	60fb      	str	r3, [r7, #12]
    }
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <vTaskPlaceOnEventList+0x44>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3318      	adds	r3, #24
 8003818:	4619      	mov	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fe fdfd 	bl	800241a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003820:	2101      	movs	r1, #1
 8003822:	6838      	ldr	r0, [r7, #0]
 8003824:	f000 fa88 	bl	8003d38 <prvAddCurrentTaskToDelayedList>
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000138 	.word	0x20000138

08003834 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10a      	bne.n	800385c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	613b      	str	r3, [r7, #16]
    }
 8003858:	bf00      	nop
 800385a:	e7fe      	b.n	800385a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	61da      	str	r2, [r3, #28]
 800386a:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	6892      	ldr	r2, [r2, #8]
 8003872:	621a      	str	r2, [r3, #32]
 8003874:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	3218      	adds	r2, #24
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f103 0218 	add.w	r2, r3, #24
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80038a4:	f04f 33ff 	mov.w	r3, #4294967295
 80038a8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80038aa:	2024      	movs	r0, #36	; 0x24
 80038ac:	f002 fbfc 	bl	80060a8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	68b8      	ldr	r0, [r7, #8]
 80038b4:	f000 fa40 	bl	8003d38 <prvAddCurrentTaskToDelayedList>
    }
 80038b8:	bf00      	nop
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000138 	.word	0x20000138

080038c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	60fb      	str	r3, [r7, #12]
    }
 80038ec:	bf00      	nop
 80038ee:	e7fe      	b.n	80038ee <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	6a3a      	ldr	r2, [r7, #32]
 80038fc:	6a12      	ldr	r2, [r2, #32]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	6a3a      	ldr	r2, [r7, #32]
 8003906:	69d2      	ldr	r2, [r2, #28]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	3318      	adds	r3, #24
 8003912:	429a      	cmp	r2, r3
 8003914:	d103      	bne.n	800391e <xTaskRemoveFromEventList+0x5a>
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	2200      	movs	r2, #0
 8003922:	629a      	str	r2, [r3, #40]	; 0x28
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	1e5a      	subs	r2, r3, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800392e:	4b4b      	ldr	r3, [pc, #300]	; (8003a5c <xTaskRemoveFromEventList+0x198>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d162      	bne.n	80039fc <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	6a3a      	ldr	r2, [r7, #32]
 8003942:	68d2      	ldr	r2, [r2, #12]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	6a3a      	ldr	r2, [r7, #32]
 800394c:	6892      	ldr	r2, [r2, #8]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	3304      	adds	r3, #4
 8003958:	429a      	cmp	r2, r3
 800395a:	d103      	bne.n	8003964 <xTaskRemoveFromEventList+0xa0>
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	2200      	movs	r2, #0
 8003968:	615a      	str	r2, [r3, #20]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	1e5a      	subs	r2, r3, #1
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	4618      	mov	r0, r3
 8003978:	f003 f936 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	2201      	movs	r2, #1
 8003982:	409a      	lsls	r2, r3
 8003984:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <xTaskRemoveFromEventList+0x19c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4313      	orrs	r3, r2
 800398a:	4a35      	ldr	r2, [pc, #212]	; (8003a60 <xTaskRemoveFromEventList+0x19c>)
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003992:	4934      	ldr	r1, [pc, #208]	; (8003a64 <xTaskRemoveFromEventList+0x1a0>)
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	3304      	adds	r3, #4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	609a      	str	r2, [r3, #8]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	6a3a      	ldr	r2, [r7, #32]
 80039b8:	3204      	adds	r2, #4
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	1d1a      	adds	r2, r3, #4
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <xTaskRemoveFromEventList+0x1a0>)
 80039d2:	441a      	add	r2, r3
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	615a      	str	r2, [r3, #20]
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039dc:	4921      	ldr	r1, [pc, #132]	; (8003a64 <xTaskRemoveFromEventList+0x1a0>)
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	1c59      	adds	r1, r3, #1
 80039ec:	481d      	ldr	r0, [pc, #116]	; (8003a64 <xTaskRemoveFromEventList+0x1a0>)
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4403      	add	r3, r0
 80039f8:	6019      	str	r1, [r3, #0]
 80039fa:	e01b      	b.n	8003a34 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039fc:	4b1a      	ldr	r3, [pc, #104]	; (8003a68 <xTaskRemoveFromEventList+0x1a4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	61da      	str	r2, [r3, #28]
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	621a      	str	r2, [r3, #32]
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	6a3a      	ldr	r2, [r7, #32]
 8003a16:	3218      	adds	r2, #24
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	f103 0218 	add.w	r2, r3, #24
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	4a10      	ldr	r2, [pc, #64]	; (8003a68 <xTaskRemoveFromEventList+0x1a4>)
 8003a28:	629a      	str	r2, [r3, #40]	; 0x28
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <xTaskRemoveFromEventList+0x1a4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	4a0d      	ldr	r2, [pc, #52]	; (8003a68 <xTaskRemoveFromEventList+0x1a4>)
 8003a32:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <xTaskRemoveFromEventList+0x1a8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d905      	bls.n	8003a4e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a42:	2301      	movs	r3, #1
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <xTaskRemoveFromEventList+0x1ac>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e001      	b.n	8003a52 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3728      	adds	r7, #40	; 0x28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000238 	.word	0x20000238
 8003a60:	20000218 	.word	0x20000218
 8003a64:	2000013c 	.word	0x2000013c
 8003a68:	200001d0 	.word	0x200001d0
 8003a6c:	20000138 	.word	0x20000138
 8003a70:	20000224 	.word	0x20000224

08003a74 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <vTaskInternalSetTimeOutState+0x24>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <vTaskInternalSetTimeOutState+0x28>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	605a      	str	r2, [r3, #4]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	20000228 	.word	0x20000228
 8003a9c:	20000214 	.word	0x20000214

08003aa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	613b      	str	r3, [r7, #16]
    }
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	60fb      	str	r3, [r7, #12]
    }
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003ae2:	f000 fdd7 	bl	8004694 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003ae6:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <xTaskCheckForTimeOut+0xc4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d102      	bne.n	8003b06 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	e026      	b.n	8003b54 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <xTaskCheckForTimeOut+0xc8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d00a      	beq.n	8003b28 <xTaskCheckForTimeOut+0x88>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d305      	bcc.n	8003b28 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e015      	b.n	8003b54 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d20b      	bcs.n	8003b4a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	1ad2      	subs	r2, r2, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ff98 	bl	8003a74 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	e004      	b.n	8003b54 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b54:	f000 fdce 	bl	80046f4 <vPortExitCritical>

    return xReturn;
 8003b58:	69fb      	ldr	r3, [r7, #28]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000214 	.word	0x20000214
 8003b68:	20000228 	.word	0x20000228

08003b6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <vTaskMissedYield+0x14>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
}
 8003b76:	bf00      	nop
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	20000224 	.word	0x20000224

08003b84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003b8c:	f000 f84c 	bl	8003c28 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <prvIdleTask+0x20>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ba0:	e7f4      	b.n	8003b8c <prvIdleTask+0x8>
 8003ba2:	bf00      	nop
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	e00c      	b.n	8003bce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <prvInitialiseTaskLists+0x60>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fbfc 	bl	80023c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d9ef      	bls.n	8003bb4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003bd4:	480d      	ldr	r0, [pc, #52]	; (8003c0c <prvInitialiseTaskLists+0x64>)
 8003bd6:	f7fe fbf3 	bl	80023c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003bda:	480d      	ldr	r0, [pc, #52]	; (8003c10 <prvInitialiseTaskLists+0x68>)
 8003bdc:	f7fe fbf0 	bl	80023c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <prvInitialiseTaskLists+0x6c>)
 8003be2:	f7fe fbed 	bl	80023c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003be6:	480c      	ldr	r0, [pc, #48]	; (8003c18 <prvInitialiseTaskLists+0x70>)
 8003be8:	f7fe fbea 	bl	80023c0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003bec:	480b      	ldr	r0, [pc, #44]	; (8003c1c <prvInitialiseTaskLists+0x74>)
 8003bee:	f7fe fbe7 	bl	80023c0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <prvInitialiseTaskLists+0x78>)
 8003bf4:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <prvInitialiseTaskLists+0x64>)
 8003bf6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <prvInitialiseTaskLists+0x7c>)
 8003bfa:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <prvInitialiseTaskLists+0x68>)
 8003bfc:	601a      	str	r2, [r3, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	2000013c 	.word	0x2000013c
 8003c0c:	200001a0 	.word	0x200001a0
 8003c10:	200001b4 	.word	0x200001b4
 8003c14:	200001d0 	.word	0x200001d0
 8003c18:	200001e4 	.word	0x200001e4
 8003c1c:	200001fc 	.word	0x200001fc
 8003c20:	200001c8 	.word	0x200001c8
 8003c24:	200001cc 	.word	0x200001cc

08003c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c2e:	e019      	b.n	8003c64 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003c30:	f000 fd30 	bl	8004694 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c34:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <prvCheckTasksWaitingTermination+0x50>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe fc23 	bl	800248c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <prvCheckTasksWaitingTermination+0x54>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	; (8003c7c <prvCheckTasksWaitingTermination+0x54>)
 8003c4e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c58:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003c5a:	f000 fd4b 	bl	80046f4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f810 	bl	8003c84 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e1      	bne.n	8003c30 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	200001e4 	.word	0x200001e4
 8003c7c:	20000210 	.word	0x20000210
 8003c80:	200001f8 	.word	0x200001f8

08003c84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fee5 	bl	8004a60 <vPortFree>
            vPortFree( pxTCB );
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fee2 	bl	8004a60 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <prvResetNextTaskUnblockTime+0x30>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <prvResetNextTaskUnblockTime+0x34>)
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003cba:	e005      	b.n	8003cc8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <prvResetNextTaskUnblockTime+0x30>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <prvResetNextTaskUnblockTime+0x34>)
 8003cc6:	6013      	str	r3, [r2, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	200001c8 	.word	0x200001c8
 8003cd8:	20000230 	.word	0x20000230

08003cdc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <xTaskGetCurrentTaskHandle+0x1c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003ce8:	687b      	ldr	r3, [r7, #4]
    }
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000138 	.word	0x20000138

08003cfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <xTaskGetSchedulerState+0x34>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d102      	bne.n	8003d10 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	e008      	b.n	8003d22 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d10:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <xTaskGetSchedulerState+0x38>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	607b      	str	r3, [r7, #4]
 8003d1c:	e001      	b.n	8003d22 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d22:	687b      	ldr	r3, [r7, #4]
    }
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	2000021c 	.word	0x2000021c
 8003d34:	20000238 	.word	0x20000238

08003d38 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d42:	4b36      	ldr	r3, [pc, #216]	; (8003e1c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d48:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fb9c 	bl	800248c <uxListRemove>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10b      	bne.n	8003d72 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d5a:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	2201      	movs	r2, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	4b2e      	ldr	r3, [pc, #184]	; (8003e24 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	4a2d      	ldr	r2, [pc, #180]	; (8003e24 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d70:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d124      	bne.n	8003dc4 <prvAddCurrentTaskToDelayedList+0x8c>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d021      	beq.n	8003dc4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d80:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	609a      	str	r2, [r3, #8]
 8003d8e:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	6892      	ldr	r2, [r2, #8]
 8003d96:	60da      	str	r2, [r3, #12]
 8003d98:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	3204      	adds	r2, #4
 8003da2:	605a      	str	r2, [r3, #4]
 8003da4:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	1d1a      	adds	r2, r3, #4
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	609a      	str	r2, [r3, #8]
 8003dae:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1d      	ldr	r2, [pc, #116]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003db4:	615a      	str	r2, [r3, #20]
 8003db6:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	4a1a      	ldr	r2, [pc, #104]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003dc2:	e026      	b.n	8003e12 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dcc:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d209      	bcs.n	8003df0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ddc:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <prvAddCurrentTaskToDelayedList+0xf4>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f7fe fb16 	bl	800241a <vListInsert>
}
 8003dee:	e010      	b.n	8003e12 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f7fe fb0c 	bl	800241a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d202      	bcs.n	8003e12 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003e0c:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6013      	str	r3, [r2, #0]
}
 8003e12:	bf00      	nop
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000214 	.word	0x20000214
 8003e20:	20000138 	.word	0x20000138
 8003e24:	20000218 	.word	0x20000218
 8003e28:	200001fc 	.word	0x200001fc
 8003e2c:	200001cc 	.word	0x200001cc
 8003e30:	200001c8 	.word	0x200001c8
 8003e34:	20000230 	.word	0x20000230

08003e38 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e42:	f000 fa47 	bl	80042d4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <xTimerCreateTimerTask+0x54>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003e4e:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <xTimerCreateTimerTask+0x58>)
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	2302      	movs	r3, #2
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	2300      	movs	r3, #0
 8003e58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e5c:	490d      	ldr	r1, [pc, #52]	; (8003e94 <xTimerCreateTimerTask+0x5c>)
 8003e5e:	480e      	ldr	r0, [pc, #56]	; (8003e98 <xTimerCreateTimerTask+0x60>)
 8003e60:	f7fe fe56 	bl	8002b10 <xTaskCreate>
 8003e64:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	603b      	str	r3, [r7, #0]
    }
 8003e7e:	bf00      	nop
 8003e80:	e7fe      	b.n	8003e80 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003e82:	687b      	ldr	r3, [r7, #4]
    }
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	2000026c 	.word	0x2000026c
 8003e90:	20000270 	.word	0x20000270
 8003e94:	08007f64 	.word	0x08007f64
 8003e98:	08003f41 	.word	0x08003f41

08003e9c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ea8:	e008      	b.n	8003ebc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	18d1      	adds	r1, r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f8dd 	bl	8004088 <prvInsertTimerInActiveList>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1ea      	bne.n	8003eaa <prvReloadTimer+0xe>
        }
    }
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eea:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <prvProcessExpiredTimer+0x5c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fac7 	bl	800248c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff ffc3 	bl	8003e9c <prvReloadTimer>
 8003f16:	e008      	b.n	8003f2a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	4798      	blx	r3
    }
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000264 	.word	0x20000264

08003f40 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f48:	f107 0308 	add.w	r3, r7, #8
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 f857 	bl	8004000 <prvGetNextExpireTime>
 8003f52:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4619      	mov	r1, r3
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f803 	bl	8003f64 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003f5e:	f000 f8d5 	bl	800410c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f62:	e7f1      	b.n	8003f48 <prvTimerTask+0x8>

08003f64 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003f6e:	f7ff f8e1 	bl	8003134 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f72:	f107 0308 	add.w	r3, r7, #8
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f866 	bl	8004048 <prvSampleTimeNow>
 8003f7c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d130      	bne.n	8003fe6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <prvProcessTimerOrBlockTask+0x3c>
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d806      	bhi.n	8003fa0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003f92:	f7ff f8dd 	bl	8003150 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f96:	68f9      	ldr	r1, [r7, #12]
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff ffa1 	bl	8003ee0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003f9e:	e024      	b.n	8003fea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <prvProcessTimerOrBlockTask+0x90>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <prvProcessTimerOrBlockTask+0x50>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <prvProcessTimerOrBlockTask+0x52>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <prvProcessTimerOrBlockTask+0x94>)
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f7fe fd6f 	bl	8002aa8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003fca:	f7ff f8c1 	bl	8003150 <xTaskResumeAll>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10a      	bne.n	8003fea <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003fd4:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <prvProcessTimerOrBlockTask+0x98>)
 8003fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	f3bf 8f6f 	isb	sy
    }
 8003fe4:	e001      	b.n	8003fea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003fe6:	f7ff f8b3 	bl	8003150 <xTaskResumeAll>
    }
 8003fea:	bf00      	nop
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000268 	.word	0x20000268
 8003ff8:	2000026c 	.word	0x2000026c
 8003ffc:	e000ed04 	.word	0xe000ed04

08004000 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004008:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <prvGetNextExpireTime+0x44>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <prvGetNextExpireTime+0x16>
 8004012:	2201      	movs	r2, #1
 8004014:	e000      	b.n	8004018 <prvGetNextExpireTime+0x18>
 8004016:	2200      	movs	r2, #0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d105      	bne.n	8004030 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004024:	4b07      	ldr	r3, [pc, #28]	; (8004044 <prvGetNextExpireTime+0x44>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	e001      	b.n	8004034 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004034:	68fb      	ldr	r3, [r7, #12]
    }
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20000264 	.word	0x20000264

08004048 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004050:	f7ff f970 	bl	8003334 <xTaskGetTickCount>
 8004054:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004056:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <prvSampleTimeNow+0x3c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	429a      	cmp	r2, r3
 800405e:	d205      	bcs.n	800406c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004060:	f000 f912 	bl	8004288 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e002      	b.n	8004072 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004072:	4a04      	ldr	r2, [pc, #16]	; (8004084 <prvSampleTimeNow+0x3c>)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004078:	68fb      	ldr	r3, [r7, #12]
    }
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000274 	.word	0x20000274

08004088 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d812      	bhi.n	80040d4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	1ad2      	subs	r2, r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d302      	bcc.n	80040c2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80040bc:	2301      	movs	r3, #1
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e01b      	b.n	80040fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80040c2:	4b10      	ldr	r3, [pc, #64]	; (8004104 <prvInsertTimerInActiveList+0x7c>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3304      	adds	r3, #4
 80040ca:	4619      	mov	r1, r3
 80040cc:	4610      	mov	r0, r2
 80040ce:	f7fe f9a4 	bl	800241a <vListInsert>
 80040d2:	e012      	b.n	80040fa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d206      	bcs.n	80040ea <prvInsertTimerInActiveList+0x62>
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d302      	bcc.n	80040ea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80040e4:	2301      	movs	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	e007      	b.n	80040fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <prvInsertTimerInActiveList+0x80>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f7fe f990 	bl	800241a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80040fa:	697b      	ldr	r3, [r7, #20]
    }
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000268 	.word	0x20000268
 8004108:	20000264 	.word	0x20000264

0800410c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004112:	e0a6      	b.n	8004262 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f2c0 80a2 	blt.w	8004260 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d004      	beq.n	8004132 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	3304      	adds	r3, #4
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe f9ad 	bl	800248c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ff87 	bl	8004048 <prvSampleTimeNow>
 800413a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	3b01      	subs	r3, #1
 8004140:	2b08      	cmp	r3, #8
 8004142:	f200 808e 	bhi.w	8004262 <prvProcessReceivedCommands+0x156>
 8004146:	a201      	add	r2, pc, #4	; (adr r2, 800414c <prvProcessReceivedCommands+0x40>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	08004171 	.word	0x08004171
 8004150:	08004171 	.word	0x08004171
 8004154:	080041d9 	.word	0x080041d9
 8004158:	080041ed 	.word	0x080041ed
 800415c:	08004237 	.word	0x08004237
 8004160:	08004171 	.word	0x08004171
 8004164:	08004171 	.word	0x08004171
 8004168:	080041d9 	.word	0x080041d9
 800416c:	080041ed 	.word	0x080041ed
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	b2da      	uxtb	r2, r3
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	18d1      	adds	r1, r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	69f8      	ldr	r0, [r7, #28]
 8004190:	f7ff ff7a 	bl	8004088 <prvInsertTimerInActiveList>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d063      	beq.n	8004262 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d009      	beq.n	80041bc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	4413      	add	r3, r2
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4619      	mov	r1, r3
 80041b4:	69f8      	ldr	r0, [r7, #28]
 80041b6:	f7ff fe71 	bl	8003e9c <prvReloadTimer>
 80041ba:	e008      	b.n	80041ce <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	69f8      	ldr	r0, [r7, #28]
 80041d4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80041d6:	e044      	b.n	8004262 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80041ea:	e03a      	b.n	8004262 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10a      	bne.n	8004222 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	617b      	str	r3, [r7, #20]
    }
 800421e:	bf00      	nop
 8004220:	e7fe      	b.n	8004220 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	18d1      	adds	r1, r2, r3
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	69f8      	ldr	r0, [r7, #28]
 8004230:	f7ff ff2a 	bl	8004088 <prvInsertTimerInActiveList>
                        break;
 8004234:	e015      	b.n	8004262 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d103      	bne.n	800424c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004244:	69f8      	ldr	r0, [r7, #28]
 8004246:	f000 fc0b 	bl	8004a60 <vPortFree>
 800424a:	e00a      	b.n	8004262 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	b2da      	uxtb	r2, r3
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800425e:	e000      	b.n	8004262 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004260:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <prvProcessReceivedCommands+0x178>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f107 0108 	add.w	r1, r7, #8
 800426a:	2200      	movs	r2, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe fa31 	bl	80026d4 <xQueueReceive>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	f47f af4d 	bne.w	8004114 <prvProcessReceivedCommands+0x8>
        }
    }
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	2000026c 	.word	0x2000026c

08004288 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800428e:	e009      	b.n	80042a4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004290:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <prvSwitchTimerLists+0x44>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800429a:	f04f 31ff 	mov.w	r1, #4294967295
 800429e:	6838      	ldr	r0, [r7, #0]
 80042a0:	f7ff fe1e 	bl	8003ee0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <prvSwitchTimerLists+0x44>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80042ae:	4b07      	ldr	r3, [pc, #28]	; (80042cc <prvSwitchTimerLists+0x44>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <prvSwitchTimerLists+0x48>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a04      	ldr	r2, [pc, #16]	; (80042cc <prvSwitchTimerLists+0x44>)
 80042ba:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80042bc:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <prvSwitchTimerLists+0x48>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6013      	str	r3, [r2, #0]
    }
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000264 	.word	0x20000264
 80042d0:	20000268 	.word	0x20000268

080042d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80042d8:	f000 f9dc 	bl	8004694 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80042dc:	4b12      	ldr	r3, [pc, #72]	; (8004328 <prvCheckForValidListAndQueue+0x54>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d11d      	bne.n	8004320 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80042e4:	4811      	ldr	r0, [pc, #68]	; (800432c <prvCheckForValidListAndQueue+0x58>)
 80042e6:	f7fe f86b 	bl	80023c0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80042ea:	4811      	ldr	r0, [pc, #68]	; (8004330 <prvCheckForValidListAndQueue+0x5c>)
 80042ec:	f7fe f868 	bl	80023c0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80042f0:	4b10      	ldr	r3, [pc, #64]	; (8004334 <prvCheckForValidListAndQueue+0x60>)
 80042f2:	4a0e      	ldr	r2, [pc, #56]	; (800432c <prvCheckForValidListAndQueue+0x58>)
 80042f4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80042f6:	4b10      	ldr	r3, [pc, #64]	; (8004338 <prvCheckForValidListAndQueue+0x64>)
 80042f8:	4a0d      	ldr	r2, [pc, #52]	; (8004330 <prvCheckForValidListAndQueue+0x5c>)
 80042fa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80042fc:	2200      	movs	r2, #0
 80042fe:	210c      	movs	r1, #12
 8004300:	200a      	movs	r0, #10
 8004302:	f7fe f96f 	bl	80025e4 <xQueueGenericCreate>
 8004306:	4603      	mov	r3, r0
 8004308:	4a07      	ldr	r2, [pc, #28]	; (8004328 <prvCheckForValidListAndQueue+0x54>)
 800430a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <prvCheckForValidListAndQueue+0x54>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <prvCheckForValidListAndQueue+0x54>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4908      	ldr	r1, [pc, #32]	; (800433c <prvCheckForValidListAndQueue+0x68>)
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe fb6e 	bl	80029fc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004320:	f000 f9e8 	bl	80046f4 <vPortExitCritical>
    }
 8004324:	bf00      	nop
 8004326:	bd80      	pop	{r7, pc}
 8004328:	2000026c 	.word	0x2000026c
 800432c:	2000023c 	.word	0x2000023c
 8004330:	20000250 	.word	0x20000250
 8004334:	20000264 	.word	0x20000264
 8004338:	20000268 	.word	0x20000268
 800433c:	08007f6c 	.word	0x08007f6c

08004340 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3b04      	subs	r3, #4
 8004350:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004358:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3b04      	subs	r3, #4
 800435e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f023 0201 	bic.w	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3b04      	subs	r3, #4
 800436e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004370:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <pxPortInitialiseStack+0x64>)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3b14      	subs	r3, #20
 800437a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3b04      	subs	r3, #4
 8004386:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f06f 0202 	mvn.w	r2, #2
 800438e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3b20      	subs	r3, #32
 8004394:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004396:	68fb      	ldr	r3, [r7, #12]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	080043a9 	.word	0x080043a9

080043a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <prvTaskExitError+0x54>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ba:	d00a      	beq.n	80043d2 <prvTaskExitError+0x2a>
        __asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	60fb      	str	r3, [r7, #12]
    }
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <prvTaskExitError+0x28>
        __asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	60bb      	str	r3, [r7, #8]
    }
 80043e4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80043e6:	bf00      	nop
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0fc      	beq.n	80043e8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	20000010 	.word	0x20000010

08004400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004400:	4b07      	ldr	r3, [pc, #28]	; (8004420 <pxCurrentTCBConst2>)
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	6808      	ldr	r0, [r1, #0]
 8004406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440a:	f380 8809 	msr	PSP, r0
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f04f 0000 	mov.w	r0, #0
 8004416:	f380 8811 	msr	BASEPRI, r0
 800441a:	4770      	bx	lr
 800441c:	f3af 8000 	nop.w

08004420 <pxCurrentTCBConst2>:
 8004420:	20000138 	.word	0x20000138
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop

08004428 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004428:	4808      	ldr	r0, [pc, #32]	; (800444c <prvPortStartFirstTask+0x24>)
 800442a:	6800      	ldr	r0, [r0, #0]
 800442c:	6800      	ldr	r0, [r0, #0]
 800442e:	f380 8808 	msr	MSP, r0
 8004432:	f04f 0000 	mov.w	r0, #0
 8004436:	f380 8814 	msr	CONTROL, r0
 800443a:	b662      	cpsie	i
 800443c:	b661      	cpsie	f
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	df00      	svc	0
 8004448:	bf00      	nop
 800444a:	0000      	.short	0x0000
 800444c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004450:	bf00      	nop
 8004452:	bf00      	nop

08004454 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800445a:	4b46      	ldr	r3, [pc, #280]	; (8004574 <xPortStartScheduler+0x120>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a46      	ldr	r2, [pc, #280]	; (8004578 <xPortStartScheduler+0x124>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d10a      	bne.n	800447a <xPortStartScheduler+0x26>
        __asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	613b      	str	r3, [r7, #16]
    }
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800447a:	4b3e      	ldr	r3, [pc, #248]	; (8004574 <xPortStartScheduler+0x120>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a3f      	ldr	r2, [pc, #252]	; (800457c <xPortStartScheduler+0x128>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d10a      	bne.n	800449a <xPortStartScheduler+0x46>
        __asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	60fb      	str	r3, [r7, #12]
    }
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800449a:	4b39      	ldr	r3, [pc, #228]	; (8004580 <xPortStartScheduler+0x12c>)
 800449c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	22ff      	movs	r2, #255	; 0xff
 80044aa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <xPortStartScheduler+0x130>)
 80044c0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044c2:	4b31      	ldr	r3, [pc, #196]	; (8004588 <xPortStartScheduler+0x134>)
 80044c4:	2207      	movs	r2, #7
 80044c6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044c8:	e009      	b.n	80044de <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80044ca:	4b2f      	ldr	r3, [pc, #188]	; (8004588 <xPortStartScheduler+0x134>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	4a2d      	ldr	r2, [pc, #180]	; (8004588 <xPortStartScheduler+0x134>)
 80044d2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e6:	2b80      	cmp	r3, #128	; 0x80
 80044e8:	d0ef      	beq.n	80044ca <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044ea:	4b27      	ldr	r3, [pc, #156]	; (8004588 <xPortStartScheduler+0x134>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f1c3 0307 	rsb	r3, r3, #7
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d00a      	beq.n	800450c <xPortStartScheduler+0xb8>
        __asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	60bb      	str	r3, [r7, #8]
    }
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800450c:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <xPortStartScheduler+0x134>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <xPortStartScheduler+0x134>)
 8004514:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004516:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <xPortStartScheduler+0x134>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800451e:	4a1a      	ldr	r2, [pc, #104]	; (8004588 <xPortStartScheduler+0x134>)
 8004520:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800452a:	4b18      	ldr	r3, [pc, #96]	; (800458c <xPortStartScheduler+0x138>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a17      	ldr	r2, [pc, #92]	; (800458c <xPortStartScheduler+0x138>)
 8004530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004534:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004536:	4b15      	ldr	r3, [pc, #84]	; (800458c <xPortStartScheduler+0x138>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a14      	ldr	r2, [pc, #80]	; (800458c <xPortStartScheduler+0x138>)
 800453c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004540:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004542:	f000 f963 	bl	800480c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004546:	4b12      	ldr	r3, [pc, #72]	; (8004590 <xPortStartScheduler+0x13c>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800454c:	f000 f982 	bl	8004854 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004550:	4b10      	ldr	r3, [pc, #64]	; (8004594 <xPortStartScheduler+0x140>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a0f      	ldr	r2, [pc, #60]	; (8004594 <xPortStartScheduler+0x140>)
 8004556:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800455a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800455c:	f7ff ff64 	bl	8004428 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004560:	f7ff f8d6 	bl	8003710 <vTaskSwitchContext>
    prvTaskExitError();
 8004564:	f7ff ff20 	bl	80043a8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	e000ed00 	.word	0xe000ed00
 8004578:	410fc271 	.word	0x410fc271
 800457c:	410fc270 	.word	0x410fc270
 8004580:	e000e400 	.word	0xe000e400
 8004584:	20000278 	.word	0x20000278
 8004588:	2000027c 	.word	0x2000027c
 800458c:	e000ed20 	.word	0xe000ed20
 8004590:	20000010 	.word	0x20000010
 8004594:	e000ef34 	.word	0xe000ef34

08004598 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800459e:	4b37      	ldr	r3, [pc, #220]	; (800467c <vInitPrioGroupValue+0xe4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a37      	ldr	r2, [pc, #220]	; (8004680 <vInitPrioGroupValue+0xe8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d10a      	bne.n	80045be <vInitPrioGroupValue+0x26>
        __asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	613b      	str	r3, [r7, #16]
    }
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045be:	4b2f      	ldr	r3, [pc, #188]	; (800467c <vInitPrioGroupValue+0xe4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a30      	ldr	r2, [pc, #192]	; (8004684 <vInitPrioGroupValue+0xec>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d10a      	bne.n	80045de <vInitPrioGroupValue+0x46>
        __asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	60fb      	str	r3, [r7, #12]
    }
 80045da:	bf00      	nop
 80045dc:	e7fe      	b.n	80045dc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045de:	4b2a      	ldr	r3, [pc, #168]	; (8004688 <vInitPrioGroupValue+0xf0>)
 80045e0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	22ff      	movs	r2, #255	; 0xff
 80045ee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004600:	b2da      	uxtb	r2, r3
 8004602:	4b22      	ldr	r3, [pc, #136]	; (800468c <vInitPrioGroupValue+0xf4>)
 8004604:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004606:	4b22      	ldr	r3, [pc, #136]	; (8004690 <vInitPrioGroupValue+0xf8>)
 8004608:	2207      	movs	r2, #7
 800460a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800460c:	e009      	b.n	8004622 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800460e:	4b20      	ldr	r3, [pc, #128]	; (8004690 <vInitPrioGroupValue+0xf8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3b01      	subs	r3, #1
 8004614:	4a1e      	ldr	r2, [pc, #120]	; (8004690 <vInitPrioGroupValue+0xf8>)
 8004616:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	b2db      	uxtb	r3, r3
 8004620:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b80      	cmp	r3, #128	; 0x80
 800462c:	d0ef      	beq.n	800460e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800462e:	4b18      	ldr	r3, [pc, #96]	; (8004690 <vInitPrioGroupValue+0xf8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1c3 0307 	rsb	r3, r3, #7
 8004636:	2b04      	cmp	r3, #4
 8004638:	d00a      	beq.n	8004650 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	60bb      	str	r3, [r7, #8]
    }
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <vInitPrioGroupValue+0xf8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	4a0e      	ldr	r2, [pc, #56]	; (8004690 <vInitPrioGroupValue+0xf8>)
 8004658:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800465a:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <vInitPrioGroupValue+0xf8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004662:	4a0b      	ldr	r2, [pc, #44]	; (8004690 <vInitPrioGroupValue+0xf8>)
 8004664:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	b2da      	uxtb	r2, r3
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	e000ed00 	.word	0xe000ed00
 8004680:	410fc271 	.word	0x410fc271
 8004684:	410fc270 	.word	0x410fc270
 8004688:	e000e400 	.word	0xe000e400
 800468c:	20000278 	.word	0x20000278
 8004690:	2000027c 	.word	0x2000027c

08004694 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
        __asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	607b      	str	r3, [r7, #4]
    }
 80046ac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046ae:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <vPortEnterCritical+0x58>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	4a0d      	ldr	r2, [pc, #52]	; (80046ec <vPortEnterCritical+0x58>)
 80046b6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <vPortEnterCritical+0x58>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d10f      	bne.n	80046e0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <vPortEnterCritical+0x5c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <vPortEnterCritical+0x4c>
        __asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	603b      	str	r3, [r7, #0]
    }
 80046dc:	bf00      	nop
 80046de:	e7fe      	b.n	80046de <vPortEnterCritical+0x4a>
    }
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20000010 	.word	0x20000010
 80046f0:	e000ed04 	.word	0xe000ed04

080046f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <vPortExitCritical+0x50>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <vPortExitCritical+0x24>
        __asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	607b      	str	r3, [r7, #4]
    }
 8004714:	bf00      	nop
 8004716:	e7fe      	b.n	8004716 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <vPortExitCritical+0x50>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3b01      	subs	r3, #1
 800471e:	4a09      	ldr	r2, [pc, #36]	; (8004744 <vPortExitCritical+0x50>)
 8004720:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004722:	4b08      	ldr	r3, [pc, #32]	; (8004744 <vPortExitCritical+0x50>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d105      	bne.n	8004736 <vPortExitCritical+0x42>
 800472a:	2300      	movs	r3, #0
 800472c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004734:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20000010 	.word	0x20000010
	...

08004750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004750:	f3ef 8009 	mrs	r0, PSP
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <pxCurrentTCBConst>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	f01e 0f10 	tst.w	lr, #16
 8004760:	bf08      	it	eq
 8004762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476a:	6010      	str	r0, [r2, #0]
 800476c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004774:	f380 8811 	msr	BASEPRI, r0
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f7fe ffc6 	bl	8003710 <vTaskSwitchContext>
 8004784:	f04f 0000 	mov.w	r0, #0
 8004788:	f380 8811 	msr	BASEPRI, r0
 800478c:	bc09      	pop	{r0, r3}
 800478e:	6819      	ldr	r1, [r3, #0]
 8004790:	6808      	ldr	r0, [r1, #0]
 8004792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004796:	f01e 0f10 	tst.w	lr, #16
 800479a:	bf08      	it	eq
 800479c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047a0:	f380 8809 	msr	PSP, r0
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	f3af 8000 	nop.w

080047b0 <pxCurrentTCBConst>:
 80047b0:	20000138 	.word	0x20000138
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop

080047b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
        __asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	607b      	str	r3, [r7, #4]
    }
 80047d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80047d2:	f002 f8ef 	bl	80069b4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80047d6:	f7fe fea3 	bl	8003520 <xTaskIncrementTick>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d006      	beq.n	80047ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80047e0:	f002 f946 	bl	8006a70 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047e4:	4b08      	ldr	r3, [pc, #32]	; (8004808 <SysTick_Handler+0x50>)
 80047e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e001      	b.n	80047f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80047ee:	f002 f923 	bl	8006a38 <SEGGER_SYSVIEW_RecordExitISR>
 80047f2:	2300      	movs	r3, #0
 80047f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	f383 8811 	msr	BASEPRI, r3
    }
 80047fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	e000ed04 	.word	0xe000ed04

0800480c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <vPortSetupTimerInterrupt+0x34>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004816:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <vPortSetupTimerInterrupt+0x38>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <vPortSetupTimerInterrupt+0x3c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a0a      	ldr	r2, [pc, #40]	; (800484c <vPortSetupTimerInterrupt+0x40>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	099b      	lsrs	r3, r3, #6
 8004828:	4a09      	ldr	r2, [pc, #36]	; (8004850 <vPortSetupTimerInterrupt+0x44>)
 800482a:	3b01      	subs	r3, #1
 800482c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800482e:	4b04      	ldr	r3, [pc, #16]	; (8004840 <vPortSetupTimerInterrupt+0x34>)
 8004830:	2207      	movs	r2, #7
 8004832:	601a      	str	r2, [r3, #0]
}
 8004834:	bf00      	nop
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	e000e010 	.word	0xe000e010
 8004844:	e000e018 	.word	0xe000e018
 8004848:	20000000 	.word	0x20000000
 800484c:	10624dd3 	.word	0x10624dd3
 8004850:	e000e014 	.word	0xe000e014

08004854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004864 <vPortEnableVFP+0x10>
 8004858:	6801      	ldr	r1, [r0, #0]
 800485a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800485e:	6001      	str	r1, [r0, #0]
 8004860:	4770      	bx	lr
 8004862:	0000      	.short	0x0000
 8004864:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop

0800486c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004872:	f3ef 8305 	mrs	r3, IPSR
 8004876:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b0f      	cmp	r3, #15
 800487c:	d914      	bls.n	80048a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800487e:	4a17      	ldr	r2, [pc, #92]	; (80048dc <vPortValidateInterruptPriority+0x70>)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <vPortValidateInterruptPriority+0x74>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	7afa      	ldrb	r2, [r7, #11]
 800488e:	429a      	cmp	r2, r3
 8004890:	d20a      	bcs.n	80048a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	607b      	str	r3, [r7, #4]
    }
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048a8:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <vPortValidateInterruptPriority+0x78>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048b0:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <vPortValidateInterruptPriority+0x7c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d90a      	bls.n	80048ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	603b      	str	r3, [r7, #0]
    }
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <vPortValidateInterruptPriority+0x60>
    }
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	e000e3f0 	.word	0xe000e3f0
 80048e0:	20000278 	.word	0x20000278
 80048e4:	e000ed0c 	.word	0xe000ed0c
 80048e8:	2000027c 	.word	0x2000027c

080048ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	; 0x28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80048f8:	f7fe fc1c 	bl	8003134 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80048fc:	4b53      	ldr	r3, [pc, #332]	; (8004a4c <pvPortMalloc+0x160>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004904:	f000 f908 	bl	8004b18 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d012      	beq.n	8004934 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800490e:	2208      	movs	r2, #8
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	3308      	adds	r3, #8
 800491a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	43db      	mvns	r3, r3
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d804      	bhi.n	8004930 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	4413      	add	r3, r2
 800492c:	607b      	str	r3, [r7, #4]
 800492e:	e001      	b.n	8004934 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	db70      	blt.n	8004a1c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d06d      	beq.n	8004a1c <pvPortMalloc+0x130>
 8004940:	4b43      	ldr	r3, [pc, #268]	; (8004a50 <pvPortMalloc+0x164>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d868      	bhi.n	8004a1c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800494a:	4b42      	ldr	r3, [pc, #264]	; (8004a54 <pvPortMalloc+0x168>)
 800494c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800494e:	4b41      	ldr	r3, [pc, #260]	; (8004a54 <pvPortMalloc+0x168>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004954:	e004      	b.n	8004960 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	d903      	bls.n	8004972 <pvPortMalloc+0x86>
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f1      	bne.n	8004956 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004972:	4b36      	ldr	r3, [pc, #216]	; (8004a4c <pvPortMalloc+0x160>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004978:	429a      	cmp	r2, r3
 800497a:	d04f      	beq.n	8004a1c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2208      	movs	r2, #8
 8004982:	4413      	add	r3, r2
 8004984:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	1ad2      	subs	r2, r2, r3
 8004996:	2308      	movs	r3, #8
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	429a      	cmp	r2, r3
 800499c:	d91f      	bls.n	80049de <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800499e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4413      	add	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <pvPortMalloc+0xda>
        __asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	613b      	str	r3, [r7, #16]
    }
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	1ad2      	subs	r2, r2, r3
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049d8:	6978      	ldr	r0, [r7, #20]
 80049da:	f000 f8f9 	bl	8004bd0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049de:	4b1c      	ldr	r3, [pc, #112]	; (8004a50 <pvPortMalloc+0x164>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	4a19      	ldr	r2, [pc, #100]	; (8004a50 <pvPortMalloc+0x164>)
 80049ea:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049ec:	4b18      	ldr	r3, [pc, #96]	; (8004a50 <pvPortMalloc+0x164>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <pvPortMalloc+0x16c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d203      	bcs.n	8004a00 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049f8:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <pvPortMalloc+0x164>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a16      	ldr	r2, [pc, #88]	; (8004a58 <pvPortMalloc+0x16c>)
 80049fe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a12:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <pvPortMalloc+0x170>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3301      	adds	r3, #1
 8004a18:	4a10      	ldr	r2, [pc, #64]	; (8004a5c <pvPortMalloc+0x170>)
 8004a1a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a1c:	f7fe fb98 	bl	8003150 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <pvPortMalloc+0x154>
        __asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	60fb      	str	r3, [r7, #12]
    }
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <pvPortMalloc+0x152>
    return pvReturn;
 8004a40:	69fb      	ldr	r3, [r7, #28]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3728      	adds	r7, #40	; 0x28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20012e88 	.word	0x20012e88
 8004a50:	20012e8c 	.word	0x20012e8c
 8004a54:	20012e80 	.word	0x20012e80
 8004a58:	20012e90 	.word	0x20012e90
 8004a5c:	20012e94 	.word	0x20012e94

08004a60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d049      	beq.n	8004b06 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004a72:	2308      	movs	r3, #8
 8004a74:	425b      	negs	r3, r3
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4413      	add	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	db0a      	blt.n	8004a9e <vPortFree+0x3e>
        __asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	60fb      	str	r3, [r7, #12]
    }
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <vPortFree+0x5c>
        __asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	60bb      	str	r3, [r7, #8]
    }
 8004ab8:	bf00      	nop
 8004aba:	e7fe      	b.n	8004aba <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	0fdb      	lsrs	r3, r3, #31
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01c      	beq.n	8004b06 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d118      	bne.n	8004b06 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004ae0:	f7fe fb28 	bl	8003134 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <vPortFree+0xb0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4413      	add	r3, r2
 8004aee:	4a08      	ldr	r2, [pc, #32]	; (8004b10 <vPortFree+0xb0>)
 8004af0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004af2:	6938      	ldr	r0, [r7, #16]
 8004af4:	f000 f86c 	bl	8004bd0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <vPortFree+0xb4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3301      	adds	r3, #1
 8004afe:	4a05      	ldr	r2, [pc, #20]	; (8004b14 <vPortFree+0xb4>)
 8004b00:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b02:	f7fe fb25 	bl	8003150 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b06:	bf00      	nop
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20012e8c 	.word	0x20012e8c
 8004b14:	20012e98 	.word	0x20012e98

08004b18 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b1e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004b22:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <prvHeapInit+0xa4>)
 8004b26:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00c      	beq.n	8004b4c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3307      	adds	r3, #7
 8004b36:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0307 	bic.w	r3, r3, #7
 8004b3e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	4a1d      	ldr	r2, [pc, #116]	; (8004bbc <prvHeapInit+0xa4>)
 8004b48:	4413      	add	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b50:	4a1b      	ldr	r2, [pc, #108]	; (8004bc0 <prvHeapInit+0xa8>)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004b56:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <prvHeapInit+0xa8>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	4413      	add	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004b64:	2208      	movs	r2, #8
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0307 	bic.w	r3, r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <prvHeapInit+0xac>)
 8004b78:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <prvHeapInit+0xac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004b82:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <prvHeapInit+0xac>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	1ad2      	subs	r2, r2, r3
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <prvHeapInit+0xac>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4a08      	ldr	r2, [pc, #32]	; (8004bc8 <prvHeapInit+0xb0>)
 8004ba6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <prvHeapInit+0xb4>)
 8004bae:	6013      	str	r3, [r2, #0]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	20000280 	.word	0x20000280
 8004bc0:	20012e80 	.word	0x20012e80
 8004bc4:	20012e88 	.word	0x20012e88
 8004bc8:	20012e90 	.word	0x20012e90
 8004bcc:	20012e8c 	.word	0x20012e8c

08004bd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bd8:	4b28      	ldr	r3, [pc, #160]	; (8004c7c <prvInsertBlockIntoFreeList+0xac>)
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e002      	b.n	8004be4 <prvInsertBlockIntoFreeList+0x14>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d8f7      	bhi.n	8004bde <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d108      	bne.n	8004c12 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	441a      	add	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	441a      	add	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d118      	bne.n	8004c58 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <prvInsertBlockIntoFreeList+0xb0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d00d      	beq.n	8004c4e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	441a      	add	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e008      	b.n	8004c60 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <prvInsertBlockIntoFreeList+0xb0>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	e003      	b.n	8004c60 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d002      	beq.n	8004c6e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20012e80 	.word	0x20012e80
 8004c80:	20012e88 	.word	0x20012e88

08004c84 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004c88:	4803      	ldr	r0, [pc, #12]	; (8004c98 <_cbSendSystemDesc+0x14>)
 8004c8a:	f001 fe3d 	bl	8006908 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004c8e:	4803      	ldr	r0, [pc, #12]	; (8004c9c <_cbSendSystemDesc+0x18>)
 8004c90:	f001 fe3a 	bl	8006908 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004c94:	bf00      	nop
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	08007f74 	.word	0x08007f74
 8004c9c:	08007fb4 	.word	0x08007fb4

08004ca0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004caa:	6819      	ldr	r1, [r3, #0]
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <SEGGER_SYSVIEW_Conf+0x24>)
 8004cae:	4a06      	ldr	r2, [pc, #24]	; (8004cc8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004cb0:	f001 f9a6 	bl	8006000 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004cb4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004cb8:	f001 f9e6 	bl	8006088 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004cbc:	bf00      	nop
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20000000 	.word	0x20000000
 8004cc4:	08004c85 	.word	0x08004c85
 8004cc8:	08008050 	.word	0x08008050

08004ccc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	e033      	b.n	8004d40 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004cd8:	491e      	ldr	r1, [pc, #120]	; (8004d54 <_cbSendTaskList+0x88>)
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	491a      	ldr	r1, [pc, #104]	; (8004d54 <_cbSendTaskList+0x88>)
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	6819      	ldr	r1, [r3, #0]
 8004cfa:	4c16      	ldr	r4, [pc, #88]	; (8004d54 <_cbSendTaskList+0x88>)
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4423      	add	r3, r4
 8004d08:	3308      	adds	r3, #8
 8004d0a:	681c      	ldr	r4, [r3, #0]
 8004d0c:	4d11      	ldr	r5, [pc, #68]	; (8004d54 <_cbSendTaskList+0x88>)
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	442b      	add	r3, r5
 8004d1a:	330c      	adds	r3, #12
 8004d1c:	681d      	ldr	r5, [r3, #0]
 8004d1e:	4e0d      	ldr	r6, [pc, #52]	; (8004d54 <_cbSendTaskList+0x88>)
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4433      	add	r3, r6
 8004d2c:	3310      	adds	r3, #16
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	462b      	mov	r3, r5
 8004d34:	4622      	mov	r2, r4
 8004d36:	f000 f92d 	bl	8004f94 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	607b      	str	r3, [r7, #4]
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <_cbSendTaskList+0x8c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d3c6      	bcc.n	8004cd8 <_cbSendTaskList+0xc>
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d54:	20012e9c 	.word	0x20012e9c
 8004d58:	20012f3c 	.word	0x20012f3c

08004d5c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004d64:	f7fe faf6 	bl	8003354 <xTaskGetTickCountFromISR>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	469a      	mov	sl, r3
 8004d6e:	4693      	mov	fp, r2
 8004d70:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004d74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	f04f 0a00 	mov.w	sl, #0
 8004d80:	f04f 0b00 	mov.w	fp, #0
 8004d84:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004d88:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004d8c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004d90:	4652      	mov	r2, sl
 8004d92:	465b      	mov	r3, fp
 8004d94:	1a14      	subs	r4, r2, r0
 8004d96:	eb63 0501 	sbc.w	r5, r3, r1
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	00ab      	lsls	r3, r5, #2
 8004da4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004da8:	00a2      	lsls	r2, r4, #2
 8004daa:	4614      	mov	r4, r2
 8004dac:	461d      	mov	r5, r3
 8004dae:	eb14 0800 	adds.w	r8, r4, r0
 8004db2:	eb45 0901 	adc.w	r9, r5, r1
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dca:	4690      	mov	r8, r2
 8004dcc:	4699      	mov	r9, r3
 8004dce:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004de4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004df2:	2205      	movs	r2, #5
 8004df4:	492b      	ldr	r1, [pc, #172]	; (8004ea4 <SYSVIEW_AddTask+0xc0>)
 8004df6:	68b8      	ldr	r0, [r7, #8]
 8004df8:	f002 f8f4 	bl	8006fe4 <memcmp>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d04b      	beq.n	8004e9a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e02:	4b29      	ldr	r3, [pc, #164]	; (8004ea8 <SYSVIEW_AddTask+0xc4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b07      	cmp	r3, #7
 8004e08:	d903      	bls.n	8004e12 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e0a:	4828      	ldr	r0, [pc, #160]	; (8004eac <SYSVIEW_AddTask+0xc8>)
 8004e0c:	f002 f824 	bl	8006e58 <SEGGER_SYSVIEW_Warn>
    return;
 8004e10:	e044      	b.n	8004e9c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e12:	4b25      	ldr	r3, [pc, #148]	; (8004ea8 <SYSVIEW_AddTask+0xc4>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4926      	ldr	r1, [pc, #152]	; (8004eb0 <SYSVIEW_AddTask+0xcc>)
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e26:	4b20      	ldr	r3, [pc, #128]	; (8004ea8 <SYSVIEW_AddTask+0xc4>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4921      	ldr	r1, [pc, #132]	; (8004eb0 <SYSVIEW_AddTask+0xcc>)
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	3304      	adds	r3, #4
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ea8 <SYSVIEW_AddTask+0xc4>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	491b      	ldr	r1, [pc, #108]	; (8004eb0 <SYSVIEW_AddTask+0xcc>)
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004e52:	4b15      	ldr	r3, [pc, #84]	; (8004ea8 <SYSVIEW_AddTask+0xc4>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4916      	ldr	r1, [pc, #88]	; (8004eb0 <SYSVIEW_AddTask+0xcc>)
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	330c      	adds	r3, #12
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004e68:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <SYSVIEW_AddTask+0xc4>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4910      	ldr	r1, [pc, #64]	; (8004eb0 <SYSVIEW_AddTask+0xcc>)
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	3310      	adds	r3, #16
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004e7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <SYSVIEW_AddTask+0xc4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3301      	adds	r3, #1
 8004e84:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <SYSVIEW_AddTask+0xc4>)
 8004e86:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f87e 	bl	8004f94 <SYSVIEW_SendTaskInfo>
 8004e98:	e000      	b.n	8004e9c <SYSVIEW_AddTask+0xb8>
    return;
 8004e9a:	bf00      	nop

}
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	08007fc4 	.word	0x08007fc4
 8004ea8:	20012f3c 	.word	0x20012f3c
 8004eac:	08007fcc 	.word	0x08007fcc
 8004eb0:	20012e9c 	.word	0x20012e9c

08004eb4 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ec2:	2205      	movs	r2, #5
 8004ec4:	4930      	ldr	r1, [pc, #192]	; (8004f88 <SYSVIEW_UpdateTask+0xd4>)
 8004ec6:	68b8      	ldr	r0, [r7, #8]
 8004ec8:	f002 f88c 	bl	8006fe4 <memcmp>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d056      	beq.n	8004f80 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	e00d      	b.n	8004ef4 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8004ed8:	492c      	ldr	r1, [pc, #176]	; (8004f8c <SYSVIEW_UpdateTask+0xd8>)
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d008      	beq.n	8004f00 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	4b26      	ldr	r3, [pc, #152]	; (8004f90 <SYSVIEW_UpdateTask+0xdc>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d3ec      	bcc.n	8004ed8 <SYSVIEW_UpdateTask+0x24>
 8004efe:	e000      	b.n	8004f02 <SYSVIEW_UpdateTask+0x4e>
      break;
 8004f00:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8004f02:	4b23      	ldr	r3, [pc, #140]	; (8004f90 <SYSVIEW_UpdateTask+0xdc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d230      	bcs.n	8004f6e <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8004f0c:	491f      	ldr	r1, [pc, #124]	; (8004f8c <SYSVIEW_UpdateTask+0xd8>)
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8004f20:	491a      	ldr	r1, [pc, #104]	; (8004f8c <SYSVIEW_UpdateTask+0xd8>)
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	3308      	adds	r3, #8
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8004f34:	4915      	ldr	r1, [pc, #84]	; (8004f8c <SYSVIEW_UpdateTask+0xd8>)
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	330c      	adds	r3, #12
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8004f48:	4910      	ldr	r1, [pc, #64]	; (8004f8c <SYSVIEW_UpdateTask+0xd8>)
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	3310      	adds	r3, #16
 8004f58:	6a3a      	ldr	r2, [r7, #32]
 8004f5a:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f814 	bl	8004f94 <SYSVIEW_SendTaskInfo>
 8004f6c:	e009      	b.n	8004f82 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7ff ff33 	bl	8004de4 <SYSVIEW_AddTask>
 8004f7e:	e000      	b.n	8004f82 <SYSVIEW_UpdateTask+0xce>
    return;
 8004f80:	bf00      	nop
  }
}
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	08007fc4 	.word	0x08007fc4
 8004f8c:	20012e9c 	.word	0x20012e9c
 8004f90:	20012f3c 	.word	0x20012f3c

08004f94 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	; 0x28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004fa2:	f107 0310 	add.w	r3, r7, #16
 8004fa6:	2218      	movs	r2, #24
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f002 f838 	bl	8007020 <memset>
  TaskInfo.TaskID     = TaskID;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004fc4:	f107 0310 	add.w	r3, r7, #16
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 fba5 	bl	8006718 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004fce:	bf00      	nop
 8004fd0:	3728      	adds	r7, #40	; 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <__NVIC_EnableIRQ>:
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	db0b      	blt.n	8005002 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	f003 021f 	and.w	r2, r3, #31
 8004ff0:	4907      	ldr	r1, [pc, #28]	; (8005010 <__NVIC_EnableIRQ+0x38>)
 8004ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8004ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	e000e100 	.word	0xe000e100

08005014 <__NVIC_SetPriority>:
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	6039      	str	r1, [r7, #0]
 800501e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005024:	2b00      	cmp	r3, #0
 8005026:	db0a      	blt.n	800503e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	490c      	ldr	r1, [pc, #48]	; (8005060 <__NVIC_SetPriority+0x4c>)
 800502e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005032:	0112      	lsls	r2, r2, #4
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	440b      	add	r3, r1
 8005038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800503c:	e00a      	b.n	8005054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	4908      	ldr	r1, [pc, #32]	; (8005064 <__NVIC_SetPriority+0x50>)
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	3b04      	subs	r3, #4
 800504c:	0112      	lsls	r2, r2, #4
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	440b      	add	r3, r1
 8005052:	761a      	strb	r2, [r3, #24]
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	e000e100 	.word	0xe000e100
 8005064:	e000ed00 	.word	0xe000ed00

08005068 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800506e:	f001 ff4f 	bl	8006f10 <SEGGER_SYSVIEW_IsStarted>
 8005072:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800507a:	f001 f9d1 	bl	8006420 <SEGGER_SYSVIEW_Start>
  }
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005092:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <_cbOnUARTRx+0x3c>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b03      	cmp	r3, #3
 8005098:	d806      	bhi.n	80050a8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800509a:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <_cbOnUARTRx+0x3c>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	3301      	adds	r3, #1
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <_cbOnUARTRx+0x3c>)
 80050a4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80050a6:	e009      	b.n	80050bc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80050a8:	f7ff ffde 	bl	8005068 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80050ac:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <_cbOnUARTRx+0x3c>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	4618      	mov	r0, r3
 80050b2:	1dfb      	adds	r3, r7, #7
 80050b4:	2201      	movs	r2, #1
 80050b6:	4619      	mov	r1, r3
 80050b8:	f000 fbec 	bl	8005894 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80050bc:	bf00      	nop
}
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	20000014 	.word	0x20000014

080050c8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80050d0:	4b14      	ldr	r3, [pc, #80]	; (8005124 <_cbOnUARTTx+0x5c>)
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d80f      	bhi.n	80050f8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80050d8:	4b12      	ldr	r3, [pc, #72]	; (8005124 <_cbOnUARTTx+0x5c>)
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	461a      	mov	r2, r3
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <_cbOnUARTTx+0x60>)
 80050e0:	5c9a      	ldrb	r2, [r3, r2]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80050e6:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <_cbOnUARTTx+0x5c>)
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	3301      	adds	r3, #1
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <_cbOnUARTTx+0x5c>)
 80050f0:	705a      	strb	r2, [r3, #1]
    r = 1;
 80050f2:	2301      	movs	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]
    goto Done;
 80050f6:	e00f      	b.n	8005118 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80050f8:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <_cbOnUARTTx+0x5c>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fa1b 	bl	800553c <SEGGER_RTT_ReadUpBufferNoLock>
 8005106:	4603      	mov	r3, r0
 8005108:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	da02      	bge.n	8005116 <_cbOnUARTTx+0x4e>
    r = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e000      	b.n	8005118 <_cbOnUARTTx+0x50>
  }
Done:
 8005116:	bf00      	nop
  return r;
 8005118:	68fb      	ldr	r3, [r7, #12]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000014 	.word	0x20000014
 8005128:	08008058 	.word	0x08008058

0800512c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005134:	4a04      	ldr	r2, [pc, #16]	; (8005148 <SEGGER_UART_init+0x1c>)
 8005136:	4905      	ldr	r1, [pc, #20]	; (800514c <SEGGER_UART_init+0x20>)
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f863 	bl	8005204 <HIF_UART_Init>
}
 800513e:	bf00      	nop
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	08005089 	.word	0x08005089
 800514c:	080050c9 	.word	0x080050c9

08005150 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005156:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <USART2_IRQHandler+0x80>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d011      	beq.n	800518a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005166:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <USART2_IRQHandler+0x84>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 030b 	and.w	r3, r3, #11
 8005174:	2b00      	cmp	r3, #0
 8005176:	d108      	bne.n	800518a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005178:	4b17      	ldr	r3, [pc, #92]	; (80051d8 <USART2_IRQHandler+0x88>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005180:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <USART2_IRQHandler+0x88>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	79fa      	ldrb	r2, [r7, #7]
 8005186:	4610      	mov	r0, r2
 8005188:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01a      	beq.n	80051ca <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005194:	4b11      	ldr	r3, [pc, #68]	; (80051dc <USART2_IRQHandler+0x8c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d015      	beq.n	80051c8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800519c:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <USART2_IRQHandler+0x8c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	1dfa      	adds	r2, r7, #7
 80051a2:	4610      	mov	r0, r2
 80051a4:	4798      	blx	r3
 80051a6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80051ae:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <USART2_IRQHandler+0x90>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a0b      	ldr	r2, [pc, #44]	; (80051e0 <USART2_IRQHandler+0x90>)
 80051b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e006      	b.n	80051ca <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80051bc:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <USART2_IRQHandler+0x80>)
 80051be:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80051c0:	79fa      	ldrb	r2, [r7, #7]
 80051c2:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <USART2_IRQHandler+0x84>)
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e000      	b.n	80051ca <USART2_IRQHandler+0x7a>
      return;
 80051c8:	bf00      	nop
    }
  }
}
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40004400 	.word	0x40004400
 80051d4:	40004404 	.word	0x40004404
 80051d8:	20012f40 	.word	0x20012f40
 80051dc:	20012f44 	.word	0x20012f44
 80051e0:	4000440c 	.word	0x4000440c

080051e4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a04      	ldr	r2, [pc, #16]	; (8005200 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80051ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f2:	6013      	str	r3, [r2, #0]
}
 80051f4:	bf00      	nop
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	4000440c 	.word	0x4000440c

08005204 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005210:	4b2e      	ldr	r3, [pc, #184]	; (80052cc <HIF_UART_Init+0xc8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a2d      	ldr	r2, [pc, #180]	; (80052cc <HIF_UART_Init+0xc8>)
 8005216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800521a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800521c:	4b2c      	ldr	r3, [pc, #176]	; (80052d0 <HIF_UART_Init+0xcc>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a2b      	ldr	r2, [pc, #172]	; (80052d0 <HIF_UART_Init+0xcc>)
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005228:	4b2a      	ldr	r3, [pc, #168]	; (80052d4 <HIF_UART_Init+0xd0>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005234:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800523c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800523e:	4a25      	ldr	r2, [pc, #148]	; (80052d4 <HIF_UART_Init+0xd0>)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005244:	4b24      	ldr	r3, [pc, #144]	; (80052d8 <HIF_UART_Init+0xd4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005250:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005258:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800525a:	4a1f      	ldr	r2, [pc, #124]	; (80052d8 <HIF_UART_Init+0xd4>)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005260:	4b1e      	ldr	r3, [pc, #120]	; (80052dc <HIF_UART_Init+0xd8>)
 8005262:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8005266:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005268:	4b1d      	ldr	r3, [pc, #116]	; (80052e0 <HIF_UART_Init+0xdc>)
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800526e:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <HIF_UART_Init+0xe0>)
 8005270:	2280      	movs	r2, #128	; 0x80
 8005272:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800527a:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <HIF_UART_Init+0xe4>)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005282:	3301      	adds	r3, #1
 8005284:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005292:	d302      	bcc.n	800529a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005294:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005298:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	4a11      	ldr	r2, [pc, #68]	; (80052ec <HIF_UART_Init+0xe8>)
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80052aa:	4a11      	ldr	r2, [pc, #68]	; (80052f0 <HIF_UART_Init+0xec>)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80052b0:	4a10      	ldr	r2, [pc, #64]	; (80052f4 <HIF_UART_Init+0xf0>)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80052b6:	2106      	movs	r1, #6
 80052b8:	2026      	movs	r0, #38	; 0x26
 80052ba:	f7ff feab 	bl	8005014 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80052be:	2026      	movs	r0, #38	; 0x26
 80052c0:	f7ff fe8a 	bl	8004fd8 <__NVIC_EnableIRQ>
}
 80052c4:	bf00      	nop
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40023840 	.word	0x40023840
 80052d0:	40023830 	.word	0x40023830
 80052d4:	40020020 	.word	0x40020020
 80052d8:	40020000 	.word	0x40020000
 80052dc:	4000440c 	.word	0x4000440c
 80052e0:	40004410 	.word	0x40004410
 80052e4:	40004414 	.word	0x40004414
 80052e8:	0501bd00 	.word	0x0501bd00
 80052ec:	40004408 	.word	0x40004408
 80052f0:	20012f40 	.word	0x20012f40
 80052f4:	20012f44 	.word	0x20012f44

080052f8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80052fe:	4b26      	ldr	r3, [pc, #152]	; (8005398 <_DoInit+0xa0>)
 8005300:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005302:	22a8      	movs	r2, #168	; 0xa8
 8005304:	2100      	movs	r1, #0
 8005306:	6838      	ldr	r0, [r7, #0]
 8005308:	f001 fe8a 	bl	8007020 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2203      	movs	r2, #3
 8005310:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2203      	movs	r2, #3
 8005316:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	4a20      	ldr	r2, [pc, #128]	; (800539c <_DoInit+0xa4>)
 800531c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	4a1f      	ldr	r2, [pc, #124]	; (80053a0 <_DoInit+0xa8>)
 8005322:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800532a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2200      	movs	r2, #0
 8005330:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2200      	movs	r2, #0
 8005336:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2200      	movs	r2, #0
 800533c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	4a16      	ldr	r2, [pc, #88]	; (800539c <_DoInit+0xa4>)
 8005342:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	4a17      	ldr	r2, [pc, #92]	; (80053a4 <_DoInit+0xac>)
 8005348:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2210      	movs	r2, #16
 800534e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2200      	movs	r2, #0
 8005354:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2200      	movs	r2, #0
 800535a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2200      	movs	r2, #0
 8005360:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005362:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005366:	2300      	movs	r3, #0
 8005368:	607b      	str	r3, [r7, #4]
 800536a:	e00c      	b.n	8005386 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f1c3 030f 	rsb	r3, r3, #15
 8005372:	4a0d      	ldr	r2, [pc, #52]	; (80053a8 <_DoInit+0xb0>)
 8005374:	5cd1      	ldrb	r1, [r2, r3]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4413      	add	r3, r2
 800537c:	460a      	mov	r2, r1
 800537e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3301      	adds	r3, #1
 8005384:	607b      	str	r3, [r7, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b0f      	cmp	r3, #15
 800538a:	d9ef      	bls.n	800536c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800538c:	f3bf 8f5f 	dmb	sy
}
 8005390:	bf00      	nop
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20012f48 	.word	0x20012f48
 800539c:	0800801c 	.word	0x0800801c
 80053a0:	20012ff0 	.word	0x20012ff0
 80053a4:	200133f0 	.word	0x200133f0
 80053a8:	0800805c 	.word	0x0800805c

080053ac <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	; 0x28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80053b8:	2300      	movs	r3, #0
 80053ba:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d905      	bls.n	80053dc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
 80053da:	e007      	b.n	80053ec <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	69b9      	ldr	r1, [r7, #24]
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	1acb      	subs	r3, r1, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	3b01      	subs	r3, #1
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f6:	4293      	cmp	r3, r2
 80053f8:	bf28      	it	cs
 80053fa:	4613      	movcs	r3, r2
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80053fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4293      	cmp	r3, r2
 8005404:	bf28      	it	cs
 8005406:	4613      	movcs	r3, r2
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	6978      	ldr	r0, [r7, #20]
 800541a:	f001 fdf3 	bl	8007004 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800541e:	6a3a      	ldr	r2, [r7, #32]
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	4413      	add	r3, r2
 8005424:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	4413      	add	r3, r2
 800542c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	4413      	add	r3, r2
 800543c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	429a      	cmp	r2, r3
 8005446:	d101      	bne.n	800544c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800544c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1b2      	bne.n	80053c2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800545c:	6a3b      	ldr	r3, [r7, #32]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3728      	adds	r7, #40	; 0x28
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005466:	b580      	push	{r7, lr}
 8005468:	b088      	sub	sp, #32
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	429a      	cmp	r2, r3
 8005488:	d911      	bls.n	80054ae <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	6938      	ldr	r0, [r7, #16]
 800549a:	f001 fdb3 	bl	8007004 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800549e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80054a2:	69fa      	ldr	r2, [r7, #28]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	441a      	add	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80054ac:	e01f      	b.n	80054ee <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	6938      	ldr	r0, [r7, #16]
 80054c2:	f001 fd9f 	bl	8007004 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	4413      	add	r3, r2
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4619      	mov	r1, r3
 80054de:	6938      	ldr	r0, [r7, #16]
 80054e0:	f001 fd90 	bl	8007004 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054e4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	60da      	str	r2, [r3, #12]
}
 80054ee:	bf00      	nop
 80054f0:	3720      	adds	r7, #32
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80054f6:	b480      	push	{r7}
 80054f8:	b087      	sub	sp, #28
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	429a      	cmp	r2, r3
 8005510:	d808      	bhi.n	8005524 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad2      	subs	r2, r2, r3
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	4413      	add	r3, r2
 800551e:	3b01      	subs	r3, #1
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e004      	b.n	800552e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800552e:	697b      	ldr	r3, [r7, #20]
}
 8005530:	4618      	mov	r0, r3
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800553c:	b580      	push	{r7, lr}
 800553e:	b08c      	sub	sp, #48	; 0x30
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005548:	4b3e      	ldr	r3, [pc, #248]	; (8005644 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800554a:	623b      	str	r3, [r7, #32]
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b53      	cmp	r3, #83	; 0x53
 8005554:	d001      	beq.n	800555a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005556:	f7ff fecf 	bl	80052f8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	4613      	mov	r3, r2
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4413      	add	r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4a37      	ldr	r2, [pc, #220]	; (8005644 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005568:	4413      	add	r3, r2
 800556a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800557c:	2300      	movs	r3, #0
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	429a      	cmp	r2, r3
 8005586:	d92b      	bls.n	80055e0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4293      	cmp	r3, r2
 8005598:	bf28      	it	cs
 800559a:	4613      	movcs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	4413      	add	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	6939      	ldr	r1, [r7, #16]
 80055ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055ae:	f001 fd29 	bl	8007004 <memcpy>
    NumBytesRead += NumBytesRem;
 80055b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	4413      	add	r3, r2
 80055b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80055ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	4413      	add	r3, r2
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80055ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	4413      	add	r3, r2
 80055d0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055d8:	429a      	cmp	r2, r3
 80055da:	d101      	bne.n	80055e0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80055dc:	2300      	movs	r3, #0
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4293      	cmp	r3, r2
 80055ee:	bf28      	it	cs
 80055f0:	4613      	movcs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d019      	beq.n	800562e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	4413      	add	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	6939      	ldr	r1, [r7, #16]
 8005608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800560a:	f001 fcfb 	bl	8007004 <memcpy>
    NumBytesRead += NumBytesRem;
 800560e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	4413      	add	r3, r2
 8005614:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	4413      	add	r3, r2
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	4413      	add	r3, r2
 800562c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005638:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800563a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800563c:	4618      	mov	r0, r3
 800563e:	3730      	adds	r7, #48	; 0x30
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20012f48 	.word	0x20012f48

08005648 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b08c      	sub	sp, #48	; 0x30
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005654:	4b3e      	ldr	r3, [pc, #248]	; (8005750 <SEGGER_RTT_ReadNoLock+0x108>)
 8005656:	623b      	str	r3, [r7, #32]
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b53      	cmp	r3, #83	; 0x53
 8005660:	d001      	beq.n	8005666 <SEGGER_RTT_ReadNoLock+0x1e>
 8005662:	f7ff fe49 	bl	80052f8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4613      	mov	r3, r2
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	4413      	add	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	3360      	adds	r3, #96	; 0x60
 8005672:	4a37      	ldr	r2, [pc, #220]	; (8005750 <SEGGER_RTT_ReadNoLock+0x108>)
 8005674:	4413      	add	r3, r2
 8005676:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005688:	2300      	movs	r3, #0
 800568a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800568c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	429a      	cmp	r2, r3
 8005692:	d92b      	bls.n	80056ec <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4293      	cmp	r3, r2
 80056a4:	bf28      	it	cs
 80056a6:	4613      	movcs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	4413      	add	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	6939      	ldr	r1, [r7, #16]
 80056b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056ba:	f001 fca3 	bl	8007004 <memcpy>
    NumBytesRead += NumBytesRem;
 80056be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	4413      	add	r3, r2
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80056c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	4413      	add	r3, r2
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80056d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	4413      	add	r3, r2
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d101      	bne.n	80056ec <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80056e8:	2300      	movs	r3, #0
 80056ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4293      	cmp	r3, r2
 80056fa:	bf28      	it	cs
 80056fc:	4613      	movcs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d019      	beq.n	800573a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	4413      	add	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	6939      	ldr	r1, [r7, #16]
 8005714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005716:	f001 fc75 	bl	8007004 <memcpy>
    NumBytesRead += NumBytesRem;
 800571a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	4413      	add	r3, r2
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4413      	add	r3, r2
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4413      	add	r3, r2
 8005738:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005744:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005748:	4618      	mov	r0, r3
 800574a:	3730      	adds	r7, #48	; 0x30
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20012f48 	.word	0x20012f48

08005754 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4613      	mov	r3, r2
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	4413      	add	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	3360      	adds	r3, #96	; 0x60
 8005770:	4a1f      	ldr	r2, [pc, #124]	; (80057f0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005772:	4413      	add	r3, r2
 8005774:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d029      	beq.n	80057d2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800577e:	2b02      	cmp	r3, #2
 8005780:	d82e      	bhi.n	80057e0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005786:	2b01      	cmp	r3, #1
 8005788:	d013      	beq.n	80057b2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800578a:	e029      	b.n	80057e0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800578c:	6978      	ldr	r0, [r7, #20]
 800578e:	f7ff feb2 	bl	80054f6 <_GetAvailWriteSpace>
 8005792:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	d202      	bcs.n	80057a2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800579c:	2300      	movs	r3, #0
 800579e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80057a0:	e021      	b.n	80057e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	69b9      	ldr	r1, [r7, #24]
 80057aa:	6978      	ldr	r0, [r7, #20]
 80057ac:	f7ff fe5b 	bl	8005466 <_WriteNoCheck>
    break;
 80057b0:	e019      	b.n	80057e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80057b2:	6978      	ldr	r0, [r7, #20]
 80057b4:	f7ff fe9f 	bl	80054f6 <_GetAvailWriteSpace>
 80057b8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4293      	cmp	r3, r2
 80057c0:	bf28      	it	cs
 80057c2:	4613      	movcs	r3, r2
 80057c4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	69b9      	ldr	r1, [r7, #24]
 80057ca:	6978      	ldr	r0, [r7, #20]
 80057cc:	f7ff fe4b 	bl	8005466 <_WriteNoCheck>
    break;
 80057d0:	e009      	b.n	80057e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	69b9      	ldr	r1, [r7, #24]
 80057d6:	6978      	ldr	r0, [r7, #20]
 80057d8:	f7ff fde8 	bl	80053ac <_WriteBlocking>
 80057dc:	61f8      	str	r0, [r7, #28]
    break;
 80057de:	e002      	b.n	80057e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61fb      	str	r3, [r7, #28]
    break;
 80057e4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80057e6:	69fb      	ldr	r3, [r7, #28]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20012f48 	.word	0x20012f48

080057f4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	4613      	mov	r3, r2
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	4413      	add	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4a1f      	ldr	r2, [pc, #124]	; (8005890 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005812:	4413      	add	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d029      	beq.n	8005872 <SEGGER_RTT_WriteNoLock+0x7e>
 800581e:	2b02      	cmp	r3, #2
 8005820:	d82e      	bhi.n	8005880 <SEGGER_RTT_WriteNoLock+0x8c>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <SEGGER_RTT_WriteNoLock+0x38>
 8005826:	2b01      	cmp	r3, #1
 8005828:	d013      	beq.n	8005852 <SEGGER_RTT_WriteNoLock+0x5e>
 800582a:	e029      	b.n	8005880 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800582c:	6978      	ldr	r0, [r7, #20]
 800582e:	f7ff fe62 	bl	80054f6 <_GetAvailWriteSpace>
 8005832:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	d202      	bcs.n	8005842 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800583c:	2300      	movs	r3, #0
 800583e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005840:	e021      	b.n	8005886 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	69b9      	ldr	r1, [r7, #24]
 800584a:	6978      	ldr	r0, [r7, #20]
 800584c:	f7ff fe0b 	bl	8005466 <_WriteNoCheck>
    break;
 8005850:	e019      	b.n	8005886 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f7ff fe4f 	bl	80054f6 <_GetAvailWriteSpace>
 8005858:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4293      	cmp	r3, r2
 8005860:	bf28      	it	cs
 8005862:	4613      	movcs	r3, r2
 8005864:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	69b9      	ldr	r1, [r7, #24]
 800586a:	6978      	ldr	r0, [r7, #20]
 800586c:	f7ff fdfb 	bl	8005466 <_WriteNoCheck>
    break;
 8005870:	e009      	b.n	8005886 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	69b9      	ldr	r1, [r7, #24]
 8005876:	6978      	ldr	r0, [r7, #20]
 8005878:	f7ff fd98 	bl	80053ac <_WriteBlocking>
 800587c:	61f8      	str	r0, [r7, #28]
    break;
 800587e:	e002      	b.n	8005886 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005880:	2300      	movs	r3, #0
 8005882:	61fb      	str	r3, [r7, #28]
    break;
 8005884:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005886:	69fb      	ldr	r3, [r7, #28]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20012f48 	.word	0x20012f48

08005894 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80058a0:	4b0e      	ldr	r3, [pc, #56]	; (80058dc <SEGGER_RTT_WriteDownBuffer+0x48>)
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b53      	cmp	r3, #83	; 0x53
 80058ac:	d001      	beq.n	80058b2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80058ae:	f7ff fd23 	bl	80052f8 <_DoInit>
  SEGGER_RTT_LOCK();
 80058b2:	f3ef 8311 	mrs	r3, BASEPRI
 80058b6:	f04f 0120 	mov.w	r1, #32
 80058ba:	f381 8811 	msr	BASEPRI, r1
 80058be:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7ff ff45 	bl	8005754 <SEGGER_RTT_WriteDownBufferNoLock>
 80058ca:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80058d2:	697b      	ldr	r3, [r7, #20]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3720      	adds	r7, #32
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20012f48 	.word	0x20012f48

080058e0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80058ec:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <SEGGER_RTT_Write+0x48>)
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b53      	cmp	r3, #83	; 0x53
 80058f8:	d001      	beq.n	80058fe <SEGGER_RTT_Write+0x1e>
 80058fa:	f7ff fcfd 	bl	80052f8 <_DoInit>
  SEGGER_RTT_LOCK();
 80058fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005902:	f04f 0120 	mov.w	r1, #32
 8005906:	f381 8811 	msr	BASEPRI, r1
 800590a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	68b9      	ldr	r1, [r7, #8]
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f7ff ff6f 	bl	80057f4 <SEGGER_RTT_WriteNoLock>
 8005916:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800591e:	697b      	ldr	r3, [r7, #20]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20012f48 	.word	0x20012f48

0800592c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800593a:	4b3d      	ldr	r3, [pc, #244]	; (8005a30 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b53      	cmp	r3, #83	; 0x53
 8005946:	d001      	beq.n	800594c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005948:	f7ff fcd6 	bl	80052f8 <_DoInit>
  SEGGER_RTT_LOCK();
 800594c:	f3ef 8311 	mrs	r3, BASEPRI
 8005950:	f04f 0120 	mov.w	r1, #32
 8005954:	f381 8811 	msr	BASEPRI, r1
 8005958:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800595a:	4b35      	ldr	r3, [pc, #212]	; (8005a30 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800595c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005962:	6939      	ldr	r1, [r7, #16]
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	4613      	mov	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	4413      	add	r3, r2
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	440b      	add	r3, r1
 8005972:	3304      	adds	r3, #4
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d008      	beq.n	800598c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	3301      	adds	r3, #1
 800597e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	429a      	cmp	r2, r3
 8005988:	dbeb      	blt.n	8005962 <SEGGER_RTT_AllocUpBuffer+0x36>
 800598a:	e000      	b.n	800598e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800598c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	429a      	cmp	r2, r3
 8005996:	da3f      	bge.n	8005a18 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005998:	6939      	ldr	r1, [r7, #16]
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	4613      	mov	r3, r2
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	4413      	add	r3, r2
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	440b      	add	r3, r1
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80059ac:	6939      	ldr	r1, [r7, #16]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	4613      	mov	r3, r2
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	4413      	add	r3, r2
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	440b      	add	r3, r1
 80059bc:	3304      	adds	r3, #4
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80059c2:	6939      	ldr	r1, [r7, #16]
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	440b      	add	r3, r1
 80059d0:	3320      	adds	r3, #32
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80059d6:	6939      	ldr	r1, [r7, #16]
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	4613      	mov	r3, r2
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	4413      	add	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	440b      	add	r3, r1
 80059e4:	3328      	adds	r3, #40	; 0x28
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80059ea:	6939      	ldr	r1, [r7, #16]
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	4613      	mov	r3, r2
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	4413      	add	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	440b      	add	r3, r1
 80059f8:	3324      	adds	r3, #36	; 0x24
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80059fe:	6939      	ldr	r1, [r7, #16]
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	4613      	mov	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	4413      	add	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	440b      	add	r3, r1
 8005a0c:	332c      	adds	r3, #44	; 0x2c
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a12:	f3bf 8f5f 	dmb	sy
 8005a16:	e002      	b.n	8005a1e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005a18:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005a24:	69fb      	ldr	r3, [r7, #28]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20012f48 	.word	0x20012f48

08005a34 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005a42:	4b21      	ldr	r3, [pc, #132]	; (8005ac8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005a44:	623b      	str	r3, [r7, #32]
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b53      	cmp	r3, #83	; 0x53
 8005a4e:	d001      	beq.n	8005a54 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005a50:	f7ff fc52 	bl	80052f8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a54:	4b1c      	ldr	r3, [pc, #112]	; (8005ac8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005a56:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d82c      	bhi.n	8005ab8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005a5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a62:	f04f 0120 	mov.w	r1, #32
 8005a66:	f381 8811 	msr	BASEPRI, r1
 8005a6a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	4413      	add	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	3360      	adds	r3, #96	; 0x60
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00e      	beq.n	8005aa2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005aa8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab6:	e002      	b.n	8005abe <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3728      	adds	r7, #40	; 0x28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20012f48 	.word	0x20012f48

08005acc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d105      	bne.n	8005aea <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	60fa      	str	r2, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	e022      	b.n	8005b30 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	60fa      	str	r2, [r7, #12]
 8005af4:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b80      	cmp	r3, #128	; 0x80
 8005afa:	d90a      	bls.n	8005b12 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005afc:	2380      	movs	r3, #128	; 0x80
 8005afe:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005b00:	e007      	b.n	8005b12 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	1c53      	adds	r3, r2, #1
 8005b06:	60bb      	str	r3, [r7, #8]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	1c59      	adds	r1, r3, #1
 8005b0c:	60f9      	str	r1, [r7, #12]
 8005b0e:	7812      	ldrb	r2, [r2, #0]
 8005b10:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	1e5a      	subs	r2, r3, #1
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <_EncodeStr+0x58>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1ee      	bne.n	8005b02 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005b30:	68fb      	ldr	r3, [r7, #12]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	3307      	adds	r3, #7
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
	...

08005b58 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b5e:	4b35      	ldr	r3, [pc, #212]	; (8005c34 <_HandleIncomingPacket+0xdc>)
 8005b60:	7e1b      	ldrb	r3, [r3, #24]
 8005b62:	4618      	mov	r0, r3
 8005b64:	1cfb      	adds	r3, r7, #3
 8005b66:	2201      	movs	r2, #1
 8005b68:	4619      	mov	r1, r3
 8005b6a:	f7ff fd6d 	bl	8005648 <SEGGER_RTT_ReadNoLock>
 8005b6e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d052      	beq.n	8005c1c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	2b80      	cmp	r3, #128	; 0x80
 8005b7a:	d031      	beq.n	8005be0 <_HandleIncomingPacket+0x88>
 8005b7c:	2b80      	cmp	r3, #128	; 0x80
 8005b7e:	dc40      	bgt.n	8005c02 <_HandleIncomingPacket+0xaa>
 8005b80:	2b07      	cmp	r3, #7
 8005b82:	dc15      	bgt.n	8005bb0 <_HandleIncomingPacket+0x58>
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	dd3c      	ble.n	8005c02 <_HandleIncomingPacket+0xaa>
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	2b06      	cmp	r3, #6
 8005b8c:	d839      	bhi.n	8005c02 <_HandleIncomingPacket+0xaa>
 8005b8e:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <_HandleIncomingPacket+0x3c>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005bb7 	.word	0x08005bb7
 8005b98:	08005bbd 	.word	0x08005bbd
 8005b9c:	08005bc3 	.word	0x08005bc3
 8005ba0:	08005bc9 	.word	0x08005bc9
 8005ba4:	08005bcf 	.word	0x08005bcf
 8005ba8:	08005bd5 	.word	0x08005bd5
 8005bac:	08005bdb 	.word	0x08005bdb
 8005bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb2:	d035      	beq.n	8005c20 <_HandleIncomingPacket+0xc8>
 8005bb4:	e025      	b.n	8005c02 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005bb6:	f000 fc33 	bl	8006420 <SEGGER_SYSVIEW_Start>
      break;
 8005bba:	e036      	b.n	8005c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005bbc:	f000 fcec 	bl	8006598 <SEGGER_SYSVIEW_Stop>
      break;
 8005bc0:	e033      	b.n	8005c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005bc2:	f000 fec5 	bl	8006950 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005bc6:	e030      	b.n	8005c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005bc8:	f000 fe8a 	bl	80068e0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005bcc:	e02d      	b.n	8005c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005bce:	f000 fd09 	bl	80065e4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005bd2:	e02a      	b.n	8005c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005bd4:	f001 f902 	bl	8006ddc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005bd8:	e027      	b.n	8005c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005bda:	f001 f8e1 	bl	8006da0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005bde:	e024      	b.n	8005c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005be0:	4b14      	ldr	r3, [pc, #80]	; (8005c34 <_HandleIncomingPacket+0xdc>)
 8005be2:	7e1b      	ldrb	r3, [r3, #24]
 8005be4:	4618      	mov	r0, r3
 8005be6:	1cfb      	adds	r3, r7, #3
 8005be8:	2201      	movs	r2, #1
 8005bea:	4619      	mov	r1, r3
 8005bec:	f7ff fd2c 	bl	8005648 <SEGGER_RTT_ReadNoLock>
 8005bf0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d015      	beq.n	8005c24 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 f846 	bl	8006c8c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005c00:	e010      	b.n	8005c24 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	b25b      	sxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da0e      	bge.n	8005c28 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c0a:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <_HandleIncomingPacket+0xdc>)
 8005c0c:	7e1b      	ldrb	r3, [r3, #24]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	1cfb      	adds	r3, r7, #3
 8005c12:	2201      	movs	r2, #1
 8005c14:	4619      	mov	r1, r3
 8005c16:	f7ff fd17 	bl	8005648 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005c1a:	e005      	b.n	8005c28 <_HandleIncomingPacket+0xd0>
    }
  }
 8005c1c:	bf00      	nop
 8005c1e:	e004      	b.n	8005c2a <_HandleIncomingPacket+0xd2>
      break;
 8005c20:	bf00      	nop
 8005c22:	e002      	b.n	8005c2a <_HandleIncomingPacket+0xd2>
      break;
 8005c24:	bf00      	nop
 8005c26:	e000      	b.n	8005c2a <_HandleIncomingPacket+0xd2>
      break;
 8005c28:	bf00      	nop
}
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20013808 	.word	0x20013808

08005c38 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08c      	sub	sp, #48	; 0x30
 8005c3c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005c3e:	2301      	movs	r3, #1
 8005c40:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005c42:	1d3b      	adds	r3, r7, #4
 8005c44:	3301      	adds	r3, #1
 8005c46:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c4c:	4b32      	ldr	r3, [pc, #200]	; (8005d18 <_TrySendOverflowPacket+0xe0>)
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c52:	e00b      	b.n	8005c6c <_TrySendOverflowPacket+0x34>
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	1c59      	adds	r1, r3, #1
 8005c5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	09db      	lsrs	r3, r3, #7
 8005c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c70:	d8f0      	bhi.n	8005c54 <_TrySendOverflowPacket+0x1c>
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c82:	4b26      	ldr	r3, [pc, #152]	; (8005d1c <_TrySendOverflowPacket+0xe4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005c88:	4b23      	ldr	r3, [pc, #140]	; (8005d18 <_TrySendOverflowPacket+0xe0>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	623b      	str	r3, [r7, #32]
 8005c9a:	e00b      	b.n	8005cb4 <_TrySendOverflowPacket+0x7c>
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	1c59      	adds	r1, r3, #1
 8005ca4:	6279      	str	r1, [r7, #36]	; 0x24
 8005ca6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	09db      	lsrs	r3, r3, #7
 8005cb2:	623b      	str	r3, [r7, #32]
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb8:	d8f0      	bhi.n	8005c9c <_TrySendOverflowPacket+0x64>
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	627a      	str	r2, [r7, #36]	; 0x24
 8005cc0:	6a3a      	ldr	r2, [r7, #32]
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005cca:	4b13      	ldr	r3, [pc, #76]	; (8005d18 <_TrySendOverflowPacket+0xe0>)
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	1d3b      	adds	r3, r7, #4
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	1d3b      	adds	r3, r7, #4
 8005cda:	4619      	mov	r1, r3
 8005cdc:	f7fa fa78 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005ce4:	f7ff fa7e 	bl	80051e4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005cee:	4a0a      	ldr	r2, [pc, #40]	; (8005d18 <_TrySendOverflowPacket+0xe0>)
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005cf4:	4b08      	ldr	r3, [pc, #32]	; (8005d18 <_TrySendOverflowPacket+0xe0>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <_TrySendOverflowPacket+0xe0>)
 8005cfe:	701a      	strb	r2, [r3, #0]
 8005d00:	e004      	b.n	8005d0c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <_TrySendOverflowPacket+0xe0>)
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	3301      	adds	r3, #1
 8005d08:	4a03      	ldr	r2, [pc, #12]	; (8005d18 <_TrySendOverflowPacket+0xe0>)
 8005d0a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005d0c:	693b      	ldr	r3, [r7, #16]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3730      	adds	r7, #48	; 0x30
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20013808 	.word	0x20013808
 8005d1c:	e0001004 	.word	0xe0001004

08005d20 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	; 0x28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005d2c:	4b96      	ldr	r3, [pc, #600]	; (8005f88 <_SendPacket+0x268>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d010      	beq.n	8005d56 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005d34:	4b94      	ldr	r3, [pc, #592]	; (8005f88 <_SendPacket+0x268>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8130 	beq.w	8005f9e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005d3e:	4b92      	ldr	r3, [pc, #584]	; (8005f88 <_SendPacket+0x268>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d109      	bne.n	8005d5a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005d46:	f7ff ff77 	bl	8005c38 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005d4a:	4b8f      	ldr	r3, [pc, #572]	; (8005f88 <_SendPacket+0x268>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	f040 8127 	bne.w	8005fa2 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005d54:	e001      	b.n	8005d5a <_SendPacket+0x3a>
    goto Send;
 8005d56:	bf00      	nop
 8005d58:	e000      	b.n	8005d5c <_SendPacket+0x3c>
Send:
 8005d5a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b1f      	cmp	r3, #31
 8005d60:	d809      	bhi.n	8005d76 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005d62:	4b89      	ldr	r3, [pc, #548]	; (8005f88 <_SendPacket+0x268>)
 8005d64:	69da      	ldr	r2, [r3, #28]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f040 8118 	bne.w	8005fa6 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b17      	cmp	r3, #23
 8005d7a:	d807      	bhi.n	8005d8c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	e0c4      	b.n	8005f16 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	2b7f      	cmp	r3, #127	; 0x7f
 8005d98:	d912      	bls.n	8005dc0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	09da      	lsrs	r2, r3, #7
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	3a01      	subs	r2, #1
 8005db2:	60fa      	str	r2, [r7, #12]
 8005db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	701a      	strb	r2, [r3, #0]
 8005dbe:	e006      	b.n	8005dce <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b7e      	cmp	r3, #126	; 0x7e
 8005dd2:	d807      	bhi.n	8005de4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	e098      	b.n	8005f16 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dea:	d212      	bcs.n	8005e12 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	09da      	lsrs	r2, r3, #7
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	3a01      	subs	r2, #1
 8005e04:	60fa      	str	r2, [r7, #12]
 8005e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	e081      	b.n	8005f16 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e18:	d21d      	bcs.n	8005e56 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	0b9a      	lsrs	r2, r3, #14
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	09db      	lsrs	r3, r3, #7
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	3a01      	subs	r2, #1
 8005e34:	60fa      	str	r2, [r7, #12]
 8005e36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	3a01      	subs	r2, #1
 8005e48:	60fa      	str	r2, [r7, #12]
 8005e4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	e05f      	b.n	8005f16 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e5c:	d228      	bcs.n	8005eb0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	0d5a      	lsrs	r2, r3, #21
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	0b9b      	lsrs	r3, r3, #14
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	3a01      	subs	r2, #1
 8005e78:	60fa      	str	r2, [r7, #12]
 8005e7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	09db      	lsrs	r3, r3, #7
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	3a01      	subs	r2, #1
 8005e8e:	60fa      	str	r2, [r7, #12]
 8005e90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	3a01      	subs	r2, #1
 8005ea2:	60fa      	str	r2, [r7, #12]
 8005ea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e032      	b.n	8005f16 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	0f1a      	lsrs	r2, r3, #28
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	0d5b      	lsrs	r3, r3, #21
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	3a01      	subs	r2, #1
 8005eca:	60fa      	str	r2, [r7, #12]
 8005ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	0b9b      	lsrs	r3, r3, #14
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	3a01      	subs	r2, #1
 8005ee0:	60fa      	str	r2, [r7, #12]
 8005ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	09db      	lsrs	r3, r3, #7
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	3a01      	subs	r2, #1
 8005ef6:	60fa      	str	r2, [r7, #12]
 8005ef8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	3a01      	subs	r2, #1
 8005f0a:	60fa      	str	r2, [r7, #12]
 8005f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f16:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <_SendPacket+0x26c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f1c:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <_SendPacket+0x268>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	623b      	str	r3, [r7, #32]
 8005f2e:	e00b      	b.n	8005f48 <_SendPacket+0x228>
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	1c59      	adds	r1, r3, #1
 8005f38:	6279      	str	r1, [r7, #36]	; 0x24
 8005f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	09db      	lsrs	r3, r3, #7
 8005f46:	623b      	str	r3, [r7, #32]
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4c:	d8f0      	bhi.n	8005f30 <_SendPacket+0x210>
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	627a      	str	r2, [r7, #36]	; 0x24
 8005f54:	6a3a      	ldr	r2, [r7, #32]
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <_SendPacket+0x268>)
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	4618      	mov	r0, r3
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68f9      	ldr	r1, [r7, #12]
 8005f6e:	f7fa f92f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f72:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005f74:	f7ff f936 	bl	80051e4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d008      	beq.n	8005f90 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f7e:	4a02      	ldr	r2, [pc, #8]	; (8005f88 <_SendPacket+0x268>)
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	60d3      	str	r3, [r2, #12]
 8005f84:	e010      	b.n	8005fa8 <_SendPacket+0x288>
 8005f86:	bf00      	nop
 8005f88:	20013808 	.word	0x20013808
 8005f8c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005f90:	4b19      	ldr	r3, [pc, #100]	; (8005ff8 <_SendPacket+0x2d8>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	3301      	adds	r3, #1
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	4b17      	ldr	r3, [pc, #92]	; (8005ff8 <_SendPacket+0x2d8>)
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	e004      	b.n	8005fa8 <_SendPacket+0x288>
    goto SendDone;
 8005f9e:	bf00      	nop
 8005fa0:	e002      	b.n	8005fa8 <_SendPacket+0x288>
      goto SendDone;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <_SendPacket+0x288>
      goto SendDone;
 8005fa6:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005fa8:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <_SendPacket+0x2d8>)
 8005faa:	7e1b      	ldrb	r3, [r3, #24]
 8005fac:	4619      	mov	r1, r3
 8005fae:	4a13      	ldr	r2, [pc, #76]	; (8005ffc <_SendPacket+0x2dc>)
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	440b      	add	r3, r1
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	4413      	add	r3, r2
 8005fba:	336c      	adds	r3, #108	; 0x6c
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <_SendPacket+0x2d8>)
 8005fc0:	7e1b      	ldrb	r3, [r3, #24]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	490d      	ldr	r1, [pc, #52]	; (8005ffc <_SendPacket+0x2dc>)
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	4403      	add	r3, r0
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	440b      	add	r3, r1
 8005fd0:	3370      	adds	r3, #112	; 0x70
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d00b      	beq.n	8005ff0 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005fd8:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <_SendPacket+0x2d8>)
 8005fda:	789b      	ldrb	r3, [r3, #2]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d107      	bne.n	8005ff0 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005fe0:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <_SendPacket+0x2d8>)
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005fe6:	f7ff fdb7 	bl	8005b58 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005fea:	4b03      	ldr	r3, [pc, #12]	; (8005ff8 <_SendPacket+0x2d8>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005ff0:	bf00      	nop
 8005ff2:	3728      	adds	r7, #40	; 0x28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	20013808 	.word	0x20013808
 8005ffc:	20012f48 	.word	0x20012f48

08006000 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af02      	add	r7, sp, #8
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800600e:	2300      	movs	r3, #0
 8006010:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006014:	4917      	ldr	r1, [pc, #92]	; (8006074 <SEGGER_SYSVIEW_Init+0x74>)
 8006016:	4818      	ldr	r0, [pc, #96]	; (8006078 <SEGGER_SYSVIEW_Init+0x78>)
 8006018:	f7ff fc88 	bl	800592c <SEGGER_RTT_AllocUpBuffer>
 800601c:	4603      	mov	r3, r0
 800601e:	b2da      	uxtb	r2, r3
 8006020:	4b16      	ldr	r3, [pc, #88]	; (800607c <SEGGER_SYSVIEW_Init+0x7c>)
 8006022:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006024:	4b15      	ldr	r3, [pc, #84]	; (800607c <SEGGER_SYSVIEW_Init+0x7c>)
 8006026:	785a      	ldrb	r2, [r3, #1]
 8006028:	4b14      	ldr	r3, [pc, #80]	; (800607c <SEGGER_SYSVIEW_Init+0x7c>)
 800602a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800602c:	4b13      	ldr	r3, [pc, #76]	; (800607c <SEGGER_SYSVIEW_Init+0x7c>)
 800602e:	7e1b      	ldrb	r3, [r3, #24]
 8006030:	4618      	mov	r0, r3
 8006032:	2300      	movs	r3, #0
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	2308      	movs	r3, #8
 8006038:	4a11      	ldr	r2, [pc, #68]	; (8006080 <SEGGER_SYSVIEW_Init+0x80>)
 800603a:	490f      	ldr	r1, [pc, #60]	; (8006078 <SEGGER_SYSVIEW_Init+0x78>)
 800603c:	f7ff fcfa 	bl	8005a34 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006040:	4b0e      	ldr	r3, [pc, #56]	; (800607c <SEGGER_SYSVIEW_Init+0x7c>)
 8006042:	2200      	movs	r2, #0
 8006044:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006046:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <SEGGER_SYSVIEW_Init+0x84>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a0c      	ldr	r2, [pc, #48]	; (800607c <SEGGER_SYSVIEW_Init+0x7c>)
 800604c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800604e:	4a0b      	ldr	r2, [pc, #44]	; (800607c <SEGGER_SYSVIEW_Init+0x7c>)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006054:	4a09      	ldr	r2, [pc, #36]	; (800607c <SEGGER_SYSVIEW_Init+0x7c>)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800605a:	4a08      	ldr	r2, [pc, #32]	; (800607c <SEGGER_SYSVIEW_Init+0x7c>)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006060:	4a06      	ldr	r2, [pc, #24]	; (800607c <SEGGER_SYSVIEW_Init+0x7c>)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006066:	4b05      	ldr	r3, [pc, #20]	; (800607c <SEGGER_SYSVIEW_Init+0x7c>)
 8006068:	2200      	movs	r2, #0
 800606a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20013400 	.word	0x20013400
 8006078:	08008030 	.word	0x08008030
 800607c:	20013808 	.word	0x20013808
 8006080:	20013800 	.word	0x20013800
 8006084:	e0001004 	.word	0xe0001004

08006088 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006090:	4a04      	ldr	r2, [pc, #16]	; (80060a4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6113      	str	r3, [r2, #16]
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	20013808 	.word	0x20013808

080060a8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060b0:	f3ef 8311 	mrs	r3, BASEPRI
 80060b4:	f04f 0120 	mov.w	r1, #32
 80060b8:	f381 8811 	msr	BASEPRI, r1
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	4808      	ldr	r0, [pc, #32]	; (80060e0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80060c0:	f7ff fd3d 	bl	8005b3e <_PreparePacket>
 80060c4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	68b8      	ldr	r0, [r7, #8]
 80060cc:	f7ff fe28 	bl	8005d20 <_SendPacket>
  RECORD_END();
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f383 8811 	msr	BASEPRI, r3
}
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20013838 	.word	0x20013838

080060e4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060ee:	f3ef 8311 	mrs	r3, BASEPRI
 80060f2:	f04f 0120 	mov.w	r1, #32
 80060f6:	f381 8811 	msr	BASEPRI, r1
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	4816      	ldr	r0, [pc, #88]	; (8006158 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80060fe:	f7ff fd1e 	bl	8005b3e <_PreparePacket>
 8006102:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	61fb      	str	r3, [r7, #28]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	e00b      	b.n	800612a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	b2da      	uxtb	r2, r3
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	1c59      	adds	r1, r3, #1
 800611a:	61f9      	str	r1, [r7, #28]
 800611c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	09db      	lsrs	r3, r3, #7
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	2b7f      	cmp	r3, #127	; 0x7f
 800612e:	d8f0      	bhi.n	8006112 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	61fa      	str	r2, [r7, #28]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	68f9      	ldr	r1, [r7, #12]
 8006144:	6938      	ldr	r0, [r7, #16]
 8006146:	f7ff fdeb 	bl	8005d20 <_SendPacket>
  RECORD_END();
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f383 8811 	msr	BASEPRI, r3
}
 8006150:	bf00      	nop
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20013838 	.word	0x20013838

0800615c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b08c      	sub	sp, #48	; 0x30
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006168:	f3ef 8311 	mrs	r3, BASEPRI
 800616c:	f04f 0120 	mov.w	r1, #32
 8006170:	f381 8811 	msr	BASEPRI, r1
 8006174:	61fb      	str	r3, [r7, #28]
 8006176:	4825      	ldr	r0, [pc, #148]	; (800620c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006178:	f7ff fce1 	bl	8005b3e <_PreparePacket>
 800617c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	62bb      	str	r3, [r7, #40]	; 0x28
 800618a:	e00b      	b.n	80061a4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	b2da      	uxtb	r2, r3
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	1c59      	adds	r1, r3, #1
 8006194:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006196:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	09db      	lsrs	r3, r3, #7
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	2b7f      	cmp	r3, #127	; 0x7f
 80061a8:	d8f0      	bhi.n	800618c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	623b      	str	r3, [r7, #32]
 80061c2:	e00b      	b.n	80061dc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	1c59      	adds	r1, r3, #1
 80061cc:	6279      	str	r1, [r7, #36]	; 0x24
 80061ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	09db      	lsrs	r3, r3, #7
 80061da:	623b      	str	r3, [r7, #32]
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	2b7f      	cmp	r3, #127	; 0x7f
 80061e0:	d8f0      	bhi.n	80061c4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	627a      	str	r2, [r7, #36]	; 0x24
 80061e8:	6a3a      	ldr	r2, [r7, #32]
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	6979      	ldr	r1, [r7, #20]
 80061f6:	69b8      	ldr	r0, [r7, #24]
 80061f8:	f7ff fd92 	bl	8005d20 <_SendPacket>
  RECORD_END();
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f383 8811 	msr	BASEPRI, r3
}
 8006202:	bf00      	nop
 8006204:	3730      	adds	r7, #48	; 0x30
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	20013838 	.word	0x20013838

08006210 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b08e      	sub	sp, #56	; 0x38
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800621e:	f3ef 8311 	mrs	r3, BASEPRI
 8006222:	f04f 0120 	mov.w	r1, #32
 8006226:	f381 8811 	msr	BASEPRI, r1
 800622a:	61fb      	str	r3, [r7, #28]
 800622c:	4832      	ldr	r0, [pc, #200]	; (80062f8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800622e:	f7ff fc86 	bl	8005b3e <_PreparePacket>
 8006232:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	637b      	str	r3, [r7, #52]	; 0x34
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	633b      	str	r3, [r7, #48]	; 0x30
 8006240:	e00b      	b.n	800625a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	b2da      	uxtb	r2, r3
 8006246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006248:	1c59      	adds	r1, r3, #1
 800624a:	6379      	str	r1, [r7, #52]	; 0x34
 800624c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	09db      	lsrs	r3, r3, #7
 8006258:	633b      	str	r3, [r7, #48]	; 0x30
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	2b7f      	cmp	r3, #127	; 0x7f
 800625e:	d8f0      	bhi.n	8006242 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	637a      	str	r2, [r7, #52]	; 0x34
 8006266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	701a      	strb	r2, [r3, #0]
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	62bb      	str	r3, [r7, #40]	; 0x28
 8006278:	e00b      	b.n	8006292 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	b2da      	uxtb	r2, r3
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	1c59      	adds	r1, r3, #1
 8006282:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006284:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	09db      	lsrs	r3, r3, #7
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	2b7f      	cmp	r3, #127	; 0x7f
 8006296:	d8f0      	bhi.n	800627a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800629e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	623b      	str	r3, [r7, #32]
 80062b0:	e00b      	b.n	80062ca <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	1c59      	adds	r1, r3, #1
 80062ba:	6279      	str	r1, [r7, #36]	; 0x24
 80062bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	09db      	lsrs	r3, r3, #7
 80062c8:	623b      	str	r3, [r7, #32]
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	2b7f      	cmp	r3, #127	; 0x7f
 80062ce:	d8f0      	bhi.n	80062b2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	627a      	str	r2, [r7, #36]	; 0x24
 80062d6:	6a3a      	ldr	r2, [r7, #32]
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	6979      	ldr	r1, [r7, #20]
 80062e4:	69b8      	ldr	r0, [r7, #24]
 80062e6:	f7ff fd1b 	bl	8005d20 <_SendPacket>
  RECORD_END();
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	f383 8811 	msr	BASEPRI, r3
}
 80062f0:	bf00      	nop
 80062f2:	3738      	adds	r7, #56	; 0x38
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20013838 	.word	0x20013838

080062fc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b090      	sub	sp, #64	; 0x40
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800630a:	f3ef 8311 	mrs	r3, BASEPRI
 800630e:	f04f 0120 	mov.w	r1, #32
 8006312:	f381 8811 	msr	BASEPRI, r1
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	4840      	ldr	r0, [pc, #256]	; (800641c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800631a:	f7ff fc10 	bl	8005b3e <_PreparePacket>
 800631e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	63bb      	str	r3, [r7, #56]	; 0x38
 800632c:	e00b      	b.n	8006346 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006330:	b2da      	uxtb	r2, r3
 8006332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006334:	1c59      	adds	r1, r3, #1
 8006336:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006338:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	09db      	lsrs	r3, r3, #7
 8006344:	63bb      	str	r3, [r7, #56]	; 0x38
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	2b7f      	cmp	r3, #127	; 0x7f
 800634a:	d8f0      	bhi.n	800632e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	637b      	str	r3, [r7, #52]	; 0x34
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	633b      	str	r3, [r7, #48]	; 0x30
 8006364:	e00b      	b.n	800637e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	b2da      	uxtb	r2, r3
 800636a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636c:	1c59      	adds	r1, r3, #1
 800636e:	6379      	str	r1, [r7, #52]	; 0x34
 8006370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	09db      	lsrs	r3, r3, #7
 800637c:	633b      	str	r3, [r7, #48]	; 0x30
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	2b7f      	cmp	r3, #127	; 0x7f
 8006382:	d8f0      	bhi.n	8006366 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	637a      	str	r2, [r7, #52]	; 0x34
 800638a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	62bb      	str	r3, [r7, #40]	; 0x28
 800639c:	e00b      	b.n	80063b6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	1c59      	adds	r1, r3, #1
 80063a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	09db      	lsrs	r3, r3, #7
 80063b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	2b7f      	cmp	r3, #127	; 0x7f
 80063ba:	d8f0      	bhi.n	800639e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24
 80063d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d2:	623b      	str	r3, [r7, #32]
 80063d4:	e00b      	b.n	80063ee <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	1c59      	adds	r1, r3, #1
 80063de:	6279      	str	r1, [r7, #36]	; 0x24
 80063e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	09db      	lsrs	r3, r3, #7
 80063ec:	623b      	str	r3, [r7, #32]
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	2b7f      	cmp	r3, #127	; 0x7f
 80063f2:	d8f0      	bhi.n	80063d6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	627a      	str	r2, [r7, #36]	; 0x24
 80063fa:	6a3a      	ldr	r2, [r7, #32]
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	6979      	ldr	r1, [r7, #20]
 8006408:	69b8      	ldr	r0, [r7, #24]
 800640a:	f7ff fc89 	bl	8005d20 <_SendPacket>
  RECORD_END();
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	f383 8811 	msr	BASEPRI, r3
}
 8006414:	bf00      	nop
 8006416:	3740      	adds	r7, #64	; 0x40
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20013838 	.word	0x20013838

08006420 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006420:	b580      	push	{r7, lr}
 8006422:	b08c      	sub	sp, #48	; 0x30
 8006424:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006426:	4b59      	ldr	r3, [pc, #356]	; (800658c <SEGGER_SYSVIEW_Start+0x16c>)
 8006428:	2201      	movs	r2, #1
 800642a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800642c:	f3ef 8311 	mrs	r3, BASEPRI
 8006430:	f04f 0120 	mov.w	r1, #32
 8006434:	f381 8811 	msr	BASEPRI, r1
 8006438:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800643a:	4b54      	ldr	r3, [pc, #336]	; (800658c <SEGGER_SYSVIEW_Start+0x16c>)
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	220a      	movs	r2, #10
 8006440:	4953      	ldr	r1, [pc, #332]	; (8006590 <SEGGER_SYSVIEW_Start+0x170>)
 8006442:	4618      	mov	r0, r3
 8006444:	f7f9 fec4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800644e:	f7fe fec9 	bl	80051e4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006452:	200a      	movs	r0, #10
 8006454:	f7ff fe28 	bl	80060a8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006458:	f3ef 8311 	mrs	r3, BASEPRI
 800645c:	f04f 0120 	mov.w	r1, #32
 8006460:	f381 8811 	msr	BASEPRI, r1
 8006464:	60bb      	str	r3, [r7, #8]
 8006466:	484b      	ldr	r0, [pc, #300]	; (8006594 <SEGGER_SYSVIEW_Start+0x174>)
 8006468:	f7ff fb69 	bl	8005b3e <_PreparePacket>
 800646c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006476:	4b45      	ldr	r3, [pc, #276]	; (800658c <SEGGER_SYSVIEW_Start+0x16c>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28
 800647c:	e00b      	b.n	8006496 <SEGGER_SYSVIEW_Start+0x76>
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	b2da      	uxtb	r2, r3
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	1c59      	adds	r1, r3, #1
 8006486:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	09db      	lsrs	r3, r3, #7
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	2b7f      	cmp	r3, #127	; 0x7f
 800649a:	d8f0      	bhi.n	800647e <SEGGER_SYSVIEW_Start+0x5e>
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
 80064b0:	4b36      	ldr	r3, [pc, #216]	; (800658c <SEGGER_SYSVIEW_Start+0x16c>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	623b      	str	r3, [r7, #32]
 80064b6:	e00b      	b.n	80064d0 <SEGGER_SYSVIEW_Start+0xb0>
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	1c59      	adds	r1, r3, #1
 80064c0:	6279      	str	r1, [r7, #36]	; 0x24
 80064c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	09db      	lsrs	r3, r3, #7
 80064ce:	623b      	str	r3, [r7, #32]
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	2b7f      	cmp	r3, #127	; 0x7f
 80064d4:	d8f0      	bhi.n	80064b8 <SEGGER_SYSVIEW_Start+0x98>
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	627a      	str	r2, [r7, #36]	; 0x24
 80064dc:	6a3a      	ldr	r2, [r7, #32]
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	4b28      	ldr	r3, [pc, #160]	; (800658c <SEGGER_SYSVIEW_Start+0x16c>)
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	e00b      	b.n	800650a <SEGGER_SYSVIEW_Start+0xea>
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	1c59      	adds	r1, r3, #1
 80064fa:	61f9      	str	r1, [r7, #28]
 80064fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	09db      	lsrs	r3, r3, #7
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	2b7f      	cmp	r3, #127	; 0x7f
 800650e:	d8f0      	bhi.n	80064f2 <SEGGER_SYSVIEW_Start+0xd2>
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	61fa      	str	r2, [r7, #28]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	2300      	movs	r3, #0
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	e00b      	b.n	8006542 <SEGGER_SYSVIEW_Start+0x122>
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	b2da      	uxtb	r2, r3
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	1c59      	adds	r1, r3, #1
 8006532:	6179      	str	r1, [r7, #20]
 8006534:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	09db      	lsrs	r3, r3, #7
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b7f      	cmp	r3, #127	; 0x7f
 8006546:	d8f0      	bhi.n	800652a <SEGGER_SYSVIEW_Start+0x10a>
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	617a      	str	r2, [r7, #20]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006558:	2218      	movs	r2, #24
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff fbdf 	bl	8005d20 <_SendPacket>
      RECORD_END();
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006568:	4b08      	ldr	r3, [pc, #32]	; (800658c <SEGGER_SYSVIEW_Start+0x16c>)
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006570:	4b06      	ldr	r3, [pc, #24]	; (800658c <SEGGER_SYSVIEW_Start+0x16c>)
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006576:	f000 f9eb 	bl	8006950 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800657a:	f000 f9b1 	bl	80068e0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800657e:	f000 fc2d 	bl	8006ddc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006582:	bf00      	nop
 8006584:	3730      	adds	r7, #48	; 0x30
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20013808 	.word	0x20013808
 8006590:	08008070 	.word	0x08008070
 8006594:	20013838 	.word	0x20013838

08006598 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800659e:	f3ef 8311 	mrs	r3, BASEPRI
 80065a2:	f04f 0120 	mov.w	r1, #32
 80065a6:	f381 8811 	msr	BASEPRI, r1
 80065aa:	607b      	str	r3, [r7, #4]
 80065ac:	480b      	ldr	r0, [pc, #44]	; (80065dc <SEGGER_SYSVIEW_Stop+0x44>)
 80065ae:	f7ff fac6 	bl	8005b3e <_PreparePacket>
 80065b2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d007      	beq.n	80065cc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80065bc:	220b      	movs	r2, #11
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6838      	ldr	r0, [r7, #0]
 80065c2:	f7ff fbad 	bl	8005d20 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80065c6:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f383 8811 	msr	BASEPRI, r3
}
 80065d2:	bf00      	nop
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20013838 	.word	0x20013838
 80065e0:	20013808 	.word	0x20013808

080065e4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08c      	sub	sp, #48	; 0x30
 80065e8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80065ea:	f3ef 8311 	mrs	r3, BASEPRI
 80065ee:	f04f 0120 	mov.w	r1, #32
 80065f2:	f381 8811 	msr	BASEPRI, r1
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	4845      	ldr	r0, [pc, #276]	; (8006710 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80065fa:	f7ff faa0 	bl	8005b3e <_PreparePacket>
 80065fe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006608:	4b42      	ldr	r3, [pc, #264]	; (8006714 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28
 800660e:	e00b      	b.n	8006628 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	b2da      	uxtb	r2, r3
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	1c59      	adds	r1, r3, #1
 8006618:	62f9      	str	r1, [r7, #44]	; 0x2c
 800661a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	09db      	lsrs	r3, r3, #7
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	2b7f      	cmp	r3, #127	; 0x7f
 800662c:	d8f0      	bhi.n	8006610 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
 8006642:	4b34      	ldr	r3, [pc, #208]	; (8006714 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	623b      	str	r3, [r7, #32]
 8006648:	e00b      	b.n	8006662 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	b2da      	uxtb	r2, r3
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	1c59      	adds	r1, r3, #1
 8006652:	6279      	str	r1, [r7, #36]	; 0x24
 8006654:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	09db      	lsrs	r3, r3, #7
 8006660:	623b      	str	r3, [r7, #32]
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	2b7f      	cmp	r3, #127	; 0x7f
 8006666:	d8f0      	bhi.n	800664a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	627a      	str	r2, [r7, #36]	; 0x24
 800666e:	6a3a      	ldr	r2, [r7, #32]
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	61fb      	str	r3, [r7, #28]
 800667c:	4b25      	ldr	r3, [pc, #148]	; (8006714 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	e00b      	b.n	800669c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	b2da      	uxtb	r2, r3
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	1c59      	adds	r1, r3, #1
 800668c:	61f9      	str	r1, [r7, #28]
 800668e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	09db      	lsrs	r3, r3, #7
 800669a:	61bb      	str	r3, [r7, #24]
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b7f      	cmp	r3, #127	; 0x7f
 80066a0:	d8f0      	bhi.n	8006684 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	61fa      	str	r2, [r7, #28]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	2300      	movs	r3, #0
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	e00b      	b.n	80066d4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	1c59      	adds	r1, r3, #1
 80066c4:	6179      	str	r1, [r7, #20]
 80066c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	09db      	lsrs	r3, r3, #7
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	2b7f      	cmp	r3, #127	; 0x7f
 80066d8:	d8f0      	bhi.n	80066bc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	617a      	str	r2, [r7, #20]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80066ea:	2218      	movs	r2, #24
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	68b8      	ldr	r0, [r7, #8]
 80066f0:	f7ff fb16 	bl	8005d20 <_SendPacket>
  RECORD_END();
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006702:	4b04      	ldr	r3, [pc, #16]	; (8006714 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	4798      	blx	r3
  }
}
 8006708:	bf00      	nop
 800670a:	3730      	adds	r7, #48	; 0x30
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20013838 	.word	0x20013838
 8006714:	20013808 	.word	0x20013808

08006718 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006718:	b580      	push	{r7, lr}
 800671a:	b092      	sub	sp, #72	; 0x48
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006720:	f3ef 8311 	mrs	r3, BASEPRI
 8006724:	f04f 0120 	mov.w	r1, #32
 8006728:	f381 8811 	msr	BASEPRI, r1
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	486a      	ldr	r0, [pc, #424]	; (80068d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006730:	f7ff fa05 	bl	8005b3e <_PreparePacket>
 8006734:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	647b      	str	r3, [r7, #68]	; 0x44
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4b66      	ldr	r3, [pc, #408]	; (80068dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	643b      	str	r3, [r7, #64]	; 0x40
 800674a:	e00b      	b.n	8006764 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800674c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800674e:	b2da      	uxtb	r2, r3
 8006750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006752:	1c59      	adds	r1, r3, #1
 8006754:	6479      	str	r1, [r7, #68]	; 0x44
 8006756:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006760:	09db      	lsrs	r3, r3, #7
 8006762:	643b      	str	r3, [r7, #64]	; 0x40
 8006764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006766:	2b7f      	cmp	r3, #127	; 0x7f
 8006768:	d8f0      	bhi.n	800674c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800676a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	647a      	str	r2, [r7, #68]	; 0x44
 8006770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006778:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	63bb      	str	r3, [r7, #56]	; 0x38
 8006784:	e00b      	b.n	800679e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	b2da      	uxtb	r2, r3
 800678a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678c:	1c59      	adds	r1, r3, #1
 800678e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006790:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	701a      	strb	r2, [r3, #0]
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	09db      	lsrs	r3, r3, #7
 800679c:	63bb      	str	r3, [r7, #56]	; 0x38
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	2b7f      	cmp	r3, #127	; 0x7f
 80067a2:	d8f0      	bhi.n	8006786 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80067a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80067aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ac:	b2d2      	uxtb	r2, r2
 80067ae:	701a      	strb	r2, [r3, #0]
 80067b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	4619      	mov	r1, r3
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7ff f985 	bl	8005acc <_EncodeStr>
 80067c2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80067c4:	2209      	movs	r2, #9
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	6938      	ldr	r0, [r7, #16]
 80067ca:	f7ff faa9 	bl	8005d20 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	637b      	str	r3, [r7, #52]	; 0x34
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	4b40      	ldr	r3, [pc, #256]	; (80068dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	633b      	str	r3, [r7, #48]	; 0x30
 80067e2:	e00b      	b.n	80067fc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ea:	1c59      	adds	r1, r3, #1
 80067ec:	6379      	str	r1, [r7, #52]	; 0x34
 80067ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	09db      	lsrs	r3, r3, #7
 80067fa:	633b      	str	r3, [r7, #48]	; 0x30
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006800:	d8f0      	bhi.n	80067e4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	637a      	str	r2, [r7, #52]	; 0x34
 8006808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006810:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28
 800681c:	e00b      	b.n	8006836 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	b2da      	uxtb	r2, r3
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	1c59      	adds	r1, r3, #1
 8006826:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006828:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	09db      	lsrs	r3, r3, #7
 8006834:	62bb      	str	r3, [r7, #40]	; 0x28
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	2b7f      	cmp	r3, #127	; 0x7f
 800683a:	d8f0      	bhi.n	800681e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	623b      	str	r3, [r7, #32]
 8006856:	e00b      	b.n	8006870 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	b2da      	uxtb	r2, r3
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	1c59      	adds	r1, r3, #1
 8006860:	6279      	str	r1, [r7, #36]	; 0x24
 8006862:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	09db      	lsrs	r3, r3, #7
 800686e:	623b      	str	r3, [r7, #32]
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	2b7f      	cmp	r3, #127	; 0x7f
 8006874:	d8f0      	bhi.n	8006858 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	627a      	str	r2, [r7, #36]	; 0x24
 800687c:	6a3a      	ldr	r2, [r7, #32]
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	61fb      	str	r3, [r7, #28]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	61bb      	str	r3, [r7, #24]
 8006890:	e00b      	b.n	80068aa <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	b2da      	uxtb	r2, r3
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	1c59      	adds	r1, r3, #1
 800689a:	61f9      	str	r1, [r7, #28]
 800689c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	09db      	lsrs	r3, r3, #7
 80068a8:	61bb      	str	r3, [r7, #24]
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b7f      	cmp	r3, #127	; 0x7f
 80068ae:	d8f0      	bhi.n	8006892 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	61fa      	str	r2, [r7, #28]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	701a      	strb	r2, [r3, #0]
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80068c0:	2215      	movs	r2, #21
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	6938      	ldr	r0, [r7, #16]
 80068c6:	f7ff fa2b 	bl	8005d20 <_SendPacket>
  RECORD_END();
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f383 8811 	msr	BASEPRI, r3
}
 80068d0:	bf00      	nop
 80068d2:	3748      	adds	r7, #72	; 0x48
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20013838 	.word	0x20013838
 80068dc:	20013808 	.word	0x20013808

080068e0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80068e4:	4b07      	ldr	r3, [pc, #28]	; (8006904 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80068ec:	4b05      	ldr	r3, [pc, #20]	; (8006904 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80068f6:	4b03      	ldr	r3, [pc, #12]	; (8006904 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4798      	blx	r3
  }
}
 80068fe:	bf00      	nop
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20013808 	.word	0x20013808

08006908 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006910:	f3ef 8311 	mrs	r3, BASEPRI
 8006914:	f04f 0120 	mov.w	r1, #32
 8006918:	f381 8811 	msr	BASEPRI, r1
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	480b      	ldr	r0, [pc, #44]	; (800694c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006920:	f7ff f90d 	bl	8005b3e <_PreparePacket>
 8006924:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006926:	2280      	movs	r2, #128	; 0x80
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	6938      	ldr	r0, [r7, #16]
 800692c:	f7ff f8ce 	bl	8005acc <_EncodeStr>
 8006930:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006932:	220e      	movs	r2, #14
 8006934:	68f9      	ldr	r1, [r7, #12]
 8006936:	6938      	ldr	r0, [r7, #16]
 8006938:	f7ff f9f2 	bl	8005d20 <_SendPacket>
  RECORD_END();
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f383 8811 	msr	BASEPRI, r3
}
 8006942:	bf00      	nop
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20013838 	.word	0x20013838

08006950 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006956:	4b15      	ldr	r3, [pc, #84]	; (80069ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01a      	beq.n	8006994 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800695e:	4b13      	ldr	r3, [pc, #76]	; (80069ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d015      	beq.n	8006994 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006968:	4b10      	ldr	r3, [pc, #64]	; (80069ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4798      	blx	r3
 8006970:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006974:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006976:	e9d7 0100 	ldrd	r0, r1, [r7]
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	000a      	movs	r2, r1
 8006984:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006986:	4613      	mov	r3, r2
 8006988:	461a      	mov	r2, r3
 800698a:	4621      	mov	r1, r4
 800698c:	200d      	movs	r0, #13
 800698e:	f7ff fbe5 	bl	800615c <SEGGER_SYSVIEW_RecordU32x2>
 8006992:	e006      	b.n	80069a2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006994:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4619      	mov	r1, r3
 800699a:	200c      	movs	r0, #12
 800699c:	f7ff fba2 	bl	80060e4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd90      	pop	{r4, r7, pc}
 80069aa:	bf00      	nop
 80069ac:	20013808 	.word	0x20013808
 80069b0:	e0001004 	.word	0xe0001004

080069b4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069ba:	f3ef 8311 	mrs	r3, BASEPRI
 80069be:	f04f 0120 	mov.w	r1, #32
 80069c2:	f381 8811 	msr	BASEPRI, r1
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	4819      	ldr	r0, [pc, #100]	; (8006a30 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80069ca:	f7ff f8b8 	bl	8005b3e <_PreparePacket>
 80069ce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80069d4:	4b17      	ldr	r3, [pc, #92]	; (8006a34 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069dc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	e00b      	b.n	8006a00 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	1c59      	adds	r1, r3, #1
 80069f0:	6179      	str	r1, [r7, #20]
 80069f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	09db      	lsrs	r3, r3, #7
 80069fe:	613b      	str	r3, [r7, #16]
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	2b7f      	cmp	r3, #127	; 0x7f
 8006a04:	d8f0      	bhi.n	80069e8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	617a      	str	r2, [r7, #20]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006a16:	2202      	movs	r2, #2
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	68b8      	ldr	r0, [r7, #8]
 8006a1c:	f7ff f980 	bl	8005d20 <_SendPacket>
  RECORD_END();
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f383 8811 	msr	BASEPRI, r3
}
 8006a26:	bf00      	nop
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20013838 	.word	0x20013838
 8006a34:	e000ed04 	.word	0xe000ed04

08006a38 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a42:	f04f 0120 	mov.w	r1, #32
 8006a46:	f381 8811 	msr	BASEPRI, r1
 8006a4a:	607b      	str	r3, [r7, #4]
 8006a4c:	4807      	ldr	r0, [pc, #28]	; (8006a6c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006a4e:	f7ff f876 	bl	8005b3e <_PreparePacket>
 8006a52:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006a54:	2203      	movs	r2, #3
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6838      	ldr	r0, [r7, #0]
 8006a5a:	f7ff f961 	bl	8005d20 <_SendPacket>
  RECORD_END();
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f383 8811 	msr	BASEPRI, r3
}
 8006a64:	bf00      	nop
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20013838 	.word	0x20013838

08006a70 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a76:	f3ef 8311 	mrs	r3, BASEPRI
 8006a7a:	f04f 0120 	mov.w	r1, #32
 8006a7e:	f381 8811 	msr	BASEPRI, r1
 8006a82:	607b      	str	r3, [r7, #4]
 8006a84:	4807      	ldr	r0, [pc, #28]	; (8006aa4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006a86:	f7ff f85a 	bl	8005b3e <_PreparePacket>
 8006a8a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006a8c:	2212      	movs	r2, #18
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6838      	ldr	r0, [r7, #0]
 8006a92:	f7ff f945 	bl	8005d20 <_SendPacket>
  RECORD_END();
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f383 8811 	msr	BASEPRI, r3
}
 8006a9c:	bf00      	nop
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20013838 	.word	0x20013838

08006aa8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006aae:	f3ef 8311 	mrs	r3, BASEPRI
 8006ab2:	f04f 0120 	mov.w	r1, #32
 8006ab6:	f381 8811 	msr	BASEPRI, r1
 8006aba:	607b      	str	r3, [r7, #4]
 8006abc:	4807      	ldr	r0, [pc, #28]	; (8006adc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006abe:	f7ff f83e 	bl	8005b3e <_PreparePacket>
 8006ac2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006ac4:	2211      	movs	r2, #17
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6838      	ldr	r0, [r7, #0]
 8006aca:	f7ff f929 	bl	8005d20 <_SendPacket>
  RECORD_END();
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f383 8811 	msr	BASEPRI, r3
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20013838 	.word	0x20013838

08006ae0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8006aec:	f04f 0120 	mov.w	r1, #32
 8006af0:	f381 8811 	msr	BASEPRI, r1
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	4819      	ldr	r0, [pc, #100]	; (8006b5c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006af8:	f7ff f821 	bl	8005b3e <_PreparePacket>
 8006afc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b02:	4b17      	ldr	r3, [pc, #92]	; (8006b60 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	61bb      	str	r3, [r7, #24]
 8006b14:	e00b      	b.n	8006b2e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	1c59      	adds	r1, r3, #1
 8006b1e:	61f9      	str	r1, [r7, #28]
 8006b20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	09db      	lsrs	r3, r3, #7
 8006b2c:	61bb      	str	r3, [r7, #24]
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	2b7f      	cmp	r3, #127	; 0x7f
 8006b32:	d8f0      	bhi.n	8006b16 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	61fa      	str	r2, [r7, #28]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	701a      	strb	r2, [r3, #0]
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006b44:	2208      	movs	r2, #8
 8006b46:	68f9      	ldr	r1, [r7, #12]
 8006b48:	6938      	ldr	r0, [r7, #16]
 8006b4a:	f7ff f8e9 	bl	8005d20 <_SendPacket>
  RECORD_END();
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f383 8811 	msr	BASEPRI, r3
}
 8006b54:	bf00      	nop
 8006b56:	3720      	adds	r7, #32
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	20013838 	.word	0x20013838
 8006b60:	20013808 	.word	0x20013808

08006b64 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b70:	f04f 0120 	mov.w	r1, #32
 8006b74:	f381 8811 	msr	BASEPRI, r1
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	4819      	ldr	r0, [pc, #100]	; (8006be0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006b7c:	f7fe ffdf 	bl	8005b3e <_PreparePacket>
 8006b80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b86:	4b17      	ldr	r3, [pc, #92]	; (8006be4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	61bb      	str	r3, [r7, #24]
 8006b98:	e00b      	b.n	8006bb2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	1c59      	adds	r1, r3, #1
 8006ba2:	61f9      	str	r1, [r7, #28]
 8006ba4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	09db      	lsrs	r3, r3, #7
 8006bb0:	61bb      	str	r3, [r7, #24]
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006bb6:	d8f0      	bhi.n	8006b9a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	61fa      	str	r2, [r7, #28]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006bc8:	2204      	movs	r2, #4
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	6938      	ldr	r0, [r7, #16]
 8006bce:	f7ff f8a7 	bl	8005d20 <_SendPacket>
  RECORD_END();
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f383 8811 	msr	BASEPRI, r3
}
 8006bd8:	bf00      	nop
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20013838 	.word	0x20013838
 8006be4:	20013808 	.word	0x20013808

08006be8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf4:	f04f 0120 	mov.w	r1, #32
 8006bf8:	f381 8811 	msr	BASEPRI, r1
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	4819      	ldr	r0, [pc, #100]	; (8006c64 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006c00:	f7fe ff9d 	bl	8005b3e <_PreparePacket>
 8006c04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c0a:	4b17      	ldr	r3, [pc, #92]	; (8006c68 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	61bb      	str	r3, [r7, #24]
 8006c1c:	e00b      	b.n	8006c36 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	1c59      	adds	r1, r3, #1
 8006c26:	61f9      	str	r1, [r7, #28]
 8006c28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	09db      	lsrs	r3, r3, #7
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b7f      	cmp	r3, #127	; 0x7f
 8006c3a:	d8f0      	bhi.n	8006c1e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	61fa      	str	r2, [r7, #28]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006c4c:	2206      	movs	r2, #6
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	6938      	ldr	r0, [r7, #16]
 8006c52:	f7ff f865 	bl	8005d20 <_SendPacket>
  RECORD_END();
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f383 8811 	msr	BASEPRI, r3
}
 8006c5c:	bf00      	nop
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	20013838 	.word	0x20013838
 8006c68:	20013808 	.word	0x20013808

08006c6c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	1ad3      	subs	r3, r2, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	20013808 	.word	0x20013808

08006c8c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08c      	sub	sp, #48	; 0x30
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c96:	4b40      	ldr	r3, [pc, #256]	; (8006d98 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d077      	beq.n	8006d8e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006c9e:	4b3e      	ldr	r3, [pc, #248]	; (8006d98 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ca8:	e008      	b.n	8006cbc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d007      	beq.n	8006cc6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	3301      	adds	r3, #1
 8006cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d3f2      	bcc.n	8006caa <SEGGER_SYSVIEW_SendModule+0x1e>
 8006cc4:	e000      	b.n	8006cc8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006cc6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d055      	beq.n	8006d7a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cce:	f3ef 8311 	mrs	r3, BASEPRI
 8006cd2:	f04f 0120 	mov.w	r1, #32
 8006cd6:	f381 8811 	msr	BASEPRI, r1
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	482f      	ldr	r0, [pc, #188]	; (8006d9c <SEGGER_SYSVIEW_SendModule+0x110>)
 8006cde:	f7fe ff2e 	bl	8005b3e <_PreparePacket>
 8006ce2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	623b      	str	r3, [r7, #32]
 8006cf0:	e00b      	b.n	8006d0a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	1c59      	adds	r1, r3, #1
 8006cfa:	6279      	str	r1, [r7, #36]	; 0x24
 8006cfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	09db      	lsrs	r3, r3, #7
 8006d08:	623b      	str	r3, [r7, #32]
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d0e:	d8f0      	bhi.n	8006cf2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	627a      	str	r2, [r7, #36]	; 0x24
 8006d16:	6a3a      	ldr	r2, [r7, #32]
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	61fb      	str	r3, [r7, #28]
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	e00b      	b.n	8006d44 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	1c59      	adds	r1, r3, #1
 8006d34:	61f9      	str	r1, [r7, #28]
 8006d36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	09db      	lsrs	r3, r3, #7
 8006d42:	61bb      	str	r3, [r7, #24]
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	2b7f      	cmp	r3, #127	; 0x7f
 8006d48:	d8f0      	bhi.n	8006d2c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	61fa      	str	r2, [r7, #28]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2280      	movs	r2, #128	; 0x80
 8006d60:	4619      	mov	r1, r3
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f7fe feb2 	bl	8005acc <_EncodeStr>
 8006d68:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d6a:	2216      	movs	r2, #22
 8006d6c:	68f9      	ldr	r1, [r7, #12]
 8006d6e:	6938      	ldr	r0, [r7, #16]
 8006d70:	f7fe ffd6 	bl	8005d20 <_SendPacket>
      RECORD_END();
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d006      	beq.n	8006d8e <SEGGER_SYSVIEW_SendModule+0x102>
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	4798      	blx	r3
    }
  }
}
 8006d8e:	bf00      	nop
 8006d90:	3730      	adds	r7, #48	; 0x30
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20013830 	.word	0x20013830
 8006d9c:	20013838 	.word	0x20013838

08006da0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006da6:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00f      	beq.n	8006dce <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006dae:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f2      	bne.n	8006db4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20013830 	.word	0x20013830

08006ddc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006de2:	f3ef 8311 	mrs	r3, BASEPRI
 8006de6:	f04f 0120 	mov.w	r1, #32
 8006dea:	f381 8811 	msr	BASEPRI, r1
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	4817      	ldr	r0, [pc, #92]	; (8006e50 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006df2:	f7fe fea4 	bl	8005b3e <_PreparePacket>
 8006df6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	4b14      	ldr	r3, [pc, #80]	; (8006e54 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	613b      	str	r3, [r7, #16]
 8006e06:	e00b      	b.n	8006e20 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	1c59      	adds	r1, r3, #1
 8006e10:	6179      	str	r1, [r7, #20]
 8006e12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	09db      	lsrs	r3, r3, #7
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	2b7f      	cmp	r3, #127	; 0x7f
 8006e24:	d8f0      	bhi.n	8006e08 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	617a      	str	r2, [r7, #20]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006e36:	221b      	movs	r2, #27
 8006e38:	6879      	ldr	r1, [r7, #4]
 8006e3a:	68b8      	ldr	r0, [r7, #8]
 8006e3c:	f7fe ff70 	bl	8005d20 <_SendPacket>
  RECORD_END();
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f383 8811 	msr	BASEPRI, r3
}
 8006e46:	bf00      	nop
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20013838 	.word	0x20013838
 8006e54:	20013834 	.word	0x20013834

08006e58 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08a      	sub	sp, #40	; 0x28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e60:	f3ef 8311 	mrs	r3, BASEPRI
 8006e64:	f04f 0120 	mov.w	r1, #32
 8006e68:	f381 8811 	msr	BASEPRI, r1
 8006e6c:	617b      	str	r3, [r7, #20]
 8006e6e:	4827      	ldr	r0, [pc, #156]	; (8006f0c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e70:	f7fe fe65 	bl	8005b3e <_PreparePacket>
 8006e74:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e76:	2280      	movs	r2, #128	; 0x80
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	6938      	ldr	r0, [r7, #16]
 8006e7c:	f7fe fe26 	bl	8005acc <_EncodeStr>
 8006e80:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
 8006e86:	2301      	movs	r3, #1
 8006e88:	623b      	str	r3, [r7, #32]
 8006e8a:	e00b      	b.n	8006ea4 <SEGGER_SYSVIEW_Warn+0x4c>
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	1c59      	adds	r1, r3, #1
 8006e94:	6279      	str	r1, [r7, #36]	; 0x24
 8006e96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	09db      	lsrs	r3, r3, #7
 8006ea2:	623b      	str	r3, [r7, #32]
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ea8:	d8f0      	bhi.n	8006e8c <SEGGER_SYSVIEW_Warn+0x34>
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	627a      	str	r2, [r7, #36]	; 0x24
 8006eb0:	6a3a      	ldr	r2, [r7, #32]
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	61fb      	str	r3, [r7, #28]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61bb      	str	r3, [r7, #24]
 8006ec2:	e00b      	b.n	8006edc <SEGGER_SYSVIEW_Warn+0x84>
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	1c59      	adds	r1, r3, #1
 8006ecc:	61f9      	str	r1, [r7, #28]
 8006ece:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	09db      	lsrs	r3, r3, #7
 8006eda:	61bb      	str	r3, [r7, #24]
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b7f      	cmp	r3, #127	; 0x7f
 8006ee0:	d8f0      	bhi.n	8006ec4 <SEGGER_SYSVIEW_Warn+0x6c>
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	61fa      	str	r2, [r7, #28]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ef2:	221a      	movs	r2, #26
 8006ef4:	68f9      	ldr	r1, [r7, #12]
 8006ef6:	6938      	ldr	r0, [r7, #16]
 8006ef8:	f7fe ff12 	bl	8005d20 <_SendPacket>
  RECORD_END();
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f383 8811 	msr	BASEPRI, r3
}
 8006f02:	bf00      	nop
 8006f04:	3728      	adds	r7, #40	; 0x28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20013838 	.word	0x20013838

08006f10 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006f14:	4b13      	ldr	r3, [pc, #76]	; (8006f64 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f16:	7e1b      	ldrb	r3, [r3, #24]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	440b      	add	r3, r1
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	4413      	add	r3, r2
 8006f26:	336c      	adds	r3, #108	; 0x6c
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4b0e      	ldr	r3, [pc, #56]	; (8006f64 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f2c:	7e1b      	ldrb	r3, [r3, #24]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	490d      	ldr	r1, [pc, #52]	; (8006f68 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f32:	4603      	mov	r3, r0
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	4403      	add	r3, r0
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	440b      	add	r3, r1
 8006f3c:	3370      	adds	r3, #112	; 0x70
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d00b      	beq.n	8006f5c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006f44:	4b07      	ldr	r3, [pc, #28]	; (8006f64 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f46:	789b      	ldrb	r3, [r3, #2]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d107      	bne.n	8006f5c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006f52:	f7fe fe01 	bl	8005b58 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006f56:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006f5c:	4b01      	ldr	r3, [pc, #4]	; (8006f64 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20013808 	.word	0x20013808
 8006f68:	20012f48 	.word	0x20012f48

08006f6c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	2000      	movs	r0, #0
 8006f80:	f7fe fcae 	bl	80058e0 <SEGGER_RTT_Write>
  return len;
 8006f84:	683b      	ldr	r3, [r7, #0]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <__errno>:
 8006f90:	4b01      	ldr	r3, [pc, #4]	; (8006f98 <__errno+0x8>)
 8006f92:	6818      	ldr	r0, [r3, #0]
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	2000001c 	.word	0x2000001c

08006f9c <__libc_init_array>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	4d0d      	ldr	r5, [pc, #52]	; (8006fd4 <__libc_init_array+0x38>)
 8006fa0:	4c0d      	ldr	r4, [pc, #52]	; (8006fd8 <__libc_init_array+0x3c>)
 8006fa2:	1b64      	subs	r4, r4, r5
 8006fa4:	10a4      	asrs	r4, r4, #2
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	42a6      	cmp	r6, r4
 8006faa:	d109      	bne.n	8006fc0 <__libc_init_array+0x24>
 8006fac:	4d0b      	ldr	r5, [pc, #44]	; (8006fdc <__libc_init_array+0x40>)
 8006fae:	4c0c      	ldr	r4, [pc, #48]	; (8006fe0 <__libc_init_array+0x44>)
 8006fb0:	f000 ffba 	bl	8007f28 <_init>
 8006fb4:	1b64      	subs	r4, r4, r5
 8006fb6:	10a4      	asrs	r4, r4, #2
 8006fb8:	2600      	movs	r6, #0
 8006fba:	42a6      	cmp	r6, r4
 8006fbc:	d105      	bne.n	8006fca <__libc_init_array+0x2e>
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
 8006fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc4:	4798      	blx	r3
 8006fc6:	3601      	adds	r6, #1
 8006fc8:	e7ee      	b.n	8006fa8 <__libc_init_array+0xc>
 8006fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fce:	4798      	blx	r3
 8006fd0:	3601      	adds	r6, #1
 8006fd2:	e7f2      	b.n	8006fba <__libc_init_array+0x1e>
 8006fd4:	0800811c 	.word	0x0800811c
 8006fd8:	0800811c 	.word	0x0800811c
 8006fdc:	0800811c 	.word	0x0800811c
 8006fe0:	08008120 	.word	0x08008120

08006fe4 <memcmp>:
 8006fe4:	b510      	push	{r4, lr}
 8006fe6:	3901      	subs	r1, #1
 8006fe8:	4402      	add	r2, r0
 8006fea:	4290      	cmp	r0, r2
 8006fec:	d101      	bne.n	8006ff2 <memcmp+0xe>
 8006fee:	2000      	movs	r0, #0
 8006ff0:	e005      	b.n	8006ffe <memcmp+0x1a>
 8006ff2:	7803      	ldrb	r3, [r0, #0]
 8006ff4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ff8:	42a3      	cmp	r3, r4
 8006ffa:	d001      	beq.n	8007000 <memcmp+0x1c>
 8006ffc:	1b18      	subs	r0, r3, r4
 8006ffe:	bd10      	pop	{r4, pc}
 8007000:	3001      	adds	r0, #1
 8007002:	e7f2      	b.n	8006fea <memcmp+0x6>

08007004 <memcpy>:
 8007004:	440a      	add	r2, r1
 8007006:	4291      	cmp	r1, r2
 8007008:	f100 33ff 	add.w	r3, r0, #4294967295
 800700c:	d100      	bne.n	8007010 <memcpy+0xc>
 800700e:	4770      	bx	lr
 8007010:	b510      	push	{r4, lr}
 8007012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800701a:	4291      	cmp	r1, r2
 800701c:	d1f9      	bne.n	8007012 <memcpy+0xe>
 800701e:	bd10      	pop	{r4, pc}

08007020 <memset>:
 8007020:	4402      	add	r2, r0
 8007022:	4603      	mov	r3, r0
 8007024:	4293      	cmp	r3, r2
 8007026:	d100      	bne.n	800702a <memset+0xa>
 8007028:	4770      	bx	lr
 800702a:	f803 1b01 	strb.w	r1, [r3], #1
 800702e:	e7f9      	b.n	8007024 <memset+0x4>

08007030 <iprintf>:
 8007030:	b40f      	push	{r0, r1, r2, r3}
 8007032:	4b0a      	ldr	r3, [pc, #40]	; (800705c <iprintf+0x2c>)
 8007034:	b513      	push	{r0, r1, r4, lr}
 8007036:	681c      	ldr	r4, [r3, #0]
 8007038:	b124      	cbz	r4, 8007044 <iprintf+0x14>
 800703a:	69a3      	ldr	r3, [r4, #24]
 800703c:	b913      	cbnz	r3, 8007044 <iprintf+0x14>
 800703e:	4620      	mov	r0, r4
 8007040:	f000 f866 	bl	8007110 <__sinit>
 8007044:	ab05      	add	r3, sp, #20
 8007046:	9a04      	ldr	r2, [sp, #16]
 8007048:	68a1      	ldr	r1, [r4, #8]
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	4620      	mov	r0, r4
 800704e:	f000 f9bd 	bl	80073cc <_vfiprintf_r>
 8007052:	b002      	add	sp, #8
 8007054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007058:	b004      	add	sp, #16
 800705a:	4770      	bx	lr
 800705c:	2000001c 	.word	0x2000001c

08007060 <std>:
 8007060:	2300      	movs	r3, #0
 8007062:	b510      	push	{r4, lr}
 8007064:	4604      	mov	r4, r0
 8007066:	e9c0 3300 	strd	r3, r3, [r0]
 800706a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800706e:	6083      	str	r3, [r0, #8]
 8007070:	8181      	strh	r1, [r0, #12]
 8007072:	6643      	str	r3, [r0, #100]	; 0x64
 8007074:	81c2      	strh	r2, [r0, #14]
 8007076:	6183      	str	r3, [r0, #24]
 8007078:	4619      	mov	r1, r3
 800707a:	2208      	movs	r2, #8
 800707c:	305c      	adds	r0, #92	; 0x5c
 800707e:	f7ff ffcf 	bl	8007020 <memset>
 8007082:	4b05      	ldr	r3, [pc, #20]	; (8007098 <std+0x38>)
 8007084:	6263      	str	r3, [r4, #36]	; 0x24
 8007086:	4b05      	ldr	r3, [pc, #20]	; (800709c <std+0x3c>)
 8007088:	62a3      	str	r3, [r4, #40]	; 0x28
 800708a:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <std+0x40>)
 800708c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800708e:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <std+0x44>)
 8007090:	6224      	str	r4, [r4, #32]
 8007092:	6323      	str	r3, [r4, #48]	; 0x30
 8007094:	bd10      	pop	{r4, pc}
 8007096:	bf00      	nop
 8007098:	08007975 	.word	0x08007975
 800709c:	08007997 	.word	0x08007997
 80070a0:	080079cf 	.word	0x080079cf
 80070a4:	080079f3 	.word	0x080079f3

080070a8 <_cleanup_r>:
 80070a8:	4901      	ldr	r1, [pc, #4]	; (80070b0 <_cleanup_r+0x8>)
 80070aa:	f000 b8af 	b.w	800720c <_fwalk_reent>
 80070ae:	bf00      	nop
 80070b0:	08007ca9 	.word	0x08007ca9

080070b4 <__sfmoreglue>:
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	2268      	movs	r2, #104	; 0x68
 80070b8:	1e4d      	subs	r5, r1, #1
 80070ba:	4355      	muls	r5, r2
 80070bc:	460e      	mov	r6, r1
 80070be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070c2:	f000 f8e5 	bl	8007290 <_malloc_r>
 80070c6:	4604      	mov	r4, r0
 80070c8:	b140      	cbz	r0, 80070dc <__sfmoreglue+0x28>
 80070ca:	2100      	movs	r1, #0
 80070cc:	e9c0 1600 	strd	r1, r6, [r0]
 80070d0:	300c      	adds	r0, #12
 80070d2:	60a0      	str	r0, [r4, #8]
 80070d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070d8:	f7ff ffa2 	bl	8007020 <memset>
 80070dc:	4620      	mov	r0, r4
 80070de:	bd70      	pop	{r4, r5, r6, pc}

080070e0 <__sfp_lock_acquire>:
 80070e0:	4801      	ldr	r0, [pc, #4]	; (80070e8 <__sfp_lock_acquire+0x8>)
 80070e2:	f000 b8b3 	b.w	800724c <__retarget_lock_acquire_recursive>
 80070e6:	bf00      	nop
 80070e8:	2001391c 	.word	0x2001391c

080070ec <__sfp_lock_release>:
 80070ec:	4801      	ldr	r0, [pc, #4]	; (80070f4 <__sfp_lock_release+0x8>)
 80070ee:	f000 b8ae 	b.w	800724e <__retarget_lock_release_recursive>
 80070f2:	bf00      	nop
 80070f4:	2001391c 	.word	0x2001391c

080070f8 <__sinit_lock_acquire>:
 80070f8:	4801      	ldr	r0, [pc, #4]	; (8007100 <__sinit_lock_acquire+0x8>)
 80070fa:	f000 b8a7 	b.w	800724c <__retarget_lock_acquire_recursive>
 80070fe:	bf00      	nop
 8007100:	2001391d 	.word	0x2001391d

08007104 <__sinit_lock_release>:
 8007104:	4801      	ldr	r0, [pc, #4]	; (800710c <__sinit_lock_release+0x8>)
 8007106:	f000 b8a2 	b.w	800724e <__retarget_lock_release_recursive>
 800710a:	bf00      	nop
 800710c:	2001391d 	.word	0x2001391d

08007110 <__sinit>:
 8007110:	b510      	push	{r4, lr}
 8007112:	4604      	mov	r4, r0
 8007114:	f7ff fff0 	bl	80070f8 <__sinit_lock_acquire>
 8007118:	69a3      	ldr	r3, [r4, #24]
 800711a:	b11b      	cbz	r3, 8007124 <__sinit+0x14>
 800711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007120:	f7ff bff0 	b.w	8007104 <__sinit_lock_release>
 8007124:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007128:	6523      	str	r3, [r4, #80]	; 0x50
 800712a:	4b13      	ldr	r3, [pc, #76]	; (8007178 <__sinit+0x68>)
 800712c:	4a13      	ldr	r2, [pc, #76]	; (800717c <__sinit+0x6c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	62a2      	str	r2, [r4, #40]	; 0x28
 8007132:	42a3      	cmp	r3, r4
 8007134:	bf04      	itt	eq
 8007136:	2301      	moveq	r3, #1
 8007138:	61a3      	streq	r3, [r4, #24]
 800713a:	4620      	mov	r0, r4
 800713c:	f000 f820 	bl	8007180 <__sfp>
 8007140:	6060      	str	r0, [r4, #4]
 8007142:	4620      	mov	r0, r4
 8007144:	f000 f81c 	bl	8007180 <__sfp>
 8007148:	60a0      	str	r0, [r4, #8]
 800714a:	4620      	mov	r0, r4
 800714c:	f000 f818 	bl	8007180 <__sfp>
 8007150:	2200      	movs	r2, #0
 8007152:	60e0      	str	r0, [r4, #12]
 8007154:	2104      	movs	r1, #4
 8007156:	6860      	ldr	r0, [r4, #4]
 8007158:	f7ff ff82 	bl	8007060 <std>
 800715c:	68a0      	ldr	r0, [r4, #8]
 800715e:	2201      	movs	r2, #1
 8007160:	2109      	movs	r1, #9
 8007162:	f7ff ff7d 	bl	8007060 <std>
 8007166:	68e0      	ldr	r0, [r4, #12]
 8007168:	2202      	movs	r2, #2
 800716a:	2112      	movs	r1, #18
 800716c:	f7ff ff78 	bl	8007060 <std>
 8007170:	2301      	movs	r3, #1
 8007172:	61a3      	str	r3, [r4, #24]
 8007174:	e7d2      	b.n	800711c <__sinit+0xc>
 8007176:	bf00      	nop
 8007178:	0800807c 	.word	0x0800807c
 800717c:	080070a9 	.word	0x080070a9

08007180 <__sfp>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	4607      	mov	r7, r0
 8007184:	f7ff ffac 	bl	80070e0 <__sfp_lock_acquire>
 8007188:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <__sfp+0x84>)
 800718a:	681e      	ldr	r6, [r3, #0]
 800718c:	69b3      	ldr	r3, [r6, #24]
 800718e:	b913      	cbnz	r3, 8007196 <__sfp+0x16>
 8007190:	4630      	mov	r0, r6
 8007192:	f7ff ffbd 	bl	8007110 <__sinit>
 8007196:	3648      	adds	r6, #72	; 0x48
 8007198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800719c:	3b01      	subs	r3, #1
 800719e:	d503      	bpl.n	80071a8 <__sfp+0x28>
 80071a0:	6833      	ldr	r3, [r6, #0]
 80071a2:	b30b      	cbz	r3, 80071e8 <__sfp+0x68>
 80071a4:	6836      	ldr	r6, [r6, #0]
 80071a6:	e7f7      	b.n	8007198 <__sfp+0x18>
 80071a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071ac:	b9d5      	cbnz	r5, 80071e4 <__sfp+0x64>
 80071ae:	4b16      	ldr	r3, [pc, #88]	; (8007208 <__sfp+0x88>)
 80071b0:	60e3      	str	r3, [r4, #12]
 80071b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071b6:	6665      	str	r5, [r4, #100]	; 0x64
 80071b8:	f000 f847 	bl	800724a <__retarget_lock_init_recursive>
 80071bc:	f7ff ff96 	bl	80070ec <__sfp_lock_release>
 80071c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071c8:	6025      	str	r5, [r4, #0]
 80071ca:	61a5      	str	r5, [r4, #24]
 80071cc:	2208      	movs	r2, #8
 80071ce:	4629      	mov	r1, r5
 80071d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071d4:	f7ff ff24 	bl	8007020 <memset>
 80071d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071e0:	4620      	mov	r0, r4
 80071e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e4:	3468      	adds	r4, #104	; 0x68
 80071e6:	e7d9      	b.n	800719c <__sfp+0x1c>
 80071e8:	2104      	movs	r1, #4
 80071ea:	4638      	mov	r0, r7
 80071ec:	f7ff ff62 	bl	80070b4 <__sfmoreglue>
 80071f0:	4604      	mov	r4, r0
 80071f2:	6030      	str	r0, [r6, #0]
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d1d5      	bne.n	80071a4 <__sfp+0x24>
 80071f8:	f7ff ff78 	bl	80070ec <__sfp_lock_release>
 80071fc:	230c      	movs	r3, #12
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	e7ee      	b.n	80071e0 <__sfp+0x60>
 8007202:	bf00      	nop
 8007204:	0800807c 	.word	0x0800807c
 8007208:	ffff0001 	.word	0xffff0001

0800720c <_fwalk_reent>:
 800720c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007210:	4606      	mov	r6, r0
 8007212:	4688      	mov	r8, r1
 8007214:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007218:	2700      	movs	r7, #0
 800721a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800721e:	f1b9 0901 	subs.w	r9, r9, #1
 8007222:	d505      	bpl.n	8007230 <_fwalk_reent+0x24>
 8007224:	6824      	ldr	r4, [r4, #0]
 8007226:	2c00      	cmp	r4, #0
 8007228:	d1f7      	bne.n	800721a <_fwalk_reent+0xe>
 800722a:	4638      	mov	r0, r7
 800722c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007230:	89ab      	ldrh	r3, [r5, #12]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d907      	bls.n	8007246 <_fwalk_reent+0x3a>
 8007236:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800723a:	3301      	adds	r3, #1
 800723c:	d003      	beq.n	8007246 <_fwalk_reent+0x3a>
 800723e:	4629      	mov	r1, r5
 8007240:	4630      	mov	r0, r6
 8007242:	47c0      	blx	r8
 8007244:	4307      	orrs	r7, r0
 8007246:	3568      	adds	r5, #104	; 0x68
 8007248:	e7e9      	b.n	800721e <_fwalk_reent+0x12>

0800724a <__retarget_lock_init_recursive>:
 800724a:	4770      	bx	lr

0800724c <__retarget_lock_acquire_recursive>:
 800724c:	4770      	bx	lr

0800724e <__retarget_lock_release_recursive>:
 800724e:	4770      	bx	lr

08007250 <sbrk_aligned>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	4e0e      	ldr	r6, [pc, #56]	; (800728c <sbrk_aligned+0x3c>)
 8007254:	460c      	mov	r4, r1
 8007256:	6831      	ldr	r1, [r6, #0]
 8007258:	4605      	mov	r5, r0
 800725a:	b911      	cbnz	r1, 8007262 <sbrk_aligned+0x12>
 800725c:	f000 fb7a 	bl	8007954 <_sbrk_r>
 8007260:	6030      	str	r0, [r6, #0]
 8007262:	4621      	mov	r1, r4
 8007264:	4628      	mov	r0, r5
 8007266:	f000 fb75 	bl	8007954 <_sbrk_r>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	d00a      	beq.n	8007284 <sbrk_aligned+0x34>
 800726e:	1cc4      	adds	r4, r0, #3
 8007270:	f024 0403 	bic.w	r4, r4, #3
 8007274:	42a0      	cmp	r0, r4
 8007276:	d007      	beq.n	8007288 <sbrk_aligned+0x38>
 8007278:	1a21      	subs	r1, r4, r0
 800727a:	4628      	mov	r0, r5
 800727c:	f000 fb6a 	bl	8007954 <_sbrk_r>
 8007280:	3001      	adds	r0, #1
 8007282:	d101      	bne.n	8007288 <sbrk_aligned+0x38>
 8007284:	f04f 34ff 	mov.w	r4, #4294967295
 8007288:	4620      	mov	r0, r4
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	20013924 	.word	0x20013924

08007290 <_malloc_r>:
 8007290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007294:	1ccd      	adds	r5, r1, #3
 8007296:	f025 0503 	bic.w	r5, r5, #3
 800729a:	3508      	adds	r5, #8
 800729c:	2d0c      	cmp	r5, #12
 800729e:	bf38      	it	cc
 80072a0:	250c      	movcc	r5, #12
 80072a2:	2d00      	cmp	r5, #0
 80072a4:	4607      	mov	r7, r0
 80072a6:	db01      	blt.n	80072ac <_malloc_r+0x1c>
 80072a8:	42a9      	cmp	r1, r5
 80072aa:	d905      	bls.n	80072b8 <_malloc_r+0x28>
 80072ac:	230c      	movs	r3, #12
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	2600      	movs	r6, #0
 80072b2:	4630      	mov	r0, r6
 80072b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b8:	4e2e      	ldr	r6, [pc, #184]	; (8007374 <_malloc_r+0xe4>)
 80072ba:	f000 fda9 	bl	8007e10 <__malloc_lock>
 80072be:	6833      	ldr	r3, [r6, #0]
 80072c0:	461c      	mov	r4, r3
 80072c2:	bb34      	cbnz	r4, 8007312 <_malloc_r+0x82>
 80072c4:	4629      	mov	r1, r5
 80072c6:	4638      	mov	r0, r7
 80072c8:	f7ff ffc2 	bl	8007250 <sbrk_aligned>
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	4604      	mov	r4, r0
 80072d0:	d14d      	bne.n	800736e <_malloc_r+0xde>
 80072d2:	6834      	ldr	r4, [r6, #0]
 80072d4:	4626      	mov	r6, r4
 80072d6:	2e00      	cmp	r6, #0
 80072d8:	d140      	bne.n	800735c <_malloc_r+0xcc>
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	4631      	mov	r1, r6
 80072de:	4638      	mov	r0, r7
 80072e0:	eb04 0803 	add.w	r8, r4, r3
 80072e4:	f000 fb36 	bl	8007954 <_sbrk_r>
 80072e8:	4580      	cmp	r8, r0
 80072ea:	d13a      	bne.n	8007362 <_malloc_r+0xd2>
 80072ec:	6821      	ldr	r1, [r4, #0]
 80072ee:	3503      	adds	r5, #3
 80072f0:	1a6d      	subs	r5, r5, r1
 80072f2:	f025 0503 	bic.w	r5, r5, #3
 80072f6:	3508      	adds	r5, #8
 80072f8:	2d0c      	cmp	r5, #12
 80072fa:	bf38      	it	cc
 80072fc:	250c      	movcc	r5, #12
 80072fe:	4629      	mov	r1, r5
 8007300:	4638      	mov	r0, r7
 8007302:	f7ff ffa5 	bl	8007250 <sbrk_aligned>
 8007306:	3001      	adds	r0, #1
 8007308:	d02b      	beq.n	8007362 <_malloc_r+0xd2>
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	442b      	add	r3, r5
 800730e:	6023      	str	r3, [r4, #0]
 8007310:	e00e      	b.n	8007330 <_malloc_r+0xa0>
 8007312:	6822      	ldr	r2, [r4, #0]
 8007314:	1b52      	subs	r2, r2, r5
 8007316:	d41e      	bmi.n	8007356 <_malloc_r+0xc6>
 8007318:	2a0b      	cmp	r2, #11
 800731a:	d916      	bls.n	800734a <_malloc_r+0xba>
 800731c:	1961      	adds	r1, r4, r5
 800731e:	42a3      	cmp	r3, r4
 8007320:	6025      	str	r5, [r4, #0]
 8007322:	bf18      	it	ne
 8007324:	6059      	strne	r1, [r3, #4]
 8007326:	6863      	ldr	r3, [r4, #4]
 8007328:	bf08      	it	eq
 800732a:	6031      	streq	r1, [r6, #0]
 800732c:	5162      	str	r2, [r4, r5]
 800732e:	604b      	str	r3, [r1, #4]
 8007330:	4638      	mov	r0, r7
 8007332:	f104 060b 	add.w	r6, r4, #11
 8007336:	f000 fd71 	bl	8007e1c <__malloc_unlock>
 800733a:	f026 0607 	bic.w	r6, r6, #7
 800733e:	1d23      	adds	r3, r4, #4
 8007340:	1af2      	subs	r2, r6, r3
 8007342:	d0b6      	beq.n	80072b2 <_malloc_r+0x22>
 8007344:	1b9b      	subs	r3, r3, r6
 8007346:	50a3      	str	r3, [r4, r2]
 8007348:	e7b3      	b.n	80072b2 <_malloc_r+0x22>
 800734a:	6862      	ldr	r2, [r4, #4]
 800734c:	42a3      	cmp	r3, r4
 800734e:	bf0c      	ite	eq
 8007350:	6032      	streq	r2, [r6, #0]
 8007352:	605a      	strne	r2, [r3, #4]
 8007354:	e7ec      	b.n	8007330 <_malloc_r+0xa0>
 8007356:	4623      	mov	r3, r4
 8007358:	6864      	ldr	r4, [r4, #4]
 800735a:	e7b2      	b.n	80072c2 <_malloc_r+0x32>
 800735c:	4634      	mov	r4, r6
 800735e:	6876      	ldr	r6, [r6, #4]
 8007360:	e7b9      	b.n	80072d6 <_malloc_r+0x46>
 8007362:	230c      	movs	r3, #12
 8007364:	603b      	str	r3, [r7, #0]
 8007366:	4638      	mov	r0, r7
 8007368:	f000 fd58 	bl	8007e1c <__malloc_unlock>
 800736c:	e7a1      	b.n	80072b2 <_malloc_r+0x22>
 800736e:	6025      	str	r5, [r4, #0]
 8007370:	e7de      	b.n	8007330 <_malloc_r+0xa0>
 8007372:	bf00      	nop
 8007374:	20013920 	.word	0x20013920

08007378 <__sfputc_r>:
 8007378:	6893      	ldr	r3, [r2, #8]
 800737a:	3b01      	subs	r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	b410      	push	{r4}
 8007380:	6093      	str	r3, [r2, #8]
 8007382:	da08      	bge.n	8007396 <__sfputc_r+0x1e>
 8007384:	6994      	ldr	r4, [r2, #24]
 8007386:	42a3      	cmp	r3, r4
 8007388:	db01      	blt.n	800738e <__sfputc_r+0x16>
 800738a:	290a      	cmp	r1, #10
 800738c:	d103      	bne.n	8007396 <__sfputc_r+0x1e>
 800738e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007392:	f000 bb33 	b.w	80079fc <__swbuf_r>
 8007396:	6813      	ldr	r3, [r2, #0]
 8007398:	1c58      	adds	r0, r3, #1
 800739a:	6010      	str	r0, [r2, #0]
 800739c:	7019      	strb	r1, [r3, #0]
 800739e:	4608      	mov	r0, r1
 80073a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <__sfputs_r>:
 80073a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a8:	4606      	mov	r6, r0
 80073aa:	460f      	mov	r7, r1
 80073ac:	4614      	mov	r4, r2
 80073ae:	18d5      	adds	r5, r2, r3
 80073b0:	42ac      	cmp	r4, r5
 80073b2:	d101      	bne.n	80073b8 <__sfputs_r+0x12>
 80073b4:	2000      	movs	r0, #0
 80073b6:	e007      	b.n	80073c8 <__sfputs_r+0x22>
 80073b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073bc:	463a      	mov	r2, r7
 80073be:	4630      	mov	r0, r6
 80073c0:	f7ff ffda 	bl	8007378 <__sfputc_r>
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	d1f3      	bne.n	80073b0 <__sfputs_r+0xa>
 80073c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073cc <_vfiprintf_r>:
 80073cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d0:	460d      	mov	r5, r1
 80073d2:	b09d      	sub	sp, #116	; 0x74
 80073d4:	4614      	mov	r4, r2
 80073d6:	4698      	mov	r8, r3
 80073d8:	4606      	mov	r6, r0
 80073da:	b118      	cbz	r0, 80073e4 <_vfiprintf_r+0x18>
 80073dc:	6983      	ldr	r3, [r0, #24]
 80073de:	b90b      	cbnz	r3, 80073e4 <_vfiprintf_r+0x18>
 80073e0:	f7ff fe96 	bl	8007110 <__sinit>
 80073e4:	4b89      	ldr	r3, [pc, #548]	; (800760c <_vfiprintf_r+0x240>)
 80073e6:	429d      	cmp	r5, r3
 80073e8:	d11b      	bne.n	8007422 <_vfiprintf_r+0x56>
 80073ea:	6875      	ldr	r5, [r6, #4]
 80073ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073ee:	07d9      	lsls	r1, r3, #31
 80073f0:	d405      	bmi.n	80073fe <_vfiprintf_r+0x32>
 80073f2:	89ab      	ldrh	r3, [r5, #12]
 80073f4:	059a      	lsls	r2, r3, #22
 80073f6:	d402      	bmi.n	80073fe <_vfiprintf_r+0x32>
 80073f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073fa:	f7ff ff27 	bl	800724c <__retarget_lock_acquire_recursive>
 80073fe:	89ab      	ldrh	r3, [r5, #12]
 8007400:	071b      	lsls	r3, r3, #28
 8007402:	d501      	bpl.n	8007408 <_vfiprintf_r+0x3c>
 8007404:	692b      	ldr	r3, [r5, #16]
 8007406:	b9eb      	cbnz	r3, 8007444 <_vfiprintf_r+0x78>
 8007408:	4629      	mov	r1, r5
 800740a:	4630      	mov	r0, r6
 800740c:	f000 fb48 	bl	8007aa0 <__swsetup_r>
 8007410:	b1c0      	cbz	r0, 8007444 <_vfiprintf_r+0x78>
 8007412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007414:	07dc      	lsls	r4, r3, #31
 8007416:	d50e      	bpl.n	8007436 <_vfiprintf_r+0x6a>
 8007418:	f04f 30ff 	mov.w	r0, #4294967295
 800741c:	b01d      	add	sp, #116	; 0x74
 800741e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007422:	4b7b      	ldr	r3, [pc, #492]	; (8007610 <_vfiprintf_r+0x244>)
 8007424:	429d      	cmp	r5, r3
 8007426:	d101      	bne.n	800742c <_vfiprintf_r+0x60>
 8007428:	68b5      	ldr	r5, [r6, #8]
 800742a:	e7df      	b.n	80073ec <_vfiprintf_r+0x20>
 800742c:	4b79      	ldr	r3, [pc, #484]	; (8007614 <_vfiprintf_r+0x248>)
 800742e:	429d      	cmp	r5, r3
 8007430:	bf08      	it	eq
 8007432:	68f5      	ldreq	r5, [r6, #12]
 8007434:	e7da      	b.n	80073ec <_vfiprintf_r+0x20>
 8007436:	89ab      	ldrh	r3, [r5, #12]
 8007438:	0598      	lsls	r0, r3, #22
 800743a:	d4ed      	bmi.n	8007418 <_vfiprintf_r+0x4c>
 800743c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800743e:	f7ff ff06 	bl	800724e <__retarget_lock_release_recursive>
 8007442:	e7e9      	b.n	8007418 <_vfiprintf_r+0x4c>
 8007444:	2300      	movs	r3, #0
 8007446:	9309      	str	r3, [sp, #36]	; 0x24
 8007448:	2320      	movs	r3, #32
 800744a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800744e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007452:	2330      	movs	r3, #48	; 0x30
 8007454:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007618 <_vfiprintf_r+0x24c>
 8007458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800745c:	f04f 0901 	mov.w	r9, #1
 8007460:	4623      	mov	r3, r4
 8007462:	469a      	mov	sl, r3
 8007464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007468:	b10a      	cbz	r2, 800746e <_vfiprintf_r+0xa2>
 800746a:	2a25      	cmp	r2, #37	; 0x25
 800746c:	d1f9      	bne.n	8007462 <_vfiprintf_r+0x96>
 800746e:	ebba 0b04 	subs.w	fp, sl, r4
 8007472:	d00b      	beq.n	800748c <_vfiprintf_r+0xc0>
 8007474:	465b      	mov	r3, fp
 8007476:	4622      	mov	r2, r4
 8007478:	4629      	mov	r1, r5
 800747a:	4630      	mov	r0, r6
 800747c:	f7ff ff93 	bl	80073a6 <__sfputs_r>
 8007480:	3001      	adds	r0, #1
 8007482:	f000 80aa 	beq.w	80075da <_vfiprintf_r+0x20e>
 8007486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007488:	445a      	add	r2, fp
 800748a:	9209      	str	r2, [sp, #36]	; 0x24
 800748c:	f89a 3000 	ldrb.w	r3, [sl]
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 80a2 	beq.w	80075da <_vfiprintf_r+0x20e>
 8007496:	2300      	movs	r3, #0
 8007498:	f04f 32ff 	mov.w	r2, #4294967295
 800749c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074a0:	f10a 0a01 	add.w	sl, sl, #1
 80074a4:	9304      	str	r3, [sp, #16]
 80074a6:	9307      	str	r3, [sp, #28]
 80074a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074ac:	931a      	str	r3, [sp, #104]	; 0x68
 80074ae:	4654      	mov	r4, sl
 80074b0:	2205      	movs	r2, #5
 80074b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b6:	4858      	ldr	r0, [pc, #352]	; (8007618 <_vfiprintf_r+0x24c>)
 80074b8:	f7f8 fee2 	bl	8000280 <memchr>
 80074bc:	9a04      	ldr	r2, [sp, #16]
 80074be:	b9d8      	cbnz	r0, 80074f8 <_vfiprintf_r+0x12c>
 80074c0:	06d1      	lsls	r1, r2, #27
 80074c2:	bf44      	itt	mi
 80074c4:	2320      	movmi	r3, #32
 80074c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ca:	0713      	lsls	r3, r2, #28
 80074cc:	bf44      	itt	mi
 80074ce:	232b      	movmi	r3, #43	; 0x2b
 80074d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074d4:	f89a 3000 	ldrb.w	r3, [sl]
 80074d8:	2b2a      	cmp	r3, #42	; 0x2a
 80074da:	d015      	beq.n	8007508 <_vfiprintf_r+0x13c>
 80074dc:	9a07      	ldr	r2, [sp, #28]
 80074de:	4654      	mov	r4, sl
 80074e0:	2000      	movs	r0, #0
 80074e2:	f04f 0c0a 	mov.w	ip, #10
 80074e6:	4621      	mov	r1, r4
 80074e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074ec:	3b30      	subs	r3, #48	; 0x30
 80074ee:	2b09      	cmp	r3, #9
 80074f0:	d94e      	bls.n	8007590 <_vfiprintf_r+0x1c4>
 80074f2:	b1b0      	cbz	r0, 8007522 <_vfiprintf_r+0x156>
 80074f4:	9207      	str	r2, [sp, #28]
 80074f6:	e014      	b.n	8007522 <_vfiprintf_r+0x156>
 80074f8:	eba0 0308 	sub.w	r3, r0, r8
 80074fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007500:	4313      	orrs	r3, r2
 8007502:	9304      	str	r3, [sp, #16]
 8007504:	46a2      	mov	sl, r4
 8007506:	e7d2      	b.n	80074ae <_vfiprintf_r+0xe2>
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	1d19      	adds	r1, r3, #4
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	9103      	str	r1, [sp, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	bfbb      	ittet	lt
 8007514:	425b      	neglt	r3, r3
 8007516:	f042 0202 	orrlt.w	r2, r2, #2
 800751a:	9307      	strge	r3, [sp, #28]
 800751c:	9307      	strlt	r3, [sp, #28]
 800751e:	bfb8      	it	lt
 8007520:	9204      	strlt	r2, [sp, #16]
 8007522:	7823      	ldrb	r3, [r4, #0]
 8007524:	2b2e      	cmp	r3, #46	; 0x2e
 8007526:	d10c      	bne.n	8007542 <_vfiprintf_r+0x176>
 8007528:	7863      	ldrb	r3, [r4, #1]
 800752a:	2b2a      	cmp	r3, #42	; 0x2a
 800752c:	d135      	bne.n	800759a <_vfiprintf_r+0x1ce>
 800752e:	9b03      	ldr	r3, [sp, #12]
 8007530:	1d1a      	adds	r2, r3, #4
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	9203      	str	r2, [sp, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	bfb8      	it	lt
 800753a:	f04f 33ff 	movlt.w	r3, #4294967295
 800753e:	3402      	adds	r4, #2
 8007540:	9305      	str	r3, [sp, #20]
 8007542:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007628 <_vfiprintf_r+0x25c>
 8007546:	7821      	ldrb	r1, [r4, #0]
 8007548:	2203      	movs	r2, #3
 800754a:	4650      	mov	r0, sl
 800754c:	f7f8 fe98 	bl	8000280 <memchr>
 8007550:	b140      	cbz	r0, 8007564 <_vfiprintf_r+0x198>
 8007552:	2340      	movs	r3, #64	; 0x40
 8007554:	eba0 000a 	sub.w	r0, r0, sl
 8007558:	fa03 f000 	lsl.w	r0, r3, r0
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	4303      	orrs	r3, r0
 8007560:	3401      	adds	r4, #1
 8007562:	9304      	str	r3, [sp, #16]
 8007564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007568:	482c      	ldr	r0, [pc, #176]	; (800761c <_vfiprintf_r+0x250>)
 800756a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800756e:	2206      	movs	r2, #6
 8007570:	f7f8 fe86 	bl	8000280 <memchr>
 8007574:	2800      	cmp	r0, #0
 8007576:	d03f      	beq.n	80075f8 <_vfiprintf_r+0x22c>
 8007578:	4b29      	ldr	r3, [pc, #164]	; (8007620 <_vfiprintf_r+0x254>)
 800757a:	bb1b      	cbnz	r3, 80075c4 <_vfiprintf_r+0x1f8>
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	3307      	adds	r3, #7
 8007580:	f023 0307 	bic.w	r3, r3, #7
 8007584:	3308      	adds	r3, #8
 8007586:	9303      	str	r3, [sp, #12]
 8007588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758a:	443b      	add	r3, r7
 800758c:	9309      	str	r3, [sp, #36]	; 0x24
 800758e:	e767      	b.n	8007460 <_vfiprintf_r+0x94>
 8007590:	fb0c 3202 	mla	r2, ip, r2, r3
 8007594:	460c      	mov	r4, r1
 8007596:	2001      	movs	r0, #1
 8007598:	e7a5      	b.n	80074e6 <_vfiprintf_r+0x11a>
 800759a:	2300      	movs	r3, #0
 800759c:	3401      	adds	r4, #1
 800759e:	9305      	str	r3, [sp, #20]
 80075a0:	4619      	mov	r1, r3
 80075a2:	f04f 0c0a 	mov.w	ip, #10
 80075a6:	4620      	mov	r0, r4
 80075a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ac:	3a30      	subs	r2, #48	; 0x30
 80075ae:	2a09      	cmp	r2, #9
 80075b0:	d903      	bls.n	80075ba <_vfiprintf_r+0x1ee>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0c5      	beq.n	8007542 <_vfiprintf_r+0x176>
 80075b6:	9105      	str	r1, [sp, #20]
 80075b8:	e7c3      	b.n	8007542 <_vfiprintf_r+0x176>
 80075ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80075be:	4604      	mov	r4, r0
 80075c0:	2301      	movs	r3, #1
 80075c2:	e7f0      	b.n	80075a6 <_vfiprintf_r+0x1da>
 80075c4:	ab03      	add	r3, sp, #12
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	462a      	mov	r2, r5
 80075ca:	4b16      	ldr	r3, [pc, #88]	; (8007624 <_vfiprintf_r+0x258>)
 80075cc:	a904      	add	r1, sp, #16
 80075ce:	4630      	mov	r0, r6
 80075d0:	f3af 8000 	nop.w
 80075d4:	4607      	mov	r7, r0
 80075d6:	1c78      	adds	r0, r7, #1
 80075d8:	d1d6      	bne.n	8007588 <_vfiprintf_r+0x1bc>
 80075da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075dc:	07d9      	lsls	r1, r3, #31
 80075de:	d405      	bmi.n	80075ec <_vfiprintf_r+0x220>
 80075e0:	89ab      	ldrh	r3, [r5, #12]
 80075e2:	059a      	lsls	r2, r3, #22
 80075e4:	d402      	bmi.n	80075ec <_vfiprintf_r+0x220>
 80075e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075e8:	f7ff fe31 	bl	800724e <__retarget_lock_release_recursive>
 80075ec:	89ab      	ldrh	r3, [r5, #12]
 80075ee:	065b      	lsls	r3, r3, #25
 80075f0:	f53f af12 	bmi.w	8007418 <_vfiprintf_r+0x4c>
 80075f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075f6:	e711      	b.n	800741c <_vfiprintf_r+0x50>
 80075f8:	ab03      	add	r3, sp, #12
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	462a      	mov	r2, r5
 80075fe:	4b09      	ldr	r3, [pc, #36]	; (8007624 <_vfiprintf_r+0x258>)
 8007600:	a904      	add	r1, sp, #16
 8007602:	4630      	mov	r0, r6
 8007604:	f000 f880 	bl	8007708 <_printf_i>
 8007608:	e7e4      	b.n	80075d4 <_vfiprintf_r+0x208>
 800760a:	bf00      	nop
 800760c:	080080a0 	.word	0x080080a0
 8007610:	080080c0 	.word	0x080080c0
 8007614:	08008080 	.word	0x08008080
 8007618:	080080e0 	.word	0x080080e0
 800761c:	080080ea 	.word	0x080080ea
 8007620:	00000000 	.word	0x00000000
 8007624:	080073a7 	.word	0x080073a7
 8007628:	080080e6 	.word	0x080080e6

0800762c <_printf_common>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	4616      	mov	r6, r2
 8007632:	4699      	mov	r9, r3
 8007634:	688a      	ldr	r2, [r1, #8]
 8007636:	690b      	ldr	r3, [r1, #16]
 8007638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800763c:	4293      	cmp	r3, r2
 800763e:	bfb8      	it	lt
 8007640:	4613      	movlt	r3, r2
 8007642:	6033      	str	r3, [r6, #0]
 8007644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007648:	4607      	mov	r7, r0
 800764a:	460c      	mov	r4, r1
 800764c:	b10a      	cbz	r2, 8007652 <_printf_common+0x26>
 800764e:	3301      	adds	r3, #1
 8007650:	6033      	str	r3, [r6, #0]
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	0699      	lsls	r1, r3, #26
 8007656:	bf42      	ittt	mi
 8007658:	6833      	ldrmi	r3, [r6, #0]
 800765a:	3302      	addmi	r3, #2
 800765c:	6033      	strmi	r3, [r6, #0]
 800765e:	6825      	ldr	r5, [r4, #0]
 8007660:	f015 0506 	ands.w	r5, r5, #6
 8007664:	d106      	bne.n	8007674 <_printf_common+0x48>
 8007666:	f104 0a19 	add.w	sl, r4, #25
 800766a:	68e3      	ldr	r3, [r4, #12]
 800766c:	6832      	ldr	r2, [r6, #0]
 800766e:	1a9b      	subs	r3, r3, r2
 8007670:	42ab      	cmp	r3, r5
 8007672:	dc26      	bgt.n	80076c2 <_printf_common+0x96>
 8007674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007678:	1e13      	subs	r3, r2, #0
 800767a:	6822      	ldr	r2, [r4, #0]
 800767c:	bf18      	it	ne
 800767e:	2301      	movne	r3, #1
 8007680:	0692      	lsls	r2, r2, #26
 8007682:	d42b      	bmi.n	80076dc <_printf_common+0xb0>
 8007684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007688:	4649      	mov	r1, r9
 800768a:	4638      	mov	r0, r7
 800768c:	47c0      	blx	r8
 800768e:	3001      	adds	r0, #1
 8007690:	d01e      	beq.n	80076d0 <_printf_common+0xa4>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	68e5      	ldr	r5, [r4, #12]
 8007696:	6832      	ldr	r2, [r6, #0]
 8007698:	f003 0306 	and.w	r3, r3, #6
 800769c:	2b04      	cmp	r3, #4
 800769e:	bf08      	it	eq
 80076a0:	1aad      	subeq	r5, r5, r2
 80076a2:	68a3      	ldr	r3, [r4, #8]
 80076a4:	6922      	ldr	r2, [r4, #16]
 80076a6:	bf0c      	ite	eq
 80076a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076ac:	2500      	movne	r5, #0
 80076ae:	4293      	cmp	r3, r2
 80076b0:	bfc4      	itt	gt
 80076b2:	1a9b      	subgt	r3, r3, r2
 80076b4:	18ed      	addgt	r5, r5, r3
 80076b6:	2600      	movs	r6, #0
 80076b8:	341a      	adds	r4, #26
 80076ba:	42b5      	cmp	r5, r6
 80076bc:	d11a      	bne.n	80076f4 <_printf_common+0xc8>
 80076be:	2000      	movs	r0, #0
 80076c0:	e008      	b.n	80076d4 <_printf_common+0xa8>
 80076c2:	2301      	movs	r3, #1
 80076c4:	4652      	mov	r2, sl
 80076c6:	4649      	mov	r1, r9
 80076c8:	4638      	mov	r0, r7
 80076ca:	47c0      	blx	r8
 80076cc:	3001      	adds	r0, #1
 80076ce:	d103      	bne.n	80076d8 <_printf_common+0xac>
 80076d0:	f04f 30ff 	mov.w	r0, #4294967295
 80076d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d8:	3501      	adds	r5, #1
 80076da:	e7c6      	b.n	800766a <_printf_common+0x3e>
 80076dc:	18e1      	adds	r1, r4, r3
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	2030      	movs	r0, #48	; 0x30
 80076e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076e6:	4422      	add	r2, r4
 80076e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076f0:	3302      	adds	r3, #2
 80076f2:	e7c7      	b.n	8007684 <_printf_common+0x58>
 80076f4:	2301      	movs	r3, #1
 80076f6:	4622      	mov	r2, r4
 80076f8:	4649      	mov	r1, r9
 80076fa:	4638      	mov	r0, r7
 80076fc:	47c0      	blx	r8
 80076fe:	3001      	adds	r0, #1
 8007700:	d0e6      	beq.n	80076d0 <_printf_common+0xa4>
 8007702:	3601      	adds	r6, #1
 8007704:	e7d9      	b.n	80076ba <_printf_common+0x8e>
	...

08007708 <_printf_i>:
 8007708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800770c:	7e0f      	ldrb	r7, [r1, #24]
 800770e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007710:	2f78      	cmp	r7, #120	; 0x78
 8007712:	4691      	mov	r9, r2
 8007714:	4680      	mov	r8, r0
 8007716:	460c      	mov	r4, r1
 8007718:	469a      	mov	sl, r3
 800771a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800771e:	d807      	bhi.n	8007730 <_printf_i+0x28>
 8007720:	2f62      	cmp	r7, #98	; 0x62
 8007722:	d80a      	bhi.n	800773a <_printf_i+0x32>
 8007724:	2f00      	cmp	r7, #0
 8007726:	f000 80d8 	beq.w	80078da <_printf_i+0x1d2>
 800772a:	2f58      	cmp	r7, #88	; 0x58
 800772c:	f000 80a3 	beq.w	8007876 <_printf_i+0x16e>
 8007730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007738:	e03a      	b.n	80077b0 <_printf_i+0xa8>
 800773a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800773e:	2b15      	cmp	r3, #21
 8007740:	d8f6      	bhi.n	8007730 <_printf_i+0x28>
 8007742:	a101      	add	r1, pc, #4	; (adr r1, 8007748 <_printf_i+0x40>)
 8007744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007748:	080077a1 	.word	0x080077a1
 800774c:	080077b5 	.word	0x080077b5
 8007750:	08007731 	.word	0x08007731
 8007754:	08007731 	.word	0x08007731
 8007758:	08007731 	.word	0x08007731
 800775c:	08007731 	.word	0x08007731
 8007760:	080077b5 	.word	0x080077b5
 8007764:	08007731 	.word	0x08007731
 8007768:	08007731 	.word	0x08007731
 800776c:	08007731 	.word	0x08007731
 8007770:	08007731 	.word	0x08007731
 8007774:	080078c1 	.word	0x080078c1
 8007778:	080077e5 	.word	0x080077e5
 800777c:	080078a3 	.word	0x080078a3
 8007780:	08007731 	.word	0x08007731
 8007784:	08007731 	.word	0x08007731
 8007788:	080078e3 	.word	0x080078e3
 800778c:	08007731 	.word	0x08007731
 8007790:	080077e5 	.word	0x080077e5
 8007794:	08007731 	.word	0x08007731
 8007798:	08007731 	.word	0x08007731
 800779c:	080078ab 	.word	0x080078ab
 80077a0:	682b      	ldr	r3, [r5, #0]
 80077a2:	1d1a      	adds	r2, r3, #4
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	602a      	str	r2, [r5, #0]
 80077a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077b0:	2301      	movs	r3, #1
 80077b2:	e0a3      	b.n	80078fc <_printf_i+0x1f4>
 80077b4:	6820      	ldr	r0, [r4, #0]
 80077b6:	6829      	ldr	r1, [r5, #0]
 80077b8:	0606      	lsls	r6, r0, #24
 80077ba:	f101 0304 	add.w	r3, r1, #4
 80077be:	d50a      	bpl.n	80077d6 <_printf_i+0xce>
 80077c0:	680e      	ldr	r6, [r1, #0]
 80077c2:	602b      	str	r3, [r5, #0]
 80077c4:	2e00      	cmp	r6, #0
 80077c6:	da03      	bge.n	80077d0 <_printf_i+0xc8>
 80077c8:	232d      	movs	r3, #45	; 0x2d
 80077ca:	4276      	negs	r6, r6
 80077cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d0:	485e      	ldr	r0, [pc, #376]	; (800794c <_printf_i+0x244>)
 80077d2:	230a      	movs	r3, #10
 80077d4:	e019      	b.n	800780a <_printf_i+0x102>
 80077d6:	680e      	ldr	r6, [r1, #0]
 80077d8:	602b      	str	r3, [r5, #0]
 80077da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077de:	bf18      	it	ne
 80077e0:	b236      	sxthne	r6, r6
 80077e2:	e7ef      	b.n	80077c4 <_printf_i+0xbc>
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	6820      	ldr	r0, [r4, #0]
 80077e8:	1d19      	adds	r1, r3, #4
 80077ea:	6029      	str	r1, [r5, #0]
 80077ec:	0601      	lsls	r1, r0, #24
 80077ee:	d501      	bpl.n	80077f4 <_printf_i+0xec>
 80077f0:	681e      	ldr	r6, [r3, #0]
 80077f2:	e002      	b.n	80077fa <_printf_i+0xf2>
 80077f4:	0646      	lsls	r6, r0, #25
 80077f6:	d5fb      	bpl.n	80077f0 <_printf_i+0xe8>
 80077f8:	881e      	ldrh	r6, [r3, #0]
 80077fa:	4854      	ldr	r0, [pc, #336]	; (800794c <_printf_i+0x244>)
 80077fc:	2f6f      	cmp	r7, #111	; 0x6f
 80077fe:	bf0c      	ite	eq
 8007800:	2308      	moveq	r3, #8
 8007802:	230a      	movne	r3, #10
 8007804:	2100      	movs	r1, #0
 8007806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800780a:	6865      	ldr	r5, [r4, #4]
 800780c:	60a5      	str	r5, [r4, #8]
 800780e:	2d00      	cmp	r5, #0
 8007810:	bfa2      	ittt	ge
 8007812:	6821      	ldrge	r1, [r4, #0]
 8007814:	f021 0104 	bicge.w	r1, r1, #4
 8007818:	6021      	strge	r1, [r4, #0]
 800781a:	b90e      	cbnz	r6, 8007820 <_printf_i+0x118>
 800781c:	2d00      	cmp	r5, #0
 800781e:	d04d      	beq.n	80078bc <_printf_i+0x1b4>
 8007820:	4615      	mov	r5, r2
 8007822:	fbb6 f1f3 	udiv	r1, r6, r3
 8007826:	fb03 6711 	mls	r7, r3, r1, r6
 800782a:	5dc7      	ldrb	r7, [r0, r7]
 800782c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007830:	4637      	mov	r7, r6
 8007832:	42bb      	cmp	r3, r7
 8007834:	460e      	mov	r6, r1
 8007836:	d9f4      	bls.n	8007822 <_printf_i+0x11a>
 8007838:	2b08      	cmp	r3, #8
 800783a:	d10b      	bne.n	8007854 <_printf_i+0x14c>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	07de      	lsls	r6, r3, #31
 8007840:	d508      	bpl.n	8007854 <_printf_i+0x14c>
 8007842:	6923      	ldr	r3, [r4, #16]
 8007844:	6861      	ldr	r1, [r4, #4]
 8007846:	4299      	cmp	r1, r3
 8007848:	bfde      	ittt	le
 800784a:	2330      	movle	r3, #48	; 0x30
 800784c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007850:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007854:	1b52      	subs	r2, r2, r5
 8007856:	6122      	str	r2, [r4, #16]
 8007858:	f8cd a000 	str.w	sl, [sp]
 800785c:	464b      	mov	r3, r9
 800785e:	aa03      	add	r2, sp, #12
 8007860:	4621      	mov	r1, r4
 8007862:	4640      	mov	r0, r8
 8007864:	f7ff fee2 	bl	800762c <_printf_common>
 8007868:	3001      	adds	r0, #1
 800786a:	d14c      	bne.n	8007906 <_printf_i+0x1fe>
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	b004      	add	sp, #16
 8007872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007876:	4835      	ldr	r0, [pc, #212]	; (800794c <_printf_i+0x244>)
 8007878:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800787c:	6829      	ldr	r1, [r5, #0]
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	f851 6b04 	ldr.w	r6, [r1], #4
 8007884:	6029      	str	r1, [r5, #0]
 8007886:	061d      	lsls	r5, r3, #24
 8007888:	d514      	bpl.n	80078b4 <_printf_i+0x1ac>
 800788a:	07df      	lsls	r7, r3, #31
 800788c:	bf44      	itt	mi
 800788e:	f043 0320 	orrmi.w	r3, r3, #32
 8007892:	6023      	strmi	r3, [r4, #0]
 8007894:	b91e      	cbnz	r6, 800789e <_printf_i+0x196>
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	f023 0320 	bic.w	r3, r3, #32
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	2310      	movs	r3, #16
 80078a0:	e7b0      	b.n	8007804 <_printf_i+0xfc>
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	f043 0320 	orr.w	r3, r3, #32
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	2378      	movs	r3, #120	; 0x78
 80078ac:	4828      	ldr	r0, [pc, #160]	; (8007950 <_printf_i+0x248>)
 80078ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078b2:	e7e3      	b.n	800787c <_printf_i+0x174>
 80078b4:	0659      	lsls	r1, r3, #25
 80078b6:	bf48      	it	mi
 80078b8:	b2b6      	uxthmi	r6, r6
 80078ba:	e7e6      	b.n	800788a <_printf_i+0x182>
 80078bc:	4615      	mov	r5, r2
 80078be:	e7bb      	b.n	8007838 <_printf_i+0x130>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	6826      	ldr	r6, [r4, #0]
 80078c4:	6961      	ldr	r1, [r4, #20]
 80078c6:	1d18      	adds	r0, r3, #4
 80078c8:	6028      	str	r0, [r5, #0]
 80078ca:	0635      	lsls	r5, r6, #24
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	d501      	bpl.n	80078d4 <_printf_i+0x1cc>
 80078d0:	6019      	str	r1, [r3, #0]
 80078d2:	e002      	b.n	80078da <_printf_i+0x1d2>
 80078d4:	0670      	lsls	r0, r6, #25
 80078d6:	d5fb      	bpl.n	80078d0 <_printf_i+0x1c8>
 80078d8:	8019      	strh	r1, [r3, #0]
 80078da:	2300      	movs	r3, #0
 80078dc:	6123      	str	r3, [r4, #16]
 80078de:	4615      	mov	r5, r2
 80078e0:	e7ba      	b.n	8007858 <_printf_i+0x150>
 80078e2:	682b      	ldr	r3, [r5, #0]
 80078e4:	1d1a      	adds	r2, r3, #4
 80078e6:	602a      	str	r2, [r5, #0]
 80078e8:	681d      	ldr	r5, [r3, #0]
 80078ea:	6862      	ldr	r2, [r4, #4]
 80078ec:	2100      	movs	r1, #0
 80078ee:	4628      	mov	r0, r5
 80078f0:	f7f8 fcc6 	bl	8000280 <memchr>
 80078f4:	b108      	cbz	r0, 80078fa <_printf_i+0x1f2>
 80078f6:	1b40      	subs	r0, r0, r5
 80078f8:	6060      	str	r0, [r4, #4]
 80078fa:	6863      	ldr	r3, [r4, #4]
 80078fc:	6123      	str	r3, [r4, #16]
 80078fe:	2300      	movs	r3, #0
 8007900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007904:	e7a8      	b.n	8007858 <_printf_i+0x150>
 8007906:	6923      	ldr	r3, [r4, #16]
 8007908:	462a      	mov	r2, r5
 800790a:	4649      	mov	r1, r9
 800790c:	4640      	mov	r0, r8
 800790e:	47d0      	blx	sl
 8007910:	3001      	adds	r0, #1
 8007912:	d0ab      	beq.n	800786c <_printf_i+0x164>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	079b      	lsls	r3, r3, #30
 8007918:	d413      	bmi.n	8007942 <_printf_i+0x23a>
 800791a:	68e0      	ldr	r0, [r4, #12]
 800791c:	9b03      	ldr	r3, [sp, #12]
 800791e:	4298      	cmp	r0, r3
 8007920:	bfb8      	it	lt
 8007922:	4618      	movlt	r0, r3
 8007924:	e7a4      	b.n	8007870 <_printf_i+0x168>
 8007926:	2301      	movs	r3, #1
 8007928:	4632      	mov	r2, r6
 800792a:	4649      	mov	r1, r9
 800792c:	4640      	mov	r0, r8
 800792e:	47d0      	blx	sl
 8007930:	3001      	adds	r0, #1
 8007932:	d09b      	beq.n	800786c <_printf_i+0x164>
 8007934:	3501      	adds	r5, #1
 8007936:	68e3      	ldr	r3, [r4, #12]
 8007938:	9903      	ldr	r1, [sp, #12]
 800793a:	1a5b      	subs	r3, r3, r1
 800793c:	42ab      	cmp	r3, r5
 800793e:	dcf2      	bgt.n	8007926 <_printf_i+0x21e>
 8007940:	e7eb      	b.n	800791a <_printf_i+0x212>
 8007942:	2500      	movs	r5, #0
 8007944:	f104 0619 	add.w	r6, r4, #25
 8007948:	e7f5      	b.n	8007936 <_printf_i+0x22e>
 800794a:	bf00      	nop
 800794c:	080080f1 	.word	0x080080f1
 8007950:	08008102 	.word	0x08008102

08007954 <_sbrk_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	4d06      	ldr	r5, [pc, #24]	; (8007970 <_sbrk_r+0x1c>)
 8007958:	2300      	movs	r3, #0
 800795a:	4604      	mov	r4, r0
 800795c:	4608      	mov	r0, r1
 800795e:	602b      	str	r3, [r5, #0]
 8007960:	f7f9 fa40 	bl	8000de4 <_sbrk>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	d102      	bne.n	800796e <_sbrk_r+0x1a>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	b103      	cbz	r3, 800796e <_sbrk_r+0x1a>
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	bd38      	pop	{r3, r4, r5, pc}
 8007970:	20013928 	.word	0x20013928

08007974 <__sread>:
 8007974:	b510      	push	{r4, lr}
 8007976:	460c      	mov	r4, r1
 8007978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800797c:	f000 faa0 	bl	8007ec0 <_read_r>
 8007980:	2800      	cmp	r0, #0
 8007982:	bfab      	itete	ge
 8007984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007986:	89a3      	ldrhlt	r3, [r4, #12]
 8007988:	181b      	addge	r3, r3, r0
 800798a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800798e:	bfac      	ite	ge
 8007990:	6563      	strge	r3, [r4, #84]	; 0x54
 8007992:	81a3      	strhlt	r3, [r4, #12]
 8007994:	bd10      	pop	{r4, pc}

08007996 <__swrite>:
 8007996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799a:	461f      	mov	r7, r3
 800799c:	898b      	ldrh	r3, [r1, #12]
 800799e:	05db      	lsls	r3, r3, #23
 80079a0:	4605      	mov	r5, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	4616      	mov	r6, r2
 80079a6:	d505      	bpl.n	80079b4 <__swrite+0x1e>
 80079a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ac:	2302      	movs	r3, #2
 80079ae:	2200      	movs	r2, #0
 80079b0:	f000 f9b6 	bl	8007d20 <_lseek_r>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	4632      	mov	r2, r6
 80079c2:	463b      	mov	r3, r7
 80079c4:	4628      	mov	r0, r5
 80079c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	f7ff bacf 	b.w	8006f6c <_write_r>

080079ce <__sseek>:
 80079ce:	b510      	push	{r4, lr}
 80079d0:	460c      	mov	r4, r1
 80079d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d6:	f000 f9a3 	bl	8007d20 <_lseek_r>
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	bf15      	itete	ne
 80079e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80079e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079ea:	81a3      	strheq	r3, [r4, #12]
 80079ec:	bf18      	it	ne
 80079ee:	81a3      	strhne	r3, [r4, #12]
 80079f0:	bd10      	pop	{r4, pc}

080079f2 <__sclose>:
 80079f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f6:	f000 b8c1 	b.w	8007b7c <_close_r>
	...

080079fc <__swbuf_r>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	460e      	mov	r6, r1
 8007a00:	4614      	mov	r4, r2
 8007a02:	4605      	mov	r5, r0
 8007a04:	b118      	cbz	r0, 8007a0e <__swbuf_r+0x12>
 8007a06:	6983      	ldr	r3, [r0, #24]
 8007a08:	b90b      	cbnz	r3, 8007a0e <__swbuf_r+0x12>
 8007a0a:	f7ff fb81 	bl	8007110 <__sinit>
 8007a0e:	4b21      	ldr	r3, [pc, #132]	; (8007a94 <__swbuf_r+0x98>)
 8007a10:	429c      	cmp	r4, r3
 8007a12:	d12b      	bne.n	8007a6c <__swbuf_r+0x70>
 8007a14:	686c      	ldr	r4, [r5, #4]
 8007a16:	69a3      	ldr	r3, [r4, #24]
 8007a18:	60a3      	str	r3, [r4, #8]
 8007a1a:	89a3      	ldrh	r3, [r4, #12]
 8007a1c:	071a      	lsls	r2, r3, #28
 8007a1e:	d52f      	bpl.n	8007a80 <__swbuf_r+0x84>
 8007a20:	6923      	ldr	r3, [r4, #16]
 8007a22:	b36b      	cbz	r3, 8007a80 <__swbuf_r+0x84>
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	6820      	ldr	r0, [r4, #0]
 8007a28:	1ac0      	subs	r0, r0, r3
 8007a2a:	6963      	ldr	r3, [r4, #20]
 8007a2c:	b2f6      	uxtb	r6, r6
 8007a2e:	4283      	cmp	r3, r0
 8007a30:	4637      	mov	r7, r6
 8007a32:	dc04      	bgt.n	8007a3e <__swbuf_r+0x42>
 8007a34:	4621      	mov	r1, r4
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 f936 	bl	8007ca8 <_fflush_r>
 8007a3c:	bb30      	cbnz	r0, 8007a8c <__swbuf_r+0x90>
 8007a3e:	68a3      	ldr	r3, [r4, #8]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	60a3      	str	r3, [r4, #8]
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	6022      	str	r2, [r4, #0]
 8007a4a:	701e      	strb	r6, [r3, #0]
 8007a4c:	6963      	ldr	r3, [r4, #20]
 8007a4e:	3001      	adds	r0, #1
 8007a50:	4283      	cmp	r3, r0
 8007a52:	d004      	beq.n	8007a5e <__swbuf_r+0x62>
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	07db      	lsls	r3, r3, #31
 8007a58:	d506      	bpl.n	8007a68 <__swbuf_r+0x6c>
 8007a5a:	2e0a      	cmp	r6, #10
 8007a5c:	d104      	bne.n	8007a68 <__swbuf_r+0x6c>
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4628      	mov	r0, r5
 8007a62:	f000 f921 	bl	8007ca8 <_fflush_r>
 8007a66:	b988      	cbnz	r0, 8007a8c <__swbuf_r+0x90>
 8007a68:	4638      	mov	r0, r7
 8007a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <__swbuf_r+0x9c>)
 8007a6e:	429c      	cmp	r4, r3
 8007a70:	d101      	bne.n	8007a76 <__swbuf_r+0x7a>
 8007a72:	68ac      	ldr	r4, [r5, #8]
 8007a74:	e7cf      	b.n	8007a16 <__swbuf_r+0x1a>
 8007a76:	4b09      	ldr	r3, [pc, #36]	; (8007a9c <__swbuf_r+0xa0>)
 8007a78:	429c      	cmp	r4, r3
 8007a7a:	bf08      	it	eq
 8007a7c:	68ec      	ldreq	r4, [r5, #12]
 8007a7e:	e7ca      	b.n	8007a16 <__swbuf_r+0x1a>
 8007a80:	4621      	mov	r1, r4
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 f80c 	bl	8007aa0 <__swsetup_r>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d0cb      	beq.n	8007a24 <__swbuf_r+0x28>
 8007a8c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a90:	e7ea      	b.n	8007a68 <__swbuf_r+0x6c>
 8007a92:	bf00      	nop
 8007a94:	080080a0 	.word	0x080080a0
 8007a98:	080080c0 	.word	0x080080c0
 8007a9c:	08008080 	.word	0x08008080

08007aa0 <__swsetup_r>:
 8007aa0:	4b32      	ldr	r3, [pc, #200]	; (8007b6c <__swsetup_r+0xcc>)
 8007aa2:	b570      	push	{r4, r5, r6, lr}
 8007aa4:	681d      	ldr	r5, [r3, #0]
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	b125      	cbz	r5, 8007ab6 <__swsetup_r+0x16>
 8007aac:	69ab      	ldr	r3, [r5, #24]
 8007aae:	b913      	cbnz	r3, 8007ab6 <__swsetup_r+0x16>
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f7ff fb2d 	bl	8007110 <__sinit>
 8007ab6:	4b2e      	ldr	r3, [pc, #184]	; (8007b70 <__swsetup_r+0xd0>)
 8007ab8:	429c      	cmp	r4, r3
 8007aba:	d10f      	bne.n	8007adc <__swsetup_r+0x3c>
 8007abc:	686c      	ldr	r4, [r5, #4]
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ac4:	0719      	lsls	r1, r3, #28
 8007ac6:	d42c      	bmi.n	8007b22 <__swsetup_r+0x82>
 8007ac8:	06dd      	lsls	r5, r3, #27
 8007aca:	d411      	bmi.n	8007af0 <__swsetup_r+0x50>
 8007acc:	2309      	movs	r3, #9
 8007ace:	6033      	str	r3, [r6, #0]
 8007ad0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ad4:	81a3      	strh	r3, [r4, #12]
 8007ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ada:	e03e      	b.n	8007b5a <__swsetup_r+0xba>
 8007adc:	4b25      	ldr	r3, [pc, #148]	; (8007b74 <__swsetup_r+0xd4>)
 8007ade:	429c      	cmp	r4, r3
 8007ae0:	d101      	bne.n	8007ae6 <__swsetup_r+0x46>
 8007ae2:	68ac      	ldr	r4, [r5, #8]
 8007ae4:	e7eb      	b.n	8007abe <__swsetup_r+0x1e>
 8007ae6:	4b24      	ldr	r3, [pc, #144]	; (8007b78 <__swsetup_r+0xd8>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	bf08      	it	eq
 8007aec:	68ec      	ldreq	r4, [r5, #12]
 8007aee:	e7e6      	b.n	8007abe <__swsetup_r+0x1e>
 8007af0:	0758      	lsls	r0, r3, #29
 8007af2:	d512      	bpl.n	8007b1a <__swsetup_r+0x7a>
 8007af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007af6:	b141      	cbz	r1, 8007b0a <__swsetup_r+0x6a>
 8007af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007afc:	4299      	cmp	r1, r3
 8007afe:	d002      	beq.n	8007b06 <__swsetup_r+0x66>
 8007b00:	4630      	mov	r0, r6
 8007b02:	f000 f991 	bl	8007e28 <_free_r>
 8007b06:	2300      	movs	r3, #0
 8007b08:	6363      	str	r3, [r4, #52]	; 0x34
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b10:	81a3      	strh	r3, [r4, #12]
 8007b12:	2300      	movs	r3, #0
 8007b14:	6063      	str	r3, [r4, #4]
 8007b16:	6923      	ldr	r3, [r4, #16]
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	f043 0308 	orr.w	r3, r3, #8
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	6923      	ldr	r3, [r4, #16]
 8007b24:	b94b      	cbnz	r3, 8007b3a <__swsetup_r+0x9a>
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b30:	d003      	beq.n	8007b3a <__swsetup_r+0x9a>
 8007b32:	4621      	mov	r1, r4
 8007b34:	4630      	mov	r0, r6
 8007b36:	f000 f92b 	bl	8007d90 <__smakebuf_r>
 8007b3a:	89a0      	ldrh	r0, [r4, #12]
 8007b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b40:	f010 0301 	ands.w	r3, r0, #1
 8007b44:	d00a      	beq.n	8007b5c <__swsetup_r+0xbc>
 8007b46:	2300      	movs	r3, #0
 8007b48:	60a3      	str	r3, [r4, #8]
 8007b4a:	6963      	ldr	r3, [r4, #20]
 8007b4c:	425b      	negs	r3, r3
 8007b4e:	61a3      	str	r3, [r4, #24]
 8007b50:	6923      	ldr	r3, [r4, #16]
 8007b52:	b943      	cbnz	r3, 8007b66 <__swsetup_r+0xc6>
 8007b54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b58:	d1ba      	bne.n	8007ad0 <__swsetup_r+0x30>
 8007b5a:	bd70      	pop	{r4, r5, r6, pc}
 8007b5c:	0781      	lsls	r1, r0, #30
 8007b5e:	bf58      	it	pl
 8007b60:	6963      	ldrpl	r3, [r4, #20]
 8007b62:	60a3      	str	r3, [r4, #8]
 8007b64:	e7f4      	b.n	8007b50 <__swsetup_r+0xb0>
 8007b66:	2000      	movs	r0, #0
 8007b68:	e7f7      	b.n	8007b5a <__swsetup_r+0xba>
 8007b6a:	bf00      	nop
 8007b6c:	2000001c 	.word	0x2000001c
 8007b70:	080080a0 	.word	0x080080a0
 8007b74:	080080c0 	.word	0x080080c0
 8007b78:	08008080 	.word	0x08008080

08007b7c <_close_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d06      	ldr	r5, [pc, #24]	; (8007b98 <_close_r+0x1c>)
 8007b80:	2300      	movs	r3, #0
 8007b82:	4604      	mov	r4, r0
 8007b84:	4608      	mov	r0, r1
 8007b86:	602b      	str	r3, [r5, #0]
 8007b88:	f7f9 f8f7 	bl	8000d7a <_close>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d102      	bne.n	8007b96 <_close_r+0x1a>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	b103      	cbz	r3, 8007b96 <_close_r+0x1a>
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	bd38      	pop	{r3, r4, r5, pc}
 8007b98:	20013928 	.word	0x20013928

08007b9c <__sflush_r>:
 8007b9c:	898a      	ldrh	r2, [r1, #12]
 8007b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	0710      	lsls	r0, r2, #28
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	d458      	bmi.n	8007c5c <__sflush_r+0xc0>
 8007baa:	684b      	ldr	r3, [r1, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dc05      	bgt.n	8007bbc <__sflush_r+0x20>
 8007bb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	dc02      	bgt.n	8007bbc <__sflush_r+0x20>
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bbe:	2e00      	cmp	r6, #0
 8007bc0:	d0f9      	beq.n	8007bb6 <__sflush_r+0x1a>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bc8:	682f      	ldr	r7, [r5, #0]
 8007bca:	602b      	str	r3, [r5, #0]
 8007bcc:	d032      	beq.n	8007c34 <__sflush_r+0x98>
 8007bce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	075a      	lsls	r2, r3, #29
 8007bd4:	d505      	bpl.n	8007be2 <__sflush_r+0x46>
 8007bd6:	6863      	ldr	r3, [r4, #4]
 8007bd8:	1ac0      	subs	r0, r0, r3
 8007bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bdc:	b10b      	cbz	r3, 8007be2 <__sflush_r+0x46>
 8007bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007be0:	1ac0      	subs	r0, r0, r3
 8007be2:	2300      	movs	r3, #0
 8007be4:	4602      	mov	r2, r0
 8007be6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007be8:	6a21      	ldr	r1, [r4, #32]
 8007bea:	4628      	mov	r0, r5
 8007bec:	47b0      	blx	r6
 8007bee:	1c43      	adds	r3, r0, #1
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	d106      	bne.n	8007c02 <__sflush_r+0x66>
 8007bf4:	6829      	ldr	r1, [r5, #0]
 8007bf6:	291d      	cmp	r1, #29
 8007bf8:	d82c      	bhi.n	8007c54 <__sflush_r+0xb8>
 8007bfa:	4a2a      	ldr	r2, [pc, #168]	; (8007ca4 <__sflush_r+0x108>)
 8007bfc:	40ca      	lsrs	r2, r1
 8007bfe:	07d6      	lsls	r6, r2, #31
 8007c00:	d528      	bpl.n	8007c54 <__sflush_r+0xb8>
 8007c02:	2200      	movs	r2, #0
 8007c04:	6062      	str	r2, [r4, #4]
 8007c06:	04d9      	lsls	r1, r3, #19
 8007c08:	6922      	ldr	r2, [r4, #16]
 8007c0a:	6022      	str	r2, [r4, #0]
 8007c0c:	d504      	bpl.n	8007c18 <__sflush_r+0x7c>
 8007c0e:	1c42      	adds	r2, r0, #1
 8007c10:	d101      	bne.n	8007c16 <__sflush_r+0x7a>
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	b903      	cbnz	r3, 8007c18 <__sflush_r+0x7c>
 8007c16:	6560      	str	r0, [r4, #84]	; 0x54
 8007c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c1a:	602f      	str	r7, [r5, #0]
 8007c1c:	2900      	cmp	r1, #0
 8007c1e:	d0ca      	beq.n	8007bb6 <__sflush_r+0x1a>
 8007c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c24:	4299      	cmp	r1, r3
 8007c26:	d002      	beq.n	8007c2e <__sflush_r+0x92>
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 f8fd 	bl	8007e28 <_free_r>
 8007c2e:	2000      	movs	r0, #0
 8007c30:	6360      	str	r0, [r4, #52]	; 0x34
 8007c32:	e7c1      	b.n	8007bb8 <__sflush_r+0x1c>
 8007c34:	6a21      	ldr	r1, [r4, #32]
 8007c36:	2301      	movs	r3, #1
 8007c38:	4628      	mov	r0, r5
 8007c3a:	47b0      	blx	r6
 8007c3c:	1c41      	adds	r1, r0, #1
 8007c3e:	d1c7      	bne.n	8007bd0 <__sflush_r+0x34>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0c4      	beq.n	8007bd0 <__sflush_r+0x34>
 8007c46:	2b1d      	cmp	r3, #29
 8007c48:	d001      	beq.n	8007c4e <__sflush_r+0xb2>
 8007c4a:	2b16      	cmp	r3, #22
 8007c4c:	d101      	bne.n	8007c52 <__sflush_r+0xb6>
 8007c4e:	602f      	str	r7, [r5, #0]
 8007c50:	e7b1      	b.n	8007bb6 <__sflush_r+0x1a>
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c58:	81a3      	strh	r3, [r4, #12]
 8007c5a:	e7ad      	b.n	8007bb8 <__sflush_r+0x1c>
 8007c5c:	690f      	ldr	r7, [r1, #16]
 8007c5e:	2f00      	cmp	r7, #0
 8007c60:	d0a9      	beq.n	8007bb6 <__sflush_r+0x1a>
 8007c62:	0793      	lsls	r3, r2, #30
 8007c64:	680e      	ldr	r6, [r1, #0]
 8007c66:	bf08      	it	eq
 8007c68:	694b      	ldreq	r3, [r1, #20]
 8007c6a:	600f      	str	r7, [r1, #0]
 8007c6c:	bf18      	it	ne
 8007c6e:	2300      	movne	r3, #0
 8007c70:	eba6 0807 	sub.w	r8, r6, r7
 8007c74:	608b      	str	r3, [r1, #8]
 8007c76:	f1b8 0f00 	cmp.w	r8, #0
 8007c7a:	dd9c      	ble.n	8007bb6 <__sflush_r+0x1a>
 8007c7c:	6a21      	ldr	r1, [r4, #32]
 8007c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c80:	4643      	mov	r3, r8
 8007c82:	463a      	mov	r2, r7
 8007c84:	4628      	mov	r0, r5
 8007c86:	47b0      	blx	r6
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	dc06      	bgt.n	8007c9a <__sflush_r+0xfe>
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	e78e      	b.n	8007bb8 <__sflush_r+0x1c>
 8007c9a:	4407      	add	r7, r0
 8007c9c:	eba8 0800 	sub.w	r8, r8, r0
 8007ca0:	e7e9      	b.n	8007c76 <__sflush_r+0xda>
 8007ca2:	bf00      	nop
 8007ca4:	20400001 	.word	0x20400001

08007ca8 <_fflush_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	690b      	ldr	r3, [r1, #16]
 8007cac:	4605      	mov	r5, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	b913      	cbnz	r3, 8007cb8 <_fflush_r+0x10>
 8007cb2:	2500      	movs	r5, #0
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	b118      	cbz	r0, 8007cc2 <_fflush_r+0x1a>
 8007cba:	6983      	ldr	r3, [r0, #24]
 8007cbc:	b90b      	cbnz	r3, 8007cc2 <_fflush_r+0x1a>
 8007cbe:	f7ff fa27 	bl	8007110 <__sinit>
 8007cc2:	4b14      	ldr	r3, [pc, #80]	; (8007d14 <_fflush_r+0x6c>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	d11b      	bne.n	8007d00 <_fflush_r+0x58>
 8007cc8:	686c      	ldr	r4, [r5, #4]
 8007cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0ef      	beq.n	8007cb2 <_fflush_r+0xa>
 8007cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cd4:	07d0      	lsls	r0, r2, #31
 8007cd6:	d404      	bmi.n	8007ce2 <_fflush_r+0x3a>
 8007cd8:	0599      	lsls	r1, r3, #22
 8007cda:	d402      	bmi.n	8007ce2 <_fflush_r+0x3a>
 8007cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cde:	f7ff fab5 	bl	800724c <__retarget_lock_acquire_recursive>
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	f7ff ff59 	bl	8007b9c <__sflush_r>
 8007cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cec:	07da      	lsls	r2, r3, #31
 8007cee:	4605      	mov	r5, r0
 8007cf0:	d4e0      	bmi.n	8007cb4 <_fflush_r+0xc>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	059b      	lsls	r3, r3, #22
 8007cf6:	d4dd      	bmi.n	8007cb4 <_fflush_r+0xc>
 8007cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cfa:	f7ff faa8 	bl	800724e <__retarget_lock_release_recursive>
 8007cfe:	e7d9      	b.n	8007cb4 <_fflush_r+0xc>
 8007d00:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <_fflush_r+0x70>)
 8007d02:	429c      	cmp	r4, r3
 8007d04:	d101      	bne.n	8007d0a <_fflush_r+0x62>
 8007d06:	68ac      	ldr	r4, [r5, #8]
 8007d08:	e7df      	b.n	8007cca <_fflush_r+0x22>
 8007d0a:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <_fflush_r+0x74>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	bf08      	it	eq
 8007d10:	68ec      	ldreq	r4, [r5, #12]
 8007d12:	e7da      	b.n	8007cca <_fflush_r+0x22>
 8007d14:	080080a0 	.word	0x080080a0
 8007d18:	080080c0 	.word	0x080080c0
 8007d1c:	08008080 	.word	0x08008080

08007d20 <_lseek_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	4d07      	ldr	r5, [pc, #28]	; (8007d40 <_lseek_r+0x20>)
 8007d24:	4604      	mov	r4, r0
 8007d26:	4608      	mov	r0, r1
 8007d28:	4611      	mov	r1, r2
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	602a      	str	r2, [r5, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f7f9 f84a 	bl	8000dc8 <_lseek>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_lseek_r+0x1e>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_lseek_r+0x1e>
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	20013928 	.word	0x20013928

08007d44 <__swhatbuf_r>:
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	460e      	mov	r6, r1
 8007d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d4c:	2900      	cmp	r1, #0
 8007d4e:	b096      	sub	sp, #88	; 0x58
 8007d50:	4614      	mov	r4, r2
 8007d52:	461d      	mov	r5, r3
 8007d54:	da08      	bge.n	8007d68 <__swhatbuf_r+0x24>
 8007d56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	602a      	str	r2, [r5, #0]
 8007d5e:	061a      	lsls	r2, r3, #24
 8007d60:	d410      	bmi.n	8007d84 <__swhatbuf_r+0x40>
 8007d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d66:	e00e      	b.n	8007d86 <__swhatbuf_r+0x42>
 8007d68:	466a      	mov	r2, sp
 8007d6a:	f000 f8bb 	bl	8007ee4 <_fstat_r>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	dbf1      	blt.n	8007d56 <__swhatbuf_r+0x12>
 8007d72:	9a01      	ldr	r2, [sp, #4]
 8007d74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d7c:	425a      	negs	r2, r3
 8007d7e:	415a      	adcs	r2, r3
 8007d80:	602a      	str	r2, [r5, #0]
 8007d82:	e7ee      	b.n	8007d62 <__swhatbuf_r+0x1e>
 8007d84:	2340      	movs	r3, #64	; 0x40
 8007d86:	2000      	movs	r0, #0
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	b016      	add	sp, #88	; 0x58
 8007d8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d90 <__smakebuf_r>:
 8007d90:	898b      	ldrh	r3, [r1, #12]
 8007d92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d94:	079d      	lsls	r5, r3, #30
 8007d96:	4606      	mov	r6, r0
 8007d98:	460c      	mov	r4, r1
 8007d9a:	d507      	bpl.n	8007dac <__smakebuf_r+0x1c>
 8007d9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	6123      	str	r3, [r4, #16]
 8007da4:	2301      	movs	r3, #1
 8007da6:	6163      	str	r3, [r4, #20]
 8007da8:	b002      	add	sp, #8
 8007daa:	bd70      	pop	{r4, r5, r6, pc}
 8007dac:	ab01      	add	r3, sp, #4
 8007dae:	466a      	mov	r2, sp
 8007db0:	f7ff ffc8 	bl	8007d44 <__swhatbuf_r>
 8007db4:	9900      	ldr	r1, [sp, #0]
 8007db6:	4605      	mov	r5, r0
 8007db8:	4630      	mov	r0, r6
 8007dba:	f7ff fa69 	bl	8007290 <_malloc_r>
 8007dbe:	b948      	cbnz	r0, 8007dd4 <__smakebuf_r+0x44>
 8007dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dc4:	059a      	lsls	r2, r3, #22
 8007dc6:	d4ef      	bmi.n	8007da8 <__smakebuf_r+0x18>
 8007dc8:	f023 0303 	bic.w	r3, r3, #3
 8007dcc:	f043 0302 	orr.w	r3, r3, #2
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	e7e3      	b.n	8007d9c <__smakebuf_r+0xc>
 8007dd4:	4b0d      	ldr	r3, [pc, #52]	; (8007e0c <__smakebuf_r+0x7c>)
 8007dd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	6020      	str	r0, [r4, #0]
 8007ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	9b00      	ldr	r3, [sp, #0]
 8007de4:	6163      	str	r3, [r4, #20]
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	6120      	str	r0, [r4, #16]
 8007dea:	b15b      	cbz	r3, 8007e04 <__smakebuf_r+0x74>
 8007dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007df0:	4630      	mov	r0, r6
 8007df2:	f000 f889 	bl	8007f08 <_isatty_r>
 8007df6:	b128      	cbz	r0, 8007e04 <__smakebuf_r+0x74>
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	f023 0303 	bic.w	r3, r3, #3
 8007dfe:	f043 0301 	orr.w	r3, r3, #1
 8007e02:	81a3      	strh	r3, [r4, #12]
 8007e04:	89a0      	ldrh	r0, [r4, #12]
 8007e06:	4305      	orrs	r5, r0
 8007e08:	81a5      	strh	r5, [r4, #12]
 8007e0a:	e7cd      	b.n	8007da8 <__smakebuf_r+0x18>
 8007e0c:	080070a9 	.word	0x080070a9

08007e10 <__malloc_lock>:
 8007e10:	4801      	ldr	r0, [pc, #4]	; (8007e18 <__malloc_lock+0x8>)
 8007e12:	f7ff ba1b 	b.w	800724c <__retarget_lock_acquire_recursive>
 8007e16:	bf00      	nop
 8007e18:	2001391b 	.word	0x2001391b

08007e1c <__malloc_unlock>:
 8007e1c:	4801      	ldr	r0, [pc, #4]	; (8007e24 <__malloc_unlock+0x8>)
 8007e1e:	f7ff ba16 	b.w	800724e <__retarget_lock_release_recursive>
 8007e22:	bf00      	nop
 8007e24:	2001391b 	.word	0x2001391b

08007e28 <_free_r>:
 8007e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e2a:	2900      	cmp	r1, #0
 8007e2c:	d044      	beq.n	8007eb8 <_free_r+0x90>
 8007e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e32:	9001      	str	r0, [sp, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f1a1 0404 	sub.w	r4, r1, #4
 8007e3a:	bfb8      	it	lt
 8007e3c:	18e4      	addlt	r4, r4, r3
 8007e3e:	f7ff ffe7 	bl	8007e10 <__malloc_lock>
 8007e42:	4a1e      	ldr	r2, [pc, #120]	; (8007ebc <_free_r+0x94>)
 8007e44:	9801      	ldr	r0, [sp, #4]
 8007e46:	6813      	ldr	r3, [r2, #0]
 8007e48:	b933      	cbnz	r3, 8007e58 <_free_r+0x30>
 8007e4a:	6063      	str	r3, [r4, #4]
 8007e4c:	6014      	str	r4, [r2, #0]
 8007e4e:	b003      	add	sp, #12
 8007e50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e54:	f7ff bfe2 	b.w	8007e1c <__malloc_unlock>
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	d908      	bls.n	8007e6e <_free_r+0x46>
 8007e5c:	6825      	ldr	r5, [r4, #0]
 8007e5e:	1961      	adds	r1, r4, r5
 8007e60:	428b      	cmp	r3, r1
 8007e62:	bf01      	itttt	eq
 8007e64:	6819      	ldreq	r1, [r3, #0]
 8007e66:	685b      	ldreq	r3, [r3, #4]
 8007e68:	1949      	addeq	r1, r1, r5
 8007e6a:	6021      	streq	r1, [r4, #0]
 8007e6c:	e7ed      	b.n	8007e4a <_free_r+0x22>
 8007e6e:	461a      	mov	r2, r3
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	b10b      	cbz	r3, 8007e78 <_free_r+0x50>
 8007e74:	42a3      	cmp	r3, r4
 8007e76:	d9fa      	bls.n	8007e6e <_free_r+0x46>
 8007e78:	6811      	ldr	r1, [r2, #0]
 8007e7a:	1855      	adds	r5, r2, r1
 8007e7c:	42a5      	cmp	r5, r4
 8007e7e:	d10b      	bne.n	8007e98 <_free_r+0x70>
 8007e80:	6824      	ldr	r4, [r4, #0]
 8007e82:	4421      	add	r1, r4
 8007e84:	1854      	adds	r4, r2, r1
 8007e86:	42a3      	cmp	r3, r4
 8007e88:	6011      	str	r1, [r2, #0]
 8007e8a:	d1e0      	bne.n	8007e4e <_free_r+0x26>
 8007e8c:	681c      	ldr	r4, [r3, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	6053      	str	r3, [r2, #4]
 8007e92:	4421      	add	r1, r4
 8007e94:	6011      	str	r1, [r2, #0]
 8007e96:	e7da      	b.n	8007e4e <_free_r+0x26>
 8007e98:	d902      	bls.n	8007ea0 <_free_r+0x78>
 8007e9a:	230c      	movs	r3, #12
 8007e9c:	6003      	str	r3, [r0, #0]
 8007e9e:	e7d6      	b.n	8007e4e <_free_r+0x26>
 8007ea0:	6825      	ldr	r5, [r4, #0]
 8007ea2:	1961      	adds	r1, r4, r5
 8007ea4:	428b      	cmp	r3, r1
 8007ea6:	bf04      	itt	eq
 8007ea8:	6819      	ldreq	r1, [r3, #0]
 8007eaa:	685b      	ldreq	r3, [r3, #4]
 8007eac:	6063      	str	r3, [r4, #4]
 8007eae:	bf04      	itt	eq
 8007eb0:	1949      	addeq	r1, r1, r5
 8007eb2:	6021      	streq	r1, [r4, #0]
 8007eb4:	6054      	str	r4, [r2, #4]
 8007eb6:	e7ca      	b.n	8007e4e <_free_r+0x26>
 8007eb8:	b003      	add	sp, #12
 8007eba:	bd30      	pop	{r4, r5, pc}
 8007ebc:	20013920 	.word	0x20013920

08007ec0 <_read_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d07      	ldr	r5, [pc, #28]	; (8007ee0 <_read_r+0x20>)
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	4608      	mov	r0, r1
 8007ec8:	4611      	mov	r1, r2
 8007eca:	2200      	movs	r2, #0
 8007ecc:	602a      	str	r2, [r5, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f7f8 ff36 	bl	8000d40 <_read>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d102      	bne.n	8007ede <_read_r+0x1e>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	b103      	cbz	r3, 8007ede <_read_r+0x1e>
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	bd38      	pop	{r3, r4, r5, pc}
 8007ee0:	20013928 	.word	0x20013928

08007ee4 <_fstat_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4d07      	ldr	r5, [pc, #28]	; (8007f04 <_fstat_r+0x20>)
 8007ee8:	2300      	movs	r3, #0
 8007eea:	4604      	mov	r4, r0
 8007eec:	4608      	mov	r0, r1
 8007eee:	4611      	mov	r1, r2
 8007ef0:	602b      	str	r3, [r5, #0]
 8007ef2:	f7f8 ff4e 	bl	8000d92 <_fstat>
 8007ef6:	1c43      	adds	r3, r0, #1
 8007ef8:	d102      	bne.n	8007f00 <_fstat_r+0x1c>
 8007efa:	682b      	ldr	r3, [r5, #0]
 8007efc:	b103      	cbz	r3, 8007f00 <_fstat_r+0x1c>
 8007efe:	6023      	str	r3, [r4, #0]
 8007f00:	bd38      	pop	{r3, r4, r5, pc}
 8007f02:	bf00      	nop
 8007f04:	20013928 	.word	0x20013928

08007f08 <_isatty_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4d06      	ldr	r5, [pc, #24]	; (8007f24 <_isatty_r+0x1c>)
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	4604      	mov	r4, r0
 8007f10:	4608      	mov	r0, r1
 8007f12:	602b      	str	r3, [r5, #0]
 8007f14:	f7f8 ff4d 	bl	8000db2 <_isatty>
 8007f18:	1c43      	adds	r3, r0, #1
 8007f1a:	d102      	bne.n	8007f22 <_isatty_r+0x1a>
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	b103      	cbz	r3, 8007f22 <_isatty_r+0x1a>
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	bd38      	pop	{r3, r4, r5, pc}
 8007f24:	20013928 	.word	0x20013928

08007f28 <_init>:
 8007f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2a:	bf00      	nop
 8007f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2e:	bc08      	pop	{r3}
 8007f30:	469e      	mov	lr, r3
 8007f32:	4770      	bx	lr

08007f34 <_fini>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	bf00      	nop
 8007f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3a:	bc08      	pop	{r3}
 8007f3c:	469e      	mov	lr, r3
 8007f3e:	4770      	bx	lr

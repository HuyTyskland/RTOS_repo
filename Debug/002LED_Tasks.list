
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007660  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080077f0  080077f0  000177f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079d8  080079d8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080079d8  080079d8  000179d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079e0  080079e0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079e0  080079e0  000179e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079e4  080079e4  000179e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080079e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000138a0  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200138bc  200138bc  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016127  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030d4  00000000  00000000  00036173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  00039248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001258  00000000  00000000  0003a628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d92  00000000  00000000  0003b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f99  00000000  00000000  0005f612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8e84  00000000  00000000  000755ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e42f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005320  00000000  00000000  0014e480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077d8 	.word	0x080077d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080077d8 	.word	0x080077d8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ee8 	.word	0x20012ee8

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc53 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f897 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8ff 	bl	8000778 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // enable CYCCNT counter
  DWT_CTRL |= (1 << 0);
 800057a:	4b3b      	ldr	r3, [pc, #236]	; (8000668 <main+0x100>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a3a      	ldr	r2, [pc, #232]	; (8000668 <main+0x100>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000586:	4839      	ldr	r0, [pc, #228]	; (800066c <main+0x104>)
 8000588:	f004 fe5c 	bl	8005244 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 800058c:	f004 fbc8 	bl	8004d20 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(LED_green_handler, "TASK_GREEN", 200, NULL, 3, &task_green_handle);
 8000590:	4b37      	ldr	r3, [pc, #220]	; (8000670 <main+0x108>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2303      	movs	r3, #3
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	22c8      	movs	r2, #200	; 0xc8
 800059c:	4935      	ldr	r1, [pc, #212]	; (8000674 <main+0x10c>)
 800059e:	4836      	ldr	r0, [pc, #216]	; (8000678 <main+0x110>)
 80005a0:	f002 fa76 	bl	8002a90 <xTaskCreate>
 80005a4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0x58>

  next_task_handle = task_green_handle;
 80005c2:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <main+0x108>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a2d      	ldr	r2, [pc, #180]	; (800067c <main+0x114>)
 80005c8:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(LED_orange_handler, "TASK_ORANGE", 200, NULL, 2, &task_orange_handle);
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <main+0x118>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	492b      	ldr	r1, [pc, #172]	; (8000684 <main+0x11c>)
 80005d8:	482b      	ldr	r0, [pc, #172]	; (8000688 <main+0x120>)
 80005da:	f002 fa59 	bl	8002a90 <xTaskCreate>
 80005de:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x94>
        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	60fb      	str	r3, [r7, #12]
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x92>

  status = xTaskCreate(LED_red_handler, "TASK_RED", 200, NULL, 1, &task_red_handle);
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <main+0x124>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2301      	movs	r3, #1
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	22c8      	movs	r2, #200	; 0xc8
 8000608:	4921      	ldr	r1, [pc, #132]	; (8000690 <main+0x128>)
 800060a:	4822      	ldr	r0, [pc, #136]	; (8000694 <main+0x12c>)
 800060c:	f002 fa40 	bl	8002a90 <xTaskCreate>
 8000610:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d00a      	beq.n	800062e <main+0xc6>
        __asm volatile
 8000618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061c:	f383 8811 	msr	BASEPRI, r3
 8000620:	f3bf 8f6f 	isb	sy
 8000624:	f3bf 8f4f 	dsb	sy
 8000628:	60bb      	str	r3, [r7, #8]
    }
 800062a:	bf00      	nop
 800062c:	e7fe      	b.n	800062c <main+0xc4>

  status = xTaskCreate(BTN_handler, "TASK_BTN", 200, NULL, 4, &task_btn_handle);
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <main+0x130>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2304      	movs	r3, #4
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22c8      	movs	r2, #200	; 0xc8
 800063a:	4918      	ldr	r1, [pc, #96]	; (800069c <main+0x134>)
 800063c:	4818      	ldr	r0, [pc, #96]	; (80006a0 <main+0x138>)
 800063e:	f002 fa27 	bl	8002a90 <xTaskCreate>
 8000642:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00a      	beq.n	8000660 <main+0xf8>
        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	607b      	str	r3, [r7, #4]
    }
 800065c:	bf00      	nop
 800065e:	e7fe      	b.n	800065e <main+0xf6>

  // start task scheduler
  vTaskStartScheduler();
 8000660:	f002 fc76 	bl	8002f50 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0xfc>
 8000666:	bf00      	nop
 8000668:	e0001000 	.word	0xe0001000
 800066c:	0007a120 	.word	0x0007a120
 8000670:	20000038 	.word	0x20000038
 8000674:	080077f0 	.word	0x080077f0
 8000678:	08000a35 	.word	0x08000a35
 800067c:	20000048 	.word	0x20000048
 8000680:	2000003c 	.word	0x2000003c
 8000684:	080077fc 	.word	0x080077fc
 8000688:	08000aa5 	.word	0x08000aa5
 800068c:	20000040 	.word	0x20000040
 8000690:	08007808 	.word	0x08007808
 8000694:	08000b15 	.word	0x08000b15
 8000698:	20000044 	.word	0x20000044
 800069c:	08007814 	.word	0x08007814
 80006a0:	08000b99 	.word	0x08000b99

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f007 f888 	bl	80077c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000718:	23a8      	movs	r3, #168	; 0xa8
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000720:	2307      	movs	r3, #7
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fe81 	bl	8001430 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000734:	f000 fa6a 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2105      	movs	r1, #5
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f8e2 	bl	8001920 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000762:	f000 fa53 	bl	8000c0c <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	4ba2      	ldr	r3, [pc, #648]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4aa1      	ldr	r2, [pc, #644]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b9f      	ldr	r3, [pc, #636]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	4b9b      	ldr	r3, [pc, #620]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a9a      	ldr	r2, [pc, #616]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b98      	ldr	r3, [pc, #608]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b94      	ldr	r3, [pc, #592]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a93      	ldr	r2, [pc, #588]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b91      	ldr	r3, [pc, #580]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b8d      	ldr	r3, [pc, #564]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a8c      	ldr	r2, [pc, #560]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b8a      	ldr	r3, [pc, #552]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b86      	ldr	r3, [pc, #536]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a85      	ldr	r2, [pc, #532]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b83      	ldr	r3, [pc, #524]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a7e      	ldr	r2, [pc, #504]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b7c      	ldr	r3, [pc, #496]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4879      	ldr	r0, [pc, #484]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 800083c:	f000 fdc4 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2101      	movs	r1, #1
 8000844:	4877      	ldr	r0, [pc, #476]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 8000846:	f000 fdbf 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800084a:	2200      	movs	r2, #0
 800084c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000850:	4875      	ldr	r0, [pc, #468]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 8000852:	f000 fdb9 	bl	80013c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	486c      	ldr	r0, [pc, #432]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 800086e:	f000 fbf7 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4866      	ldr	r0, [pc, #408]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 800088a:	f000 fbe9 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	485e      	ldr	r0, [pc, #376]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 80008aa:	f000 fbd9 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	485a      	ldr	r0, [pc, #360]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80008c4:	f000 fbcc 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c8:	2310      	movs	r3, #16
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d8:	2306      	movs	r3, #6
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4852      	ldr	r0, [pc, #328]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80008e4:	f000 fbbc 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008e8:	23e0      	movs	r3, #224	; 0xe0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f8:	2305      	movs	r3, #5
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	484a      	ldr	r0, [pc, #296]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fbac 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000908:	2304      	movs	r3, #4
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4845      	ldr	r0, [pc, #276]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 800091c:	f000 fba0 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000932:	2305      	movs	r3, #5
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	483c      	ldr	r0, [pc, #240]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 800093e:	f000 fb8f 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000942:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000946:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4833      	ldr	r0, [pc, #204]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 800095c:	f000 fb80 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000960:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000972:	2306      	movs	r3, #6
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4829      	ldr	r0, [pc, #164]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 800097e:	f000 fb6f 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4825      	ldr	r0, [pc, #148]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 8000998:	f000 fb62 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800099c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ae:	230a      	movs	r3, #10
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481c      	ldr	r0, [pc, #112]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80009ba:	f000 fb51 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009be:	2320      	movs	r3, #32
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4815      	ldr	r0, [pc, #84]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 80009d2:	f000 fb45 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009dc:	2312      	movs	r3, #18
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e8:	2304      	movs	r3, #4
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	480f      	ldr	r0, [pc, #60]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 80009f4:	f000 fb34 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 8000a0e:	f000 fb27 	bl	8001060 <HAL_GPIO_Init>

}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020400 	.word	0x40020400

08000a34 <LED_green_handler>:

/* USER CODE BEGIN 4 */
static void LED_green_handler(void* parameters)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		// GREEN LED: LD12
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a3c:	4814      	ldr	r0, [pc, #80]	; (8000a90 <LED_green_handler+0x5c>)
 8000a3e:	f006 fde3 	bl	8007608 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a46:	4813      	ldr	r0, [pc, #76]	; (8000a94 <LED_green_handler+0x60>)
 8000a48:	f000 fcd7 	bl	80013fa <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2300      	movs	r3, #0
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f002 fffd 	bl	8003a58 <xTaskGenericNotifyWait>
 8000a5e:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d1ea      	bne.n	8000a3c <LED_green_handler+0x8>
		{
			vTaskSuspendAll();
 8000a66:	f002 fad9 	bl	800301c <vTaskSuspendAll>
			next_task_handle = task_orange_handle;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <LED_green_handler+0x64>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LED_green_handler+0x68>)
 8000a70:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a72:	f002 fae1 	bl	8003038 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <LED_green_handler+0x60>)
 8000a7e:	f000 fca3 	bl	80013c8 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green task");
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <LED_green_handler+0x6c>)
 8000a84:	f006 fdc0 	bl	8007608 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f002 f97b 	bl	8002d84 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a8e:	e7d5      	b.n	8000a3c <LED_green_handler+0x8>
 8000a90:	08007820 	.word	0x08007820
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	2000003c 	.word	0x2000003c
 8000a9c:	20000048 	.word	0x20000048
 8000aa0:	08007834 	.word	0x08007834

08000aa4 <LED_orange_handler>:
		}
	}
}

static void LED_orange_handler(void* parameters)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		// ORANGE LED: LD13
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000aac:	4814      	ldr	r0, [pc, #80]	; (8000b00 <LED_orange_handler+0x5c>)
 8000aae:	f006 fdab 	bl	8007608 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab6:	4813      	ldr	r0, [pc, #76]	; (8000b04 <LED_orange_handler+0x60>)
 8000ab8:	f000 fc9f 	bl	80013fa <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000abc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f002 ffc5 	bl	8003a58 <xTaskGenericNotifyWait>
 8000ace:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d1ea      	bne.n	8000aac <LED_orange_handler+0x8>
		{
			vTaskSuspendAll();
 8000ad6:	f002 faa1 	bl	800301c <vTaskSuspendAll>
			next_task_handle = task_red_handle;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <LED_orange_handler+0x64>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <LED_orange_handler+0x68>)
 8000ae0:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000ae2:	f002 faa9 	bl	8003038 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <LED_orange_handler+0x60>)
 8000aee:	f000 fc6b 	bl	80013c8 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange task");
 8000af2:	4807      	ldr	r0, [pc, #28]	; (8000b10 <LED_orange_handler+0x6c>)
 8000af4:	f006 fd88 	bl	8007608 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f002 f943 	bl	8002d84 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000afe:	e7d5      	b.n	8000aac <LED_orange_handler+0x8>
 8000b00:	08007848 	.word	0x08007848
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	20000040 	.word	0x20000040
 8000b0c:	20000048 	.word	0x20000048
 8000b10:	0800785c 	.word	0x0800785c

08000b14 <LED_red_handler>:
		}
	}
}

static void LED_red_handler(void* parameters)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		// RED LED: LD14
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b1c:	4818      	ldr	r0, [pc, #96]	; (8000b80 <LED_red_handler+0x6c>)
 8000b1e:	f006 fd73 	bl	8007608 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b26:	4817      	ldr	r0, [pc, #92]	; (8000b84 <LED_red_handler+0x70>)
 8000b28:	f000 fc67 	bl	80013fa <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000b2c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2300      	movs	r3, #0
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f002 ff8d 	bl	8003a58 <xTaskGenericNotifyWait>
 8000b3e:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d1ea      	bne.n	8000b1c <LED_red_handler+0x8>
		{
			vTaskSuspendAll();
 8000b46:	f002 fa69 	bl	800301c <vTaskSuspendAll>
			next_task_handle = NULL;
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <LED_red_handler+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b50:	f002 fa72 	bl	8003038 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <LED_red_handler+0x70>)
 8000b5c:	f000 fc34 	bl	80013c8 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete button task");
 8000b60:	480a      	ldr	r0, [pc, #40]	; (8000b8c <LED_red_handler+0x78>)
 8000b62:	f006 fd51 	bl	8007608 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(task_btn_handle);
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <LED_red_handler+0x7c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 f90a 	bl	8002d84 <vTaskDelete>
			SEGGER_SYSVIEW_PrintfTarget("Delete Red task");
 8000b70:	4808      	ldr	r0, [pc, #32]	; (8000b94 <LED_red_handler+0x80>)
 8000b72:	f006 fd49 	bl	8007608 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f002 f904 	bl	8002d84 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b7c:	e7ce      	b.n	8000b1c <LED_red_handler+0x8>
 8000b7e:	bf00      	nop
 8000b80:	08007870 	.word	0x08007870
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	20000048 	.word	0x20000048
 8000b8c:	08007884 	.word	0x08007884
 8000b90:	20000044 	.word	0x20000044
 8000b94:	08007898 	.word	0x08007898

08000b98 <BTN_handler>:
		}
	}
}

static void BTN_handler(void* parameters)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <BTN_handler+0x48>)
 8000bac:	f000 fbf4 	bl	8001398 <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000bb4:	7bbb      	ldrb	r3, [r7, #14]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00b      	beq.n	8000bd2 <BTN_handler+0x3a>
		{
			if(! prev_read)
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d108      	bne.n	8000bd2 <BTN_handler+0x3a>
				xTaskNotify(next_task_handle, 0, eNoAction);
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <BTN_handler+0x4c>)
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f002 ffcb 	bl	8003b68 <xTaskGenericNotify>
		}
		prev_read = btn_read;
 8000bd2:	7bbb      	ldrb	r3, [r7, #14]
 8000bd4:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000bd6:	200a      	movs	r0, #10
 8000bd8:	f002 f982 	bl	8002ee0 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bdc:	e7e4      	b.n	8000ba8 <BTN_handler+0x10>
 8000bde:	bf00      	nop
 8000be0:	40020000 	.word	0x40020000
 8000be4:	20000048 	.word	0x20000048

08000be8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d101      	bne.n	8000bfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bfa:	f000 f92f 	bl	8000e5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40001000 	.word	0x40001000

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c56:	f003 fcdf 	bl	8004618 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08e      	sub	sp, #56	; 0x38
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <HAL_InitTick+0xe4>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a32      	ldr	r2, [pc, #200]	; (8000d4c <HAL_InitTick+0xe4>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <HAL_InitTick+0xe4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f003 0310 	and.w	r3, r3, #16
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c94:	f107 0210 	add.w	r2, r7, #16
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 f84a 	bl	8001d38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d103      	bne.n	8000cb6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cae:	f001 f82f 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8000cb2:	6378      	str	r0, [r7, #52]	; 0x34
 8000cb4:	e004      	b.n	8000cc0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cb6:	f001 f82b 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc2:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <HAL_InitTick+0xe8>)
 8000cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc8:	0c9b      	lsrs	r3, r3, #18
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <HAL_InitTick+0xec>)
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <HAL_InitTick+0xf0>)
 8000cd2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_InitTick+0xec>)
 8000cd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cda:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cdc:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <HAL_InitTick+0xec>)
 8000cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_InitTick+0xec>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_InitTick+0xec>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_InitTick+0xec>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cf4:	4817      	ldr	r0, [pc, #92]	; (8000d54 <HAL_InitTick+0xec>)
 8000cf6:	f001 f851 	bl	8001d9c <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d11b      	bne.n	8000d40 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d08:	4812      	ldr	r0, [pc, #72]	; (8000d54 <HAL_InitTick+0xec>)
 8000d0a:	f001 f8a1 	bl	8001e50 <HAL_TIM_Base_Start_IT>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d111      	bne.n	8000d40 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d1c:	2036      	movs	r0, #54	; 0x36
 8000d1e:	f000 f991 	bl	8001044 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d808      	bhi.n	8000d3a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	2036      	movs	r0, #54	; 0x36
 8000d2e:	f000 f96d 	bl	800100c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_InitTick+0xf4>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e002      	b.n	8000d40 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3738      	adds	r7, #56	; 0x38
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	431bde83 	.word	0x431bde83
 8000d54:	2000004c 	.word	0x2000004c
 8000d58:	40001000 	.word	0x40001000
 8000d5c:	20000004 	.word	0x20000004

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <TIM6_DAC_IRQHandler+0x10>)
 8000d92:	f001 f8cd 	bl	8001f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000004c 	.word	0x2000004c

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dca:	490e      	ldr	r1, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dcc:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de0:	4c0b      	ldr	r4, [pc, #44]	; (8000e10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dee:	f7ff ffd7 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df2:	f006 fca7 	bl	8007744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fbb7 	bl	8000568 <main>
  bx  lr    
 8000dfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e08:	080079e8 	.word	0x080079e8
  ldr r2, =_sbss
 8000e0c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e10:	200138bc 	.word	0x200138bc

08000e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <HAL_Init+0x40>)
 8000e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_Init+0x40>)
 8000e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_Init+0x40>)
 8000e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 f8d8 	bl	8000ff6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff ff0e 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4c:	f7ff fee4 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023c00 	.word	0x40023c00

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000094 	.word	0x20000094

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000094 	.word	0x20000094

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4907      	ldr	r1, [pc, #28]	; (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	; (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ff4c 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101e:	f7ff ff61 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001022:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	68b9      	ldr	r1, [r7, #8]
 8001028:	6978      	ldr	r0, [r7, #20]
 800102a:	f7ff ffb1 	bl	8000f90 <NVIC_EncodePriority>
 800102e:	4602      	mov	r2, r0
 8001030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff80 	bl	8000f3c <__NVIC_SetPriority>
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff54 	bl	8000f00 <__NVIC_EnableIRQ>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e16b      	b.n	8001354 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 815a 	bne.w	800134e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d005      	beq.n	80010b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d130      	bne.n	8001114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	f003 0201 	and.w	r2, r3, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b03      	cmp	r3, #3
 800111e:	d017      	beq.n	8001150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d123      	bne.n	80011a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80b4 	beq.w	800134e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b60      	ldr	r3, [pc, #384]	; (800136c <HAL_GPIO_Init+0x30c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a5f      	ldr	r2, [pc, #380]	; (800136c <HAL_GPIO_Init+0x30c>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b5d      	ldr	r3, [pc, #372]	; (800136c <HAL_GPIO_Init+0x30c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001202:	4a5b      	ldr	r2, [pc, #364]	; (8001370 <HAL_GPIO_Init+0x310>)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a52      	ldr	r2, [pc, #328]	; (8001374 <HAL_GPIO_Init+0x314>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d02b      	beq.n	8001286 <HAL_GPIO_Init+0x226>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a51      	ldr	r2, [pc, #324]	; (8001378 <HAL_GPIO_Init+0x318>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d025      	beq.n	8001282 <HAL_GPIO_Init+0x222>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a50      	ldr	r2, [pc, #320]	; (800137c <HAL_GPIO_Init+0x31c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d01f      	beq.n	800127e <HAL_GPIO_Init+0x21e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <HAL_GPIO_Init+0x320>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d019      	beq.n	800127a <HAL_GPIO_Init+0x21a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4e      	ldr	r2, [pc, #312]	; (8001384 <HAL_GPIO_Init+0x324>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d013      	beq.n	8001276 <HAL_GPIO_Init+0x216>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4d      	ldr	r2, [pc, #308]	; (8001388 <HAL_GPIO_Init+0x328>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00d      	beq.n	8001272 <HAL_GPIO_Init+0x212>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4c      	ldr	r2, [pc, #304]	; (800138c <HAL_GPIO_Init+0x32c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x20e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4b      	ldr	r2, [pc, #300]	; (8001390 <HAL_GPIO_Init+0x330>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_GPIO_Init+0x20a>
 8001266:	2307      	movs	r3, #7
 8001268:	e00e      	b.n	8001288 <HAL_GPIO_Init+0x228>
 800126a:	2308      	movs	r3, #8
 800126c:	e00c      	b.n	8001288 <HAL_GPIO_Init+0x228>
 800126e:	2306      	movs	r3, #6
 8001270:	e00a      	b.n	8001288 <HAL_GPIO_Init+0x228>
 8001272:	2305      	movs	r3, #5
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x228>
 8001276:	2304      	movs	r3, #4
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x228>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x228>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x228>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x228>
 8001286:	2300      	movs	r3, #0
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	4935      	ldr	r1, [pc, #212]	; (8001370 <HAL_GPIO_Init+0x310>)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_GPIO_Init+0x334>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ca:	4a32      	ldr	r2, [pc, #200]	; (8001394 <HAL_GPIO_Init+0x334>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_GPIO_Init+0x334>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f4:	4a27      	ldr	r2, [pc, #156]	; (8001394 <HAL_GPIO_Init+0x334>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_GPIO_Init+0x334>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131e:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_GPIO_Init+0x334>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_GPIO_Init+0x334>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001348:	4a12      	ldr	r2, [pc, #72]	; (8001394 <HAL_GPIO_Init+0x334>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	f67f ae90 	bls.w	800107c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40013800 	.word	0x40013800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40021000 	.word	0x40021000
 8001388:	40021400 	.word	0x40021400
 800138c:	40021800 	.word	0x40021800
 8001390:	40021c00 	.word	0x40021c00
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	887b      	ldrh	r3, [r7, #2]
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e001      	b.n	80013ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	041a      	lsls	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b085      	sub	sp, #20
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800140c:	887a      	ldrh	r2, [r7, #2]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4013      	ands	r3, r2
 8001412:	041a      	lsls	r2, r3, #16
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43d9      	mvns	r1, r3
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	400b      	ands	r3, r1
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	619a      	str	r2, [r3, #24]
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e267      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d075      	beq.n	800153a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144e:	4b88      	ldr	r3, [pc, #544]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b04      	cmp	r3, #4
 8001458:	d00c      	beq.n	8001474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145a:	4b85      	ldr	r3, [pc, #532]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001462:	2b08      	cmp	r3, #8
 8001464:	d112      	bne.n	800148c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001466:	4b82      	ldr	r3, [pc, #520]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001472:	d10b      	bne.n	800148c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	4b7e      	ldr	r3, [pc, #504]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d05b      	beq.n	8001538 <HAL_RCC_OscConfig+0x108>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d157      	bne.n	8001538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e242      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d106      	bne.n	80014a4 <HAL_RCC_OscConfig+0x74>
 8001496:	4b76      	ldr	r3, [pc, #472]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a75      	ldr	r2, [pc, #468]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e01d      	b.n	80014e0 <HAL_RCC_OscConfig+0xb0>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x98>
 80014ae:	4b70      	ldr	r3, [pc, #448]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6f      	ldr	r2, [pc, #444]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b6d      	ldr	r3, [pc, #436]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a6c      	ldr	r2, [pc, #432]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e00b      	b.n	80014e0 <HAL_RCC_OscConfig+0xb0>
 80014c8:	4b69      	ldr	r3, [pc, #420]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a68      	ldr	r2, [pc, #416]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b66      	ldr	r3, [pc, #408]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a65      	ldr	r2, [pc, #404]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d013      	beq.n	8001510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fccc 	bl	8000e84 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fcc8 	bl	8000e84 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e207      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	4b5b      	ldr	r3, [pc, #364]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0xc0>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fcb8 	bl	8000e84 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fcb4 	bl	8000e84 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1f3      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152a:	4b51      	ldr	r3, [pc, #324]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0xe8>
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d063      	beq.n	800160e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00b      	beq.n	800156a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001552:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155a:	2b08      	cmp	r3, #8
 800155c:	d11c      	bne.n	8001598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155e:	4b44      	ldr	r3, [pc, #272]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d116      	bne.n	8001598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	4b41      	ldr	r3, [pc, #260]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_RCC_OscConfig+0x152>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d001      	beq.n	8001582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e1c7      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4937      	ldr	r1, [pc, #220]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	e03a      	b.n	800160e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a0:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_RCC_OscConfig+0x244>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a6:	f7ff fc6d 	bl	8000e84 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ae:	f7ff fc69 	bl	8000e84 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1a8      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c0:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4925      	ldr	r1, [pc, #148]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
 80015e0:	e015      	b.n	800160e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e2:	4b24      	ldr	r3, [pc, #144]	; (8001674 <HAL_RCC_OscConfig+0x244>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fc4c 	bl	8000e84 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fc48 	bl	8000e84 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e187      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d036      	beq.n	8001688 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d016      	beq.n	8001650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_RCC_OscConfig+0x248>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001628:	f7ff fc2c 	bl	8000e84 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff fc28 	bl	8000e84 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e167      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x200>
 800164e:	e01b      	b.n	8001688 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_RCC_OscConfig+0x248>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff fc15 	bl	8000e84 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165c:	e00e      	b.n	800167c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165e:	f7ff fc11 	bl	8000e84 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d907      	bls.n	800167c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e150      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
 8001670:	40023800 	.word	0x40023800
 8001674:	42470000 	.word	0x42470000
 8001678:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167c:	4b88      	ldr	r3, [pc, #544]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800167e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1ea      	bne.n	800165e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8097 	beq.w	80017c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169a:	4b81      	ldr	r3, [pc, #516]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10f      	bne.n	80016c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b7d      	ldr	r3, [pc, #500]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a7c      	ldr	r2, [pc, #496]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b7a      	ldr	r3, [pc, #488]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c2:	2301      	movs	r3, #1
 80016c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c6:	4b77      	ldr	r3, [pc, #476]	; (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d118      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d2:	4b74      	ldr	r3, [pc, #464]	; (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a73      	ldr	r2, [pc, #460]	; (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016de:	f7ff fbd1 	bl	8000e84 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e6:	f7ff fbcd 	bl	8000e84 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e10c      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f8:	4b6a      	ldr	r3, [pc, #424]	; (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x2ea>
 800170c:	4b64      	ldr	r3, [pc, #400]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	4a63      	ldr	r2, [pc, #396]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6713      	str	r3, [r2, #112]	; 0x70
 8001718:	e01c      	b.n	8001754 <HAL_RCC_OscConfig+0x324>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x30c>
 8001722:	4b5f      	ldr	r3, [pc, #380]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	4a5e      	ldr	r2, [pc, #376]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6713      	str	r3, [r2, #112]	; 0x70
 800172e:	4b5c      	ldr	r3, [pc, #368]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001732:	4a5b      	ldr	r2, [pc, #364]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6713      	str	r3, [r2, #112]	; 0x70
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0x324>
 800173c:	4b58      	ldr	r3, [pc, #352]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001740:	4a57      	ldr	r2, [pc, #348]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	6713      	str	r3, [r2, #112]	; 0x70
 8001748:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174c:	4a54      	ldr	r2, [pc, #336]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800174e:	f023 0304 	bic.w	r3, r3, #4
 8001752:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d015      	beq.n	8001788 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fb92 	bl	8000e84 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff fb8e 	bl	8000e84 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0cb      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177a:	4b49      	ldr	r3, [pc, #292]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0ee      	beq.n	8001764 <HAL_RCC_OscConfig+0x334>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff fb7c 	bl	8000e84 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff fb78 	bl	8000e84 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0b5      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a6:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ee      	bne.n	8001790 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b8:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a38      	ldr	r2, [pc, #224]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80a1 	beq.w	8001910 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ce:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d05c      	beq.n	8001894 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d141      	bne.n	8001866 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <HAL_RCC_OscConfig+0x478>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fb4c 	bl	8000e84 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fb48 	bl	8000e84 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e087      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69da      	ldr	r2, [r3, #28]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	019b      	lsls	r3, r3, #6
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	3b01      	subs	r3, #1
 8001828:	041b      	lsls	r3, r3, #16
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	061b      	lsls	r3, r3, #24
 8001832:	491b      	ldr	r1, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_RCC_OscConfig+0x478>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff fb21 	bl	8000e84 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff fb1d 	bl	8000e84 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e05c      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x416>
 8001864:	e054      	b.n	8001910 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_RCC_OscConfig+0x478>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fb0a 	bl	8000e84 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff fb06 	bl	8000e84 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e045      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x444>
 8001892:	e03d      	b.n	8001910 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d107      	bne.n	80018ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e038      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000
 80018a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x4ec>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d028      	beq.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d121      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d11a      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018dc:	4013      	ands	r3, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d111      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	085b      	lsrs	r3, r3, #1
 80018f4:	3b01      	subs	r3, #1
 80018f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d107      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0cc      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4b68      	ldr	r3, [pc, #416]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d90c      	bls.n	800195c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b65      	ldr	r3, [pc, #404]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0b8      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001974:	4b59      	ldr	r3, [pc, #356]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a58      	ldr	r2, [pc, #352]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800197e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800198c:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	494d      	ldr	r1, [pc, #308]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d044      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d119      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e07f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d003      	beq.n	80019de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	4b3f      	ldr	r3, [pc, #252]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d109      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e06f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e067      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fe:	4b37      	ldr	r3, [pc, #220]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f023 0203 	bic.w	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4934      	ldr	r1, [pc, #208]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a10:	f7ff fa38 	bl	8000e84 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	e00a      	b.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a18:	f7ff fa34 	bl	8000e84 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e04f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 020c 	and.w	r2, r3, #12
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d1eb      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d20c      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e032      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4916      	ldr	r1, [pc, #88]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	490e      	ldr	r1, [pc, #56]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aa6:	f000 f821 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	490a      	ldr	r1, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f8ce 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	08007984 	.word	0x08007984
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af0:	b094      	sub	sp, #80	; 0x50
 8001af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	647b      	str	r3, [r7, #68]	; 0x44
 8001af8:	2300      	movs	r3, #0
 8001afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001afc:	2300      	movs	r3, #0
 8001afe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b04:	4b79      	ldr	r3, [pc, #484]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d00d      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x40>
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	f200 80e1 	bhi.w	8001cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b1e:	e0db      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b73      	ldr	r3, [pc, #460]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b24:	e0db      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b26:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b2a:	e0d8      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b2c:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b36:	4b6d      	ldr	r3, [pc, #436]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d063      	beq.n	8001c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b42:	4b6a      	ldr	r3, [pc, #424]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	2200      	movs	r2, #0
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
 8001b56:	2300      	movs	r3, #0
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b5e:	4622      	mov	r2, r4
 8001b60:	462b      	mov	r3, r5
 8001b62:	f04f 0000 	mov.w	r0, #0
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	0159      	lsls	r1, r3, #5
 8001b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b70:	0150      	lsls	r0, r2, #5
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4621      	mov	r1, r4
 8001b78:	1a51      	subs	r1, r2, r1
 8001b7a:	6139      	str	r1, [r7, #16]
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b90:	4659      	mov	r1, fp
 8001b92:	018b      	lsls	r3, r1, #6
 8001b94:	4651      	mov	r1, sl
 8001b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b9a:	4651      	mov	r1, sl
 8001b9c:	018a      	lsls	r2, r1, #6
 8001b9e:	4651      	mov	r1, sl
 8001ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba4:	4659      	mov	r1, fp
 8001ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bbe:	4690      	mov	r8, r2
 8001bc0:	4699      	mov	r9, r3
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	eb18 0303 	adds.w	r3, r8, r3
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	462b      	mov	r3, r5
 8001bcc:	eb49 0303 	adc.w	r3, r9, r3
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bde:	4629      	mov	r1, r5
 8001be0:	024b      	lsls	r3, r1, #9
 8001be2:	4621      	mov	r1, r4
 8001be4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be8:	4621      	mov	r1, r4
 8001bea:	024a      	lsls	r2, r1, #9
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bfc:	f7fe fb32 	bl	8000264 <__aeabi_uldivmod>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4613      	mov	r3, r2
 8001c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c08:	e058      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0a:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	099b      	lsrs	r3, r3, #6
 8001c10:	2200      	movs	r2, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	4611      	mov	r1, r2
 8001c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c24:	4642      	mov	r2, r8
 8001c26:	464b      	mov	r3, r9
 8001c28:	f04f 0000 	mov.w	r0, #0
 8001c2c:	f04f 0100 	mov.w	r1, #0
 8001c30:	0159      	lsls	r1, r3, #5
 8001c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c36:	0150      	lsls	r0, r2, #5
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4641      	mov	r1, r8
 8001c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c42:	4649      	mov	r1, r9
 8001c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c60:	eb63 050b 	sbc.w	r5, r3, fp
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	00eb      	lsls	r3, r5, #3
 8001c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c72:	00e2      	lsls	r2, r4, #3
 8001c74:	4614      	mov	r4, r2
 8001c76:	461d      	mov	r5, r3
 8001c78:	4643      	mov	r3, r8
 8001c7a:	18e3      	adds	r3, r4, r3
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	464b      	mov	r3, r9
 8001c80:	eb45 0303 	adc.w	r3, r5, r3
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c92:	4629      	mov	r1, r5
 8001c94:	028b      	lsls	r3, r1, #10
 8001c96:	4621      	mov	r1, r4
 8001c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	028a      	lsls	r2, r1, #10
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	61fa      	str	r2, [r7, #28]
 8001cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb0:	f7fe fad8 	bl	8000264 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cd6:	e002      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3750      	adds	r7, #80	; 0x50
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	007a1200 	.word	0x007a1200

08001cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000000 	.word	0x20000000

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d14:	f7ff fff0 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0a9b      	lsrs	r3, r3, #10
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4903      	ldr	r1, [pc, #12]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	08007994 	.word	0x08007994

08001d38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	220f      	movs	r2, #15
 8001d46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0203 	and.w	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <HAL_RCC_GetClockConfig+0x60>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0207 	and.w	r2, r3, #7
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	601a      	str	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e041      	b.n	8001e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f839 	bl	8001e3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f000 f9d8 	bl	8002190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d001      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e04e      	b.n	8001f06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d022      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x80>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e92:	d01d      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x80>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d018      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x80>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d013      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x80>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <HAL_TIM_Base_Start_IT+0xd0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00e      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x80>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <HAL_TIM_Base_Start_IT+0xd4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d009      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x80>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d004      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x80>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <HAL_TIM_Base_Start_IT+0xdc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d111      	bne.n	8001ef4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d010      	beq.n	8001f04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0201 	orr.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef2:	e007      	b.n	8001f04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40010000 	.word	0x40010000
 8001f18:	40000400 	.word	0x40000400
 8001f1c:	40000800 	.word	0x40000800
 8001f20:	40000c00 	.word	0x40000c00
 8001f24:	40010400 	.word	0x40010400
 8001f28:	40014000 	.word	0x40014000
 8001f2c:	40001800 	.word	0x40001800

08001f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d122      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d11b      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0202 	mvn.w	r2, #2
 8001f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8ee 	bl	8002154 <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8e0 	bl	8002140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8f1 	bl	8002168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d122      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0204 	mvn.w	r2, #4
 8001fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8c4 	bl	8002154 <HAL_TIM_IC_CaptureCallback>
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8b6 	bl	8002140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f8c7 	bl	8002168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d122      	bne.n	8002034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d11b      	bne.n	8002034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0208 	mvn.w	r2, #8
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2204      	movs	r2, #4
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f89a 	bl	8002154 <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f88c 	bl	8002140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f89d 	bl	8002168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b10      	cmp	r3, #16
 8002040:	d122      	bne.n	8002088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b10      	cmp	r3, #16
 800204e:	d11b      	bne.n	8002088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0210 	mvn.w	r2, #16
 8002058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2208      	movs	r2, #8
 800205e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f870 	bl	8002154 <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f862 	bl	8002140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f873 	bl	8002168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0201 	mvn.w	r2, #1
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fd9a 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	2b80      	cmp	r3, #128	; 0x80
 80020c0:	d10e      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	2b80      	cmp	r3, #128	; 0x80
 80020ce:	d107      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f902 	bl	80022e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d10e      	bne.n	800210c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f8:	2b40      	cmp	r3, #64	; 0x40
 80020fa:	d107      	bne.n	800210c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f838 	bl	800217c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b20      	cmp	r3, #32
 8002118:	d10e      	bne.n	8002138 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b20      	cmp	r3, #32
 8002126:	d107      	bne.n	8002138 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0220 	mvn.w	r2, #32
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f8cc 	bl	80022d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a40      	ldr	r2, [pc, #256]	; (80022a4 <TIM_Base_SetConfig+0x114>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d013      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ae:	d00f      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3d      	ldr	r2, [pc, #244]	; (80022a8 <TIM_Base_SetConfig+0x118>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00b      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a3c      	ldr	r2, [pc, #240]	; (80022ac <TIM_Base_SetConfig+0x11c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d007      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a3b      	ldr	r2, [pc, #236]	; (80022b0 <TIM_Base_SetConfig+0x120>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d003      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a3a      	ldr	r2, [pc, #232]	; (80022b4 <TIM_Base_SetConfig+0x124>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d108      	bne.n	80021e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2f      	ldr	r2, [pc, #188]	; (80022a4 <TIM_Base_SetConfig+0x114>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d02b      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f0:	d027      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2c      	ldr	r2, [pc, #176]	; (80022a8 <TIM_Base_SetConfig+0x118>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d023      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2b      	ldr	r2, [pc, #172]	; (80022ac <TIM_Base_SetConfig+0x11c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01f      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2a      	ldr	r2, [pc, #168]	; (80022b0 <TIM_Base_SetConfig+0x120>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01b      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a29      	ldr	r2, [pc, #164]	; (80022b4 <TIM_Base_SetConfig+0x124>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d017      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <TIM_Base_SetConfig+0x128>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <TIM_Base_SetConfig+0x12c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00f      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <TIM_Base_SetConfig+0x130>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00b      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <TIM_Base_SetConfig+0x134>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <TIM_Base_SetConfig+0x138>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d003      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a23      	ldr	r2, [pc, #140]	; (80022cc <TIM_Base_SetConfig+0x13c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d108      	bne.n	8002254 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <TIM_Base_SetConfig+0x114>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d003      	beq.n	8002288 <TIM_Base_SetConfig+0xf8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <TIM_Base_SetConfig+0x124>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d103      	bne.n	8002290 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	615a      	str	r2, [r3, #20]
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40000400 	.word	0x40000400
 80022ac:	40000800 	.word	0x40000800
 80022b0:	40000c00 	.word	0x40000c00
 80022b4:	40010400 	.word	0x40010400
 80022b8:	40014000 	.word	0x40014000
 80022bc:	40014400 	.word	0x40014400
 80022c0:	40014800 	.word	0x40014800
 80022c4:	40001800 	.word	0x40001800
 80022c8:	40001c00 	.word	0x40001c00
 80022cc:	40002000 	.word	0x40002000

080022d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f103 0208 	add.w	r2, r3, #8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f04f 32ff 	mov.w	r2, #4294967295
 8002310:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f103 0208 	add.w	r2, r3, #8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f103 0208 	add.w	r2, r3, #8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	601a      	str	r2, [r3, #0]
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d103      	bne.n	80023ba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e00c      	b.n	80023d4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3308      	adds	r3, #8
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e002      	b.n	80023c8 <vListInsert+0x2e>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d2f6      	bcs.n	80023c2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6892      	ldr	r2, [r2, #8]
 8002422:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6852      	ldr	r2, [r2, #4]
 800242c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	d103      	bne.n	8002440 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	1e5a      	subs	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800246a:	2301      	movs	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <xQueueGenericReset+0x2e>
        __asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	60fb      	str	r3, [r7, #12]
    }
 800248a:	bf00      	nop
 800248c:	e7fe      	b.n	800248c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d052      	beq.n	800253a <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002498:	2b00      	cmp	r3, #0
 800249a:	d04e      	beq.n	800253a <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a4:	2100      	movs	r1, #0
 80024a6:	fba3 2302 	umull	r2, r3, r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d000      	beq.n	80024b0 <xQueueGenericReset+0x50>
 80024ae:	2101      	movs	r1, #1
 80024b0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d141      	bne.n	800253a <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 80024b6:	f002 f92d 	bl	8004714 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	6939      	ldr	r1, [r7, #16]
 80024c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	441a      	add	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2200      	movs	r2, #0
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	3b01      	subs	r3, #1
 80024e8:	6939      	ldr	r1, [r7, #16]
 80024ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	441a      	add	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	22ff      	movs	r2, #255	; 0xff
 80024fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	22ff      	movs	r2, #255	; 0xff
 8002502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00f      	beq.n	8002534 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	3310      	adds	r3, #16
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f873 	bl	8003604 <xTaskRemoveFromEventList>
 800251e:	e009      	b.n	8002534 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	3310      	adds	r3, #16
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fee7 	bl	80022f8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	3324      	adds	r3, #36	; 0x24
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fee2 	bl	80022f8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002534:	f002 f91e 	bl	8004774 <vPortExitCritical>
 8002538:	e001      	b.n	800253e <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10a      	bne.n	800255a <xQueueGenericReset+0xfa>
        __asm volatile
 8002544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	60bb      	str	r3, [r7, #8]
    }
 8002556:	bf00      	nop
 8002558:	e7fe      	b.n	8002558 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800255a:	697b      	ldr	r3, [r7, #20]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	4613      	mov	r3, r2
 8002570:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d02e      	beq.n	80025da <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800257c:	2100      	movs	r1, #0
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	fba3 2302 	umull	r2, r3, r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d000      	beq.n	800258c <xQueueGenericCreate+0x28>
 800258a:	2101      	movs	r1, #1
 800258c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800258e:	2b00      	cmp	r3, #0
 8002590:	d123      	bne.n	80025da <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800259a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800259e:	d81c      	bhi.n	80025da <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	3350      	adds	r3, #80	; 0x50
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 f9dc 	bl	800496c <pvPortMalloc>
 80025b4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01c      	beq.n	80025f6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3350      	adds	r3, #80	; 0x50
 80025c4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025c6:	79fa      	ldrb	r2, [r7, #7]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f814 	bl	8002600 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80025d8:	e00d      	b.n	80025f6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <xQueueGenericCreate+0x92>
        __asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	613b      	str	r3, [r7, #16]
    }
 80025f2:	bf00      	nop
 80025f4:	e7fe      	b.n	80025f4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80025f6:	69fb      	ldr	r3, [r7, #28]
    }
 80025f8:	4618      	mov	r0, r3
 80025fa:	3720      	adds	r7, #32
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d103      	bne.n	800261c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e002      	b.n	8002622 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800262e:	2101      	movs	r1, #1
 8002630:	69b8      	ldr	r0, [r7, #24]
 8002632:	f7ff ff15 	bl	8002460 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	68f9      	ldr	r1, [r7, #12]
 8002644:	2073      	movs	r0, #115	; 0x73
 8002646:	f004 f9bb 	bl	80069c0 <SEGGER_SYSVIEW_RecordU32x3>
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	b08f      	sub	sp, #60	; 0x3c
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002660:	2300      	movs	r3, #0
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <xQueueReceive+0x30>
        __asm volatile
 800266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	623b      	str	r3, [r7, #32]
    }
 8002680:	bf00      	nop
 8002682:	e7fe      	b.n	8002682 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <xQueueReceive+0x3e>
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <xQueueReceive+0x42>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <xQueueReceive+0x44>
 8002696:	2300      	movs	r3, #0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <xQueueReceive+0x5e>
        __asm volatile
 800269c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	61fb      	str	r3, [r7, #28]
    }
 80026ae:	bf00      	nop
 80026b0:	e7fe      	b.n	80026b0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026b2:	f001 f9b3 	bl	8003a1c <xTaskGetSchedulerState>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <xQueueReceive+0x6e>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <xQueueReceive+0x72>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <xQueueReceive+0x74>
 80026c6:	2300      	movs	r3, #0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <xQueueReceive+0x8e>
        __asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	61bb      	str	r3, [r7, #24]
    }
 80026de:	bf00      	nop
 80026e0:	e7fe      	b.n	80026e0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026e2:	f002 f817 	bl	8004714 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d024      	beq.n	800273c <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026f6:	f000 f8b3 	bl	8002860 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 fe8d 	bl	800741c <SEGGER_SYSVIEW_ShrinkId>
 8002702:	4604      	mov	r4, r0
 8002704:	2000      	movs	r0, #0
 8002706:	f004 fe89 	bl	800741c <SEGGER_SYSVIEW_ShrinkId>
 800270a:	4602      	mov	r2, r0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2101      	movs	r1, #1
 8002710:	9100      	str	r1, [sp, #0]
 8002712:	4621      	mov	r1, r4
 8002714:	205c      	movs	r0, #92	; 0x5c
 8002716:	f004 f9c9 	bl	8006aac <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	1e5a      	subs	r2, r3, #1
 800271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002720:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	3310      	adds	r3, #16
 800272e:	4618      	mov	r0, r3
 8002730:	f000 ff68 	bl	8003604 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002734:	f002 f81e 	bl	8004774 <vPortExitCritical>
                return pdPASS;
 8002738:	2301      	movs	r3, #1
 800273a:	e08a      	b.n	8002852 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d113      	bne.n	800276a <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002742:	f002 f817 	bl	8004774 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	4618      	mov	r0, r3
 800274a:	f004 fe67 	bl	800741c <SEGGER_SYSVIEW_ShrinkId>
 800274e:	4604      	mov	r4, r0
 8002750:	2000      	movs	r0, #0
 8002752:	f004 fe63 	bl	800741c <SEGGER_SYSVIEW_ShrinkId>
 8002756:	4602      	mov	r2, r0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2101      	movs	r1, #1
 800275c:	9100      	str	r1, [sp, #0]
 800275e:	4621      	mov	r1, r4
 8002760:	205c      	movs	r0, #92	; 0x5c
 8002762:	f004 f9a3 	bl	8006aac <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002766:	2300      	movs	r3, #0
 8002768:	e073      	b.n	8002852 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d106      	bne.n	800277e <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002770:	f107 0310 	add.w	r3, r7, #16
 8002774:	4618      	mov	r0, r3
 8002776:	f001 f81d 	bl	80037b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800277a:	2301      	movs	r3, #1
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800277e:	f001 fff9 	bl	8004774 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002782:	f000 fc4b 	bl	800301c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002786:	f001 ffc5 	bl	8004714 <vPortEnterCritical>
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002790:	b25b      	sxtb	r3, r3
 8002792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002796:	d103      	bne.n	80027a0 <xQueueReceive+0x14c>
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d103      	bne.n	80027b6 <xQueueReceive+0x162>
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027b6:	f001 ffdd 	bl	8004774 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027ba:	1d3a      	adds	r2, r7, #4
 80027bc:	f107 0310 	add.w	r3, r7, #16
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 f80c 	bl	80037e0 <xTaskCheckForTimeOut>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d124      	bne.n	8002818 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027d0:	f000 f8be 	bl	8002950 <prvIsQueueEmpty>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d018      	beq.n	800280c <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	3324      	adds	r3, #36	; 0x24
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fea2 	bl	800352c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80027e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ea:	f000 f85f 	bl	80028ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80027ee:	f000 fc23 	bl	8003038 <xTaskResumeAll>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f af74 	bne.w	80026e2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80027fa:	4b18      	ldr	r3, [pc, #96]	; (800285c <xQueueReceive+0x208>)
 80027fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	e76a      	b.n	80026e2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800280c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800280e:	f000 f84d 	bl	80028ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002812:	f000 fc11 	bl	8003038 <xTaskResumeAll>
 8002816:	e764      	b.n	80026e2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800281a:	f000 f847 	bl	80028ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800281e:	f000 fc0b 	bl	8003038 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002824:	f000 f894 	bl	8002950 <prvIsQueueEmpty>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	f43f af59 	beq.w	80026e2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	4618      	mov	r0, r3
 8002834:	f004 fdf2 	bl	800741c <SEGGER_SYSVIEW_ShrinkId>
 8002838:	4604      	mov	r4, r0
 800283a:	2000      	movs	r0, #0
 800283c:	f004 fdee 	bl	800741c <SEGGER_SYSVIEW_ShrinkId>
 8002840:	4602      	mov	r2, r0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2101      	movs	r1, #1
 8002846:	9100      	str	r1, [sp, #0]
 8002848:	4621      	mov	r1, r4
 800284a:	205c      	movs	r0, #92	; 0x5c
 800284c:	f004 f92e 	bl	8006aac <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002850:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002852:	4618      	mov	r0, r3
 8002854:	3734      	adds	r7, #52	; 0x34
 8002856:	46bd      	mov	sp, r7
 8002858:	bd90      	pop	{r4, r7, pc}
 800285a:	bf00      	nop
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d018      	beq.n	80028a4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	441a      	add	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	429a      	cmp	r2, r3
 800288a:	d303      	bcc.n	8002894 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68d9      	ldr	r1, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	461a      	mov	r2, r3
 800289e:	6838      	ldr	r0, [r7, #0]
 80028a0:	f004 ff84 	bl	80077ac <memcpy>
    }
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028b4:	f001 ff2e 	bl	8004714 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028be:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028c0:	e011      	b.n	80028e6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d012      	beq.n	80028f0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3324      	adds	r3, #36	; 0x24
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fe98 	bl	8003604 <xTaskRemoveFromEventList>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80028da:	f000 ffe7 	bl	80038ac <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	dce9      	bgt.n	80028c2 <prvUnlockQueue+0x16>
 80028ee:	e000      	b.n	80028f2 <prvUnlockQueue+0x46>
                    break;
 80028f0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	22ff      	movs	r2, #255	; 0xff
 80028f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80028fa:	f001 ff3b 	bl	8004774 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80028fe:	f001 ff09 	bl	8004714 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002908:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800290a:	e011      	b.n	8002930 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d012      	beq.n	800293a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3310      	adds	r3, #16
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fe73 	bl	8003604 <xTaskRemoveFromEventList>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002924:	f000 ffc2 	bl	80038ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002928:	7bbb      	ldrb	r3, [r7, #14]
 800292a:	3b01      	subs	r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002934:	2b00      	cmp	r3, #0
 8002936:	dce9      	bgt.n	800290c <prvUnlockQueue+0x60>
 8002938:	e000      	b.n	800293c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800293a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	22ff      	movs	r2, #255	; 0xff
 8002940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002944:	f001 ff16 	bl	8004774 <vPortExitCritical>
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002958:	f001 fedc 	bl	8004714 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002964:	2301      	movs	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e001      	b.n	800296e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800296e:	f001 ff01 	bl	8004774 <vPortExitCritical>

    return xReturn;
 8002972:	68fb      	ldr	r3, [r7, #12]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	60fb      	str	r3, [r7, #12]
    }
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d024      	beq.n	80029f6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e01e      	b.n	80029f0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80029b2:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <vQueueAddToRegistry+0xa8>)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d105      	bne.n	80029ce <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <vQueueAddToRegistry+0xa8>)
 80029c8:	4413      	add	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
                    break;
 80029cc:	e013      	b.n	80029f6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <vQueueAddToRegistry+0x6e>
 80029d4:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <vQueueAddToRegistry+0xa8>)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d104      	bne.n	80029ea <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <vQueueAddToRegistry+0xa8>)
 80029e6:	4413      	add	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3301      	adds	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b07      	cmp	r3, #7
 80029f4:	d9dd      	bls.n	80029b2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00f      	beq.n	8002a1c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f004 fd06 	bl	800741c <SEGGER_SYSVIEW_ShrinkId>
 8002a10:	4601      	mov	r1, r0
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	2071      	movs	r0, #113	; 0x71
 8002a18:	f003 ff78 	bl	800690c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002a1c:	bf00      	nop
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000098 	.word	0x20000098

08002a28 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a38:	f001 fe6c 	bl	8004714 <vPortEnterCritical>
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a42:	b25b      	sxtb	r3, r3
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d103      	bne.n	8002a52 <vQueueWaitForMessageRestricted+0x2a>
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a58:	b25b      	sxtb	r3, r3
 8002a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5e:	d103      	bne.n	8002a68 <vQueueWaitForMessageRestricted+0x40>
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a68:	f001 fe84 	bl	8004774 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d106      	bne.n	8002a82 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	3324      	adds	r3, #36	; 0x24
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fd79 	bl	8003574 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7ff ff12 	bl	80028ac <prvUnlockQueue>
    }
 8002a88:	bf00      	nop
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08c      	sub	sp, #48	; 0x30
 8002a94:	af04      	add	r7, sp, #16
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f001 ff61 	bl	800496c <pvPortMalloc>
 8002aaa:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d013      	beq.n	8002ada <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ab2:	2058      	movs	r0, #88	; 0x58
 8002ab4:	f001 ff5a 	bl	800496c <pvPortMalloc>
 8002ab8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002ac0:	2258      	movs	r2, #88	; 0x58
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	69f8      	ldr	r0, [r7, #28]
 8002ac6:	f004 fe7f 	bl	80077c8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
 8002ad0:	e005      	b.n	8002ade <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002ad2:	6978      	ldr	r0, [r7, #20]
 8002ad4:	f002 f804 	bl	8004ae0 <vPortFree>
 8002ad8:	e001      	b.n	8002ade <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ae4:	88fa      	ldrh	r2, [r7, #6]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9303      	str	r3, [sp, #12]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	9302      	str	r3, [sp, #8]
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f80e 	bl	8002b1c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b00:	69f8      	ldr	r0, [r7, #28]
 8002b02:	f000 f899 	bl	8002c38 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b06:	2301      	movs	r3, #1
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	e002      	b.n	8002b12 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b10:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b12:	69bb      	ldr	r3, [r7, #24]
    }
 8002b14:	4618      	mov	r0, r3
 8002b16:	3720      	adds	r7, #32
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	461a      	mov	r2, r3
 8002b34:	21a5      	movs	r1, #165	; 0xa5
 8002b36:	f004 fe47 	bl	80077c8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b44:	3b01      	subs	r3, #1
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f023 0307 	bic.w	r3, r3, #7
 8002b52:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	617b      	str	r3, [r7, #20]
    }
 8002b70:	bf00      	nop
 8002b72:	e7fe      	b.n	8002b72 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01e      	beq.n	8002bb8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	e012      	b.n	8002ba6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	4413      	add	r3, r2
 8002b86:	7819      	ldrb	r1, [r3, #0]
 8002b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3334      	adds	r3, #52	; 0x34
 8002b90:	460a      	mov	r2, r1
 8002b92:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	4413      	add	r3, r2
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d006      	beq.n	8002bae <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2b09      	cmp	r3, #9
 8002baa:	d9e9      	bls.n	8002b80 <prvInitialiseNewTask+0x64>
 8002bac:	e000      	b.n	8002bb0 <prvInitialiseNewTask+0x94>
            {
                break;
 8002bae:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d90a      	bls.n	8002bd4 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	613b      	str	r3, [r7, #16]
    }
 8002bd0:	bf00      	nop
 8002bd2:	e7fe      	b.n	8002bd2 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d901      	bls.n	8002bde <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bda:	2304      	movs	r3, #4
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	3304      	adds	r3, #4
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fba2 	bl	8002338 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	3318      	adds	r3, #24
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fb9d 	bl	8002338 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c02:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c06:	f1c3 0205 	rsb	r2, r3, #5
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	68f9      	ldr	r1, [r7, #12]
 8002c18:	69b8      	ldr	r0, [r7, #24]
 8002c1a:	f001 fbcd 	bl	80043b8 <pxPortInitialiseStack>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c30:	bf00      	nop
 8002c32:	3720      	adds	r7, #32
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c40:	f001 fd68 	bl	8004714 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c44:	4b49      	ldr	r3, [pc, #292]	; (8002d6c <prvAddNewTaskToReadyList+0x134>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	4a48      	ldr	r2, [pc, #288]	; (8002d6c <prvAddNewTaskToReadyList+0x134>)
 8002c4c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c4e:	4b48      	ldr	r3, [pc, #288]	; (8002d70 <prvAddNewTaskToReadyList+0x138>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c56:	4a46      	ldr	r2, [pc, #280]	; (8002d70 <prvAddNewTaskToReadyList+0x138>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c5c:	4b43      	ldr	r3, [pc, #268]	; (8002d6c <prvAddNewTaskToReadyList+0x134>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d110      	bne.n	8002c86 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c64:	f000 fe40 	bl	80038e8 <prvInitialiseTaskLists>
 8002c68:	e00d      	b.n	8002c86 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c6a:	4b42      	ldr	r3, [pc, #264]	; (8002d74 <prvAddNewTaskToReadyList+0x13c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c72:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <prvAddNewTaskToReadyList+0x138>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d802      	bhi.n	8002c86 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c80:	4a3b      	ldr	r2, [pc, #236]	; (8002d70 <prvAddNewTaskToReadyList+0x138>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c86:	4b3c      	ldr	r3, [pc, #240]	; (8002d78 <prvAddNewTaskToReadyList+0x140>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	4a3a      	ldr	r2, [pc, #232]	; (8002d78 <prvAddNewTaskToReadyList+0x140>)
 8002c8e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c90:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <prvAddNewTaskToReadyList+0x140>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d016      	beq.n	8002ccc <prvAddNewTaskToReadyList+0x94>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f004 faf5 	bl	8007290 <SEGGER_SYSVIEW_OnTaskCreate>
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	461d      	mov	r5, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461c      	mov	r4, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	1ae3      	subs	r3, r4, r3
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	462b      	mov	r3, r5
 8002cc8:	f002 f8cc 	bl	8004e64 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f004 fb62 	bl	8007398 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	2201      	movs	r2, #1
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <prvAddNewTaskToReadyList+0x144>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <prvAddNewTaskToReadyList+0x144>)
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cea:	4925      	ldr	r1, [pc, #148]	; (8002d80 <prvAddNewTaskToReadyList+0x148>)
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	3204      	adds	r2, #4
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	1d1a      	adds	r2, r3, #4
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <prvAddNewTaskToReadyList+0x148>)
 8002d2a:	441a      	add	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	615a      	str	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d34:	4912      	ldr	r1, [pc, #72]	; (8002d80 <prvAddNewTaskToReadyList+0x148>)
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	1c59      	adds	r1, r3, #1
 8002d44:	480e      	ldr	r0, [pc, #56]	; (8002d80 <prvAddNewTaskToReadyList+0x148>)
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4403      	add	r3, r0
 8002d50:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d52:	f001 fd0f 	bl	8004774 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <prvAddNewTaskToReadyList+0x13c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d5e:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <prvAddNewTaskToReadyList+0x138>)
 8002d60:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bdb0      	pop	{r4, r5, r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200001b0 	.word	0x200001b0
 8002d70:	200000d8 	.word	0x200000d8
 8002d74:	200001bc 	.word	0x200001bc
 8002d78:	200001cc 	.word	0x200001cc
 8002d7c:	200001b8 	.word	0x200001b8
 8002d80:	200000dc 	.word	0x200000dc

08002d84 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002d8c:	f001 fcc2 	bl	8004714 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d102      	bne.n	8002d9c <vTaskDelete+0x18>
 8002d96:	4b48      	ldr	r3, [pc, #288]	; (8002eb8 <vTaskDelete+0x134>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	e000      	b.n	8002d9e <vTaskDelete+0x1a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3304      	adds	r3, #4
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fb31 	bl	800240c <uxListRemove>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d115      	bne.n	8002ddc <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db4:	4941      	ldr	r1, [pc, #260]	; (8002ebc <vTaskDelete+0x138>)
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10a      	bne.n	8002ddc <vTaskDelete+0x58>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	2201      	movs	r2, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43da      	mvns	r2, r3
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <vTaskDelete+0x13c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	4a39      	ldr	r2, [pc, #228]	; (8002ec0 <vTaskDelete+0x13c>)
 8002dda:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3318      	adds	r3, #24
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fb0f 	bl	800240c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002dee:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <vTaskDelete+0x140>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3301      	adds	r3, #1
 8002df4:	4a33      	ldr	r2, [pc, #204]	; (8002ec4 <vTaskDelete+0x140>)
 8002df6:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002df8:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <vTaskDelete+0x134>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d118      	bne.n	8002e34 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3304      	adds	r3, #4
 8002e06:	4619      	mov	r1, r3
 8002e08:	482f      	ldr	r0, [pc, #188]	; (8002ec8 <vTaskDelete+0x144>)
 8002e0a:	f7ff faa2 	bl	8002352 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <vTaskDelete+0x148>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3301      	adds	r3, #1
 8002e14:	4a2d      	ldr	r2, [pc, #180]	; (8002ecc <vTaskDelete+0x148>)
 8002e16:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f004 fafe 	bl	800741c <SEGGER_SYSVIEW_ShrinkId>
 8002e20:	4603      	mov	r3, r0
 8002e22:	4619      	mov	r1, r3
 8002e24:	2022      	movs	r0, #34	; 0x22
 8002e26:	f003 fd35 	bl	8006894 <SEGGER_SYSVIEW_RecordU32>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f002 f881 	bl	8004f34 <SYSVIEW_DeleteTask>
 8002e32:	e013      	b.n	8002e5c <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002e34:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <vTaskDelete+0x14c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	4a25      	ldr	r2, [pc, #148]	; (8002ed0 <vTaskDelete+0x14c>)
 8002e3c:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f004 faeb 	bl	800741c <SEGGER_SYSVIEW_ShrinkId>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4619      	mov	r1, r3
 8002e4a:	2022      	movs	r0, #34	; 0x22
 8002e4c:	f003 fd22 	bl	8006894 <SEGGER_SYSVIEW_RecordU32>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 f86e 	bl	8004f34 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002e58:	f000 fdc4 	bl	80039e4 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002e5c:	f001 fc8a 	bl	8004774 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002e60:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <vTaskDelete+0x134>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d002      	beq.n	8002e70 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fdaa 	bl	80039c4 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002e70:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <vTaskDelete+0x150>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01b      	beq.n	8002eb0 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <vTaskDelete+0x134>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d116      	bne.n	8002eb0 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <vTaskDelete+0x154>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <vTaskDelete+0x11c>
        __asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	60bb      	str	r3, [r7, #8]
    }
 8002e9c:	bf00      	nop
 8002e9e:	e7fe      	b.n	8002e9e <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <vTaskDelete+0x158>)
 8002ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	200000d8 	.word	0x200000d8
 8002ebc:	200000dc 	.word	0x200000dc
 8002ec0:	200001b8 	.word	0x200001b8
 8002ec4:	200001cc 	.word	0x200001cc
 8002ec8:	20000184 	.word	0x20000184
 8002ecc:	20000198 	.word	0x20000198
 8002ed0:	200001b0 	.word	0x200001b0
 8002ed4:	200001bc 	.word	0x200001bc
 8002ed8:	200001d8 	.word	0x200001d8
 8002edc:	e000ed04 	.word	0xe000ed04

08002ee0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01b      	beq.n	8002f2a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <vTaskDelay+0x68>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <vTaskDelay+0x30>
        __asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	60bb      	str	r3, [r7, #8]
    }
 8002f0c:	bf00      	nop
 8002f0e:	e7fe      	b.n	8002f0e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002f10:	f000 f884 	bl	800301c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	2023      	movs	r0, #35	; 0x23
 8002f18:	f003 fcbc 	bl	8006894 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 ff46 	bl	8003db0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002f24:	f000 f888 	bl	8003038 <xTaskResumeAll>
 8002f28:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d107      	bne.n	8002f40 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <vTaskDelay+0x6c>)
 8002f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002f40:	bf00      	nop
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	200001d8 	.word	0x200001d8
 8002f4c:	e000ed04 	.word	0xe000ed04

08002f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002f56:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <vTaskStartScheduler+0xac>)
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2282      	movs	r2, #130	; 0x82
 8002f62:	4927      	ldr	r1, [pc, #156]	; (8003000 <vTaskStartScheduler+0xb0>)
 8002f64:	4827      	ldr	r0, [pc, #156]	; (8003004 <vTaskStartScheduler+0xb4>)
 8002f66:	f7ff fd93 	bl	8002a90 <xTaskCreate>
 8002f6a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d102      	bne.n	8002f78 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002f72:	f000 ff9d 	bl	8003eb0 <xTimerCreateTimerTask>
 8002f76:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d129      	bne.n	8002fd2 <vTaskStartScheduler+0x82>
        __asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	60bb      	str	r3, [r7, #8]
    }
 8002f90:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f92:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <vTaskStartScheduler+0xb8>)
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f9a:	4b1c      	ldr	r3, [pc, #112]	; (800300c <vTaskStartScheduler+0xbc>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <vTaskStartScheduler+0xc0>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <vTaskStartScheduler+0xc4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3334      	adds	r3, #52	; 0x34
 8002fac:	2205      	movs	r2, #5
 8002fae:	4914      	ldr	r1, [pc, #80]	; (8003000 <vTaskStartScheduler+0xb0>)
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f004 fbeb 	bl	800778c <memcmp>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <vTaskStartScheduler+0x78>
 8002fbc:	4b15      	ldr	r3, [pc, #84]	; (8003014 <vTaskStartScheduler+0xc4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f004 f9a7 	bl	8007314 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002fc6:	e001      	b.n	8002fcc <vTaskStartScheduler+0x7c>
 8002fc8:	f004 f946 	bl	8007258 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002fcc:	f001 fa82 	bl	80044d4 <xPortStartScheduler>
 8002fd0:	e00e      	b.n	8002ff0 <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d10a      	bne.n	8002ff0 <vTaskStartScheduler+0xa0>
        __asm volatile
 8002fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	607b      	str	r3, [r7, #4]
    }
 8002fec:	bf00      	nop
 8002fee:	e7fe      	b.n	8002fee <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <vTaskStartScheduler+0xc8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	200001d4 	.word	0x200001d4
 8003000:	080078a8 	.word	0x080078a8
 8003004:	080038c5 	.word	0x080038c5
 8003008:	200001d0 	.word	0x200001d0
 800300c:	200001bc 	.word	0x200001bc
 8003010:	200001b4 	.word	0x200001b4
 8003014:	200000d8 	.word	0x200000d8
 8003018:	2000000c 	.word	0x2000000c

0800301c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <vTaskSuspendAll+0x18>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	4a03      	ldr	r2, [pc, #12]	; (8003034 <vTaskSuspendAll+0x18>)
 8003028:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	200001d8 	.word	0x200001d8

08003038 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003046:	4b6d      	ldr	r3, [pc, #436]	; (80031fc <xTaskResumeAll+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <xTaskResumeAll+0x2c>
        __asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	607b      	str	r3, [r7, #4]
    }
 8003060:	bf00      	nop
 8003062:	e7fe      	b.n	8003062 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003064:	f001 fb56 	bl	8004714 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003068:	4b64      	ldr	r3, [pc, #400]	; (80031fc <xTaskResumeAll+0x1c4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3b01      	subs	r3, #1
 800306e:	4a63      	ldr	r2, [pc, #396]	; (80031fc <xTaskResumeAll+0x1c4>)
 8003070:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003072:	4b62      	ldr	r3, [pc, #392]	; (80031fc <xTaskResumeAll+0x1c4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 80b8 	bne.w	80031ec <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800307c:	4b60      	ldr	r3, [pc, #384]	; (8003200 <xTaskResumeAll+0x1c8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80b3 	beq.w	80031ec <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003086:	e08e      	b.n	80031a6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003088:	4b5e      	ldr	r3, [pc, #376]	; (8003204 <xTaskResumeAll+0x1cc>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	6a12      	ldr	r2, [r2, #32]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	69d2      	ldr	r2, [r2, #28]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3318      	adds	r3, #24
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d103      	bne.n	80030be <xTaskResumeAll+0x86>
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	6a1a      	ldr	r2, [r3, #32]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	2200      	movs	r2, #0
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	1e5a      	subs	r2, r3, #1
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	68d2      	ldr	r2, [r2, #12]
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	6892      	ldr	r2, [r2, #8]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	3304      	adds	r3, #4
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d103      	bne.n	80030fc <xTaskResumeAll+0xc4>
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2200      	movs	r2, #0
 8003100:	615a      	str	r2, [r3, #20]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	1e5a      	subs	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4618      	mov	r0, r3
 8003110:	f004 f942 	bl	8007398 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	2201      	movs	r2, #1
 800311a:	409a      	lsls	r2, r3
 800311c:	4b3a      	ldr	r3, [pc, #232]	; (8003208 <xTaskResumeAll+0x1d0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4313      	orrs	r3, r2
 8003122:	4a39      	ldr	r2, [pc, #228]	; (8003208 <xTaskResumeAll+0x1d0>)
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312a:	4938      	ldr	r1, [pc, #224]	; (800320c <xTaskResumeAll+0x1d4>)
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	3304      	adds	r3, #4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	3204      	adds	r2, #4
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	1d1a      	adds	r2, r3, #4
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4a28      	ldr	r2, [pc, #160]	; (800320c <xTaskResumeAll+0x1d4>)
 800316a:	441a      	add	r2, r3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	615a      	str	r2, [r3, #20]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	4925      	ldr	r1, [pc, #148]	; (800320c <xTaskResumeAll+0x1d4>)
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	1c59      	adds	r1, r3, #1
 8003184:	4821      	ldr	r0, [pc, #132]	; (800320c <xTaskResumeAll+0x1d4>)
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4403      	add	r3, r0
 8003190:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <xTaskResumeAll+0x1d8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	429a      	cmp	r2, r3
 800319e:	d302      	bcc.n	80031a6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80031a0:	4b1c      	ldr	r3, [pc, #112]	; (8003214 <xTaskResumeAll+0x1dc>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031a6:	4b17      	ldr	r3, [pc, #92]	; (8003204 <xTaskResumeAll+0x1cc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f47f af6c 	bne.w	8003088 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80031b6:	f000 fc15 	bl	80039e4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031ba:	4b17      	ldr	r3, [pc, #92]	; (8003218 <xTaskResumeAll+0x1e0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d010      	beq.n	80031e8 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80031c6:	f000 f84b 	bl	8003260 <xTaskIncrementTick>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80031d0:	4b10      	ldr	r3, [pc, #64]	; (8003214 <xTaskResumeAll+0x1dc>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	3b01      	subs	r3, #1
 80031da:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f1      	bne.n	80031c6 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <xTaskResumeAll+0x1e0>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <xTaskResumeAll+0x1dc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80031ec:	f001 fac2 	bl	8004774 <vPortExitCritical>

    return xAlreadyYielded;
 80031f0:	697b      	ldr	r3, [r7, #20]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200001d8 	.word	0x200001d8
 8003200:	200001b0 	.word	0x200001b0
 8003204:	20000170 	.word	0x20000170
 8003208:	200001b8 	.word	0x200001b8
 800320c:	200000dc 	.word	0x200000dc
 8003210:	200000d8 	.word	0x200000d8
 8003214:	200001c4 	.word	0x200001c4
 8003218:	200001c0 	.word	0x200001c0

0800321c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <xTaskGetTickCount+0x1c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003228:	687b      	ldr	r3, [r7, #4]
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	200001b4 	.word	0x200001b4

0800323c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003242:	f001 fb53 	bl	80048ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003246:	2300      	movs	r3, #0
 8003248:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800324a:	4b04      	ldr	r3, [pc, #16]	; (800325c <xTaskGetTickCountFromISR+0x20>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003250:	683b      	ldr	r3, [r7, #0]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	200001b4 	.word	0x200001b4

08003260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003266:	2300      	movs	r3, #0
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800326a:	4b70      	ldr	r3, [pc, #448]	; (800342c <xTaskIncrementTick+0x1cc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 80d1 	bne.w	8003416 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003274:	4b6e      	ldr	r3, [pc, #440]	; (8003430 <xTaskIncrementTick+0x1d0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800327c:	4a6c      	ldr	r2, [pc, #432]	; (8003430 <xTaskIncrementTick+0x1d0>)
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d120      	bne.n	80032ca <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003288:	4b6a      	ldr	r3, [pc, #424]	; (8003434 <xTaskIncrementTick+0x1d4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <xTaskIncrementTick+0x48>
        __asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	607b      	str	r3, [r7, #4]
    }
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <xTaskIncrementTick+0x46>
 80032a8:	4b62      	ldr	r3, [pc, #392]	; (8003434 <xTaskIncrementTick+0x1d4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	4b62      	ldr	r3, [pc, #392]	; (8003438 <xTaskIncrementTick+0x1d8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a60      	ldr	r2, [pc, #384]	; (8003434 <xTaskIncrementTick+0x1d4>)
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4a60      	ldr	r2, [pc, #384]	; (8003438 <xTaskIncrementTick+0x1d8>)
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b5f      	ldr	r3, [pc, #380]	; (800343c <xTaskIncrementTick+0x1dc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	4a5e      	ldr	r2, [pc, #376]	; (800343c <xTaskIncrementTick+0x1dc>)
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	f000 fb8d 	bl	80039e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80032ca:	4b5d      	ldr	r3, [pc, #372]	; (8003440 <xTaskIncrementTick+0x1e0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6a3a      	ldr	r2, [r7, #32]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	f0c0 80a5 	bcc.w	8003420 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d6:	4b57      	ldr	r3, [pc, #348]	; (8003434 <xTaskIncrementTick+0x1d4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d104      	bne.n	80032ea <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032e0:	4b57      	ldr	r3, [pc, #348]	; (8003440 <xTaskIncrementTick+0x1e0>)
 80032e2:	f04f 32ff 	mov.w	r2, #4294967295
 80032e6:	601a      	str	r2, [r3, #0]
                    break;
 80032e8:	e09a      	b.n	8003420 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ea:	4b52      	ldr	r3, [pc, #328]	; (8003434 <xTaskIncrementTick+0x1d4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80032fa:	6a3a      	ldr	r2, [r7, #32]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d203      	bcs.n	800330a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003302:	4a4f      	ldr	r2, [pc, #316]	; (8003440 <xTaskIncrementTick+0x1e0>)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003308:	e08a      	b.n	8003420 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	68d2      	ldr	r2, [r2, #12]
 8003318:	609a      	str	r2, [r3, #8]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	6892      	ldr	r2, [r2, #8]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	3304      	adds	r3, #4
 800332c:	429a      	cmp	r2, r3
 800332e:	d103      	bne.n	8003338 <xTaskIncrementTick+0xd8>
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2200      	movs	r2, #0
 800333c:	615a      	str	r2, [r3, #20]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	1e5a      	subs	r2, r3, #1
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01e      	beq.n	800338e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	6a12      	ldr	r2, [r2, #32]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	69d2      	ldr	r2, [r2, #28]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	3318      	adds	r3, #24
 8003372:	429a      	cmp	r2, r3
 8003374:	d103      	bne.n	800337e <xTaskIncrementTick+0x11e>
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	6a1a      	ldr	r2, [r3, #32]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2200      	movs	r2, #0
 8003382:	629a      	str	r2, [r3, #40]	; 0x28
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	1e5a      	subs	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	4618      	mov	r0, r3
 8003392:	f004 f801 	bl	8007398 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	2201      	movs	r2, #1
 800339c:	409a      	lsls	r2, r3
 800339e:	4b29      	ldr	r3, [pc, #164]	; (8003444 <xTaskIncrementTick+0x1e4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	4a27      	ldr	r2, [pc, #156]	; (8003444 <xTaskIncrementTick+0x1e4>)
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	4926      	ldr	r1, [pc, #152]	; (8003448 <xTaskIncrementTick+0x1e8>)
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	3304      	adds	r3, #4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	3204      	adds	r2, #4
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	1d1a      	adds	r2, r3, #4
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <xTaskIncrementTick+0x1e8>)
 80033ec:	441a      	add	r2, r3
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	615a      	str	r2, [r3, #20]
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f6:	4914      	ldr	r1, [pc, #80]	; (8003448 <xTaskIncrementTick+0x1e8>)
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	1c59      	adds	r1, r3, #1
 8003406:	4810      	ldr	r0, [pc, #64]	; (8003448 <xTaskIncrementTick+0x1e8>)
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4403      	add	r3, r0
 8003412:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003414:	e75f      	b.n	80032d6 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <xTaskIncrementTick+0x1ec>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	4a0b      	ldr	r2, [pc, #44]	; (800344c <xTaskIncrementTick+0x1ec>)
 800341e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003422:	4618      	mov	r0, r3
 8003424:	3728      	adds	r7, #40	; 0x28
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200001d8 	.word	0x200001d8
 8003430:	200001b4 	.word	0x200001b4
 8003434:	20000168 	.word	0x20000168
 8003438:	2000016c 	.word	0x2000016c
 800343c:	200001c8 	.word	0x200001c8
 8003440:	200001d0 	.word	0x200001d0
 8003444:	200001b8 	.word	0x200001b8
 8003448:	200000dc 	.word	0x200000dc
 800344c:	200001c0 	.word	0x200001c0

08003450 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003456:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <vTaskSwitchContext+0xc4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800345e:	4b2e      	ldr	r3, [pc, #184]	; (8003518 <vTaskSwitchContext+0xc8>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003464:	e052      	b.n	800350c <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8003466:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <vTaskSwitchContext+0xc8>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346c:	4b2b      	ldr	r3, [pc, #172]	; (800351c <vTaskSwitchContext+0xcc>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800347a:	7afb      	ldrb	r3, [r7, #11]
 800347c:	f1c3 031f 	rsb	r3, r3, #31
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	4927      	ldr	r1, [pc, #156]	; (8003520 <vTaskSwitchContext+0xd0>)
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <vTaskSwitchContext+0x5c>
        __asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	607b      	str	r3, [r7, #4]
    }
 80034a8:	bf00      	nop
 80034aa:	e7fe      	b.n	80034aa <vTaskSwitchContext+0x5a>
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4a1a      	ldr	r2, [pc, #104]	; (8003520 <vTaskSwitchContext+0xd0>)
 80034b8:	4413      	add	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	3308      	adds	r3, #8
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d104      	bne.n	80034dc <vTaskSwitchContext+0x8c>
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	4a10      	ldr	r2, [pc, #64]	; (8003524 <vTaskSwitchContext+0xd4>)
 80034e4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80034e6:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <vTaskSwitchContext+0xd4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3334      	adds	r3, #52	; 0x34
 80034ec:	2205      	movs	r2, #5
 80034ee:	490e      	ldr	r1, [pc, #56]	; (8003528 <vTaskSwitchContext+0xd8>)
 80034f0:	4618      	mov	r0, r3
 80034f2:	f004 f94b 	bl	800778c <memcmp>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <vTaskSwitchContext+0xb8>
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <vTaskSwitchContext+0xd4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f003 ff07 	bl	8007314 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003506:	e001      	b.n	800350c <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8003508:	f003 fea6 	bl	8007258 <SEGGER_SYSVIEW_OnIdle>
}
 800350c:	bf00      	nop
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	200001d8 	.word	0x200001d8
 8003518:	200001c4 	.word	0x200001c4
 800351c:	200001b8 	.word	0x200001b8
 8003520:	200000dc 	.word	0x200000dc
 8003524:	200000d8 	.word	0x200000d8
 8003528:	080078a8 	.word	0x080078a8

0800352c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	60fb      	str	r3, [r7, #12]
    }
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <vTaskPlaceOnEventList+0x44>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3318      	adds	r3, #24
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe ff1d 	bl	800239a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003560:	2101      	movs	r1, #1
 8003562:	6838      	ldr	r0, [r7, #0]
 8003564:	f000 fc24 	bl	8003db0 <prvAddCurrentTaskToDelayedList>
}
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	200000d8 	.word	0x200000d8

08003574 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10a      	bne.n	800359c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358a:	f383 8811 	msr	BASEPRI, r3
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	613b      	str	r3, [r7, #16]
    }
 8003598:	bf00      	nop
 800359a:	e7fe      	b.n	800359a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	4b17      	ldr	r3, [pc, #92]	; (8003600 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	61da      	str	r2, [r3, #28]
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	6892      	ldr	r2, [r2, #8]
 80035b2:	621a      	str	r2, [r3, #32]
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	3218      	adds	r2, #24
 80035be:	605a      	str	r2, [r3, #4]
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f103 0218 	add.w	r2, r3, #24
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295
 80035e8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80035ea:	2024      	movs	r0, #36	; 0x24
 80035ec:	f003 f934 	bl	8006858 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	68b8      	ldr	r0, [r7, #8]
 80035f4:	f000 fbdc 	bl	8003db0 <prvAddCurrentTaskToDelayedList>
    }
 80035f8:	bf00      	nop
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	200000d8 	.word	0x200000d8

08003604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	60fb      	str	r3, [r7, #12]
    }
 800362c:	bf00      	nop
 800362e:	e7fe      	b.n	800362e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	6a3a      	ldr	r2, [r7, #32]
 800363c:	6a12      	ldr	r2, [r2, #32]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	69d2      	ldr	r2, [r2, #28]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	3318      	adds	r3, #24
 8003652:	429a      	cmp	r2, r3
 8003654:	d103      	bne.n	800365e <xTaskRemoveFromEventList+0x5a>
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	6a1a      	ldr	r2, [r3, #32]
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	2200      	movs	r2, #0
 8003662:	629a      	str	r2, [r3, #40]	; 0x28
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	1e5a      	subs	r2, r3, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800366e:	4b4b      	ldr	r3, [pc, #300]	; (800379c <xTaskRemoveFromEventList+0x198>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d162      	bne.n	800373c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	6a3a      	ldr	r2, [r7, #32]
 8003682:	68d2      	ldr	r2, [r2, #12]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	6a3a      	ldr	r2, [r7, #32]
 800368c:	6892      	ldr	r2, [r2, #8]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	3304      	adds	r3, #4
 8003698:	429a      	cmp	r2, r3
 800369a:	d103      	bne.n	80036a4 <xTaskRemoveFromEventList+0xa0>
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	2200      	movs	r2, #0
 80036a8:	615a      	str	r2, [r3, #20]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	1e5a      	subs	r2, r3, #1
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f003 fe6e 	bl	8007398 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	2201      	movs	r2, #1
 80036c2:	409a      	lsls	r2, r3
 80036c4:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <xTaskRemoveFromEventList+0x19c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	4a35      	ldr	r2, [pc, #212]	; (80037a0 <xTaskRemoveFromEventList+0x19c>)
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d2:	4934      	ldr	r1, [pc, #208]	; (80037a4 <xTaskRemoveFromEventList+0x1a0>)
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	3304      	adds	r3, #4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	609a      	str	r2, [r3, #8]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	6a3a      	ldr	r2, [r7, #32]
 80036f8:	3204      	adds	r2, #4
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	1d1a      	adds	r2, r3, #4
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4a24      	ldr	r2, [pc, #144]	; (80037a4 <xTaskRemoveFromEventList+0x1a0>)
 8003712:	441a      	add	r2, r3
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	615a      	str	r2, [r3, #20]
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371c:	4921      	ldr	r1, [pc, #132]	; (80037a4 <xTaskRemoveFromEventList+0x1a0>)
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	1c59      	adds	r1, r3, #1
 800372c:	481d      	ldr	r0, [pc, #116]	; (80037a4 <xTaskRemoveFromEventList+0x1a0>)
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4403      	add	r3, r0
 8003738:	6019      	str	r1, [r3, #0]
 800373a:	e01b      	b.n	8003774 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <xTaskRemoveFromEventList+0x1a4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	61da      	str	r2, [r3, #28]
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	621a      	str	r2, [r3, #32]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	6a3a      	ldr	r2, [r7, #32]
 8003756:	3218      	adds	r2, #24
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f103 0218 	add.w	r2, r3, #24
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	4a10      	ldr	r2, [pc, #64]	; (80037a8 <xTaskRemoveFromEventList+0x1a4>)
 8003768:	629a      	str	r2, [r3, #40]	; 0x28
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <xTaskRemoveFromEventList+0x1a4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3301      	adds	r3, #1
 8003770:	4a0d      	ldr	r2, [pc, #52]	; (80037a8 <xTaskRemoveFromEventList+0x1a4>)
 8003772:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <xTaskRemoveFromEventList+0x1a8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	429a      	cmp	r2, r3
 8003780:	d905      	bls.n	800378e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003782:	2301      	movs	r3, #1
 8003784:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <xTaskRemoveFromEventList+0x1ac>)
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e001      	b.n	8003792 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003794:	4618      	mov	r0, r3
 8003796:	3728      	adds	r7, #40	; 0x28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	200001d8 	.word	0x200001d8
 80037a0:	200001b8 	.word	0x200001b8
 80037a4:	200000dc 	.word	0x200000dc
 80037a8:	20000170 	.word	0x20000170
 80037ac:	200000d8 	.word	0x200000d8
 80037b0:	200001c4 	.word	0x200001c4

080037b4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <vTaskInternalSetTimeOutState+0x24>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <vTaskInternalSetTimeOutState+0x28>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	605a      	str	r2, [r3, #4]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	200001c8 	.word	0x200001c8
 80037dc:	200001b4 	.word	0x200001b4

080037e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	613b      	str	r3, [r7, #16]
    }
 8003802:	bf00      	nop
 8003804:	e7fe      	b.n	8003804 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	60fb      	str	r3, [r7, #12]
    }
 800381e:	bf00      	nop
 8003820:	e7fe      	b.n	8003820 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003822:	f000 ff77 	bl	8004714 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003826:	4b1f      	ldr	r3, [pc, #124]	; (80038a4 <xTaskCheckForTimeOut+0xc4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d102      	bne.n	8003846 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	e026      	b.n	8003894 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <xTaskCheckForTimeOut+0xc8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d00a      	beq.n	8003868 <xTaskCheckForTimeOut+0x88>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	429a      	cmp	r2, r3
 800385a:	d305      	bcc.n	8003868 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800385c:	2301      	movs	r3, #1
 800385e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e015      	b.n	8003894 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	429a      	cmp	r2, r3
 8003870:	d20b      	bcs.n	800388a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	1ad2      	subs	r2, r2, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff ff98 	bl	80037b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	e004      	b.n	8003894 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003894:	f000 ff6e 	bl	8004774 <vPortExitCritical>

    return xReturn;
 8003898:	69fb      	ldr	r3, [r7, #28]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200001b4 	.word	0x200001b4
 80038a8:	200001c8 	.word	0x200001c8

080038ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <vTaskMissedYield+0x14>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	200001c4 	.word	0x200001c4

080038c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038cc:	f000 f84c 	bl	8003968 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <prvIdleTask+0x20>)
 80038d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80038e0:	e7f4      	b.n	80038cc <prvIdleTask+0x8>
 80038e2:	bf00      	nop
 80038e4:	e000ed04 	.word	0xe000ed04

080038e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	e00c      	b.n	800390e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <prvInitialiseTaskLists+0x60>)
 8003900:	4413      	add	r3, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fcf8 	bl	80022f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3301      	adds	r3, #1
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d9ef      	bls.n	80038f4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003914:	480d      	ldr	r0, [pc, #52]	; (800394c <prvInitialiseTaskLists+0x64>)
 8003916:	f7fe fcef 	bl	80022f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800391a:	480d      	ldr	r0, [pc, #52]	; (8003950 <prvInitialiseTaskLists+0x68>)
 800391c:	f7fe fcec 	bl	80022f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003920:	480c      	ldr	r0, [pc, #48]	; (8003954 <prvInitialiseTaskLists+0x6c>)
 8003922:	f7fe fce9 	bl	80022f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003926:	480c      	ldr	r0, [pc, #48]	; (8003958 <prvInitialiseTaskLists+0x70>)
 8003928:	f7fe fce6 	bl	80022f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800392c:	480b      	ldr	r0, [pc, #44]	; (800395c <prvInitialiseTaskLists+0x74>)
 800392e:	f7fe fce3 	bl	80022f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <prvInitialiseTaskLists+0x78>)
 8003934:	4a05      	ldr	r2, [pc, #20]	; (800394c <prvInitialiseTaskLists+0x64>)
 8003936:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003938:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <prvInitialiseTaskLists+0x7c>)
 800393a:	4a05      	ldr	r2, [pc, #20]	; (8003950 <prvInitialiseTaskLists+0x68>)
 800393c:	601a      	str	r2, [r3, #0]
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	200000dc 	.word	0x200000dc
 800394c:	20000140 	.word	0x20000140
 8003950:	20000154 	.word	0x20000154
 8003954:	20000170 	.word	0x20000170
 8003958:	20000184 	.word	0x20000184
 800395c:	2000019c 	.word	0x2000019c
 8003960:	20000168 	.word	0x20000168
 8003964:	2000016c 	.word	0x2000016c

08003968 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800396e:	e019      	b.n	80039a4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003970:	f000 fed0 	bl	8004714 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003974:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <prvCheckTasksWaitingTermination+0x50>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fd43 	bl	800240c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003986:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <prvCheckTasksWaitingTermination+0x54>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3b01      	subs	r3, #1
 800398c:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <prvCheckTasksWaitingTermination+0x54>)
 800398e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <prvCheckTasksWaitingTermination+0x58>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3b01      	subs	r3, #1
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <prvCheckTasksWaitingTermination+0x58>)
 8003998:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800399a:	f000 feeb 	bl	8004774 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f810 	bl	80039c4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <prvCheckTasksWaitingTermination+0x58>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e1      	bne.n	8003970 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000184 	.word	0x20000184
 80039bc:	200001b0 	.word	0x200001b0
 80039c0:	20000198 	.word	0x20000198

080039c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 f885 	bl	8004ae0 <vPortFree>
            vPortFree( pxTCB );
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f001 f882 	bl	8004ae0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <prvResetNextTaskUnblockTime+0x30>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d104      	bne.n	80039fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80039f2:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <prvResetNextTaskUnblockTime+0x34>)
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295
 80039f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039fa:	e005      	b.n	8003a08 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <prvResetNextTaskUnblockTime+0x30>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <prvResetNextTaskUnblockTime+0x34>)
 8003a06:	6013      	str	r3, [r2, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000168 	.word	0x20000168
 8003a18:	200001d0 	.word	0x200001d0

08003a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <xTaskGetSchedulerState+0x34>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	e008      	b.n	8003a42 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <xTaskGetSchedulerState+0x38>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	e001      	b.n	8003a42 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a42:	687b      	ldr	r3, [r7, #4]
    }
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	200001bc 	.word	0x200001bc
 8003a54:	200001d8 	.word	0x200001d8

08003a58 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	613b      	str	r3, [r7, #16]
    }
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003a82:	f000 fe47 	bl	8004714 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003a86:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <xTaskGenericNotifyWait+0x108>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3354      	adds	r3, #84	; 0x54
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d022      	beq.n	8003ade <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003a98:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <xTaskGenericNotifyWait+0x108>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	3214      	adds	r2, #20
 8003aa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	43d2      	mvns	r2, r2
 8003aa8:	4011      	ands	r1, r2
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	3214      	adds	r2, #20
 8003aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003ab2:	4b2b      	ldr	r3, [pc, #172]	; (8003b60 <xTaskGenericNotifyWait+0x108>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4413      	add	r3, r2
 8003aba:	3354      	adds	r3, #84	; 0x54
 8003abc:	2201      	movs	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	6a38      	ldr	r0, [r7, #32]
 8003aca:	f000 f971 	bl	8003db0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003ace:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <xTaskGenericNotifyWait+0x10c>)
 8003ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ade:	f000 fe49 	bl	8004774 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003ae2:	f000 fe17 	bl	8004714 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	2040      	movs	r0, #64	; 0x40
 8003af4:	f002 ffda 	bl	8006aac <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003afe:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <xTaskGenericNotifyWait+0x108>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	3214      	adds	r2, #20
 8003b06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003b0e:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <xTaskGenericNotifyWait+0x108>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4413      	add	r3, r2
 8003b16:	3354      	adds	r3, #84	; 0x54
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d002      	beq.n	8003b26 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	e00e      	b.n	8003b44 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003b26:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <xTaskGenericNotifyWait+0x108>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	3214      	adds	r2, #20
 8003b2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	43d2      	mvns	r2, r2
 8003b36:	4011      	ands	r1, r2
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	3214      	adds	r2, #20
 8003b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <xTaskGenericNotifyWait+0x108>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3354      	adds	r3, #84	; 0x54
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003b52:	f000 fe0f 	bl	8004774 <vPortExitCritical>

        return xReturn;
 8003b56:	697b      	ldr	r3, [r7, #20]
    }
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	200000d8 	.word	0x200000d8
 8003b64:	e000ed04 	.word	0xe000ed04

08003b68 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b090      	sub	sp, #64	; 0x40
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003b76:	2301      	movs	r3, #1
 8003b78:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <xTaskGenericNotify+0x2e>
        __asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	623b      	str	r3, [r7, #32]
    }
 8003b92:	bf00      	nop
 8003b94:	e7fe      	b.n	8003b94 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10a      	bne.n	8003bb2 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	61fb      	str	r3, [r7, #28]
    }
 8003bae:	bf00      	nop
 8003bb0:	e7fe      	b.n	8003bb0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003bb6:	f000 fdad 	bl	8004714 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d006      	beq.n	8003bce <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	3214      	adds	r2, #20
 8003bc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bcc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3354      	adds	r3, #84	; 0x54
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4413      	add	r3, r2
 8003be2:	3354      	adds	r3, #84	; 0x54
 8003be4:	2202      	movs	r2, #2
 8003be6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d83b      	bhi.n	8003c66 <xTaskGenericNotify+0xfe>
 8003bee:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <xTaskGenericNotify+0x8c>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c85 	.word	0x08003c85
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c25 	.word	0x08003c25
 8003c00:	08003c3d 	.word	0x08003c3d
 8003c04:	08003c4b 	.word	0x08003c4b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	3214      	adds	r2, #20
 8003c0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	ea42 0103 	orr.w	r1, r2, r3
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	3214      	adds	r2, #20
 8003c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c22:	e032      	b.n	8003c8a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	3214      	adds	r2, #20
 8003c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c2e:	1c59      	adds	r1, r3, #1
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	3214      	adds	r2, #20
 8003c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c3a:	e026      	b.n	8003c8a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	3214      	adds	r2, #20
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c48:	e01f      	b.n	8003c8a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d006      	beq.n	8003c60 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	3214      	adds	r2, #20
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003c5e:	e014      	b.n	8003c8a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003c64:	e011      	b.n	8003c8a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003c66:	4b4e      	ldr	r3, [pc, #312]	; (8003da0 <xTaskGenericNotify+0x238>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00c      	beq.n	8003c88 <xTaskGenericNotify+0x120>
        __asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	61bb      	str	r3, [r7, #24]
    }
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <xTaskGenericNotify+0x11a>
                    break;
 8003c84:	bf00      	nop
 8003c86:	e000      	b.n	8003c8a <xTaskGenericNotify+0x122>

                    break;
 8003c88:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f003 fbc5 	bl	800741c <SEGGER_SYSVIEW_ShrinkId>
 8003c92:	4601      	mov	r1, r0
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	203e      	movs	r0, #62	; 0x3e
 8003ca0:	f002 ff04 	bl	8006aac <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d172      	bne.n	8003d92 <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb8:	68d2      	ldr	r2, [r2, #12]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc2:	6892      	ldr	r2, [r2, #8]
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	3304      	adds	r3, #4
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d103      	bne.n	8003cda <xTaskGenericNotify+0x172>
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	2200      	movs	r2, #0
 8003cde:	615a      	str	r2, [r3, #20]
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	1e5a      	subs	r2, r3, #1
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	4618      	mov	r0, r3
 8003cee:	f003 fb53 	bl	8007398 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	4b2a      	ldr	r3, [pc, #168]	; (8003da4 <xTaskGenericNotify+0x23c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	4a28      	ldr	r2, [pc, #160]	; (8003da4 <xTaskGenericNotify+0x23c>)
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	4927      	ldr	r1, [pc, #156]	; (8003da8 <xTaskGenericNotify+0x240>)
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	3304      	adds	r3, #4
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	60da      	str	r2, [r3, #12]
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d2e:	3204      	adds	r2, #4
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	1d1a      	adds	r2, r3, #4
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	609a      	str	r2, [r3, #8]
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <xTaskGenericNotify+0x240>)
 8003d48:	441a      	add	r2, r3
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	615a      	str	r2, [r3, #20]
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d52:	4915      	ldr	r1, [pc, #84]	; (8003da8 <xTaskGenericNotify+0x240>)
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	1c59      	adds	r1, r3, #1
 8003d62:	4811      	ldr	r0, [pc, #68]	; (8003da8 <xTaskGenericNotify+0x240>)
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4403      	add	r3, r0
 8003d6e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <xTaskGenericNotify+0x226>
        __asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	617b      	str	r3, [r7, #20]
    }
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <xTaskGenericNotify+0x244>)
 8003d90:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d92:	f000 fcef 	bl	8004774 <vPortExitCritical>

        return xReturn;
 8003d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3738      	adds	r7, #56	; 0x38
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	200001b4 	.word	0x200001b4
 8003da4:	200001b8 	.word	0x200001b8
 8003da8:	200000dc 	.word	0x200000dc
 8003dac:	200000d8 	.word	0x200000d8

08003db0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003dba:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dc0:	4b35      	ldr	r3, [pc, #212]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe fb20 	bl	800240c <uxListRemove>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003dd2:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	2201      	movs	r2, #1
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43da      	mvns	r2, r3
 8003de0:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <prvAddCurrentTaskToDelayedList+0xec>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4013      	ands	r3, r2
 8003de6:	4a2d      	ldr	r2, [pc, #180]	; (8003e9c <prvAddCurrentTaskToDelayedList+0xec>)
 8003de8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d124      	bne.n	8003e3c <prvAddCurrentTaskToDelayedList+0x8c>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d021      	beq.n	8003e3c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003df8:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	6892      	ldr	r2, [r2, #8]
 8003e0e:	60da      	str	r2, [r3, #12]
 8003e10:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	3204      	adds	r2, #4
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	1d1a      	adds	r2, r3, #4
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	4b1c      	ldr	r3, [pc, #112]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1d      	ldr	r2, [pc, #116]	; (8003ea0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e2c:	615a      	str	r2, [r3, #20]
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3301      	adds	r3, #1
 8003e34:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e3a:	e026      	b.n	8003e8a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4413      	add	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e44:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d209      	bcs.n	8003e68 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f7fe fa9a 	bl	800239a <vListInsert>
}
 8003e66:	e010      	b.n	8003e8a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f7fe fa90 	bl	800239a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d202      	bcs.n	8003e8a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003e84:	4a09      	ldr	r2, [pc, #36]	; (8003eac <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6013      	str	r3, [r2, #0]
}
 8003e8a:	bf00      	nop
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	200001b4 	.word	0x200001b4
 8003e98:	200000d8 	.word	0x200000d8
 8003e9c:	200001b8 	.word	0x200001b8
 8003ea0:	2000019c 	.word	0x2000019c
 8003ea4:	2000016c 	.word	0x2000016c
 8003ea8:	20000168 	.word	0x20000168
 8003eac:	200001d0 	.word	0x200001d0

08003eb0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003eba:	f000 fa47 	bl	800434c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <xTimerCreateTimerTask+0x54>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003ec6:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <xTimerCreateTimerTask+0x58>)
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	2302      	movs	r3, #2
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ed4:	490d      	ldr	r1, [pc, #52]	; (8003f0c <xTimerCreateTimerTask+0x5c>)
 8003ed6:	480e      	ldr	r0, [pc, #56]	; (8003f10 <xTimerCreateTimerTask+0x60>)
 8003ed8:	f7fe fdda 	bl	8002a90 <xTaskCreate>
 8003edc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	603b      	str	r3, [r7, #0]
    }
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003efa:	687b      	ldr	r3, [r7, #4]
    }
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	2000020c 	.word	0x2000020c
 8003f08:	20000210 	.word	0x20000210
 8003f0c:	080078b0 	.word	0x080078b0
 8003f10:	08003fb9 	.word	0x08003fb9

08003f14 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f20:	e008      	b.n	8003f34 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4413      	add	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	18d1      	adds	r1, r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f8dd 	bl	8004100 <prvInsertTimerInActiveList>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ea      	bne.n	8003f22 <prvReloadTimer+0xe>
        }
    }
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f62:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <prvProcessExpiredTimer+0x5c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe fa4b 	bl	800240c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff ffc3 	bl	8003f14 <prvReloadTimer>
 8003f8e:	e008      	b.n	8003fa2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	4798      	blx	r3
    }
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000204 	.word	0x20000204

08003fb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fc0:	f107 0308 	add.w	r3, r7, #8
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 f857 	bl	8004078 <prvGetNextExpireTime>
 8003fca:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f803 	bl	8003fdc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003fd6:	f000 f8d5 	bl	8004184 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fda:	e7f1      	b.n	8003fc0 <prvTimerTask+0x8>

08003fdc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003fe6:	f7ff f819 	bl	800301c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fea:	f107 0308 	add.w	r3, r7, #8
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f866 	bl	80040c0 <prvSampleTimeNow>
 8003ff4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d130      	bne.n	800405e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <prvProcessTimerOrBlockTask+0x3c>
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	429a      	cmp	r2, r3
 8004008:	d806      	bhi.n	8004018 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800400a:	f7ff f815 	bl	8003038 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ffa1 	bl	8003f58 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004016:	e024      	b.n	8004062 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800401e:	4b13      	ldr	r3, [pc, #76]	; (800406c <prvProcessTimerOrBlockTask+0x90>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <prvProcessTimerOrBlockTask+0x50>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <prvProcessTimerOrBlockTask+0x52>
 800402c:	2300      	movs	r3, #0
 800402e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <prvProcessTimerOrBlockTask+0x94>)
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	4619      	mov	r1, r3
 800403e:	f7fe fcf3 	bl	8002a28 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004042:	f7fe fff9 	bl	8003038 <xTaskResumeAll>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <prvProcessTimerOrBlockTask+0x98>)
 800404e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	f3bf 8f6f 	isb	sy
    }
 800405c:	e001      	b.n	8004062 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800405e:	f7fe ffeb 	bl	8003038 <xTaskResumeAll>
    }
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000208 	.word	0x20000208
 8004070:	2000020c 	.word	0x2000020c
 8004074:	e000ed04 	.word	0xe000ed04

08004078 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004080:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <prvGetNextExpireTime+0x44>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <prvGetNextExpireTime+0x16>
 800408a:	2201      	movs	r2, #1
 800408c:	e000      	b.n	8004090 <prvGetNextExpireTime+0x18>
 800408e:	2200      	movs	r2, #0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d105      	bne.n	80040a8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800409c:	4b07      	ldr	r3, [pc, #28]	; (80040bc <prvGetNextExpireTime+0x44>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	e001      	b.n	80040ac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80040ac:	68fb      	ldr	r3, [r7, #12]
    }
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	20000204 	.word	0x20000204

080040c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80040c8:	f7ff f8a8 	bl	800321c <xTaskGetTickCount>
 80040cc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <prvSampleTimeNow+0x3c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d205      	bcs.n	80040e4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80040d8:	f000 f912 	bl	8004300 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e002      	b.n	80040ea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80040ea:	4a04      	ldr	r2, [pc, #16]	; (80040fc <prvSampleTimeNow+0x3c>)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80040f0:	68fb      	ldr	r3, [r7, #12]
    }
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000214 	.word	0x20000214

08004100 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	429a      	cmp	r2, r3
 8004124:	d812      	bhi.n	800414c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	1ad2      	subs	r2, r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	429a      	cmp	r2, r3
 8004132:	d302      	bcc.n	800413a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	e01b      	b.n	8004172 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800413a:	4b10      	ldr	r3, [pc, #64]	; (800417c <prvInsertTimerInActiveList+0x7c>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3304      	adds	r3, #4
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f7fe f928 	bl	800239a <vListInsert>
 800414a:	e012      	b.n	8004172 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d206      	bcs.n	8004162 <prvInsertTimerInActiveList+0x62>
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d302      	bcc.n	8004162 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800415c:	2301      	movs	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	e007      	b.n	8004172 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004162:	4b07      	ldr	r3, [pc, #28]	; (8004180 <prvInsertTimerInActiveList+0x80>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3304      	adds	r3, #4
 800416a:	4619      	mov	r1, r3
 800416c:	4610      	mov	r0, r2
 800416e:	f7fe f914 	bl	800239a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004172:	697b      	ldr	r3, [r7, #20]
    }
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000208 	.word	0x20000208
 8004180:	20000204 	.word	0x20000204

08004184 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800418a:	e0a6      	b.n	80042da <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f2c0 80a2 	blt.w	80042d8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d004      	beq.n	80041aa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe f931 	bl	800240c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff ff87 	bl	80040c0 <prvSampleTimeNow>
 80041b2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	f200 808e 	bhi.w	80042da <prvProcessReceivedCommands+0x156>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <prvProcessReceivedCommands+0x40>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	080041e9 	.word	0x080041e9
 80041cc:	08004251 	.word	0x08004251
 80041d0:	08004265 	.word	0x08004265
 80041d4:	080042af 	.word	0x080042af
 80041d8:	080041e9 	.word	0x080041e9
 80041dc:	080041e9 	.word	0x080041e9
 80041e0:	08004251 	.word	0x08004251
 80041e4:	08004265 	.word	0x08004265
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	18d1      	adds	r1, r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	69f8      	ldr	r0, [r7, #28]
 8004208:	f7ff ff7a 	bl	8004100 <prvInsertTimerInActiveList>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d063      	beq.n	80042da <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d009      	beq.n	8004234 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	4413      	add	r3, r2
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4619      	mov	r1, r3
 800422c:	69f8      	ldr	r0, [r7, #28]
 800422e:	f7ff fe71 	bl	8003f14 <prvReloadTimer>
 8004232:	e008      	b.n	8004246 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	b2da      	uxtb	r2, r3
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	69f8      	ldr	r0, [r7, #28]
 800424c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800424e:	e044      	b.n	80042da <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	b2da      	uxtb	r2, r3
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004262:	e03a      	b.n	80042da <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	b2da      	uxtb	r2, r3
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	617b      	str	r3, [r7, #20]
    }
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	18d1      	adds	r1, r2, r3
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	69f8      	ldr	r0, [r7, #28]
 80042a8:	f7ff ff2a 	bl	8004100 <prvInsertTimerInActiveList>
                        break;
 80042ac:	e015      	b.n	80042da <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d103      	bne.n	80042c4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80042bc:	69f8      	ldr	r0, [r7, #28]
 80042be:	f000 fc0f 	bl	8004ae0 <vPortFree>
 80042c2:	e00a      	b.n	80042da <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80042d6:	e000      	b.n	80042da <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80042d8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042da:	4b08      	ldr	r3, [pc, #32]	; (80042fc <prvProcessReceivedCommands+0x178>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f107 0108 	add.w	r1, r7, #8
 80042e2:	2200      	movs	r2, #0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fe f9b5 	bl	8002654 <xQueueReceive>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f47f af4d 	bne.w	800418c <prvProcessReceivedCommands+0x8>
        }
    }
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	2000020c 	.word	0x2000020c

08004300 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004306:	e009      	b.n	800431c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004308:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <prvSwitchTimerLists+0x44>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004312:	f04f 31ff 	mov.w	r1, #4294967295
 8004316:	6838      	ldr	r0, [r7, #0]
 8004318:	f7ff fe1e 	bl	8003f58 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <prvSwitchTimerLists+0x44>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <prvSwitchTimerLists+0x44>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <prvSwitchTimerLists+0x48>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a04      	ldr	r2, [pc, #16]	; (8004344 <prvSwitchTimerLists+0x44>)
 8004332:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004334:	4a04      	ldr	r2, [pc, #16]	; (8004348 <prvSwitchTimerLists+0x48>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6013      	str	r3, [r2, #0]
    }
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000204 	.word	0x20000204
 8004348:	20000208 	.word	0x20000208

0800434c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004350:	f000 f9e0 	bl	8004714 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004354:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <prvCheckForValidListAndQueue+0x54>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d11d      	bne.n	8004398 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800435c:	4811      	ldr	r0, [pc, #68]	; (80043a4 <prvCheckForValidListAndQueue+0x58>)
 800435e:	f7fd ffcb 	bl	80022f8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004362:	4811      	ldr	r0, [pc, #68]	; (80043a8 <prvCheckForValidListAndQueue+0x5c>)
 8004364:	f7fd ffc8 	bl	80022f8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004368:	4b10      	ldr	r3, [pc, #64]	; (80043ac <prvCheckForValidListAndQueue+0x60>)
 800436a:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <prvCheckForValidListAndQueue+0x58>)
 800436c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800436e:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <prvCheckForValidListAndQueue+0x64>)
 8004370:	4a0d      	ldr	r2, [pc, #52]	; (80043a8 <prvCheckForValidListAndQueue+0x5c>)
 8004372:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004374:	2200      	movs	r2, #0
 8004376:	210c      	movs	r1, #12
 8004378:	200a      	movs	r0, #10
 800437a:	f7fe f8f3 	bl	8002564 <xQueueGenericCreate>
 800437e:	4603      	mov	r3, r0
 8004380:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <prvCheckForValidListAndQueue+0x54>)
 8004382:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <prvCheckForValidListAndQueue+0x54>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <prvCheckForValidListAndQueue+0x54>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4908      	ldr	r1, [pc, #32]	; (80043b4 <prvCheckForValidListAndQueue+0x68>)
 8004392:	4618      	mov	r0, r3
 8004394:	f7fe faf2 	bl	800297c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004398:	f000 f9ec 	bl	8004774 <vPortExitCritical>
    }
 800439c:	bf00      	nop
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	2000020c 	.word	0x2000020c
 80043a4:	200001dc 	.word	0x200001dc
 80043a8:	200001f0 	.word	0x200001f0
 80043ac:	20000204 	.word	0x20000204
 80043b0:	20000208 	.word	0x20000208
 80043b4:	080078b8 	.word	0x080078b8

080043b8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3b04      	subs	r3, #4
 80043c8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3b04      	subs	r3, #4
 80043d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f023 0201 	bic.w	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3b04      	subs	r3, #4
 80043e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80043e8:	4a0c      	ldr	r2, [pc, #48]	; (800441c <pxPortInitialiseStack+0x64>)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3b14      	subs	r3, #20
 80043f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3b04      	subs	r3, #4
 80043fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f06f 0202 	mvn.w	r2, #2
 8004406:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3b20      	subs	r3, #32
 800440c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	08004421 	.word	0x08004421

08004420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800442a:	4b12      	ldr	r3, [pc, #72]	; (8004474 <prvTaskExitError+0x54>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004432:	d00a      	beq.n	800444a <prvTaskExitError+0x2a>
        __asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60fb      	str	r3, [r7, #12]
    }
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <prvTaskExitError+0x28>
        __asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	60bb      	str	r3, [r7, #8]
    }
 800445c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800445e:	bf00      	nop
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0fc      	beq.n	8004460 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004466:	bf00      	nop
 8004468:	bf00      	nop
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	20000010 	.word	0x20000010
	...

08004480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <pxCurrentTCBConst2>)
 8004482:	6819      	ldr	r1, [r3, #0]
 8004484:	6808      	ldr	r0, [r1, #0]
 8004486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448a:	f380 8809 	msr	PSP, r0
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f380 8811 	msr	BASEPRI, r0
 800449a:	4770      	bx	lr
 800449c:	f3af 8000 	nop.w

080044a0 <pxCurrentTCBConst2>:
 80044a0:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80044a8:	4808      	ldr	r0, [pc, #32]	; (80044cc <prvPortStartFirstTask+0x24>)
 80044aa:	6800      	ldr	r0, [r0, #0]
 80044ac:	6800      	ldr	r0, [r0, #0]
 80044ae:	f380 8808 	msr	MSP, r0
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f380 8814 	msr	CONTROL, r0
 80044ba:	b662      	cpsie	i
 80044bc:	b661      	cpsie	f
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	df00      	svc	0
 80044c8:	bf00      	nop
 80044ca:	0000      	.short	0x0000
 80044cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop

080044d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044da:	4b46      	ldr	r3, [pc, #280]	; (80045f4 <xPortStartScheduler+0x120>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a46      	ldr	r2, [pc, #280]	; (80045f8 <xPortStartScheduler+0x124>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d10a      	bne.n	80044fa <xPortStartScheduler+0x26>
        __asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	613b      	str	r3, [r7, #16]
    }
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044fa:	4b3e      	ldr	r3, [pc, #248]	; (80045f4 <xPortStartScheduler+0x120>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a3f      	ldr	r2, [pc, #252]	; (80045fc <xPortStartScheduler+0x128>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d10a      	bne.n	800451a <xPortStartScheduler+0x46>
        __asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	60fb      	str	r3, [r7, #12]
    }
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800451a:	4b39      	ldr	r3, [pc, #228]	; (8004600 <xPortStartScheduler+0x12c>)
 800451c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	22ff      	movs	r2, #255	; 0xff
 800452a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800453c:	b2da      	uxtb	r2, r3
 800453e:	4b31      	ldr	r3, [pc, #196]	; (8004604 <xPortStartScheduler+0x130>)
 8004540:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004542:	4b31      	ldr	r3, [pc, #196]	; (8004608 <xPortStartScheduler+0x134>)
 8004544:	2207      	movs	r2, #7
 8004546:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004548:	e009      	b.n	800455e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800454a:	4b2f      	ldr	r3, [pc, #188]	; (8004608 <xPortStartScheduler+0x134>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3b01      	subs	r3, #1
 8004550:	4a2d      	ldr	r2, [pc, #180]	; (8004608 <xPortStartScheduler+0x134>)
 8004552:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	b2db      	uxtb	r3, r3
 800455c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004566:	2b80      	cmp	r3, #128	; 0x80
 8004568:	d0ef      	beq.n	800454a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800456a:	4b27      	ldr	r3, [pc, #156]	; (8004608 <xPortStartScheduler+0x134>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f1c3 0307 	rsb	r3, r3, #7
 8004572:	2b04      	cmp	r3, #4
 8004574:	d00a      	beq.n	800458c <xPortStartScheduler+0xb8>
        __asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	60bb      	str	r3, [r7, #8]
    }
 8004588:	bf00      	nop
 800458a:	e7fe      	b.n	800458a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800458c:	4b1e      	ldr	r3, [pc, #120]	; (8004608 <xPortStartScheduler+0x134>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <xPortStartScheduler+0x134>)
 8004594:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004596:	4b1c      	ldr	r3, [pc, #112]	; (8004608 <xPortStartScheduler+0x134>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800459e:	4a1a      	ldr	r2, [pc, #104]	; (8004608 <xPortStartScheduler+0x134>)
 80045a0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80045aa:	4b18      	ldr	r3, [pc, #96]	; (800460c <xPortStartScheduler+0x138>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a17      	ldr	r2, [pc, #92]	; (800460c <xPortStartScheduler+0x138>)
 80045b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80045b6:	4b15      	ldr	r3, [pc, #84]	; (800460c <xPortStartScheduler+0x138>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a14      	ldr	r2, [pc, #80]	; (800460c <xPortStartScheduler+0x138>)
 80045bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80045c2:	f000 f963 	bl	800488c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <xPortStartScheduler+0x13c>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80045cc:	f000 f982 	bl	80048d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045d0:	4b10      	ldr	r3, [pc, #64]	; (8004614 <xPortStartScheduler+0x140>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a0f      	ldr	r2, [pc, #60]	; (8004614 <xPortStartScheduler+0x140>)
 80045d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80045dc:	f7ff ff64 	bl	80044a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80045e0:	f7fe ff36 	bl	8003450 <vTaskSwitchContext>
    prvTaskExitError();
 80045e4:	f7ff ff1c 	bl	8004420 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	e000ed00 	.word	0xe000ed00
 80045f8:	410fc271 	.word	0x410fc271
 80045fc:	410fc270 	.word	0x410fc270
 8004600:	e000e400 	.word	0xe000e400
 8004604:	20000218 	.word	0x20000218
 8004608:	2000021c 	.word	0x2000021c
 800460c:	e000ed20 	.word	0xe000ed20
 8004610:	20000010 	.word	0x20000010
 8004614:	e000ef34 	.word	0xe000ef34

08004618 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800461e:	4b37      	ldr	r3, [pc, #220]	; (80046fc <vInitPrioGroupValue+0xe4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a37      	ldr	r2, [pc, #220]	; (8004700 <vInitPrioGroupValue+0xe8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d10a      	bne.n	800463e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	613b      	str	r3, [r7, #16]
    }
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800463e:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <vInitPrioGroupValue+0xe4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a30      	ldr	r2, [pc, #192]	; (8004704 <vInitPrioGroupValue+0xec>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d10a      	bne.n	800465e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	60fb      	str	r3, [r7, #12]
    }
 800465a:	bf00      	nop
 800465c:	e7fe      	b.n	800465c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800465e:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <vInitPrioGroupValue+0xf0>)
 8004660:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	22ff      	movs	r2, #255	; 0xff
 800466e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004680:	b2da      	uxtb	r2, r3
 8004682:	4b22      	ldr	r3, [pc, #136]	; (800470c <vInitPrioGroupValue+0xf4>)
 8004684:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004686:	4b22      	ldr	r3, [pc, #136]	; (8004710 <vInitPrioGroupValue+0xf8>)
 8004688:	2207      	movs	r2, #7
 800468a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800468c:	e009      	b.n	80046a2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <vInitPrioGroupValue+0xf8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3b01      	subs	r3, #1
 8004694:	4a1e      	ldr	r2, [pc, #120]	; (8004710 <vInitPrioGroupValue+0xf8>)
 8004696:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	2b80      	cmp	r3, #128	; 0x80
 80046ac:	d0ef      	beq.n	800468e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046ae:	4b18      	ldr	r3, [pc, #96]	; (8004710 <vInitPrioGroupValue+0xf8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f1c3 0307 	rsb	r3, r3, #7
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d00a      	beq.n	80046d0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	60bb      	str	r3, [r7, #8]
    }
 80046cc:	bf00      	nop
 80046ce:	e7fe      	b.n	80046ce <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046d0:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <vInitPrioGroupValue+0xf8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	4a0e      	ldr	r2, [pc, #56]	; (8004710 <vInitPrioGroupValue+0xf8>)
 80046d8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046da:	4b0d      	ldr	r3, [pc, #52]	; (8004710 <vInitPrioGroupValue+0xf8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046e2:	4a0b      	ldr	r2, [pc, #44]	; (8004710 <vInitPrioGroupValue+0xf8>)
 80046e4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80046ee:	bf00      	nop
 80046f0:	371c      	adds	r7, #28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	e000ed00 	.word	0xe000ed00
 8004700:	410fc271 	.word	0x410fc271
 8004704:	410fc270 	.word	0x410fc270
 8004708:	e000e400 	.word	0xe000e400
 800470c:	20000218 	.word	0x20000218
 8004710:	2000021c 	.word	0x2000021c

08004714 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
        __asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	607b      	str	r3, [r7, #4]
    }
 800472c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800472e:	4b0f      	ldr	r3, [pc, #60]	; (800476c <vPortEnterCritical+0x58>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	4a0d      	ldr	r2, [pc, #52]	; (800476c <vPortEnterCritical+0x58>)
 8004736:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <vPortEnterCritical+0x58>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d10f      	bne.n	8004760 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <vPortEnterCritical+0x5c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <vPortEnterCritical+0x4c>
        __asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	603b      	str	r3, [r7, #0]
    }
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <vPortEnterCritical+0x4a>
    }
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	20000010 	.word	0x20000010
 8004770:	e000ed04 	.word	0xe000ed04

08004774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <vPortExitCritical+0x50>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10a      	bne.n	8004798 <vPortExitCritical+0x24>
        __asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	607b      	str	r3, [r7, #4]
    }
 8004794:	bf00      	nop
 8004796:	e7fe      	b.n	8004796 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <vPortExitCritical+0x50>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3b01      	subs	r3, #1
 800479e:	4a09      	ldr	r2, [pc, #36]	; (80047c4 <vPortExitCritical+0x50>)
 80047a0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80047a2:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <vPortExitCritical+0x50>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d105      	bne.n	80047b6 <vPortExitCritical+0x42>
 80047aa:	2300      	movs	r3, #0
 80047ac:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80047b4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000010 	.word	0x20000010
	...

080047d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047d0:	f3ef 8009 	mrs	r0, PSP
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	4b15      	ldr	r3, [pc, #84]	; (8004830 <pxCurrentTCBConst>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	f01e 0f10 	tst.w	lr, #16
 80047e0:	bf08      	it	eq
 80047e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ea:	6010      	str	r0, [r2, #0]
 80047ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047f4:	f380 8811 	msr	BASEPRI, r0
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f7fe fe26 	bl	8003450 <vTaskSwitchContext>
 8004804:	f04f 0000 	mov.w	r0, #0
 8004808:	f380 8811 	msr	BASEPRI, r0
 800480c:	bc09      	pop	{r0, r3}
 800480e:	6819      	ldr	r1, [r3, #0]
 8004810:	6808      	ldr	r0, [r1, #0]
 8004812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004816:	f01e 0f10 	tst.w	lr, #16
 800481a:	bf08      	it	eq
 800481c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004820:	f380 8809 	msr	PSP, r0
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	f3af 8000 	nop.w

08004830 <pxCurrentTCBConst>:
 8004830:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop

08004838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
        __asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	607b      	str	r3, [r7, #4]
    }
 8004850:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004852:	f002 fc87 	bl	8007164 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004856:	f7fe fd03 	bl	8003260 <xTaskIncrementTick>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d006      	beq.n	800486e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004860:	f002 fcde 	bl	8007220 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004864:	4b08      	ldr	r3, [pc, #32]	; (8004888 <SysTick_Handler+0x50>)
 8004866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e001      	b.n	8004872 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800486e:	f002 fcbb 	bl	80071e8 <SEGGER_SYSVIEW_RecordExitISR>
 8004872:	2300      	movs	r3, #0
 8004874:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	f383 8811 	msr	BASEPRI, r3
    }
 800487c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <vPortSetupTimerInterrupt+0x34>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <vPortSetupTimerInterrupt+0x38>)
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <vPortSetupTimerInterrupt+0x3c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <vPortSetupTimerInterrupt+0x40>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	099b      	lsrs	r3, r3, #6
 80048a8:	4a09      	ldr	r2, [pc, #36]	; (80048d0 <vPortSetupTimerInterrupt+0x44>)
 80048aa:	3b01      	subs	r3, #1
 80048ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ae:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <vPortSetupTimerInterrupt+0x34>)
 80048b0:	2207      	movs	r2, #7
 80048b2:	601a      	str	r2, [r3, #0]
}
 80048b4:	bf00      	nop
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	e000e010 	.word	0xe000e010
 80048c4:	e000e018 	.word	0xe000e018
 80048c8:	20000000 	.word	0x20000000
 80048cc:	10624dd3 	.word	0x10624dd3
 80048d0:	e000e014 	.word	0xe000e014

080048d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048e4 <vPortEnableVFP+0x10>
 80048d8:	6801      	ldr	r1, [r0, #0]
 80048da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048de:	6001      	str	r1, [r0, #0]
 80048e0:	4770      	bx	lr
 80048e2:	0000      	.short	0x0000
 80048e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop

080048ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048f2:	f3ef 8305 	mrs	r3, IPSR
 80048f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b0f      	cmp	r3, #15
 80048fc:	d914      	bls.n	8004928 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048fe:	4a17      	ldr	r2, [pc, #92]	; (800495c <vPortValidateInterruptPriority+0x70>)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004908:	4b15      	ldr	r3, [pc, #84]	; (8004960 <vPortValidateInterruptPriority+0x74>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	7afa      	ldrb	r2, [r7, #11]
 800490e:	429a      	cmp	r2, r3
 8004910:	d20a      	bcs.n	8004928 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	607b      	str	r3, [r7, #4]
    }
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004928:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <vPortValidateInterruptPriority+0x78>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004930:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <vPortValidateInterruptPriority+0x7c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d90a      	bls.n	800494e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	603b      	str	r3, [r7, #0]
    }
 800494a:	bf00      	nop
 800494c:	e7fe      	b.n	800494c <vPortValidateInterruptPriority+0x60>
    }
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	e000e3f0 	.word	0xe000e3f0
 8004960:	20000218 	.word	0x20000218
 8004964:	e000ed0c 	.word	0xe000ed0c
 8004968:	2000021c 	.word	0x2000021c

0800496c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	; 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004974:	2300      	movs	r3, #0
 8004976:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004978:	f7fe fb50 	bl	800301c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800497c:	4b53      	ldr	r3, [pc, #332]	; (8004acc <pvPortMalloc+0x160>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004984:	f000 f908 	bl	8004b98 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d012      	beq.n	80049b4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800498e:	2208      	movs	r2, #8
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	3308      	adds	r3, #8
 800499a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	43db      	mvns	r3, r3
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d804      	bhi.n	80049b0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	4413      	add	r3, r2
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	e001      	b.n	80049b4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	db70      	blt.n	8004a9c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d06d      	beq.n	8004a9c <pvPortMalloc+0x130>
 80049c0:	4b43      	ldr	r3, [pc, #268]	; (8004ad0 <pvPortMalloc+0x164>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d868      	bhi.n	8004a9c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049ca:	4b42      	ldr	r3, [pc, #264]	; (8004ad4 <pvPortMalloc+0x168>)
 80049cc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049ce:	4b41      	ldr	r3, [pc, #260]	; (8004ad4 <pvPortMalloc+0x168>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049d4:	e004      	b.n	80049e0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d903      	bls.n	80049f2 <pvPortMalloc+0x86>
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f1      	bne.n	80049d6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049f2:	4b36      	ldr	r3, [pc, #216]	; (8004acc <pvPortMalloc+0x160>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d04f      	beq.n	8004a9c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2208      	movs	r2, #8
 8004a02:	4413      	add	r3, r2
 8004a04:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	1ad2      	subs	r2, r2, r3
 8004a16:	2308      	movs	r3, #8
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d91f      	bls.n	8004a5e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4413      	add	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <pvPortMalloc+0xda>
        __asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	613b      	str	r3, [r7, #16]
    }
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	1ad2      	subs	r2, r2, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a58:	6978      	ldr	r0, [r7, #20]
 8004a5a:	f000 f8f9 	bl	8004c50 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <pvPortMalloc+0x164>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <pvPortMalloc+0x164>)
 8004a6a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a6c:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <pvPortMalloc+0x164>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <pvPortMalloc+0x16c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d203      	bcs.n	8004a80 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <pvPortMalloc+0x164>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a16      	ldr	r2, [pc, #88]	; (8004ad8 <pvPortMalloc+0x16c>)
 8004a7e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <pvPortMalloc+0x170>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3301      	adds	r3, #1
 8004a98:	4a10      	ldr	r2, [pc, #64]	; (8004adc <pvPortMalloc+0x170>)
 8004a9a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a9c:	f7fe facc 	bl	8003038 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <pvPortMalloc+0x154>
        __asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	60fb      	str	r3, [r7, #12]
    }
 8004abc:	bf00      	nop
 8004abe:	e7fe      	b.n	8004abe <pvPortMalloc+0x152>
    return pvReturn;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3728      	adds	r7, #40	; 0x28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20012e28 	.word	0x20012e28
 8004ad0:	20012e2c 	.word	0x20012e2c
 8004ad4:	20012e20 	.word	0x20012e20
 8004ad8:	20012e30 	.word	0x20012e30
 8004adc:	20012e34 	.word	0x20012e34

08004ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d049      	beq.n	8004b86 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004af2:	2308      	movs	r3, #8
 8004af4:	425b      	negs	r3, r3
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4413      	add	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	db0a      	blt.n	8004b1e <vPortFree+0x3e>
        __asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	60fb      	str	r3, [r7, #12]
    }
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <vPortFree+0x5c>
        __asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60bb      	str	r3, [r7, #8]
    }
 8004b38:	bf00      	nop
 8004b3a:	e7fe      	b.n	8004b3a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	0fdb      	lsrs	r3, r3, #31
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01c      	beq.n	8004b86 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d118      	bne.n	8004b86 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004b60:	f7fe fa5c 	bl	800301c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <vPortFree+0xb0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <vPortFree+0xb0>)
 8004b70:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b72:	6938      	ldr	r0, [r7, #16]
 8004b74:	f000 f86c 	bl	8004c50 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <vPortFree+0xb4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <vPortFree+0xb4>)
 8004b80:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b82:	f7fe fa59 	bl	8003038 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20012e2c 	.word	0x20012e2c
 8004b94:	20012e38 	.word	0x20012e38

08004b98 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b9e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004ba2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004ba4:	4b25      	ldr	r3, [pc, #148]	; (8004c3c <prvHeapInit+0xa4>)
 8004ba6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3307      	adds	r3, #7
 8004bb6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0307 	bic.w	r3, r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <prvHeapInit+0xa4>)
 8004bc8:	4413      	add	r3, r2
 8004bca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bd0:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <prvHeapInit+0xa8>)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bd6:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <prvHeapInit+0xa8>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4413      	add	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004be4:	2208      	movs	r2, #8
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0307 	bic.w	r3, r3, #7
 8004bf2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a13      	ldr	r2, [pc, #76]	; (8004c44 <prvHeapInit+0xac>)
 8004bf8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004bfa:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <prvHeapInit+0xac>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c02:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <prvHeapInit+0xac>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	1ad2      	subs	r2, r2, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c18:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <prvHeapInit+0xac>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4a08      	ldr	r2, [pc, #32]	; (8004c48 <prvHeapInit+0xb0>)
 8004c26:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a07      	ldr	r2, [pc, #28]	; (8004c4c <prvHeapInit+0xb4>)
 8004c2e:	6013      	str	r3, [r2, #0]
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	20000220 	.word	0x20000220
 8004c40:	20012e20 	.word	0x20012e20
 8004c44:	20012e28 	.word	0x20012e28
 8004c48:	20012e30 	.word	0x20012e30
 8004c4c:	20012e2c 	.word	0x20012e2c

08004c50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c58:	4b28      	ldr	r3, [pc, #160]	; (8004cfc <prvInsertBlockIntoFreeList+0xac>)
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	e002      	b.n	8004c64 <prvInsertBlockIntoFreeList+0x14>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d8f7      	bhi.n	8004c5e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4413      	add	r3, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d108      	bne.n	8004c92 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	441a      	add	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	441a      	add	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d118      	bne.n	8004cd8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <prvInsertBlockIntoFreeList+0xb0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d00d      	beq.n	8004cce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e008      	b.n	8004ce0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <prvInsertBlockIntoFreeList+0xb0>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e003      	b.n	8004ce0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d002      	beq.n	8004cee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20012e20 	.word	0x20012e20
 8004d00:	20012e28 	.word	0x20012e28

08004d04 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d08:	4803      	ldr	r0, [pc, #12]	; (8004d18 <_cbSendSystemDesc+0x14>)
 8004d0a:	f002 f9d5 	bl	80070b8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d0e:	4803      	ldr	r0, [pc, #12]	; (8004d1c <_cbSendSystemDesc+0x18>)
 8004d10:	f002 f9d2 	bl	80070b8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d14:	bf00      	nop
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	080078c0 	.word	0x080078c0
 8004d1c:	08007900 	.word	0x08007900

08004d20 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d2a:	6819      	ldr	r1, [r3, #0]
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <SEGGER_SYSVIEW_Conf+0x24>)
 8004d2e:	4a06      	ldr	r2, [pc, #24]	; (8004d48 <SEGGER_SYSVIEW_Conf+0x28>)
 8004d30:	f001 fd3e 	bl	80067b0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004d38:	f001 fd7e 	bl	8006838 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d3c:	bf00      	nop
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20000000 	.word	0x20000000
 8004d44:	08004d05 	.word	0x08004d05
 8004d48:	0800799c 	.word	0x0800799c

08004d4c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d52:	2300      	movs	r3, #0
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	e033      	b.n	8004dc0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d58:	491e      	ldr	r1, [pc, #120]	; (8004dd4 <_cbSendTaskList+0x88>)
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	491a      	ldr	r1, [pc, #104]	; (8004dd4 <_cbSendTaskList+0x88>)
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	3304      	adds	r3, #4
 8004d78:	6819      	ldr	r1, [r3, #0]
 8004d7a:	4c16      	ldr	r4, [pc, #88]	; (8004dd4 <_cbSendTaskList+0x88>)
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4423      	add	r3, r4
 8004d88:	3308      	adds	r3, #8
 8004d8a:	681c      	ldr	r4, [r3, #0]
 8004d8c:	4d11      	ldr	r5, [pc, #68]	; (8004dd4 <_cbSendTaskList+0x88>)
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	442b      	add	r3, r5
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	681d      	ldr	r5, [r3, #0]
 8004d9e:	4e0d      	ldr	r6, [pc, #52]	; (8004dd4 <_cbSendTaskList+0x88>)
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4433      	add	r3, r6
 8004dac:	3310      	adds	r3, #16
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	462b      	mov	r3, r5
 8004db4:	4622      	mov	r2, r4
 8004db6:	f000 f979 	bl	80050ac <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	607b      	str	r3, [r7, #4]
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <_cbSendTaskList+0x8c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d3c6      	bcc.n	8004d58 <_cbSendTaskList+0xc>
  }
}
 8004dca:	bf00      	nop
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dd4:	20012e3c 	.word	0x20012e3c
 8004dd8:	20012edc 	.word	0x20012edc

08004ddc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004de4:	f7fe fa2a 	bl	800323c <xTaskGetTickCountFromISR>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2200      	movs	r2, #0
 8004dec:	469a      	mov	sl, r3
 8004dee:	4693      	mov	fp, r2
 8004df0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	f04f 0a00 	mov.w	sl, #0
 8004e00:	f04f 0b00 	mov.w	fp, #0
 8004e04:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004e08:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004e0c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004e10:	4652      	mov	r2, sl
 8004e12:	465b      	mov	r3, fp
 8004e14:	1a14      	subs	r4, r2, r0
 8004e16:	eb63 0501 	sbc.w	r5, r3, r1
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	00ab      	lsls	r3, r5, #2
 8004e24:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004e28:	00a2      	lsls	r2, r4, #2
 8004e2a:	4614      	mov	r4, r2
 8004e2c:	461d      	mov	r5, r3
 8004e2e:	eb14 0800 	adds.w	r8, r4, r0
 8004e32:	eb45 0901 	adc.w	r9, r5, r1
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e4a:	4690      	mov	r8, r2
 8004e4c:	4699      	mov	r9, r3
 8004e4e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004e52:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e56:	4610      	mov	r0, r2
 8004e58:	4619      	mov	r1, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004e64 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e72:	2205      	movs	r2, #5
 8004e74:	492b      	ldr	r1, [pc, #172]	; (8004f24 <SYSVIEW_AddTask+0xc0>)
 8004e76:	68b8      	ldr	r0, [r7, #8]
 8004e78:	f002 fc88 	bl	800778c <memcmp>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d04b      	beq.n	8004f1a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e82:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <SYSVIEW_AddTask+0xc4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b07      	cmp	r3, #7
 8004e88:	d903      	bls.n	8004e92 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e8a:	4828      	ldr	r0, [pc, #160]	; (8004f2c <SYSVIEW_AddTask+0xc8>)
 8004e8c:	f002 fbd0 	bl	8007630 <SEGGER_SYSVIEW_Warn>
    return;
 8004e90:	e044      	b.n	8004f1c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e92:	4b25      	ldr	r3, [pc, #148]	; (8004f28 <SYSVIEW_AddTask+0xc4>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4926      	ldr	r1, [pc, #152]	; (8004f30 <SYSVIEW_AddTask+0xcc>)
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ea6:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <SYSVIEW_AddTask+0xc4>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4921      	ldr	r1, [pc, #132]	; (8004f30 <SYSVIEW_AddTask+0xcc>)
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <SYSVIEW_AddTask+0xc4>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	491b      	ldr	r1, [pc, #108]	; (8004f30 <SYSVIEW_AddTask+0xcc>)
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	3308      	adds	r3, #8
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ed2:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <SYSVIEW_AddTask+0xc4>)
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	4916      	ldr	r1, [pc, #88]	; (8004f30 <SYSVIEW_AddTask+0xcc>)
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ee8:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <SYSVIEW_AddTask+0xc4>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4910      	ldr	r1, [pc, #64]	; (8004f30 <SYSVIEW_AddTask+0xcc>)
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3310      	adds	r3, #16
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004efe:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <SYSVIEW_AddTask+0xc4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3301      	adds	r3, #1
 8004f04:	4a08      	ldr	r2, [pc, #32]	; (8004f28 <SYSVIEW_AddTask+0xc4>)
 8004f06:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f8ca 	bl	80050ac <SYSVIEW_SendTaskInfo>
 8004f18:	e000      	b.n	8004f1c <SYSVIEW_AddTask+0xb8>
    return;
 8004f1a:	bf00      	nop

}
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	08007910 	.word	0x08007910
 8004f28:	20012edc 	.word	0x20012edc
 8004f2c:	08007918 	.word	0x08007918
 8004f30:	20012e3c 	.word	0x20012e3c

08004f34 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004f3c:	4b59      	ldr	r3, [pc, #356]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 80ab 	beq.w	800509c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e00d      	b.n	8004f68 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004f4c:	4956      	ldr	r1, [pc, #344]	; (80050a8 <SYSVIEW_DeleteTask+0x174>)
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d008      	beq.n	8004f74 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	4b4e      	ldr	r3, [pc, #312]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d3ec      	bcc.n	8004f4c <SYSVIEW_DeleteTask+0x18>
 8004f72:	e000      	b.n	8004f76 <SYSVIEW_DeleteTask+0x42>
      break;
 8004f74:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004f76:	4b4b      	ldr	r3, [pc, #300]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d111      	bne.n	8004fa6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4a46      	ldr	r2, [pc, #280]	; (80050a8 <SYSVIEW_DeleteTask+0x174>)
 8004f8e:	4413      	add	r3, r2
 8004f90:	2214      	movs	r2, #20
 8004f92:	2100      	movs	r1, #0
 8004f94:	4618      	mov	r0, r3
 8004f96:	f002 fc17 	bl	80077c8 <memset>
    _NumTasks--;
 8004f9a:	4b42      	ldr	r3, [pc, #264]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	4a40      	ldr	r2, [pc, #256]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	e07b      	b.n	800509e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004fa6:	4b3f      	ldr	r3, [pc, #252]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d276      	bcs.n	800509e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8004fb0:	4b3c      	ldr	r3, [pc, #240]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	1e5a      	subs	r2, r3, #1
 8004fb6:	493c      	ldr	r1, [pc, #240]	; (80050a8 <SYSVIEW_DeleteTask+0x174>)
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	4838      	ldr	r0, [pc, #224]	; (80050a8 <SYSVIEW_DeleteTask+0x174>)
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4403      	add	r3, r0
 8004fd2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004fd4:	4b33      	ldr	r3, [pc, #204]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	1e5a      	subs	r2, r3, #1
 8004fda:	4933      	ldr	r1, [pc, #204]	; (80050a8 <SYSVIEW_DeleteTask+0x174>)
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	6819      	ldr	r1, [r3, #0]
 8004fea:	482f      	ldr	r0, [pc, #188]	; (80050a8 <SYSVIEW_DeleteTask+0x174>)
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4403      	add	r3, r0
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004ffc:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	1e5a      	subs	r2, r3, #1
 8005002:	4929      	ldr	r1, [pc, #164]	; (80050a8 <SYSVIEW_DeleteTask+0x174>)
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	3308      	adds	r3, #8
 8005010:	6819      	ldr	r1, [r3, #0]
 8005012:	4825      	ldr	r0, [pc, #148]	; (80050a8 <SYSVIEW_DeleteTask+0x174>)
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4403      	add	r3, r0
 8005020:	3308      	adds	r3, #8
 8005022:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005024:	4b1f      	ldr	r3, [pc, #124]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	1e5a      	subs	r2, r3, #1
 800502a:	491f      	ldr	r1, [pc, #124]	; (80050a8 <SYSVIEW_DeleteTask+0x174>)
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	330c      	adds	r3, #12
 8005038:	6819      	ldr	r1, [r3, #0]
 800503a:	481b      	ldr	r0, [pc, #108]	; (80050a8 <SYSVIEW_DeleteTask+0x174>)
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4403      	add	r3, r0
 8005048:	330c      	adds	r3, #12
 800504a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800504c:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	1e5a      	subs	r2, r3, #1
 8005052:	4915      	ldr	r1, [pc, #84]	; (80050a8 <SYSVIEW_DeleteTask+0x174>)
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	3310      	adds	r3, #16
 8005060:	6819      	ldr	r1, [r3, #0]
 8005062:	4811      	ldr	r0, [pc, #68]	; (80050a8 <SYSVIEW_DeleteTask+0x174>)
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4403      	add	r3, r0
 8005070:	3310      	adds	r3, #16
 8005072:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	1e5a      	subs	r2, r3, #1
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4a09      	ldr	r2, [pc, #36]	; (80050a8 <SYSVIEW_DeleteTask+0x174>)
 8005084:	4413      	add	r3, r2
 8005086:	2214      	movs	r2, #20
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f002 fb9c 	bl	80077c8 <memset>
    _NumTasks--;
 8005090:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3b01      	subs	r3, #1
 8005096:	4a03      	ldr	r2, [pc, #12]	; (80050a4 <SYSVIEW_DeleteTask+0x170>)
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e000      	b.n	800509e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800509c:	bf00      	nop
  }
}
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20012edc 	.word	0x20012edc
 80050a8:	20012e3c 	.word	0x20012e3c

080050ac <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	; 0x28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80050ba:	f107 0310 	add.w	r3, r7, #16
 80050be:	2218      	movs	r2, #24
 80050c0:	2100      	movs	r1, #0
 80050c2:	4618      	mov	r0, r3
 80050c4:	f002 fb80 	bl	80077c8 <memset>
  TaskInfo.TaskID     = TaskID;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80050dc:	f107 0310 	add.w	r3, r7, #16
 80050e0:	4618      	mov	r0, r3
 80050e2:	f001 fef1 	bl	8006ec8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80050e6:	bf00      	nop
 80050e8:	3728      	adds	r7, #40	; 0x28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <__NVIC_EnableIRQ>:
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	db0b      	blt.n	800511a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	f003 021f 	and.w	r2, r3, #31
 8005108:	4907      	ldr	r1, [pc, #28]	; (8005128 <__NVIC_EnableIRQ+0x38>)
 800510a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	2001      	movs	r0, #1
 8005112:	fa00 f202 	lsl.w	r2, r0, r2
 8005116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	e000e100 	.word	0xe000e100

0800512c <__NVIC_SetPriority>:
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	6039      	str	r1, [r7, #0]
 8005136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513c:	2b00      	cmp	r3, #0
 800513e:	db0a      	blt.n	8005156 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	b2da      	uxtb	r2, r3
 8005144:	490c      	ldr	r1, [pc, #48]	; (8005178 <__NVIC_SetPriority+0x4c>)
 8005146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514a:	0112      	lsls	r2, r2, #4
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	440b      	add	r3, r1
 8005150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005154:	e00a      	b.n	800516c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	b2da      	uxtb	r2, r3
 800515a:	4908      	ldr	r1, [pc, #32]	; (800517c <__NVIC_SetPriority+0x50>)
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	3b04      	subs	r3, #4
 8005164:	0112      	lsls	r2, r2, #4
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	440b      	add	r3, r1
 800516a:	761a      	strb	r2, [r3, #24]
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	e000e100 	.word	0xe000e100
 800517c:	e000ed00 	.word	0xe000ed00

08005180 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005186:	f002 faaf 	bl	80076e8 <SEGGER_SYSVIEW_IsStarted>
 800518a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005192:	f001 fd1d 	bl	8006bd0 <SEGGER_SYSVIEW_Start>
  }
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80051aa:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <_cbOnUARTRx+0x3c>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d806      	bhi.n	80051c0 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80051b2:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <_cbOnUARTRx+0x3c>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	3301      	adds	r3, #1
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	4b08      	ldr	r3, [pc, #32]	; (80051dc <_cbOnUARTRx+0x3c>)
 80051bc:	701a      	strb	r2, [r3, #0]
    goto Done;
 80051be:	e009      	b.n	80051d4 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80051c0:	f7ff ffde 	bl	8005180 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <_cbOnUARTRx+0x3c>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4618      	mov	r0, r3
 80051ca:	1dfb      	adds	r3, r7, #7
 80051cc:	2201      	movs	r2, #1
 80051ce:	4619      	mov	r1, r3
 80051d0:	f000 fb9c 	bl	800590c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80051d4:	bf00      	nop
}
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20000014 	.word	0x20000014

080051e0 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80051e8:	4b14      	ldr	r3, [pc, #80]	; (800523c <_cbOnUARTTx+0x5c>)
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d80f      	bhi.n	8005210 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80051f0:	4b12      	ldr	r3, [pc, #72]	; (800523c <_cbOnUARTTx+0x5c>)
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	461a      	mov	r2, r3
 80051f6:	4b12      	ldr	r3, [pc, #72]	; (8005240 <_cbOnUARTTx+0x60>)
 80051f8:	5c9a      	ldrb	r2, [r3, r2]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80051fe:	4b0f      	ldr	r3, [pc, #60]	; (800523c <_cbOnUARTTx+0x5c>)
 8005200:	785b      	ldrb	r3, [r3, #1]
 8005202:	3301      	adds	r3, #1
 8005204:	b2da      	uxtb	r2, r3
 8005206:	4b0d      	ldr	r3, [pc, #52]	; (800523c <_cbOnUARTTx+0x5c>)
 8005208:	705a      	strb	r2, [r3, #1]
    r = 1;
 800520a:	2301      	movs	r3, #1
 800520c:	60fb      	str	r3, [r7, #12]
    goto Done;
 800520e:	e00f      	b.n	8005230 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <_cbOnUARTTx+0x5c>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fa1b 	bl	8005654 <SEGGER_RTT_ReadUpBufferNoLock>
 800521e:	4603      	mov	r3, r0
 8005220:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	da02      	bge.n	800522e <_cbOnUARTTx+0x4e>
    r = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e000      	b.n	8005230 <_cbOnUARTTx+0x50>
  }
Done:
 800522e:	bf00      	nop
  return r;
 8005230:	68fb      	ldr	r3, [r7, #12]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000014 	.word	0x20000014
 8005240:	080079a4 	.word	0x080079a4

08005244 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800524c:	4a04      	ldr	r2, [pc, #16]	; (8005260 <SEGGER_UART_init+0x1c>)
 800524e:	4905      	ldr	r1, [pc, #20]	; (8005264 <SEGGER_UART_init+0x20>)
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f863 	bl	800531c <HIF_UART_Init>
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	080051a1 	.word	0x080051a1
 8005264:	080051e1 	.word	0x080051e1

08005268 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800526e:	4b1e      	ldr	r3, [pc, #120]	; (80052e8 <USART2_IRQHandler+0x80>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d011      	beq.n	80052a2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800527e:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <USART2_IRQHandler+0x84>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 030b 	and.w	r3, r3, #11
 800528c:	2b00      	cmp	r3, #0
 800528e:	d108      	bne.n	80052a2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005290:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <USART2_IRQHandler+0x88>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005298:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <USART2_IRQHandler+0x88>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	79fa      	ldrb	r2, [r7, #7]
 800529e:	4610      	mov	r0, r2
 80052a0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01a      	beq.n	80052e2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <USART2_IRQHandler+0x8c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d015      	beq.n	80052e0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80052b4:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <USART2_IRQHandler+0x8c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	1dfa      	adds	r2, r7, #7
 80052ba:	4610      	mov	r0, r2
 80052bc:	4798      	blx	r3
 80052be:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80052c6:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <USART2_IRQHandler+0x90>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a0b      	ldr	r2, [pc, #44]	; (80052f8 <USART2_IRQHandler+0x90>)
 80052cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	e006      	b.n	80052e2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80052d4:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <USART2_IRQHandler+0x80>)
 80052d6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80052d8:	79fa      	ldrb	r2, [r7, #7]
 80052da:	4b04      	ldr	r3, [pc, #16]	; (80052ec <USART2_IRQHandler+0x84>)
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e000      	b.n	80052e2 <USART2_IRQHandler+0x7a>
      return;
 80052e0:	bf00      	nop
    }
  }
}
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40004400 	.word	0x40004400
 80052ec:	40004404 	.word	0x40004404
 80052f0:	20012ee0 	.word	0x20012ee0
 80052f4:	20012ee4 	.word	0x20012ee4
 80052f8:	4000440c 	.word	0x4000440c

080052fc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a04      	ldr	r2, [pc, #16]	; (8005318 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530a:	6013      	str	r3, [r2, #0]
}
 800530c:	bf00      	nop
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	4000440c 	.word	0x4000440c

0800531c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005328:	4b2e      	ldr	r3, [pc, #184]	; (80053e4 <HIF_UART_Init+0xc8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a2d      	ldr	r2, [pc, #180]	; (80053e4 <HIF_UART_Init+0xc8>)
 800532e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005332:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005334:	4b2c      	ldr	r3, [pc, #176]	; (80053e8 <HIF_UART_Init+0xcc>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2b      	ldr	r2, [pc, #172]	; (80053e8 <HIF_UART_Init+0xcc>)
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005340:	4b2a      	ldr	r3, [pc, #168]	; (80053ec <HIF_UART_Init+0xd0>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800534c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005354:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005356:	4a25      	ldr	r2, [pc, #148]	; (80053ec <HIF_UART_Init+0xd0>)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800535c:	4b24      	ldr	r3, [pc, #144]	; (80053f0 <HIF_UART_Init+0xd4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005368:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005370:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005372:	4a1f      	ldr	r2, [pc, #124]	; (80053f0 <HIF_UART_Init+0xd4>)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005378:	4b1e      	ldr	r3, [pc, #120]	; (80053f4 <HIF_UART_Init+0xd8>)
 800537a:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800537e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005380:	4b1d      	ldr	r3, [pc, #116]	; (80053f8 <HIF_UART_Init+0xdc>)
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005386:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <HIF_UART_Init+0xe0>)
 8005388:	2280      	movs	r2, #128	; 0x80
 800538a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005392:	4a1b      	ldr	r2, [pc, #108]	; (8005400 <HIF_UART_Init+0xe4>)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	3301      	adds	r3, #1
 800539c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053aa:	d302      	bcc.n	80053b2 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80053ac:	f640 73ff 	movw	r3, #4095	; 0xfff
 80053b0:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d004      	beq.n	80053c2 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	4a11      	ldr	r2, [pc, #68]	; (8005404 <HIF_UART_Init+0xe8>)
 80053be:	b29b      	uxth	r3, r3
 80053c0:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80053c2:	4a11      	ldr	r2, [pc, #68]	; (8005408 <HIF_UART_Init+0xec>)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80053c8:	4a10      	ldr	r2, [pc, #64]	; (800540c <HIF_UART_Init+0xf0>)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80053ce:	2106      	movs	r1, #6
 80053d0:	2026      	movs	r0, #38	; 0x26
 80053d2:	f7ff feab 	bl	800512c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80053d6:	2026      	movs	r0, #38	; 0x26
 80053d8:	f7ff fe8a 	bl	80050f0 <__NVIC_EnableIRQ>
}
 80053dc:	bf00      	nop
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40023840 	.word	0x40023840
 80053e8:	40023830 	.word	0x40023830
 80053ec:	40020020 	.word	0x40020020
 80053f0:	40020000 	.word	0x40020000
 80053f4:	4000440c 	.word	0x4000440c
 80053f8:	40004410 	.word	0x40004410
 80053fc:	40004414 	.word	0x40004414
 8005400:	0501bd00 	.word	0x0501bd00
 8005404:	40004408 	.word	0x40004408
 8005408:	20012ee0 	.word	0x20012ee0
 800540c:	20012ee4 	.word	0x20012ee4

08005410 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005416:	4b26      	ldr	r3, [pc, #152]	; (80054b0 <_DoInit+0xa0>)
 8005418:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800541a:	22a8      	movs	r2, #168	; 0xa8
 800541c:	2100      	movs	r1, #0
 800541e:	6838      	ldr	r0, [r7, #0]
 8005420:	f002 f9d2 	bl	80077c8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2203      	movs	r2, #3
 8005428:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2203      	movs	r2, #3
 800542e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	4a20      	ldr	r2, [pc, #128]	; (80054b4 <_DoInit+0xa4>)
 8005434:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	4a1f      	ldr	r2, [pc, #124]	; (80054b8 <_DoInit+0xa8>)
 800543a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005442:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2200      	movs	r2, #0
 8005448:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2200      	movs	r2, #0
 800544e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	4a16      	ldr	r2, [pc, #88]	; (80054b4 <_DoInit+0xa4>)
 800545a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	4a17      	ldr	r2, [pc, #92]	; (80054bc <_DoInit+0xac>)
 8005460:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2210      	movs	r2, #16
 8005466:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2200      	movs	r2, #0
 800546c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2200      	movs	r2, #0
 8005472:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2200      	movs	r2, #0
 8005478:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800547a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800547e:	2300      	movs	r3, #0
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	e00c      	b.n	800549e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f1c3 030f 	rsb	r3, r3, #15
 800548a:	4a0d      	ldr	r2, [pc, #52]	; (80054c0 <_DoInit+0xb0>)
 800548c:	5cd1      	ldrb	r1, [r2, r3]
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4413      	add	r3, r2
 8005494:	460a      	mov	r2, r1
 8005496:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3301      	adds	r3, #1
 800549c:	607b      	str	r3, [r7, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b0f      	cmp	r3, #15
 80054a2:	d9ef      	bls.n	8005484 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80054a4:	f3bf 8f5f 	dmb	sy
}
 80054a8:	bf00      	nop
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20012ee8 	.word	0x20012ee8
 80054b4:	08007968 	.word	0x08007968
 80054b8:	20012f90 	.word	0x20012f90
 80054bc:	20013390 	.word	0x20013390
 80054c0:	080079a8 	.word	0x080079a8

080054c4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08a      	sub	sp, #40	; 0x28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80054d0:	2300      	movs	r3, #0
 80054d2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d905      	bls.n	80054f4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
 80054f2:	e007      	b.n	8005504 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	69b9      	ldr	r1, [r7, #24]
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	1acb      	subs	r3, r1, r3
 80054fe:	4413      	add	r3, r2
 8005500:	3b01      	subs	r3, #1
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550e:	4293      	cmp	r3, r2
 8005510:	bf28      	it	cs
 8005512:	4613      	movcs	r3, r2
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4293      	cmp	r3, r2
 800551c:	bf28      	it	cs
 800551e:	4613      	movcs	r3, r2
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4413      	add	r3, r2
 800552a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	6978      	ldr	r0, [r7, #20]
 8005532:	f002 f93b 	bl	80077ac <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005536:	6a3a      	ldr	r2, [r7, #32]
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	4413      	add	r3, r2
 800553c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	4413      	add	r3, r2
 8005544:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	4413      	add	r3, r2
 8005554:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	429a      	cmp	r2, r3
 800555e:	d101      	bne.n	8005564 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005560:	2300      	movs	r3, #0
 8005562:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005564:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1b2      	bne.n	80054da <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005574:	6a3b      	ldr	r3, [r7, #32]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3728      	adds	r7, #40	; 0x28
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800557e:	b580      	push	{r7, lr}
 8005580:	b088      	sub	sp, #32
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d911      	bls.n	80055c6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	6938      	ldr	r0, [r7, #16]
 80055b2:	f002 f8fb 	bl	80077ac <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055b6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	441a      	add	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80055c4:	e01f      	b.n	8005606 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	6938      	ldr	r0, [r7, #16]
 80055da:	f002 f8e7 	bl	80077ac <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	4413      	add	r3, r2
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4619      	mov	r1, r3
 80055f6:	6938      	ldr	r0, [r7, #16]
 80055f8:	f002 f8d8 	bl	80077ac <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055fc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	60da      	str	r2, [r3, #12]
}
 8005606:	bf00      	nop
 8005608:	3720      	adds	r7, #32
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800560e:	b480      	push	{r7}
 8005610:	b087      	sub	sp, #28
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	429a      	cmp	r2, r3
 8005628:	d808      	bhi.n	800563c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1ad2      	subs	r2, r2, r3
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4413      	add	r3, r2
 8005636:	3b01      	subs	r3, #1
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	e004      	b.n	8005646 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005646:	697b      	ldr	r3, [r7, #20]
}
 8005648:	4618      	mov	r0, r3
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b08c      	sub	sp, #48	; 0x30
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005660:	4b3e      	ldr	r3, [pc, #248]	; (800575c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005662:	623b      	str	r3, [r7, #32]
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b53      	cmp	r3, #83	; 0x53
 800566c:	d001      	beq.n	8005672 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800566e:	f7ff fecf 	bl	8005410 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	4613      	mov	r3, r2
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4a37      	ldr	r2, [pc, #220]	; (800575c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005680:	4413      	add	r3, r2
 8005682:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005694:	2300      	movs	r3, #0
 8005696:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	429a      	cmp	r2, r3
 800569e:	d92b      	bls.n	80056f8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4293      	cmp	r3, r2
 80056b0:	bf28      	it	cs
 80056b2:	4613      	movcs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	4413      	add	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	6939      	ldr	r1, [r7, #16]
 80056c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056c6:	f002 f871 	bl	80077ac <memcpy>
    NumBytesRead += NumBytesRem;
 80056ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	4413      	add	r3, r2
 80056d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80056d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4413      	add	r3, r2
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80056e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	4413      	add	r3, r2
 80056e8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d101      	bne.n	80056f8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80056f4:	2300      	movs	r3, #0
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4293      	cmp	r3, r2
 8005706:	bf28      	it	cs
 8005708:	4613      	movcs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d019      	beq.n	8005746 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	4413      	add	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	6939      	ldr	r1, [r7, #16]
 8005720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005722:	f002 f843 	bl	80077ac <memcpy>
    NumBytesRead += NumBytesRem;
 8005726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4413      	add	r3, r2
 800572c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800572e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	4413      	add	r3, r2
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800573e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	4413      	add	r3, r2
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005750:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005754:	4618      	mov	r0, r3
 8005756:	3730      	adds	r7, #48	; 0x30
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20012ee8 	.word	0x20012ee8

08005760 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	; 0x30
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800576c:	4b3e      	ldr	r3, [pc, #248]	; (8005868 <SEGGER_RTT_ReadNoLock+0x108>)
 800576e:	623b      	str	r3, [r7, #32]
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b53      	cmp	r3, #83	; 0x53
 8005778:	d001      	beq.n	800577e <SEGGER_RTT_ReadNoLock+0x1e>
 800577a:	f7ff fe49 	bl	8005410 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4613      	mov	r3, r2
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	4413      	add	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	3360      	adds	r3, #96	; 0x60
 800578a:	4a37      	ldr	r2, [pc, #220]	; (8005868 <SEGGER_RTT_ReadNoLock+0x108>)
 800578c:	4413      	add	r3, r2
 800578e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80057a0:	2300      	movs	r3, #0
 80057a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80057a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d92b      	bls.n	8005804 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4293      	cmp	r3, r2
 80057bc:	bf28      	it	cs
 80057be:	4613      	movcs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	4413      	add	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	6939      	ldr	r1, [r7, #16]
 80057d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057d2:	f001 ffeb 	bl	80077ac <memcpy>
    NumBytesRead += NumBytesRem;
 80057d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4413      	add	r3, r2
 80057dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80057de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	4413      	add	r3, r2
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d101      	bne.n	8005804 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005800:	2300      	movs	r3, #0
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4293      	cmp	r3, r2
 8005812:	bf28      	it	cs
 8005814:	4613      	movcs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d019      	beq.n	8005852 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	4413      	add	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	6939      	ldr	r1, [r7, #16]
 800582c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800582e:	f001 ffbd 	bl	80077ac <memcpy>
    NumBytesRead += NumBytesRem;
 8005832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	4413      	add	r3, r2
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800583a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	4413      	add	r3, r2
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800584a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	4413      	add	r3, r2
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800585c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005860:	4618      	mov	r0, r3
 8005862:	3730      	adds	r7, #48	; 0x30
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20012ee8 	.word	0x20012ee8

0800586c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4613      	mov	r3, r2
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	4413      	add	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	3360      	adds	r3, #96	; 0x60
 8005888:	4a1f      	ldr	r2, [pc, #124]	; (8005908 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800588a:	4413      	add	r3, r2
 800588c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d029      	beq.n	80058ea <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005896:	2b02      	cmp	r3, #2
 8005898:	d82e      	bhi.n	80058f8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d013      	beq.n	80058ca <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80058a2:	e029      	b.n	80058f8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80058a4:	6978      	ldr	r0, [r7, #20]
 80058a6:	f7ff feb2 	bl	800560e <_GetAvailWriteSpace>
 80058aa:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d202      	bcs.n	80058ba <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80058b8:	e021      	b.n	80058fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	69b9      	ldr	r1, [r7, #24]
 80058c2:	6978      	ldr	r0, [r7, #20]
 80058c4:	f7ff fe5b 	bl	800557e <_WriteNoCheck>
    break;
 80058c8:	e019      	b.n	80058fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80058ca:	6978      	ldr	r0, [r7, #20]
 80058cc:	f7ff fe9f 	bl	800560e <_GetAvailWriteSpace>
 80058d0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4293      	cmp	r3, r2
 80058d8:	bf28      	it	cs
 80058da:	4613      	movcs	r3, r2
 80058dc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	69b9      	ldr	r1, [r7, #24]
 80058e2:	6978      	ldr	r0, [r7, #20]
 80058e4:	f7ff fe4b 	bl	800557e <_WriteNoCheck>
    break;
 80058e8:	e009      	b.n	80058fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	69b9      	ldr	r1, [r7, #24]
 80058ee:	6978      	ldr	r0, [r7, #20]
 80058f0:	f7ff fde8 	bl	80054c4 <_WriteBlocking>
 80058f4:	61f8      	str	r0, [r7, #28]
    break;
 80058f6:	e002      	b.n	80058fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61fb      	str	r3, [r7, #28]
    break;
 80058fc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80058fe:	69fb      	ldr	r3, [r7, #28]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3720      	adds	r7, #32
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20012ee8 	.word	0x20012ee8

0800590c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005918:	4b0e      	ldr	r3, [pc, #56]	; (8005954 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b53      	cmp	r3, #83	; 0x53
 8005924:	d001      	beq.n	800592a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005926:	f7ff fd73 	bl	8005410 <_DoInit>
  SEGGER_RTT_LOCK();
 800592a:	f3ef 8311 	mrs	r3, BASEPRI
 800592e:	f04f 0120 	mov.w	r1, #32
 8005932:	f381 8811 	msr	BASEPRI, r1
 8005936:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f7ff ff95 	bl	800586c <SEGGER_RTT_WriteDownBufferNoLock>
 8005942:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800594a:	697b      	ldr	r3, [r7, #20]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20012ee8 	.word	0x20012ee8

08005958 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005966:	4b3d      	ldr	r3, [pc, #244]	; (8005a5c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b53      	cmp	r3, #83	; 0x53
 8005972:	d001      	beq.n	8005978 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005974:	f7ff fd4c 	bl	8005410 <_DoInit>
  SEGGER_RTT_LOCK();
 8005978:	f3ef 8311 	mrs	r3, BASEPRI
 800597c:	f04f 0120 	mov.w	r1, #32
 8005980:	f381 8811 	msr	BASEPRI, r1
 8005984:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005986:	4b35      	ldr	r3, [pc, #212]	; (8005a5c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005988:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800598e:	6939      	ldr	r1, [r7, #16]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	4613      	mov	r3, r2
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	4413      	add	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	440b      	add	r3, r1
 800599e:	3304      	adds	r3, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d008      	beq.n	80059b8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	3301      	adds	r3, #1
 80059aa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	dbeb      	blt.n	800598e <SEGGER_RTT_AllocUpBuffer+0x36>
 80059b6:	e000      	b.n	80059ba <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80059b8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	da3f      	bge.n	8005a44 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80059c4:	6939      	ldr	r1, [r7, #16]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	4613      	mov	r3, r2
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	4413      	add	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	440b      	add	r3, r1
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80059d8:	6939      	ldr	r1, [r7, #16]
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	4613      	mov	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	440b      	add	r3, r1
 80059e8:	3304      	adds	r3, #4
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80059ee:	6939      	ldr	r1, [r7, #16]
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	4613      	mov	r3, r2
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	4413      	add	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	440b      	add	r3, r1
 80059fc:	3320      	adds	r3, #32
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005a02:	6939      	ldr	r1, [r7, #16]
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	4613      	mov	r3, r2
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	4413      	add	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	440b      	add	r3, r1
 8005a10:	3328      	adds	r3, #40	; 0x28
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a16:	6939      	ldr	r1, [r7, #16]
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	4413      	add	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	440b      	add	r3, r1
 8005a24:	3324      	adds	r3, #36	; 0x24
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a2a:	6939      	ldr	r1, [r7, #16]
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	4413      	add	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	440b      	add	r3, r1
 8005a38:	332c      	adds	r3, #44	; 0x2c
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a3e:	f3bf 8f5f 	dmb	sy
 8005a42:	e002      	b.n	8005a4a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
 8005a48:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005a50:	69fb      	ldr	r3, [r7, #28]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3720      	adds	r7, #32
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20012ee8 	.word	0x20012ee8

08005a60 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005a6e:	4b21      	ldr	r3, [pc, #132]	; (8005af4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005a70:	623b      	str	r3, [r7, #32]
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b53      	cmp	r3, #83	; 0x53
 8005a7a:	d001      	beq.n	8005a80 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005a7c:	f7ff fcc8 	bl	8005410 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a80:	4b1c      	ldr	r3, [pc, #112]	; (8005af4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005a82:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d82c      	bhi.n	8005ae4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005a8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a8e:	f04f 0120 	mov.w	r1, #32
 8005a92:	f381 8811 	msr	BASEPRI, r1
 8005a96:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	4413      	add	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	3360      	adds	r3, #96	; 0x60
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00e      	beq.n	8005ace <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2200      	movs	r2, #0
 8005acc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ad4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae2:	e002      	b.n	8005aea <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3728      	adds	r7, #40	; 0x28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20012ee8 	.word	0x20012ee8

08005af8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d105      	bne.n	8005b16 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	60fa      	str	r2, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e022      	b.n	8005b5c <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	60fa      	str	r2, [r7, #12]
 8005b20:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b80      	cmp	r3, #128	; 0x80
 8005b26:	d90a      	bls.n	8005b3e <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005b2c:	e007      	b.n	8005b3e <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	1c53      	adds	r3, r2, #1
 8005b32:	60bb      	str	r3, [r7, #8]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	1c59      	adds	r1, r3, #1
 8005b38:	60f9      	str	r1, [r7, #12]
 8005b3a:	7812      	ldrb	r2, [r2, #0]
 8005b3c:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	1e5a      	subs	r2, r3, #1
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <_EncodeStr+0x58>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1ee      	bne.n	8005b2e <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3307      	adds	r3, #7
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b8a:	4b35      	ldr	r3, [pc, #212]	; (8005c60 <_HandleIncomingPacket+0xdc>)
 8005b8c:	7e1b      	ldrb	r3, [r3, #24]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	1cfb      	adds	r3, r7, #3
 8005b92:	2201      	movs	r2, #1
 8005b94:	4619      	mov	r1, r3
 8005b96:	f7ff fde3 	bl	8005760 <SEGGER_RTT_ReadNoLock>
 8005b9a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d052      	beq.n	8005c48 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	2b80      	cmp	r3, #128	; 0x80
 8005ba6:	d031      	beq.n	8005c0c <_HandleIncomingPacket+0x88>
 8005ba8:	2b80      	cmp	r3, #128	; 0x80
 8005baa:	dc40      	bgt.n	8005c2e <_HandleIncomingPacket+0xaa>
 8005bac:	2b07      	cmp	r3, #7
 8005bae:	dc15      	bgt.n	8005bdc <_HandleIncomingPacket+0x58>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	dd3c      	ble.n	8005c2e <_HandleIncomingPacket+0xaa>
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	2b06      	cmp	r3, #6
 8005bb8:	d839      	bhi.n	8005c2e <_HandleIncomingPacket+0xaa>
 8005bba:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <_HandleIncomingPacket+0x3c>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005be3 	.word	0x08005be3
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bef 	.word	0x08005bef
 8005bcc:	08005bf5 	.word	0x08005bf5
 8005bd0:	08005bfb 	.word	0x08005bfb
 8005bd4:	08005c01 	.word	0x08005c01
 8005bd8:	08005c07 	.word	0x08005c07
 8005bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8005bde:	d035      	beq.n	8005c4c <_HandleIncomingPacket+0xc8>
 8005be0:	e025      	b.n	8005c2e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005be2:	f000 fff5 	bl	8006bd0 <SEGGER_SYSVIEW_Start>
      break;
 8005be6:	e036      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005be8:	f001 f8ae 	bl	8006d48 <SEGGER_SYSVIEW_Stop>
      break;
 8005bec:	e033      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005bee:	f001 fa87 	bl	8007100 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005bf2:	e030      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005bf4:	f001 fa4c 	bl	8007090 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005bf8:	e02d      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005bfa:	f001 f8cb 	bl	8006d94 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005bfe:	e02a      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005c00:	f001 fcc4 	bl	800758c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005c04:	e027      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005c06:	f001 fca3 	bl	8007550 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005c0a:	e024      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c0c:	4b14      	ldr	r3, [pc, #80]	; (8005c60 <_HandleIncomingPacket+0xdc>)
 8005c0e:	7e1b      	ldrb	r3, [r3, #24]
 8005c10:	4618      	mov	r0, r3
 8005c12:	1cfb      	adds	r3, r7, #3
 8005c14:	2201      	movs	r2, #1
 8005c16:	4619      	mov	r1, r3
 8005c18:	f7ff fda2 	bl	8005760 <SEGGER_RTT_ReadNoLock>
 8005c1c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d015      	beq.n	8005c50 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 fc08 	bl	800743c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005c2c:	e010      	b.n	8005c50 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	b25b      	sxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	da0e      	bge.n	8005c54 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c36:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <_HandleIncomingPacket+0xdc>)
 8005c38:	7e1b      	ldrb	r3, [r3, #24]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	1cfb      	adds	r3, r7, #3
 8005c3e:	2201      	movs	r2, #1
 8005c40:	4619      	mov	r1, r3
 8005c42:	f7ff fd8d 	bl	8005760 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005c46:	e005      	b.n	8005c54 <_HandleIncomingPacket+0xd0>
    }
  }
 8005c48:	bf00      	nop
 8005c4a:	e004      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
      break;
 8005c4c:	bf00      	nop
 8005c4e:	e002      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
      break;
 8005c50:	bf00      	nop
 8005c52:	e000      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
      break;
 8005c54:	bf00      	nop
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	200137a8 	.word	0x200137a8

08005c64 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08c      	sub	sp, #48	; 0x30
 8005c68:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005c6e:	1d3b      	adds	r3, r7, #4
 8005c70:	3301      	adds	r3, #1
 8005c72:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c78:	4b32      	ldr	r3, [pc, #200]	; (8005d44 <_TrySendOverflowPacket+0xe0>)
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c7e:	e00b      	b.n	8005c98 <_TrySendOverflowPacket+0x34>
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	1c59      	adds	r1, r3, #1
 8005c88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	09db      	lsrs	r3, r3, #7
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c9c:	d8f0      	bhi.n	8005c80 <_TrySendOverflowPacket+0x1c>
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005cae:	4b26      	ldr	r3, [pc, #152]	; (8005d48 <_TrySendOverflowPacket+0xe4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005cb4:	4b23      	ldr	r3, [pc, #140]	; (8005d44 <_TrySendOverflowPacket+0xe0>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	623b      	str	r3, [r7, #32]
 8005cc6:	e00b      	b.n	8005ce0 <_TrySendOverflowPacket+0x7c>
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	1c59      	adds	r1, r3, #1
 8005cd0:	6279      	str	r1, [r7, #36]	; 0x24
 8005cd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	09db      	lsrs	r3, r3, #7
 8005cde:	623b      	str	r3, [r7, #32]
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce4:	d8f0      	bhi.n	8005cc8 <_TrySendOverflowPacket+0x64>
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	627a      	str	r2, [r7, #36]	; 0x24
 8005cec:	6a3a      	ldr	r2, [r7, #32]
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005cf6:	4b13      	ldr	r3, [pc, #76]	; (8005d44 <_TrySendOverflowPacket+0xe0>)
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	1d3b      	adds	r3, r7, #4
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	461a      	mov	r2, r3
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	f7fa fa62 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005d10:	f7ff faf4 	bl	80052fc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d009      	beq.n	8005d2e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d1a:	4a0a      	ldr	r2, [pc, #40]	; (8005d44 <_TrySendOverflowPacket+0xe0>)
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005d20:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <_TrySendOverflowPacket+0xe0>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <_TrySendOverflowPacket+0xe0>)
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	e004      	b.n	8005d38 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <_TrySendOverflowPacket+0xe0>)
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	3301      	adds	r3, #1
 8005d34:	4a03      	ldr	r2, [pc, #12]	; (8005d44 <_TrySendOverflowPacket+0xe0>)
 8005d36:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005d38:	693b      	ldr	r3, [r7, #16]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3730      	adds	r7, #48	; 0x30
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	200137a8 	.word	0x200137a8
 8005d48:	e0001004 	.word	0xe0001004

08005d4c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	; 0x28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005d58:	4b96      	ldr	r3, [pc, #600]	; (8005fb4 <_SendPacket+0x268>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d010      	beq.n	8005d82 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005d60:	4b94      	ldr	r3, [pc, #592]	; (8005fb4 <_SendPacket+0x268>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 8130 	beq.w	8005fca <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005d6a:	4b92      	ldr	r3, [pc, #584]	; (8005fb4 <_SendPacket+0x268>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d109      	bne.n	8005d86 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005d72:	f7ff ff77 	bl	8005c64 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005d76:	4b8f      	ldr	r3, [pc, #572]	; (8005fb4 <_SendPacket+0x268>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	f040 8127 	bne.w	8005fce <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005d80:	e001      	b.n	8005d86 <_SendPacket+0x3a>
    goto Send;
 8005d82:	bf00      	nop
 8005d84:	e000      	b.n	8005d88 <_SendPacket+0x3c>
Send:
 8005d86:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b1f      	cmp	r3, #31
 8005d8c:	d809      	bhi.n	8005da2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005d8e:	4b89      	ldr	r3, [pc, #548]	; (8005fb4 <_SendPacket+0x268>)
 8005d90:	69da      	ldr	r2, [r3, #28]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	fa22 f303 	lsr.w	r3, r2, r3
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f040 8118 	bne.w	8005fd2 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b17      	cmp	r3, #23
 8005da6:	d807      	bhi.n	8005db8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	e0c4      	b.n	8005f42 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc4:	d912      	bls.n	8005dec <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	09da      	lsrs	r2, r3, #7
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	3a01      	subs	r2, #1
 8005dde:	60fa      	str	r2, [r7, #12]
 8005de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	e006      	b.n	8005dfa <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b7e      	cmp	r3, #126	; 0x7e
 8005dfe:	d807      	bhi.n	8005e10 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	e098      	b.n	8005f42 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e16:	d212      	bcs.n	8005e3e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	09da      	lsrs	r2, r3, #7
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	3a01      	subs	r2, #1
 8005e30:	60fa      	str	r2, [r7, #12]
 8005e32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	e081      	b.n	8005f42 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e44:	d21d      	bcs.n	8005e82 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	0b9a      	lsrs	r2, r3, #14
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	09db      	lsrs	r3, r3, #7
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	3a01      	subs	r2, #1
 8005e60:	60fa      	str	r2, [r7, #12]
 8005e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	3a01      	subs	r2, #1
 8005e74:	60fa      	str	r2, [r7, #12]
 8005e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	e05f      	b.n	8005f42 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e88:	d228      	bcs.n	8005edc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	0d5a      	lsrs	r2, r3, #21
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	0b9b      	lsrs	r3, r3, #14
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	3a01      	subs	r2, #1
 8005ea4:	60fa      	str	r2, [r7, #12]
 8005ea6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	09db      	lsrs	r3, r3, #7
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	3a01      	subs	r2, #1
 8005eba:	60fa      	str	r2, [r7, #12]
 8005ebc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	3a01      	subs	r2, #1
 8005ece:	60fa      	str	r2, [r7, #12]
 8005ed0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	e032      	b.n	8005f42 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	0f1a      	lsrs	r2, r3, #28
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	0d5b      	lsrs	r3, r3, #21
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	3a01      	subs	r2, #1
 8005ef6:	60fa      	str	r2, [r7, #12]
 8005ef8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	0b9b      	lsrs	r3, r3, #14
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	3a01      	subs	r2, #1
 8005f0c:	60fa      	str	r2, [r7, #12]
 8005f0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	09db      	lsrs	r3, r3, #7
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	3a01      	subs	r2, #1
 8005f22:	60fa      	str	r2, [r7, #12]
 8005f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	3a01      	subs	r2, #1
 8005f36:	60fa      	str	r2, [r7, #12]
 8005f38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f42:	4b1d      	ldr	r3, [pc, #116]	; (8005fb8 <_SendPacket+0x26c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f48:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <_SendPacket+0x268>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	623b      	str	r3, [r7, #32]
 8005f5a:	e00b      	b.n	8005f74 <_SendPacket+0x228>
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	1c59      	adds	r1, r3, #1
 8005f64:	6279      	str	r1, [r7, #36]	; 0x24
 8005f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	09db      	lsrs	r3, r3, #7
 8005f72:	623b      	str	r3, [r7, #32]
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	2b7f      	cmp	r3, #127	; 0x7f
 8005f78:	d8f0      	bhi.n	8005f5c <_SendPacket+0x210>
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	627a      	str	r2, [r7, #36]	; 0x24
 8005f80:	6a3a      	ldr	r2, [r7, #32]
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <_SendPacket+0x268>)
 8005f8c:	785b      	ldrb	r3, [r3, #1]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	68f9      	ldr	r1, [r7, #12]
 8005f9a:	f7fa f919 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f9e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005fa0:	f7ff f9ac 	bl	80052fc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d008      	beq.n	8005fbc <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005faa:	4a02      	ldr	r2, [pc, #8]	; (8005fb4 <_SendPacket+0x268>)
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	60d3      	str	r3, [r2, #12]
 8005fb0:	e010      	b.n	8005fd4 <_SendPacket+0x288>
 8005fb2:	bf00      	nop
 8005fb4:	200137a8 	.word	0x200137a8
 8005fb8:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005fbc:	4b19      	ldr	r3, [pc, #100]	; (8006024 <_SendPacket+0x2d8>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	4b17      	ldr	r3, [pc, #92]	; (8006024 <_SendPacket+0x2d8>)
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	e004      	b.n	8005fd4 <_SendPacket+0x288>
    goto SendDone;
 8005fca:	bf00      	nop
 8005fcc:	e002      	b.n	8005fd4 <_SendPacket+0x288>
      goto SendDone;
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <_SendPacket+0x288>
      goto SendDone;
 8005fd2:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005fd4:	4b13      	ldr	r3, [pc, #76]	; (8006024 <_SendPacket+0x2d8>)
 8005fd6:	7e1b      	ldrb	r3, [r3, #24]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4a13      	ldr	r2, [pc, #76]	; (8006028 <_SendPacket+0x2dc>)
 8005fdc:	460b      	mov	r3, r1
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	440b      	add	r3, r1
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	336c      	adds	r3, #108	; 0x6c
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b0e      	ldr	r3, [pc, #56]	; (8006024 <_SendPacket+0x2d8>)
 8005fec:	7e1b      	ldrb	r3, [r3, #24]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	490d      	ldr	r1, [pc, #52]	; (8006028 <_SendPacket+0x2dc>)
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	4403      	add	r3, r0
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	440b      	add	r3, r1
 8005ffc:	3370      	adds	r3, #112	; 0x70
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d00b      	beq.n	800601c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006004:	4b07      	ldr	r3, [pc, #28]	; (8006024 <_SendPacket+0x2d8>)
 8006006:	789b      	ldrb	r3, [r3, #2]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d107      	bne.n	800601c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800600c:	4b05      	ldr	r3, [pc, #20]	; (8006024 <_SendPacket+0x2d8>)
 800600e:	2201      	movs	r2, #1
 8006010:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006012:	f7ff fdb7 	bl	8005b84 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006016:	4b03      	ldr	r3, [pc, #12]	; (8006024 <_SendPacket+0x2d8>)
 8006018:	2200      	movs	r2, #0
 800601a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800601c:	bf00      	nop
 800601e:	3728      	adds	r7, #40	; 0x28
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	200137a8 	.word	0x200137a8
 8006028:	20012ee8 	.word	0x20012ee8

0800602c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	; 0x28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	3301      	adds	r3, #1
 8006042:	2b80      	cmp	r3, #128	; 0x80
 8006044:	d80a      	bhi.n	800605c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	1c59      	adds	r1, r3, #1
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6051      	str	r1, [r2, #4]
 8006050:	78fa      	ldrb	r2, [r7, #3]
 8006052:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b80      	cmp	r3, #128	; 0x80
 8006062:	d15a      	bne.n	800611a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	623b      	str	r3, [r7, #32]
 8006084:	e00b      	b.n	800609e <_StoreChar+0x72>
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	b2da      	uxtb	r2, r3
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	1c59      	adds	r1, r3, #1
 800608e:	6279      	str	r1, [r7, #36]	; 0x24
 8006090:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	09db      	lsrs	r3, r3, #7
 800609c:	623b      	str	r3, [r7, #32]
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	2b7f      	cmp	r3, #127	; 0x7f
 80060a2:	d8f0      	bhi.n	8006086 <_StoreChar+0x5a>
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	627a      	str	r2, [r7, #36]	; 0x24
 80060aa:	6a3a      	ldr	r2, [r7, #32]
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	2300      	movs	r3, #0
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	e00b      	b.n	80060d6 <_StoreChar+0xaa>
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	1c59      	adds	r1, r3, #1
 80060c6:	61f9      	str	r1, [r7, #28]
 80060c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	09db      	lsrs	r3, r3, #7
 80060d4:	61bb      	str	r3, [r7, #24]
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	2b7f      	cmp	r3, #127	; 0x7f
 80060da:	d8f0      	bhi.n	80060be <_StoreChar+0x92>
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	61fa      	str	r2, [r7, #28]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	221a      	movs	r2, #26
 80060f2:	6939      	ldr	r1, [r7, #16]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff fe29 	bl	8005d4c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff fd33 	bl	8005b6a <_PreparePacket>
 8006104:	4602      	mov	r2, r0
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	611a      	str	r2, [r3, #16]
  }
}
 800611a:	bf00      	nop
 800611c:	3728      	adds	r7, #40	; 0x28
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b08a      	sub	sp, #40	; 0x28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006136:	2301      	movs	r3, #1
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800613a:	2301      	movs	r3, #1
 800613c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800613e:	e007      	b.n	8006150 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006140:	6a3a      	ldr	r2, [r7, #32]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	fbb2 f3f3 	udiv	r3, r2, r3
 8006148:	623b      	str	r3, [r7, #32]
    Width++;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	3301      	adds	r3, #1
 800614e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006150:	6a3a      	ldr	r2, [r7, #32]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	429a      	cmp	r2, r3
 8006156:	d2f3      	bcs.n	8006140 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	429a      	cmp	r2, r3
 800615e:	d901      	bls.n	8006164 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d11f      	bne.n	80061ae <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01c      	beq.n	80061ae <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <_PrintUnsigned+0x66>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d102      	bne.n	800618a <_PrintUnsigned+0x66>
        c = '0';
 8006184:	2330      	movs	r3, #48	; 0x30
 8006186:	76fb      	strb	r3, [r7, #27]
 8006188:	e001      	b.n	800618e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800618a:	2320      	movs	r3, #32
 800618c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800618e:	e007      	b.n	80061a0 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	3b01      	subs	r3, #1
 8006194:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8006196:	7efb      	ldrb	r3, [r7, #27]
 8006198:	4619      	mov	r1, r3
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff ff46 	bl	800602c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <_PrintUnsigned+0x8a>
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d3f0      	bcc.n	8006190 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d903      	bls.n	80061bc <_PrintUnsigned+0x98>
      NumDigits--;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	603b      	str	r3, [r7, #0]
 80061ba:	e009      	b.n	80061d0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d200      	bcs.n	80061d0 <_PrintUnsigned+0xac>
        break;
 80061ce:	e005      	b.n	80061dc <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	fb02 f303 	mul.w	r3, r2, r3
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80061da:	e7e8      	b.n	80061ae <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ea:	fb02 f303 	mul.w	r3, r2, r3
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80061f4:	4a15      	ldr	r2, [pc, #84]	; (800624c <_PrintUnsigned+0x128>)
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	4413      	add	r3, r2
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	4619      	mov	r1, r3
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7ff ff14 	bl	800602c <_StoreChar>
    Digit /= Base;
 8006204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	fbb2 f3f3 	udiv	r3, r2, r3
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e3      	bne.n	80061dc <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d011      	beq.n	8006242 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00e      	beq.n	8006242 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006224:	e006      	b.n	8006234 <_PrintUnsigned+0x110>
        FieldWidth--;
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	3b01      	subs	r3, #1
 800622a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800622c:	2120      	movs	r1, #32
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f7ff fefc 	bl	800602c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <_PrintUnsigned+0x11e>
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	429a      	cmp	r2, r3
 8006240:	d3f1      	bcc.n	8006226 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8006242:	bf00      	nop
 8006244:	3728      	adds	r7, #40	; 0x28
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	080079c8 	.word	0x080079c8

08006250 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	bfb8      	it	lt
 8006264:	425b      	neglt	r3, r3
 8006266:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006268:	2301      	movs	r3, #1
 800626a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800626c:	e007      	b.n	800627e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	fb92 f3f3 	sdiv	r3, r2, r3
 8006276:	613b      	str	r3, [r7, #16]
    Width++;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	3301      	adds	r3, #1
 800627c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	429a      	cmp	r2, r3
 8006284:	daf3      	bge.n	800626e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	429a      	cmp	r2, r3
 800628c:	d901      	bls.n	8006292 <_PrintInt+0x42>
    Width = NumDigits;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <_PrintInt+0x5e>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	db04      	blt.n	80062a8 <_PrintInt+0x58>
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <_PrintInt+0x5e>
    FieldWidth--;
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <_PrintInt+0x6e>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d016      	beq.n	80062ec <_PrintInt+0x9c>
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d111      	bne.n	80062ec <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00e      	beq.n	80062ec <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062ce:	e006      	b.n	80062de <_PrintInt+0x8e>
        FieldWidth--;
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80062d6:	2120      	movs	r1, #32
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7ff fea7 	bl	800602c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <_PrintInt+0x9c>
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d3f1      	bcc.n	80062d0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	da07      	bge.n	8006302 <_PrintInt+0xb2>
    v = -v;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	425b      	negs	r3, r3
 80062f6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80062f8:	212d      	movs	r1, #45	; 0x2d
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff fe96 	bl	800602c <_StoreChar>
 8006300:	e008      	b.n	8006314 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800630c:	212b      	movs	r1, #43	; 0x2b
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7ff fe8c 	bl	800602c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d019      	beq.n	8006352 <_PrintInt+0x102>
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d114      	bne.n	8006352 <_PrintInt+0x102>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d111      	bne.n	8006352 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00e      	beq.n	8006352 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006334:	e006      	b.n	8006344 <_PrintInt+0xf4>
        FieldWidth--;
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	3b01      	subs	r3, #1
 800633a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800633c:	2130      	movs	r1, #48	; 0x30
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff fe74 	bl	800602c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <_PrintInt+0x102>
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	429a      	cmp	r2, r3
 8006350:	d3f1      	bcc.n	8006336 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff fedf 	bl	8006124 <_PrintUnsigned>
}
 8006366:	bf00      	nop
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
	...

08006370 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006370:	b580      	push	{r7, lr}
 8006372:	b098      	sub	sp, #96	; 0x60
 8006374:	af02      	add	r7, sp, #8
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800637c:	f3ef 8311 	mrs	r3, BASEPRI
 8006380:	f04f 0120 	mov.w	r1, #32
 8006384:	f381 8811 	msr	BASEPRI, r1
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800638a:	48b7      	ldr	r0, [pc, #732]	; (8006668 <_VPrintTarget+0x2f8>)
 800638c:	f7ff fbed 	bl	8005b6a <_PreparePacket>
 8006390:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006392:	4bb5      	ldr	r3, [pc, #724]	; (8006668 <_VPrintTarget+0x2f8>)
 8006394:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8006396:	2300      	movs	r3, #0
 8006398:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	3301      	adds	r3, #1
 80063a2:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3301      	adds	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80063b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 81a8 	beq.w	8006710 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80063c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063c4:	2b25      	cmp	r3, #37	; 0x25
 80063c6:	f040 8195 	bne.w	80066f4 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80063ca:	2300      	movs	r3, #0
 80063cc:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80063ce:	2301      	movs	r3, #1
 80063d0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80063da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063de:	3b23      	subs	r3, #35	; 0x23
 80063e0:	2b0d      	cmp	r3, #13
 80063e2:	d83f      	bhi.n	8006464 <_VPrintTarget+0xf4>
 80063e4:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <_VPrintTarget+0x7c>)
 80063e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ea:	bf00      	nop
 80063ec:	08006455 	.word	0x08006455
 80063f0:	08006465 	.word	0x08006465
 80063f4:	08006465 	.word	0x08006465
 80063f8:	08006465 	.word	0x08006465
 80063fc:	08006465 	.word	0x08006465
 8006400:	08006465 	.word	0x08006465
 8006404:	08006465 	.word	0x08006465
 8006408:	08006465 	.word	0x08006465
 800640c:	08006445 	.word	0x08006445
 8006410:	08006465 	.word	0x08006465
 8006414:	08006425 	.word	0x08006425
 8006418:	08006465 	.word	0x08006465
 800641c:	08006465 	.word	0x08006465
 8006420:	08006435 	.word	0x08006435
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	64bb      	str	r3, [r7, #72]	; 0x48
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3301      	adds	r3, #1
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	e01a      	b.n	800646a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006436:	f043 0302 	orr.w	r3, r3, #2
 800643a:	64bb      	str	r3, [r7, #72]	; 0x48
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3301      	adds	r3, #1
 8006440:	60fb      	str	r3, [r7, #12]
 8006442:	e012      	b.n	800646a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006446:	f043 0304 	orr.w	r3, r3, #4
 800644a:	64bb      	str	r3, [r7, #72]	; 0x48
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3301      	adds	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e00a      	b.n	800646a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006456:	f043 0308 	orr.w	r3, r3, #8
 800645a:	64bb      	str	r3, [r7, #72]	; 0x48
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	e002      	b.n	800646a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006464:	2300      	movs	r3, #0
 8006466:	653b      	str	r3, [r7, #80]	; 0x50
 8006468:	bf00      	nop
        }
      } while (v);
 800646a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1b0      	bne.n	80063d2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006470:	2300      	movs	r3, #0
 8006472:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800647c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006480:	2b2f      	cmp	r3, #47	; 0x2f
 8006482:	d912      	bls.n	80064aa <_VPrintTarget+0x13a>
 8006484:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006488:	2b39      	cmp	r3, #57	; 0x39
 800648a:	d80e      	bhi.n	80064aa <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3301      	adds	r3, #1
 8006490:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	461a      	mov	r2, r3
 800649e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064a2:	4413      	add	r3, r2
 80064a4:	3b30      	subs	r3, #48	; 0x30
 80064a6:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80064a8:	e7e4      	b.n	8006474 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80064aa:	2300      	movs	r3, #0
 80064ac:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80064b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064ba:	2b2e      	cmp	r3, #46	; 0x2e
 80064bc:	d11d      	bne.n	80064fa <_VPrintTarget+0x18a>
        sFormat++;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3301      	adds	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80064cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064d0:	2b2f      	cmp	r3, #47	; 0x2f
 80064d2:	d912      	bls.n	80064fa <_VPrintTarget+0x18a>
 80064d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064d8:	2b39      	cmp	r3, #57	; 0x39
 80064da:	d80e      	bhi.n	80064fa <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3301      	adds	r3, #1
 80064e0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80064e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	461a      	mov	r2, r3
 80064ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064f2:	4413      	add	r3, r2
 80064f4:	3b30      	subs	r3, #48	; 0x30
 80064f6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80064f8:	e7e4      	b.n	80064c4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006502:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006506:	2b6c      	cmp	r3, #108	; 0x6c
 8006508:	d003      	beq.n	8006512 <_VPrintTarget+0x1a2>
 800650a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800650e:	2b68      	cmp	r3, #104	; 0x68
 8006510:	d107      	bne.n	8006522 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	3301      	adds	r3, #1
 800651e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006520:	e7ef      	b.n	8006502 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006522:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006526:	2b25      	cmp	r3, #37	; 0x25
 8006528:	f000 80d8 	beq.w	80066dc <_VPrintTarget+0x36c>
 800652c:	2b25      	cmp	r3, #37	; 0x25
 800652e:	f2c0 80dc 	blt.w	80066ea <_VPrintTarget+0x37a>
 8006532:	2b78      	cmp	r3, #120	; 0x78
 8006534:	f300 80d9 	bgt.w	80066ea <_VPrintTarget+0x37a>
 8006538:	2b58      	cmp	r3, #88	; 0x58
 800653a:	f2c0 80d6 	blt.w	80066ea <_VPrintTarget+0x37a>
 800653e:	3b58      	subs	r3, #88	; 0x58
 8006540:	2b20      	cmp	r3, #32
 8006542:	f200 80d2 	bhi.w	80066ea <_VPrintTarget+0x37a>
 8006546:	a201      	add	r2, pc, #4	; (adr r2, 800654c <_VPrintTarget+0x1dc>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	08006643 	.word	0x08006643
 8006550:	080066eb 	.word	0x080066eb
 8006554:	080066eb 	.word	0x080066eb
 8006558:	080066eb 	.word	0x080066eb
 800655c:	080066eb 	.word	0x080066eb
 8006560:	080066eb 	.word	0x080066eb
 8006564:	080066eb 	.word	0x080066eb
 8006568:	080066eb 	.word	0x080066eb
 800656c:	080066eb 	.word	0x080066eb
 8006570:	080066eb 	.word	0x080066eb
 8006574:	080066eb 	.word	0x080066eb
 8006578:	080065d1 	.word	0x080065d1
 800657c:	080065f7 	.word	0x080065f7
 8006580:	080066eb 	.word	0x080066eb
 8006584:	080066eb 	.word	0x080066eb
 8006588:	080066eb 	.word	0x080066eb
 800658c:	080066eb 	.word	0x080066eb
 8006590:	080066eb 	.word	0x080066eb
 8006594:	080066eb 	.word	0x080066eb
 8006598:	080066eb 	.word	0x080066eb
 800659c:	080066eb 	.word	0x080066eb
 80065a0:	080066eb 	.word	0x080066eb
 80065a4:	080066eb 	.word	0x080066eb
 80065a8:	080066eb 	.word	0x080066eb
 80065ac:	080066b7 	.word	0x080066b7
 80065b0:	080066eb 	.word	0x080066eb
 80065b4:	080066eb 	.word	0x080066eb
 80065b8:	0800666d 	.word	0x0800666d
 80065bc:	080066eb 	.word	0x080066eb
 80065c0:	0800661d 	.word	0x0800661d
 80065c4:	080066eb 	.word	0x080066eb
 80065c8:	080066eb 	.word	0x080066eb
 80065cc:	08006643 	.word	0x08006643
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	1d19      	adds	r1, r3, #4
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6011      	str	r1, [r2, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80065de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 80065e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80065e8:	f107 0310 	add.w	r3, r7, #16
 80065ec:	4611      	mov	r1, r2
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fd1c 	bl	800602c <_StoreChar>
        break;
 80065f4:	e07a      	b.n	80066ec <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	1d19      	adds	r1, r3, #4
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6011      	str	r1, [r2, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006604:	f107 0010 	add.w	r0, r7, #16
 8006608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660a:	9301      	str	r3, [sp, #4]
 800660c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006612:	220a      	movs	r2, #10
 8006614:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006616:	f7ff fe1b 	bl	8006250 <_PrintInt>
        break;
 800661a:	e067      	b.n	80066ec <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	1d19      	adds	r1, r3, #4
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6011      	str	r1, [r2, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800662a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800662c:	f107 0010 	add.w	r0, r7, #16
 8006630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006632:	9301      	str	r3, [sp, #4]
 8006634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663a:	220a      	movs	r2, #10
 800663c:	f7ff fd72 	bl	8006124 <_PrintUnsigned>
        break;
 8006640:	e054      	b.n	80066ec <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	1d19      	adds	r1, r3, #4
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6011      	str	r1, [r2, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006650:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006652:	f107 0010 	add.w	r0, r7, #16
 8006656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006660:	2210      	movs	r2, #16
 8006662:	f7ff fd5f 	bl	8006124 <_PrintUnsigned>
        break;
 8006666:	e041      	b.n	80066ec <_VPrintTarget+0x37c>
 8006668:	200137d8 	.word	0x200137d8
      case 's':
        s = va_arg(*pParamList, const char*);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	1d19      	adds	r1, r3, #4
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6011      	str	r1, [r2, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 800667a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <_VPrintTarget+0x314>
          s = "(null)";
 8006680:	4b4a      	ldr	r3, [pc, #296]	; (80067ac <_VPrintTarget+0x43c>)
 8006682:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8006684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 800668c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800668e:	3301      	adds	r3, #1
 8006690:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8006692:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00b      	beq.n	80066b2 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800669a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800669e:	f107 0310 	add.w	r3, r7, #16
 80066a2:	4611      	mov	r1, r2
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff fcc1 	bl	800602c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	2b7f      	cmp	r3, #127	; 0x7f
 80066ae:	d9e9      	bls.n	8006684 <_VPrintTarget+0x314>
        break;
 80066b0:	e01c      	b.n	80066ec <_VPrintTarget+0x37c>
            break;
 80066b2:	bf00      	nop
        break;
 80066b4:	e01a      	b.n	80066ec <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	1d19      	adds	r1, r3, #4
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6011      	str	r1, [r2, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80066c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066c6:	f107 0010 	add.w	r0, r7, #16
 80066ca:	2300      	movs	r3, #0
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	2308      	movs	r3, #8
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	2308      	movs	r3, #8
 80066d4:	2210      	movs	r2, #16
 80066d6:	f7ff fd25 	bl	8006124 <_PrintUnsigned>
        break;
 80066da:	e007      	b.n	80066ec <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80066dc:	f107 0310 	add.w	r3, r7, #16
 80066e0:	2125      	movs	r1, #37	; 0x25
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff fca2 	bl	800602c <_StoreChar>
        break;
 80066e8:	e000      	b.n	80066ec <_VPrintTarget+0x37c>
      default:
        break;
 80066ea:	bf00      	nop
      }
      sFormat++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	e007      	b.n	8006704 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80066f4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80066f8:	f107 0310 	add.w	r3, r7, #16
 80066fc:	4611      	mov	r1, r2
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff fc94 	bl	800602c <_StoreChar>
    }
  } while (*sFormat);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f47f ae4d 	bne.w	80063a8 <_VPrintTarget+0x38>
 800670e:	e000      	b.n	8006712 <_VPrintTarget+0x3a2>
      break;
 8006710:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d041      	beq.n	800679c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006718:	6a3a      	ldr	r2, [r7, #32]
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38
 8006728:	e00b      	b.n	8006742 <_VPrintTarget+0x3d2>
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	b2da      	uxtb	r2, r3
 800672e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006730:	1c59      	adds	r1, r3, #1
 8006732:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006734:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]
 800673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673e:	09db      	lsrs	r3, r3, #7
 8006740:	63bb      	str	r3, [r7, #56]	; 0x38
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	2b7f      	cmp	r3, #127	; 0x7f
 8006746:	d8f0      	bhi.n	800672a <_VPrintTarget+0x3ba>
 8006748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800674e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006756:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	637b      	str	r3, [r7, #52]	; 0x34
 800675c:	2300      	movs	r3, #0
 800675e:	633b      	str	r3, [r7, #48]	; 0x30
 8006760:	e00b      	b.n	800677a <_VPrintTarget+0x40a>
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	b2da      	uxtb	r2, r3
 8006766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006768:	1c59      	adds	r1, r3, #1
 800676a:	6379      	str	r1, [r7, #52]	; 0x34
 800676c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	09db      	lsrs	r3, r3, #7
 8006778:	633b      	str	r3, [r7, #48]	; 0x30
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	2b7f      	cmp	r3, #127	; 0x7f
 800677e:	d8f0      	bhi.n	8006762 <_VPrintTarget+0x3f2>
 8006780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	637a      	str	r2, [r7, #52]	; 0x34
 8006786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]
 800678c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	6979      	ldr	r1, [r7, #20]
 8006794:	221a      	movs	r2, #26
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fad8 	bl	8005d4c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800679c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80067a2:	bf00      	nop
 80067a4:	3758      	adds	r7, #88	; 0x58
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	08007974 	.word	0x08007974

080067b0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80067be:	2300      	movs	r3, #0
 80067c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067c4:	4917      	ldr	r1, [pc, #92]	; (8006824 <SEGGER_SYSVIEW_Init+0x74>)
 80067c6:	4818      	ldr	r0, [pc, #96]	; (8006828 <SEGGER_SYSVIEW_Init+0x78>)
 80067c8:	f7ff f8c6 	bl	8005958 <SEGGER_RTT_AllocUpBuffer>
 80067cc:	4603      	mov	r3, r0
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	4b16      	ldr	r3, [pc, #88]	; (800682c <SEGGER_SYSVIEW_Init+0x7c>)
 80067d2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80067d4:	4b15      	ldr	r3, [pc, #84]	; (800682c <SEGGER_SYSVIEW_Init+0x7c>)
 80067d6:	785a      	ldrb	r2, [r3, #1]
 80067d8:	4b14      	ldr	r3, [pc, #80]	; (800682c <SEGGER_SYSVIEW_Init+0x7c>)
 80067da:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80067dc:	4b13      	ldr	r3, [pc, #76]	; (800682c <SEGGER_SYSVIEW_Init+0x7c>)
 80067de:	7e1b      	ldrb	r3, [r3, #24]
 80067e0:	4618      	mov	r0, r3
 80067e2:	2300      	movs	r3, #0
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	2308      	movs	r3, #8
 80067e8:	4a11      	ldr	r2, [pc, #68]	; (8006830 <SEGGER_SYSVIEW_Init+0x80>)
 80067ea:	490f      	ldr	r1, [pc, #60]	; (8006828 <SEGGER_SYSVIEW_Init+0x78>)
 80067ec:	f7ff f938 	bl	8005a60 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80067f0:	4b0e      	ldr	r3, [pc, #56]	; (800682c <SEGGER_SYSVIEW_Init+0x7c>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80067f6:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <SEGGER_SYSVIEW_Init+0x84>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a0c      	ldr	r2, [pc, #48]	; (800682c <SEGGER_SYSVIEW_Init+0x7c>)
 80067fc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80067fe:	4a0b      	ldr	r2, [pc, #44]	; (800682c <SEGGER_SYSVIEW_Init+0x7c>)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006804:	4a09      	ldr	r2, [pc, #36]	; (800682c <SEGGER_SYSVIEW_Init+0x7c>)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800680a:	4a08      	ldr	r2, [pc, #32]	; (800682c <SEGGER_SYSVIEW_Init+0x7c>)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006810:	4a06      	ldr	r2, [pc, #24]	; (800682c <SEGGER_SYSVIEW_Init+0x7c>)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006816:	4b05      	ldr	r3, [pc, #20]	; (800682c <SEGGER_SYSVIEW_Init+0x7c>)
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800681c:	bf00      	nop
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	200133a0 	.word	0x200133a0
 8006828:	0800797c 	.word	0x0800797c
 800682c:	200137a8 	.word	0x200137a8
 8006830:	200137a0 	.word	0x200137a0
 8006834:	e0001004 	.word	0xe0001004

08006838 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006840:	4a04      	ldr	r2, [pc, #16]	; (8006854 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6113      	str	r3, [r2, #16]
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	200137a8 	.word	0x200137a8

08006858 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006860:	f3ef 8311 	mrs	r3, BASEPRI
 8006864:	f04f 0120 	mov.w	r1, #32
 8006868:	f381 8811 	msr	BASEPRI, r1
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	4808      	ldr	r0, [pc, #32]	; (8006890 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006870:	f7ff f97b 	bl	8005b6a <_PreparePacket>
 8006874:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	68b8      	ldr	r0, [r7, #8]
 800687c:	f7ff fa66 	bl	8005d4c <_SendPacket>
  RECORD_END();
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f383 8811 	msr	BASEPRI, r3
}
 8006886:	bf00      	nop
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	200137d8 	.word	0x200137d8

08006894 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800689e:	f3ef 8311 	mrs	r3, BASEPRI
 80068a2:	f04f 0120 	mov.w	r1, #32
 80068a6:	f381 8811 	msr	BASEPRI, r1
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	4816      	ldr	r0, [pc, #88]	; (8006908 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80068ae:	f7ff f95c 	bl	8005b6a <_PreparePacket>
 80068b2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	61fb      	str	r3, [r7, #28]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	61bb      	str	r3, [r7, #24]
 80068c0:	e00b      	b.n	80068da <SEGGER_SYSVIEW_RecordU32+0x46>
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	1c59      	adds	r1, r3, #1
 80068ca:	61f9      	str	r1, [r7, #28]
 80068cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	09db      	lsrs	r3, r3, #7
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	2b7f      	cmp	r3, #127	; 0x7f
 80068de:	d8f0      	bhi.n	80068c2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	61fa      	str	r2, [r7, #28]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	68f9      	ldr	r1, [r7, #12]
 80068f4:	6938      	ldr	r0, [r7, #16]
 80068f6:	f7ff fa29 	bl	8005d4c <_SendPacket>
  RECORD_END();
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f383 8811 	msr	BASEPRI, r3
}
 8006900:	bf00      	nop
 8006902:	3720      	adds	r7, #32
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	200137d8 	.word	0x200137d8

0800690c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800690c:	b580      	push	{r7, lr}
 800690e:	b08c      	sub	sp, #48	; 0x30
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006918:	f3ef 8311 	mrs	r3, BASEPRI
 800691c:	f04f 0120 	mov.w	r1, #32
 8006920:	f381 8811 	msr	BASEPRI, r1
 8006924:	61fb      	str	r3, [r7, #28]
 8006926:	4825      	ldr	r0, [pc, #148]	; (80069bc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006928:	f7ff f91f 	bl	8005b6a <_PreparePacket>
 800692c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28
 800693a:	e00b      	b.n	8006954 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	b2da      	uxtb	r2, r3
 8006940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006942:	1c59      	adds	r1, r3, #1
 8006944:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006946:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	701a      	strb	r2, [r3, #0]
 800694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006950:	09db      	lsrs	r3, r3, #7
 8006952:	62bb      	str	r3, [r7, #40]	; 0x28
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	2b7f      	cmp	r3, #127	; 0x7f
 8006958:	d8f0      	bhi.n	800693c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006968:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	623b      	str	r3, [r7, #32]
 8006972:	e00b      	b.n	800698c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	b2da      	uxtb	r2, r3
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	1c59      	adds	r1, r3, #1
 800697c:	6279      	str	r1, [r7, #36]	; 0x24
 800697e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	09db      	lsrs	r3, r3, #7
 800698a:	623b      	str	r3, [r7, #32]
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	2b7f      	cmp	r3, #127	; 0x7f
 8006990:	d8f0      	bhi.n	8006974 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	627a      	str	r2, [r7, #36]	; 0x24
 8006998:	6a3a      	ldr	r2, [r7, #32]
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	6979      	ldr	r1, [r7, #20]
 80069a6:	69b8      	ldr	r0, [r7, #24]
 80069a8:	f7ff f9d0 	bl	8005d4c <_SendPacket>
  RECORD_END();
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	f383 8811 	msr	BASEPRI, r3
}
 80069b2:	bf00      	nop
 80069b4:	3730      	adds	r7, #48	; 0x30
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	200137d8 	.word	0x200137d8

080069c0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08e      	sub	sp, #56	; 0x38
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80069ce:	f3ef 8311 	mrs	r3, BASEPRI
 80069d2:	f04f 0120 	mov.w	r1, #32
 80069d6:	f381 8811 	msr	BASEPRI, r1
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	4832      	ldr	r0, [pc, #200]	; (8006aa8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80069de:	f7ff f8c4 	bl	8005b6a <_PreparePacket>
 80069e2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	637b      	str	r3, [r7, #52]	; 0x34
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	633b      	str	r3, [r7, #48]	; 0x30
 80069f0:	e00b      	b.n	8006a0a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f8:	1c59      	adds	r1, r3, #1
 80069fa:	6379      	str	r1, [r7, #52]	; 0x34
 80069fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	09db      	lsrs	r3, r3, #7
 8006a08:	633b      	str	r3, [r7, #48]	; 0x30
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a0e:	d8f0      	bhi.n	80069f2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	637a      	str	r2, [r7, #52]	; 0x34
 8006a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	701a      	strb	r2, [r3, #0]
 8006a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a28:	e00b      	b.n	8006a42 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a30:	1c59      	adds	r1, r3, #1
 8006a32:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	09db      	lsrs	r3, r3, #7
 8006a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	2b7f      	cmp	r3, #127	; 0x7f
 8006a46:	d8f0      	bhi.n	8006a2a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	701a      	strb	r2, [r3, #0]
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	623b      	str	r3, [r7, #32]
 8006a60:	e00b      	b.n	8006a7a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	1c59      	adds	r1, r3, #1
 8006a6a:	6279      	str	r1, [r7, #36]	; 0x24
 8006a6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	09db      	lsrs	r3, r3, #7
 8006a78:	623b      	str	r3, [r7, #32]
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a7e:	d8f0      	bhi.n	8006a62 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	627a      	str	r2, [r7, #36]	; 0x24
 8006a86:	6a3a      	ldr	r2, [r7, #32]
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	6979      	ldr	r1, [r7, #20]
 8006a94:	69b8      	ldr	r0, [r7, #24]
 8006a96:	f7ff f959 	bl	8005d4c <_SendPacket>
  RECORD_END();
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	f383 8811 	msr	BASEPRI, r3
}
 8006aa0:	bf00      	nop
 8006aa2:	3738      	adds	r7, #56	; 0x38
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	200137d8 	.word	0x200137d8

08006aac <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b090      	sub	sp, #64	; 0x40
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006aba:	f3ef 8311 	mrs	r3, BASEPRI
 8006abe:	f04f 0120 	mov.w	r1, #32
 8006ac2:	f381 8811 	msr	BASEPRI, r1
 8006ac6:	61fb      	str	r3, [r7, #28]
 8006ac8:	4840      	ldr	r0, [pc, #256]	; (8006bcc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006aca:	f7ff f84e 	bl	8005b6a <_PreparePacket>
 8006ace:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	63bb      	str	r3, [r7, #56]	; 0x38
 8006adc:	e00b      	b.n	8006af6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae4:	1c59      	adds	r1, r3, #1
 8006ae6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006ae8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aec:	b2d2      	uxtb	r2, r2
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	09db      	lsrs	r3, r3, #7
 8006af4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	2b7f      	cmp	r3, #127	; 0x7f
 8006afa:	d8f0      	bhi.n	8006ade <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	633b      	str	r3, [r7, #48]	; 0x30
 8006b14:	e00b      	b.n	8006b2e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1c:	1c59      	adds	r1, r3, #1
 8006b1e:	6379      	str	r1, [r7, #52]	; 0x34
 8006b20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	09db      	lsrs	r3, r3, #7
 8006b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	2b7f      	cmp	r3, #127	; 0x7f
 8006b32:	d8f0      	bhi.n	8006b16 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	637a      	str	r2, [r7, #52]	; 0x34
 8006b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	701a      	strb	r2, [r3, #0]
 8006b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b4c:	e00b      	b.n	8006b66 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	1c59      	adds	r1, r3, #1
 8006b56:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	701a      	strb	r2, [r3, #0]
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	09db      	lsrs	r3, r3, #7
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	2b7f      	cmp	r3, #127	; 0x7f
 8006b6a:	d8f0      	bhi.n	8006b4e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b74:	b2d2      	uxtb	r2, r2
 8006b76:	701a      	strb	r2, [r3, #0]
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b82:	623b      	str	r3, [r7, #32]
 8006b84:	e00b      	b.n	8006b9e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	1c59      	adds	r1, r3, #1
 8006b8e:	6279      	str	r1, [r7, #36]	; 0x24
 8006b90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	09db      	lsrs	r3, r3, #7
 8006b9c:	623b      	str	r3, [r7, #32]
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ba2:	d8f0      	bhi.n	8006b86 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	627a      	str	r2, [r7, #36]	; 0x24
 8006baa:	6a3a      	ldr	r2, [r7, #32]
 8006bac:	b2d2      	uxtb	r2, r2
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	6979      	ldr	r1, [r7, #20]
 8006bb8:	69b8      	ldr	r0, [r7, #24]
 8006bba:	f7ff f8c7 	bl	8005d4c <_SendPacket>
  RECORD_END();
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	f383 8811 	msr	BASEPRI, r3
}
 8006bc4:	bf00      	nop
 8006bc6:	3740      	adds	r7, #64	; 0x40
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	200137d8 	.word	0x200137d8

08006bd0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08c      	sub	sp, #48	; 0x30
 8006bd4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006bd6:	4b59      	ldr	r3, [pc, #356]	; (8006d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8006be0:	f04f 0120 	mov.w	r1, #32
 8006be4:	f381 8811 	msr	BASEPRI, r1
 8006be8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006bea:	4b54      	ldr	r3, [pc, #336]	; (8006d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	220a      	movs	r2, #10
 8006bf0:	4953      	ldr	r1, [pc, #332]	; (8006d40 <SEGGER_SYSVIEW_Start+0x170>)
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7f9 faec 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006bfe:	f7fe fb7d 	bl	80052fc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006c02:	200a      	movs	r0, #10
 8006c04:	f7ff fe28 	bl	8006858 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c08:	f3ef 8311 	mrs	r3, BASEPRI
 8006c0c:	f04f 0120 	mov.w	r1, #32
 8006c10:	f381 8811 	msr	BASEPRI, r1
 8006c14:	60bb      	str	r3, [r7, #8]
 8006c16:	484b      	ldr	r0, [pc, #300]	; (8006d44 <SEGGER_SYSVIEW_Start+0x174>)
 8006c18:	f7fe ffa7 	bl	8005b6a <_PreparePacket>
 8006c1c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c26:	4b45      	ldr	r3, [pc, #276]	; (8006d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c2c:	e00b      	b.n	8006c46 <SEGGER_SYSVIEW_Start+0x76>
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	1c59      	adds	r1, r3, #1
 8006c36:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	09db      	lsrs	r3, r3, #7
 8006c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	2b7f      	cmp	r3, #127	; 0x7f
 8006c4a:	d8f0      	bhi.n	8006c2e <SEGGER_SYSVIEW_Start+0x5e>
 8006c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c60:	4b36      	ldr	r3, [pc, #216]	; (8006d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	623b      	str	r3, [r7, #32]
 8006c66:	e00b      	b.n	8006c80 <SEGGER_SYSVIEW_Start+0xb0>
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	1c59      	adds	r1, r3, #1
 8006c70:	6279      	str	r1, [r7, #36]	; 0x24
 8006c72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	09db      	lsrs	r3, r3, #7
 8006c7e:	623b      	str	r3, [r7, #32]
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	2b7f      	cmp	r3, #127	; 0x7f
 8006c84:	d8f0      	bhi.n	8006c68 <SEGGER_SYSVIEW_Start+0x98>
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	627a      	str	r2, [r7, #36]	; 0x24
 8006c8c:	6a3a      	ldr	r2, [r7, #32]
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	61fb      	str	r3, [r7, #28]
 8006c9a:	4b28      	ldr	r3, [pc, #160]	; (8006d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	e00b      	b.n	8006cba <SEGGER_SYSVIEW_Start+0xea>
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	1c59      	adds	r1, r3, #1
 8006caa:	61f9      	str	r1, [r7, #28]
 8006cac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	09db      	lsrs	r3, r3, #7
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8006cbe:	d8f0      	bhi.n	8006ca2 <SEGGER_SYSVIEW_Start+0xd2>
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	61fa      	str	r2, [r7, #28]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	e00b      	b.n	8006cf2 <SEGGER_SYSVIEW_Start+0x122>
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	1c59      	adds	r1, r3, #1
 8006ce2:	6179      	str	r1, [r7, #20]
 8006ce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ce8:	b2d2      	uxtb	r2, r2
 8006cea:	701a      	strb	r2, [r3, #0]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	09db      	lsrs	r3, r3, #7
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf6:	d8f0      	bhi.n	8006cda <SEGGER_SYSVIEW_Start+0x10a>
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	617a      	str	r2, [r7, #20]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006d08:	2218      	movs	r2, #24
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff f81d 	bl	8005d4c <_SendPacket>
      RECORD_END();
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006d18:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006d20:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006d26:	f000 f9eb 	bl	8007100 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006d2a:	f000 f9b1 	bl	8007090 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006d2e:	f000 fc2d 	bl	800758c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006d32:	bf00      	nop
 8006d34:	3730      	adds	r7, #48	; 0x30
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	200137a8 	.word	0x200137a8
 8006d40:	080079bc 	.word	0x080079bc
 8006d44:	200137d8 	.word	0x200137d8

08006d48 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d52:	f04f 0120 	mov.w	r1, #32
 8006d56:	f381 8811 	msr	BASEPRI, r1
 8006d5a:	607b      	str	r3, [r7, #4]
 8006d5c:	480b      	ldr	r0, [pc, #44]	; (8006d8c <SEGGER_SYSVIEW_Stop+0x44>)
 8006d5e:	f7fe ff04 	bl	8005b6a <_PreparePacket>
 8006d62:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006d64:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <SEGGER_SYSVIEW_Stop+0x48>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d007      	beq.n	8006d7c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006d6c:	220b      	movs	r2, #11
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6838      	ldr	r0, [r7, #0]
 8006d72:	f7fe ffeb 	bl	8005d4c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006d76:	4b06      	ldr	r3, [pc, #24]	; (8006d90 <SEGGER_SYSVIEW_Stop+0x48>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f383 8811 	msr	BASEPRI, r3
}
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	200137d8 	.word	0x200137d8
 8006d90:	200137a8 	.word	0x200137a8

08006d94 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08c      	sub	sp, #48	; 0x30
 8006d98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d9e:	f04f 0120 	mov.w	r1, #32
 8006da2:	f381 8811 	msr	BASEPRI, r1
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	4845      	ldr	r0, [pc, #276]	; (8006ec0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006daa:	f7fe fede 	bl	8005b6a <_PreparePacket>
 8006dae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006db8:	4b42      	ldr	r3, [pc, #264]	; (8006ec4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dbe:	e00b      	b.n	8006dd8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	1c59      	adds	r1, r3, #1
 8006dc8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	09db      	lsrs	r3, r3, #7
 8006dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	2b7f      	cmp	r3, #127	; 0x7f
 8006ddc:	d8f0      	bhi.n	8006dc0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	627b      	str	r3, [r7, #36]	; 0x24
 8006df2:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	623b      	str	r3, [r7, #32]
 8006df8:	e00b      	b.n	8006e12 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	1c59      	adds	r1, r3, #1
 8006e02:	6279      	str	r1, [r7, #36]	; 0x24
 8006e04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	09db      	lsrs	r3, r3, #7
 8006e10:	623b      	str	r3, [r7, #32]
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	2b7f      	cmp	r3, #127	; 0x7f
 8006e16:	d8f0      	bhi.n	8006dfa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	627a      	str	r2, [r7, #36]	; 0x24
 8006e1e:	6a3a      	ldr	r2, [r7, #32]
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	701a      	strb	r2, [r3, #0]
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	61fb      	str	r3, [r7, #28]
 8006e2c:	4b25      	ldr	r3, [pc, #148]	; (8006ec4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	61bb      	str	r3, [r7, #24]
 8006e32:	e00b      	b.n	8006e4c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	1c59      	adds	r1, r3, #1
 8006e3c:	61f9      	str	r1, [r7, #28]
 8006e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	09db      	lsrs	r3, r3, #7
 8006e4a:	61bb      	str	r3, [r7, #24]
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e50:	d8f0      	bhi.n	8006e34 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	61fa      	str	r2, [r7, #28]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	2300      	movs	r3, #0
 8006e68:	613b      	str	r3, [r7, #16]
 8006e6a:	e00b      	b.n	8006e84 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	1c59      	adds	r1, r3, #1
 8006e74:	6179      	str	r1, [r7, #20]
 8006e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	09db      	lsrs	r3, r3, #7
 8006e82:	613b      	str	r3, [r7, #16]
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	2b7f      	cmp	r3, #127	; 0x7f
 8006e88:	d8f0      	bhi.n	8006e6c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	617a      	str	r2, [r7, #20]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006e9a:	2218      	movs	r2, #24
 8006e9c:	6879      	ldr	r1, [r7, #4]
 8006e9e:	68b8      	ldr	r0, [r7, #8]
 8006ea0:	f7fe ff54 	bl	8005d4c <_SendPacket>
  RECORD_END();
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006eaa:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006eb2:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	4798      	blx	r3
  }
}
 8006eb8:	bf00      	nop
 8006eba:	3730      	adds	r7, #48	; 0x30
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	200137d8 	.word	0x200137d8
 8006ec4:	200137a8 	.word	0x200137a8

08006ec8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b092      	sub	sp, #72	; 0x48
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006ed0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ed4:	f04f 0120 	mov.w	r1, #32
 8006ed8:	f381 8811 	msr	BASEPRI, r1
 8006edc:	617b      	str	r3, [r7, #20]
 8006ede:	486a      	ldr	r0, [pc, #424]	; (8007088 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006ee0:	f7fe fe43 	bl	8005b6a <_PreparePacket>
 8006ee4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	647b      	str	r3, [r7, #68]	; 0x44
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b66      	ldr	r3, [pc, #408]	; (800708c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8006efa:	e00b      	b.n	8006f14 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f02:	1c59      	adds	r1, r3, #1
 8006f04:	6479      	str	r1, [r7, #68]	; 0x44
 8006f06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f10:	09db      	lsrs	r3, r3, #7
 8006f12:	643b      	str	r3, [r7, #64]	; 0x40
 8006f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f16:	2b7f      	cmp	r3, #127	; 0x7f
 8006f18:	d8f0      	bhi.n	8006efc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	647a      	str	r2, [r7, #68]	; 0x44
 8006f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f34:	e00b      	b.n	8006f4e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3c:	1c59      	adds	r1, r3, #1
 8006f3e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006f40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	09db      	lsrs	r3, r3, #7
 8006f4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f50:	2b7f      	cmp	r3, #127	; 0x7f
 8006f52:	d8f0      	bhi.n	8006f36 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f5c:	b2d2      	uxtb	r2, r2
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f62:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7fe fdc3 	bl	8005af8 <_EncodeStr>
 8006f72:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006f74:	2209      	movs	r2, #9
 8006f76:	68f9      	ldr	r1, [r7, #12]
 8006f78:	6938      	ldr	r0, [r7, #16]
 8006f7a:	f7fe fee7 	bl	8005d4c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	637b      	str	r3, [r7, #52]	; 0x34
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	4b40      	ldr	r3, [pc, #256]	; (800708c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	633b      	str	r3, [r7, #48]	; 0x30
 8006f92:	e00b      	b.n	8006fac <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9a:	1c59      	adds	r1, r3, #1
 8006f9c:	6379      	str	r1, [r7, #52]	; 0x34
 8006f9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	09db      	lsrs	r3, r3, #7
 8006faa:	633b      	str	r3, [r7, #48]	; 0x30
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	2b7f      	cmp	r3, #127	; 0x7f
 8006fb0:	d8f0      	bhi.n	8006f94 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	637a      	str	r2, [r7, #52]	; 0x34
 8006fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fcc:	e00b      	b.n	8006fe6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	1c59      	adds	r1, r3, #1
 8006fd6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006fd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	701a      	strb	r2, [r3, #0]
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	09db      	lsrs	r3, r3, #7
 8006fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8006fea:	d8f0      	bhi.n	8006fce <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ff4:	b2d2      	uxtb	r2, r2
 8006ff6:	701a      	strb	r2, [r3, #0]
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	623b      	str	r3, [r7, #32]
 8007006:	e00b      	b.n	8007020 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	b2da      	uxtb	r2, r3
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	1c59      	adds	r1, r3, #1
 8007010:	6279      	str	r1, [r7, #36]	; 0x24
 8007012:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	09db      	lsrs	r3, r3, #7
 800701e:	623b      	str	r3, [r7, #32]
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	2b7f      	cmp	r3, #127	; 0x7f
 8007024:	d8f0      	bhi.n	8007008 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	627a      	str	r2, [r7, #36]	; 0x24
 800702c:	6a3a      	ldr	r2, [r7, #32]
 800702e:	b2d2      	uxtb	r2, r2
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	61fb      	str	r3, [r7, #28]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	61bb      	str	r3, [r7, #24]
 8007040:	e00b      	b.n	800705a <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	1c59      	adds	r1, r3, #1
 800704a:	61f9      	str	r1, [r7, #28]
 800704c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	09db      	lsrs	r3, r3, #7
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	2b7f      	cmp	r3, #127	; 0x7f
 800705e:	d8f0      	bhi.n	8007042 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	61fa      	str	r2, [r7, #28]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	b2d2      	uxtb	r2, r2
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007070:	2215      	movs	r2, #21
 8007072:	68f9      	ldr	r1, [r7, #12]
 8007074:	6938      	ldr	r0, [r7, #16]
 8007076:	f7fe fe69 	bl	8005d4c <_SendPacket>
  RECORD_END();
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f383 8811 	msr	BASEPRI, r3
}
 8007080:	bf00      	nop
 8007082:	3748      	adds	r7, #72	; 0x48
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	200137d8 	.word	0x200137d8
 800708c:	200137a8 	.word	0x200137a8

08007090 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007094:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800709c:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80070a6:	4b03      	ldr	r3, [pc, #12]	; (80070b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	4798      	blx	r3
  }
}
 80070ae:	bf00      	nop
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	200137a8 	.word	0x200137a8

080070b8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80070c0:	f3ef 8311 	mrs	r3, BASEPRI
 80070c4:	f04f 0120 	mov.w	r1, #32
 80070c8:	f381 8811 	msr	BASEPRI, r1
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	480b      	ldr	r0, [pc, #44]	; (80070fc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80070d0:	f7fe fd4b 	bl	8005b6a <_PreparePacket>
 80070d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80070d6:	2280      	movs	r2, #128	; 0x80
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	6938      	ldr	r0, [r7, #16]
 80070dc:	f7fe fd0c 	bl	8005af8 <_EncodeStr>
 80070e0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80070e2:	220e      	movs	r2, #14
 80070e4:	68f9      	ldr	r1, [r7, #12]
 80070e6:	6938      	ldr	r0, [r7, #16]
 80070e8:	f7fe fe30 	bl	8005d4c <_SendPacket>
  RECORD_END();
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f383 8811 	msr	BASEPRI, r3
}
 80070f2:	bf00      	nop
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	200137d8 	.word	0x200137d8

08007100 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007100:	b590      	push	{r4, r7, lr}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d01a      	beq.n	8007144 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800710e:	4b13      	ldr	r3, [pc, #76]	; (800715c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d015      	beq.n	8007144 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007118:	4b10      	ldr	r3, [pc, #64]	; (800715c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4798      	blx	r3
 8007120:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007124:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007126:	e9d7 0100 	ldrd	r0, r1, [r7]
 800712a:	f04f 0200 	mov.w	r2, #0
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	000a      	movs	r2, r1
 8007134:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007136:	4613      	mov	r3, r2
 8007138:	461a      	mov	r2, r3
 800713a:	4621      	mov	r1, r4
 800713c:	200d      	movs	r0, #13
 800713e:	f7ff fbe5 	bl	800690c <SEGGER_SYSVIEW_RecordU32x2>
 8007142:	e006      	b.n	8007152 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007144:	4b06      	ldr	r3, [pc, #24]	; (8007160 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4619      	mov	r1, r3
 800714a:	200c      	movs	r0, #12
 800714c:	f7ff fba2 	bl	8006894 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	bd90      	pop	{r4, r7, pc}
 800715a:	bf00      	nop
 800715c:	200137a8 	.word	0x200137a8
 8007160:	e0001004 	.word	0xe0001004

08007164 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800716a:	f3ef 8311 	mrs	r3, BASEPRI
 800716e:	f04f 0120 	mov.w	r1, #32
 8007172:	f381 8811 	msr	BASEPRI, r1
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	4819      	ldr	r0, [pc, #100]	; (80071e0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800717a:	f7fe fcf6 	bl	8005b6a <_PreparePacket>
 800717e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007184:	4b17      	ldr	r3, [pc, #92]	; (80071e4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	e00b      	b.n	80071b0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	b2da      	uxtb	r2, r3
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	1c59      	adds	r1, r3, #1
 80071a0:	6179      	str	r1, [r7, #20]
 80071a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	09db      	lsrs	r3, r3, #7
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	2b7f      	cmp	r3, #127	; 0x7f
 80071b4:	d8f0      	bhi.n	8007198 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	617a      	str	r2, [r7, #20]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80071c6:	2202      	movs	r2, #2
 80071c8:	6879      	ldr	r1, [r7, #4]
 80071ca:	68b8      	ldr	r0, [r7, #8]
 80071cc:	f7fe fdbe 	bl	8005d4c <_SendPacket>
  RECORD_END();
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f383 8811 	msr	BASEPRI, r3
}
 80071d6:	bf00      	nop
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	200137d8 	.word	0x200137d8
 80071e4:	e000ed04 	.word	0xe000ed04

080071e8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80071ee:	f3ef 8311 	mrs	r3, BASEPRI
 80071f2:	f04f 0120 	mov.w	r1, #32
 80071f6:	f381 8811 	msr	BASEPRI, r1
 80071fa:	607b      	str	r3, [r7, #4]
 80071fc:	4807      	ldr	r0, [pc, #28]	; (800721c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80071fe:	f7fe fcb4 	bl	8005b6a <_PreparePacket>
 8007202:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007204:	2203      	movs	r2, #3
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6838      	ldr	r0, [r7, #0]
 800720a:	f7fe fd9f 	bl	8005d4c <_SendPacket>
  RECORD_END();
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f383 8811 	msr	BASEPRI, r3
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	200137d8 	.word	0x200137d8

08007220 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007226:	f3ef 8311 	mrs	r3, BASEPRI
 800722a:	f04f 0120 	mov.w	r1, #32
 800722e:	f381 8811 	msr	BASEPRI, r1
 8007232:	607b      	str	r3, [r7, #4]
 8007234:	4807      	ldr	r0, [pc, #28]	; (8007254 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007236:	f7fe fc98 	bl	8005b6a <_PreparePacket>
 800723a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800723c:	2212      	movs	r2, #18
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6838      	ldr	r0, [r7, #0]
 8007242:	f7fe fd83 	bl	8005d4c <_SendPacket>
  RECORD_END();
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f383 8811 	msr	BASEPRI, r3
}
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	200137d8 	.word	0x200137d8

08007258 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800725e:	f3ef 8311 	mrs	r3, BASEPRI
 8007262:	f04f 0120 	mov.w	r1, #32
 8007266:	f381 8811 	msr	BASEPRI, r1
 800726a:	607b      	str	r3, [r7, #4]
 800726c:	4807      	ldr	r0, [pc, #28]	; (800728c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800726e:	f7fe fc7c 	bl	8005b6a <_PreparePacket>
 8007272:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007274:	2211      	movs	r2, #17
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6838      	ldr	r0, [r7, #0]
 800727a:	f7fe fd67 	bl	8005d4c <_SendPacket>
  RECORD_END();
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f383 8811 	msr	BASEPRI, r3
}
 8007284:	bf00      	nop
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	200137d8 	.word	0x200137d8

08007290 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007298:	f3ef 8311 	mrs	r3, BASEPRI
 800729c:	f04f 0120 	mov.w	r1, #32
 80072a0:	f381 8811 	msr	BASEPRI, r1
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	4819      	ldr	r0, [pc, #100]	; (800730c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80072a8:	f7fe fc5f 	bl	8005b6a <_PreparePacket>
 80072ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80072b2:	4b17      	ldr	r3, [pc, #92]	; (8007310 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	61fb      	str	r3, [r7, #28]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	61bb      	str	r3, [r7, #24]
 80072c4:	e00b      	b.n	80072de <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	1c59      	adds	r1, r3, #1
 80072ce:	61f9      	str	r1, [r7, #28]
 80072d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	09db      	lsrs	r3, r3, #7
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b7f      	cmp	r3, #127	; 0x7f
 80072e2:	d8f0      	bhi.n	80072c6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	61fa      	str	r2, [r7, #28]
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80072f4:	2208      	movs	r2, #8
 80072f6:	68f9      	ldr	r1, [r7, #12]
 80072f8:	6938      	ldr	r0, [r7, #16]
 80072fa:	f7fe fd27 	bl	8005d4c <_SendPacket>
  RECORD_END();
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f383 8811 	msr	BASEPRI, r3
}
 8007304:	bf00      	nop
 8007306:	3720      	adds	r7, #32
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	200137d8 	.word	0x200137d8
 8007310:	200137a8 	.word	0x200137a8

08007314 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800731c:	f3ef 8311 	mrs	r3, BASEPRI
 8007320:	f04f 0120 	mov.w	r1, #32
 8007324:	f381 8811 	msr	BASEPRI, r1
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	4819      	ldr	r0, [pc, #100]	; (8007390 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800732c:	f7fe fc1d 	bl	8005b6a <_PreparePacket>
 8007330:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007336:	4b17      	ldr	r3, [pc, #92]	; (8007394 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	61fb      	str	r3, [r7, #28]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	61bb      	str	r3, [r7, #24]
 8007348:	e00b      	b.n	8007362 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	b2da      	uxtb	r2, r3
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	1c59      	adds	r1, r3, #1
 8007352:	61f9      	str	r1, [r7, #28]
 8007354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007358:	b2d2      	uxtb	r2, r2
 800735a:	701a      	strb	r2, [r3, #0]
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	09db      	lsrs	r3, r3, #7
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	2b7f      	cmp	r3, #127	; 0x7f
 8007366:	d8f0      	bhi.n	800734a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	61fa      	str	r2, [r7, #28]
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	b2d2      	uxtb	r2, r2
 8007372:	701a      	strb	r2, [r3, #0]
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007378:	2204      	movs	r2, #4
 800737a:	68f9      	ldr	r1, [r7, #12]
 800737c:	6938      	ldr	r0, [r7, #16]
 800737e:	f7fe fce5 	bl	8005d4c <_SendPacket>
  RECORD_END();
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f383 8811 	msr	BASEPRI, r3
}
 8007388:	bf00      	nop
 800738a:	3720      	adds	r7, #32
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	200137d8 	.word	0x200137d8
 8007394:	200137a8 	.word	0x200137a8

08007398 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007398:	b580      	push	{r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80073a0:	f3ef 8311 	mrs	r3, BASEPRI
 80073a4:	f04f 0120 	mov.w	r1, #32
 80073a8:	f381 8811 	msr	BASEPRI, r1
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	4819      	ldr	r0, [pc, #100]	; (8007414 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80073b0:	f7fe fbdb 	bl	8005b6a <_PreparePacket>
 80073b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80073ba:	4b17      	ldr	r3, [pc, #92]	; (8007418 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	61fb      	str	r3, [r7, #28]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	61bb      	str	r3, [r7, #24]
 80073cc:	e00b      	b.n	80073e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	1c59      	adds	r1, r3, #1
 80073d6:	61f9      	str	r1, [r7, #28]
 80073d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073dc:	b2d2      	uxtb	r2, r2
 80073de:	701a      	strb	r2, [r3, #0]
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	09db      	lsrs	r3, r3, #7
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	2b7f      	cmp	r3, #127	; 0x7f
 80073ea:	d8f0      	bhi.n	80073ce <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	61fa      	str	r2, [r7, #28]
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80073fc:	2206      	movs	r2, #6
 80073fe:	68f9      	ldr	r1, [r7, #12]
 8007400:	6938      	ldr	r0, [r7, #16]
 8007402:	f7fe fca3 	bl	8005d4c <_SendPacket>
  RECORD_END();
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f383 8811 	msr	BASEPRI, r3
}
 800740c:	bf00      	nop
 800740e:	3720      	adds	r7, #32
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	200137d8 	.word	0x200137d8
 8007418:	200137a8 	.word	0x200137a8

0800741c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007424:	4b04      	ldr	r3, [pc, #16]	; (8007438 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	1ad3      	subs	r3, r2, r3
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	200137a8 	.word	0x200137a8

0800743c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800743c:	b580      	push	{r7, lr}
 800743e:	b08c      	sub	sp, #48	; 0x30
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007446:	4b40      	ldr	r3, [pc, #256]	; (8007548 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d077      	beq.n	800753e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800744e:	4b3e      	ldr	r3, [pc, #248]	; (8007548 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007454:	2300      	movs	r3, #0
 8007456:	62bb      	str	r3, [r7, #40]	; 0x28
 8007458:	e008      	b.n	800746c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d007      	beq.n	8007476 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	3301      	adds	r3, #1
 800746a:	62bb      	str	r3, [r7, #40]	; 0x28
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007470:	429a      	cmp	r2, r3
 8007472:	d3f2      	bcc.n	800745a <SEGGER_SYSVIEW_SendModule+0x1e>
 8007474:	e000      	b.n	8007478 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007476:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	2b00      	cmp	r3, #0
 800747c:	d055      	beq.n	800752a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800747e:	f3ef 8311 	mrs	r3, BASEPRI
 8007482:	f04f 0120 	mov.w	r1, #32
 8007486:	f381 8811 	msr	BASEPRI, r1
 800748a:	617b      	str	r3, [r7, #20]
 800748c:	482f      	ldr	r0, [pc, #188]	; (800754c <SEGGER_SYSVIEW_SendModule+0x110>)
 800748e:	f7fe fb6c 	bl	8005b6a <_PreparePacket>
 8007492:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	623b      	str	r3, [r7, #32]
 80074a0:	e00b      	b.n	80074ba <SEGGER_SYSVIEW_SendModule+0x7e>
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	1c59      	adds	r1, r3, #1
 80074aa:	6279      	str	r1, [r7, #36]	; 0x24
 80074ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074b0:	b2d2      	uxtb	r2, r2
 80074b2:	701a      	strb	r2, [r3, #0]
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	09db      	lsrs	r3, r3, #7
 80074b8:	623b      	str	r3, [r7, #32]
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	2b7f      	cmp	r3, #127	; 0x7f
 80074be:	d8f0      	bhi.n	80074a2 <SEGGER_SYSVIEW_SendModule+0x66>
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	627a      	str	r2, [r7, #36]	; 0x24
 80074c6:	6a3a      	ldr	r2, [r7, #32]
 80074c8:	b2d2      	uxtb	r2, r2
 80074ca:	701a      	strb	r2, [r3, #0]
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	61fb      	str	r3, [r7, #28]
 80074d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	61bb      	str	r3, [r7, #24]
 80074da:	e00b      	b.n	80074f4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	1c59      	adds	r1, r3, #1
 80074e4:	61f9      	str	r1, [r7, #28]
 80074e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	09db      	lsrs	r3, r3, #7
 80074f2:	61bb      	str	r3, [r7, #24]
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	2b7f      	cmp	r3, #127	; 0x7f
 80074f8:	d8f0      	bhi.n	80074dc <SEGGER_SYSVIEW_SendModule+0xa0>
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	61fa      	str	r2, [r7, #28]
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	b2d2      	uxtb	r2, r2
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800750a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2280      	movs	r2, #128	; 0x80
 8007510:	4619      	mov	r1, r3
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7fe faf0 	bl	8005af8 <_EncodeStr>
 8007518:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800751a:	2216      	movs	r2, #22
 800751c:	68f9      	ldr	r1, [r7, #12]
 800751e:	6938      	ldr	r0, [r7, #16]
 8007520:	f7fe fc14 	bl	8005d4c <_SendPacket>
      RECORD_END();
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	2b00      	cmp	r3, #0
 800752e:	d006      	beq.n	800753e <SEGGER_SYSVIEW_SendModule+0x102>
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	4798      	blx	r3
    }
  }
}
 800753e:	bf00      	nop
 8007540:	3730      	adds	r7, #48	; 0x30
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	200137d0 	.word	0x200137d0
 800754c:	200137d8 	.word	0x200137d8

08007550 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007556:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00f      	beq.n	800757e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800755e:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1f2      	bne.n	8007564 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	200137d0 	.word	0x200137d0

0800758c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007592:	f3ef 8311 	mrs	r3, BASEPRI
 8007596:	f04f 0120 	mov.w	r1, #32
 800759a:	f381 8811 	msr	BASEPRI, r1
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	4817      	ldr	r0, [pc, #92]	; (8007600 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80075a2:	f7fe fae2 	bl	8005b6a <_PreparePacket>
 80075a6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	4b14      	ldr	r3, [pc, #80]	; (8007604 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	613b      	str	r3, [r7, #16]
 80075b6:	e00b      	b.n	80075d0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	1c59      	adds	r1, r3, #1
 80075c0:	6179      	str	r1, [r7, #20]
 80075c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075c6:	b2d2      	uxtb	r2, r2
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	09db      	lsrs	r3, r3, #7
 80075ce:	613b      	str	r3, [r7, #16]
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	2b7f      	cmp	r3, #127	; 0x7f
 80075d4:	d8f0      	bhi.n	80075b8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	617a      	str	r2, [r7, #20]
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80075e6:	221b      	movs	r2, #27
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	68b8      	ldr	r0, [r7, #8]
 80075ec:	f7fe fbae 	bl	8005d4c <_SendPacket>
  RECORD_END();
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f383 8811 	msr	BASEPRI, r3
}
 80075f6:	bf00      	nop
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	200137d8 	.word	0x200137d8
 8007604:	200137d4 	.word	0x200137d4

08007608 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007608:	b40f      	push	{r0, r1, r2, r3}
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007610:	f107 0314 	add.w	r3, r7, #20
 8007614:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007616:	1d3b      	adds	r3, r7, #4
 8007618:	461a      	mov	r2, r3
 800761a:	2100      	movs	r1, #0
 800761c:	6938      	ldr	r0, [r7, #16]
 800761e:	f7fe fea7 	bl	8006370 <_VPrintTarget>
  va_end(ParamList);
}
 8007622:	bf00      	nop
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800762c:	b004      	add	sp, #16
 800762e:	4770      	bx	lr

08007630 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	; 0x28
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007638:	f3ef 8311 	mrs	r3, BASEPRI
 800763c:	f04f 0120 	mov.w	r1, #32
 8007640:	f381 8811 	msr	BASEPRI, r1
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	4827      	ldr	r0, [pc, #156]	; (80076e4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007648:	f7fe fa8f 	bl	8005b6a <_PreparePacket>
 800764c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800764e:	2280      	movs	r2, #128	; 0x80
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	6938      	ldr	r0, [r7, #16]
 8007654:	f7fe fa50 	bl	8005af8 <_EncodeStr>
 8007658:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
 800765e:	2301      	movs	r3, #1
 8007660:	623b      	str	r3, [r7, #32]
 8007662:	e00b      	b.n	800767c <SEGGER_SYSVIEW_Warn+0x4c>
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	b2da      	uxtb	r2, r3
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	1c59      	adds	r1, r3, #1
 800766c:	6279      	str	r1, [r7, #36]	; 0x24
 800766e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	701a      	strb	r2, [r3, #0]
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	09db      	lsrs	r3, r3, #7
 800767a:	623b      	str	r3, [r7, #32]
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	2b7f      	cmp	r3, #127	; 0x7f
 8007680:	d8f0      	bhi.n	8007664 <SEGGER_SYSVIEW_Warn+0x34>
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	627a      	str	r2, [r7, #36]	; 0x24
 8007688:	6a3a      	ldr	r2, [r7, #32]
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	61fb      	str	r3, [r7, #28]
 8007696:	2300      	movs	r3, #0
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	e00b      	b.n	80076b4 <SEGGER_SYSVIEW_Warn+0x84>
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	1c59      	adds	r1, r3, #1
 80076a4:	61f9      	str	r1, [r7, #28]
 80076a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	09db      	lsrs	r3, r3, #7
 80076b2:	61bb      	str	r3, [r7, #24]
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	2b7f      	cmp	r3, #127	; 0x7f
 80076b8:	d8f0      	bhi.n	800769c <SEGGER_SYSVIEW_Warn+0x6c>
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	61fa      	str	r2, [r7, #28]
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	b2d2      	uxtb	r2, r2
 80076c4:	701a      	strb	r2, [r3, #0]
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80076ca:	221a      	movs	r2, #26
 80076cc:	68f9      	ldr	r1, [r7, #12]
 80076ce:	6938      	ldr	r0, [r7, #16]
 80076d0:	f7fe fb3c 	bl	8005d4c <_SendPacket>
  RECORD_END();
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f383 8811 	msr	BASEPRI, r3
}
 80076da:	bf00      	nop
 80076dc:	3728      	adds	r7, #40	; 0x28
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	200137d8 	.word	0x200137d8

080076e8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80076ec:	4b13      	ldr	r3, [pc, #76]	; (800773c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076ee:	7e1b      	ldrb	r3, [r3, #24]
 80076f0:	4619      	mov	r1, r3
 80076f2:	4a13      	ldr	r2, [pc, #76]	; (8007740 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80076f4:	460b      	mov	r3, r1
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	440b      	add	r3, r1
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	4413      	add	r3, r2
 80076fe:	336c      	adds	r3, #108	; 0x6c
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4b0e      	ldr	r3, [pc, #56]	; (800773c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007704:	7e1b      	ldrb	r3, [r3, #24]
 8007706:	4618      	mov	r0, r3
 8007708:	490d      	ldr	r1, [pc, #52]	; (8007740 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800770a:	4603      	mov	r3, r0
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	4403      	add	r3, r0
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	440b      	add	r3, r1
 8007714:	3370      	adds	r3, #112	; 0x70
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d00b      	beq.n	8007734 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800771c:	4b07      	ldr	r3, [pc, #28]	; (800773c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800771e:	789b      	ldrb	r3, [r3, #2]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d107      	bne.n	8007734 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007724:	4b05      	ldr	r3, [pc, #20]	; (800773c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007726:	2201      	movs	r2, #1
 8007728:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800772a:	f7fe fa2b 	bl	8005b84 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800772e:	4b03      	ldr	r3, [pc, #12]	; (800773c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007730:	2200      	movs	r2, #0
 8007732:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007734:	4b01      	ldr	r3, [pc, #4]	; (800773c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007736:	781b      	ldrb	r3, [r3, #0]
}
 8007738:	4618      	mov	r0, r3
 800773a:	bd80      	pop	{r7, pc}
 800773c:	200137a8 	.word	0x200137a8
 8007740:	20012ee8 	.word	0x20012ee8

08007744 <__libc_init_array>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	4d0d      	ldr	r5, [pc, #52]	; (800777c <__libc_init_array+0x38>)
 8007748:	4c0d      	ldr	r4, [pc, #52]	; (8007780 <__libc_init_array+0x3c>)
 800774a:	1b64      	subs	r4, r4, r5
 800774c:	10a4      	asrs	r4, r4, #2
 800774e:	2600      	movs	r6, #0
 8007750:	42a6      	cmp	r6, r4
 8007752:	d109      	bne.n	8007768 <__libc_init_array+0x24>
 8007754:	4d0b      	ldr	r5, [pc, #44]	; (8007784 <__libc_init_array+0x40>)
 8007756:	4c0c      	ldr	r4, [pc, #48]	; (8007788 <__libc_init_array+0x44>)
 8007758:	f000 f83e 	bl	80077d8 <_init>
 800775c:	1b64      	subs	r4, r4, r5
 800775e:	10a4      	asrs	r4, r4, #2
 8007760:	2600      	movs	r6, #0
 8007762:	42a6      	cmp	r6, r4
 8007764:	d105      	bne.n	8007772 <__libc_init_array+0x2e>
 8007766:	bd70      	pop	{r4, r5, r6, pc}
 8007768:	f855 3b04 	ldr.w	r3, [r5], #4
 800776c:	4798      	blx	r3
 800776e:	3601      	adds	r6, #1
 8007770:	e7ee      	b.n	8007750 <__libc_init_array+0xc>
 8007772:	f855 3b04 	ldr.w	r3, [r5], #4
 8007776:	4798      	blx	r3
 8007778:	3601      	adds	r6, #1
 800777a:	e7f2      	b.n	8007762 <__libc_init_array+0x1e>
 800777c:	080079e0 	.word	0x080079e0
 8007780:	080079e0 	.word	0x080079e0
 8007784:	080079e0 	.word	0x080079e0
 8007788:	080079e4 	.word	0x080079e4

0800778c <memcmp>:
 800778c:	b510      	push	{r4, lr}
 800778e:	3901      	subs	r1, #1
 8007790:	4402      	add	r2, r0
 8007792:	4290      	cmp	r0, r2
 8007794:	d101      	bne.n	800779a <memcmp+0xe>
 8007796:	2000      	movs	r0, #0
 8007798:	e005      	b.n	80077a6 <memcmp+0x1a>
 800779a:	7803      	ldrb	r3, [r0, #0]
 800779c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	d001      	beq.n	80077a8 <memcmp+0x1c>
 80077a4:	1b18      	subs	r0, r3, r4
 80077a6:	bd10      	pop	{r4, pc}
 80077a8:	3001      	adds	r0, #1
 80077aa:	e7f2      	b.n	8007792 <memcmp+0x6>

080077ac <memcpy>:
 80077ac:	440a      	add	r2, r1
 80077ae:	4291      	cmp	r1, r2
 80077b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80077b4:	d100      	bne.n	80077b8 <memcpy+0xc>
 80077b6:	4770      	bx	lr
 80077b8:	b510      	push	{r4, lr}
 80077ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077c2:	4291      	cmp	r1, r2
 80077c4:	d1f9      	bne.n	80077ba <memcpy+0xe>
 80077c6:	bd10      	pop	{r4, pc}

080077c8 <memset>:
 80077c8:	4402      	add	r2, r0
 80077ca:	4603      	mov	r3, r0
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d100      	bne.n	80077d2 <memset+0xa>
 80077d0:	4770      	bx	lr
 80077d2:	f803 1b01 	strb.w	r1, [r3], #1
 80077d6:	e7f9      	b.n	80077cc <memset+0x4>

080077d8 <_init>:
 80077d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077da:	bf00      	nop
 80077dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077de:	bc08      	pop	{r3}
 80077e0:	469e      	mov	lr, r3
 80077e2:	4770      	bx	lr

080077e4 <_fini>:
 80077e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e6:	bf00      	nop
 80077e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ea:	bc08      	pop	{r3}
 80077ec:	469e      	mov	lr, r3
 80077ee:	4770      	bx	lr
